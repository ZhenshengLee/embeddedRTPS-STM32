
embedded_rtps_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010a34  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000014c8  08010c34  08010c34  00020c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080120fc  080120fc  000220fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08012104  08012104  00022104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08012108  08012108  00022108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  20000000  0801210c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000b710  20000078  08012184  00030078  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000b788  08012184  0003b788  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 10 .comment      0000007b  00000000  00000000  000300a6  2**0
                  CONTENTS, READONLY
 11 .debug_info   0007ef1e  00000000  00000000  00030121  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00007a2a  00000000  00000000  000af03f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00011fe6  00000000  00000000  000b6a69  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007d0  00000000  00000000  000c8a50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00005e30  00000000  00000000  000c9220  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00034a04  00000000  00000000  000cf050  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001d9b5  00000000  00000000  00103a54  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00121046  00000000  00000000  00121409  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_frame  0000262c  00000000  00000000  00242450  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000078 	.word	0x20000078
 800021c:	00000000 	.word	0x00000000
 8000220:	08010c1c 	.word	0x08010c1c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000007c 	.word	0x2000007c
 800023c:	08010c1c 	.word	0x08010c1c

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000320:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000324:	f000 b972 	b.w	800060c <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9e08      	ldr	r6, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	4688      	mov	r8, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14b      	bne.n	80003e6 <__udivmoddi4+0xa6>
 800034e:	428a      	cmp	r2, r1
 8000350:	4615      	mov	r5, r2
 8000352:	d967      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0720 	rsb	r7, r2, #32
 800035e:	fa01 f302 	lsl.w	r3, r1, r2
 8000362:	fa20 f707 	lsr.w	r7, r0, r7
 8000366:	4095      	lsls	r5, r2
 8000368:	ea47 0803 	orr.w	r8, r7, r3
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbb8 f7fe 	udiv	r7, r8, lr
 8000378:	fa1f fc85 	uxth.w	ip, r5
 800037c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000380:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000384:	fb07 f10c 	mul.w	r1, r7, ip
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18eb      	adds	r3, r5, r3
 800038e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000392:	f080 811b 	bcs.w	80005cc <__udivmoddi4+0x28c>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8118 	bls.w	80005cc <__udivmoddi4+0x28c>
 800039c:	3f02      	subs	r7, #2
 800039e:	442b      	add	r3, r5
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80003b4:	45a4      	cmp	ip, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	192c      	adds	r4, r5, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003be:	f080 8107 	bcs.w	80005d0 <__udivmoddi4+0x290>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	f240 8104 	bls.w	80005d0 <__udivmoddi4+0x290>
 80003c8:	3802      	subs	r0, #2
 80003ca:	442c      	add	r4, r5
 80003cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003d0:	eba4 040c 	sub.w	r4, r4, ip
 80003d4:	2700      	movs	r7, #0
 80003d6:	b11e      	cbz	r6, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c6 4300 	strd	r4, r3, [r6]
 80003e0:	4639      	mov	r1, r7
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0xbe>
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	f000 80eb 	beq.w	80005c6 <__udivmoddi4+0x286>
 80003f0:	2700      	movs	r7, #0
 80003f2:	e9c6 0100 	strd	r0, r1, [r6]
 80003f6:	4638      	mov	r0, r7
 80003f8:	4639      	mov	r1, r7
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f783 	clz	r7, r3
 8000402:	2f00      	cmp	r7, #0
 8000404:	d147      	bne.n	8000496 <__udivmoddi4+0x156>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0xd0>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80fa 	bhi.w	8000604 <__udivmoddi4+0x2c4>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0303 	sbc.w	r3, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	4698      	mov	r8, r3
 800041a:	2e00      	cmp	r6, #0
 800041c:	d0e0      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800041e:	e9c6 4800 	strd	r4, r8, [r6]
 8000422:	e7dd      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000424:	b902      	cbnz	r2, 8000428 <__udivmoddi4+0xe8>
 8000426:	deff      	udf	#255	; 0xff
 8000428:	fab2 f282 	clz	r2, r2
 800042c:	2a00      	cmp	r2, #0
 800042e:	f040 808f 	bne.w	8000550 <__udivmoddi4+0x210>
 8000432:	1b49      	subs	r1, r1, r5
 8000434:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000438:	fa1f f885 	uxth.w	r8, r5
 800043c:	2701      	movs	r7, #1
 800043e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000442:	0c23      	lsrs	r3, r4, #16
 8000444:	fb0e 111c 	mls	r1, lr, ip, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb08 f10c 	mul.w	r1, r8, ip
 8000450:	4299      	cmp	r1, r3
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x124>
 8000454:	18eb      	adds	r3, r5, r3
 8000456:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x122>
 800045c:	4299      	cmp	r1, r3
 800045e:	f200 80cd 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 8000462:	4684      	mov	ip, r0
 8000464:	1a59      	subs	r1, r3, r1
 8000466:	b2a3      	uxth	r3, r4
 8000468:	fbb1 f0fe 	udiv	r0, r1, lr
 800046c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000470:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000474:	fb08 f800 	mul.w	r8, r8, r0
 8000478:	45a0      	cmp	r8, r4
 800047a:	d907      	bls.n	800048c <__udivmoddi4+0x14c>
 800047c:	192c      	adds	r4, r5, r4
 800047e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000482:	d202      	bcs.n	800048a <__udivmoddi4+0x14a>
 8000484:	45a0      	cmp	r8, r4
 8000486:	f200 80b6 	bhi.w	80005f6 <__udivmoddi4+0x2b6>
 800048a:	4618      	mov	r0, r3
 800048c:	eba4 0408 	sub.w	r4, r4, r8
 8000490:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000494:	e79f      	b.n	80003d6 <__udivmoddi4+0x96>
 8000496:	f1c7 0c20 	rsb	ip, r7, #32
 800049a:	40bb      	lsls	r3, r7
 800049c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80004a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80004a4:	fa01 f407 	lsl.w	r4, r1, r7
 80004a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80004ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80004b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80004b4:	4325      	orrs	r5, r4
 80004b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80004ba:	0c2c      	lsrs	r4, r5, #16
 80004bc:	fb08 3319 	mls	r3, r8, r9, r3
 80004c0:	fa1f fa8e 	uxth.w	sl, lr
 80004c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004c8:	fb09 f40a 	mul.w	r4, r9, sl
 80004cc:	429c      	cmp	r4, r3
 80004ce:	fa02 f207 	lsl.w	r2, r2, r7
 80004d2:	fa00 f107 	lsl.w	r1, r0, r7
 80004d6:	d90b      	bls.n	80004f0 <__udivmoddi4+0x1b0>
 80004d8:	eb1e 0303 	adds.w	r3, lr, r3
 80004dc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004e0:	f080 8087 	bcs.w	80005f2 <__udivmoddi4+0x2b2>
 80004e4:	429c      	cmp	r4, r3
 80004e6:	f240 8084 	bls.w	80005f2 <__udivmoddi4+0x2b2>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4473      	add	r3, lr
 80004f0:	1b1b      	subs	r3, r3, r4
 80004f2:	b2ad      	uxth	r5, r5
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3310 	mls	r3, r8, r0, r3
 80004fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000500:	fb00 fa0a 	mul.w	sl, r0, sl
 8000504:	45a2      	cmp	sl, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x1da>
 8000508:	eb1e 0404 	adds.w	r4, lr, r4
 800050c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000510:	d26b      	bcs.n	80005ea <__udivmoddi4+0x2aa>
 8000512:	45a2      	cmp	sl, r4
 8000514:	d969      	bls.n	80005ea <__udivmoddi4+0x2aa>
 8000516:	3802      	subs	r0, #2
 8000518:	4474      	add	r4, lr
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	fba0 8902 	umull	r8, r9, r0, r2
 8000522:	eba4 040a 	sub.w	r4, r4, sl
 8000526:	454c      	cmp	r4, r9
 8000528:	46c2      	mov	sl, r8
 800052a:	464b      	mov	r3, r9
 800052c:	d354      	bcc.n	80005d8 <__udivmoddi4+0x298>
 800052e:	d051      	beq.n	80005d4 <__udivmoddi4+0x294>
 8000530:	2e00      	cmp	r6, #0
 8000532:	d069      	beq.n	8000608 <__udivmoddi4+0x2c8>
 8000534:	ebb1 050a 	subs.w	r5, r1, sl
 8000538:	eb64 0403 	sbc.w	r4, r4, r3
 800053c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000540:	40fd      	lsrs	r5, r7
 8000542:	40fc      	lsrs	r4, r7
 8000544:	ea4c 0505 	orr.w	r5, ip, r5
 8000548:	e9c6 5400 	strd	r5, r4, [r6]
 800054c:	2700      	movs	r7, #0
 800054e:	e747      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000550:	f1c2 0320 	rsb	r3, r2, #32
 8000554:	fa20 f703 	lsr.w	r7, r0, r3
 8000558:	4095      	lsls	r5, r2
 800055a:	fa01 f002 	lsl.w	r0, r1, r2
 800055e:	fa21 f303 	lsr.w	r3, r1, r3
 8000562:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000566:	4338      	orrs	r0, r7
 8000568:	0c01      	lsrs	r1, r0, #16
 800056a:	fbb3 f7fe 	udiv	r7, r3, lr
 800056e:	fa1f f885 	uxth.w	r8, r5
 8000572:	fb0e 3317 	mls	r3, lr, r7, r3
 8000576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057a:	fb07 f308 	mul.w	r3, r7, r8
 800057e:	428b      	cmp	r3, r1
 8000580:	fa04 f402 	lsl.w	r4, r4, r2
 8000584:	d907      	bls.n	8000596 <__udivmoddi4+0x256>
 8000586:	1869      	adds	r1, r5, r1
 8000588:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800058c:	d22f      	bcs.n	80005ee <__udivmoddi4+0x2ae>
 800058e:	428b      	cmp	r3, r1
 8000590:	d92d      	bls.n	80005ee <__udivmoddi4+0x2ae>
 8000592:	3f02      	subs	r7, #2
 8000594:	4429      	add	r1, r5
 8000596:	1acb      	subs	r3, r1, r3
 8000598:	b281      	uxth	r1, r0
 800059a:	fbb3 f0fe 	udiv	r0, r3, lr
 800059e:	fb0e 3310 	mls	r3, lr, r0, r3
 80005a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005a6:	fb00 f308 	mul.w	r3, r0, r8
 80005aa:	428b      	cmp	r3, r1
 80005ac:	d907      	bls.n	80005be <__udivmoddi4+0x27e>
 80005ae:	1869      	adds	r1, r5, r1
 80005b0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80005b4:	d217      	bcs.n	80005e6 <__udivmoddi4+0x2a6>
 80005b6:	428b      	cmp	r3, r1
 80005b8:	d915      	bls.n	80005e6 <__udivmoddi4+0x2a6>
 80005ba:	3802      	subs	r0, #2
 80005bc:	4429      	add	r1, r5
 80005be:	1ac9      	subs	r1, r1, r3
 80005c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005c4:	e73b      	b.n	800043e <__udivmoddi4+0xfe>
 80005c6:	4637      	mov	r7, r6
 80005c8:	4630      	mov	r0, r6
 80005ca:	e709      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005cc:	4607      	mov	r7, r0
 80005ce:	e6e7      	b.n	80003a0 <__udivmoddi4+0x60>
 80005d0:	4618      	mov	r0, r3
 80005d2:	e6fb      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d4:	4541      	cmp	r1, r8
 80005d6:	d2ab      	bcs.n	8000530 <__udivmoddi4+0x1f0>
 80005d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005dc:	eb69 020e 	sbc.w	r2, r9, lr
 80005e0:	3801      	subs	r0, #1
 80005e2:	4613      	mov	r3, r2
 80005e4:	e7a4      	b.n	8000530 <__udivmoddi4+0x1f0>
 80005e6:	4660      	mov	r0, ip
 80005e8:	e7e9      	b.n	80005be <__udivmoddi4+0x27e>
 80005ea:	4618      	mov	r0, r3
 80005ec:	e795      	b.n	800051a <__udivmoddi4+0x1da>
 80005ee:	4667      	mov	r7, ip
 80005f0:	e7d1      	b.n	8000596 <__udivmoddi4+0x256>
 80005f2:	4681      	mov	r9, r0
 80005f4:	e77c      	b.n	80004f0 <__udivmoddi4+0x1b0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	442c      	add	r4, r5
 80005fa:	e747      	b.n	800048c <__udivmoddi4+0x14c>
 80005fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000600:	442b      	add	r3, r5
 8000602:	e72f      	b.n	8000464 <__udivmoddi4+0x124>
 8000604:	4638      	mov	r0, r7
 8000606:	e708      	b.n	800041a <__udivmoddi4+0xda>
 8000608:	4637      	mov	r7, r6
 800060a:	e6e9      	b.n	80003e0 <__udivmoddi4+0xa0>

0800060c <__aeabi_idiv0>:
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <HAL_Init>:
 8000610:	b508      	push	{r3, lr}
 8000612:	2003      	movs	r0, #3
 8000614:	f000 f82c 	bl	8000670 <HAL_NVIC_SetPriorityGrouping>
 8000618:	2000      	movs	r0, #0
 800061a:	f00b f9c7 	bl	800b9ac <HAL_InitTick>
 800061e:	f00b f8fd 	bl	800b81c <HAL_MspInit>
 8000622:	2000      	movs	r0, #0
 8000624:	bd08      	pop	{r3, pc}
 8000626:	bf00      	nop

08000628 <HAL_IncTick>:
 8000628:	4a03      	ldr	r2, [pc, #12]	; (8000638 <HAL_IncTick+0x10>)
 800062a:	4b04      	ldr	r3, [pc, #16]	; (800063c <HAL_IncTick+0x14>)
 800062c:	6811      	ldr	r1, [r2, #0]
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	440b      	add	r3, r1
 8000632:	6013      	str	r3, [r2, #0]
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	200059d4 	.word	0x200059d4
 800063c:	20000000 	.word	0x20000000

08000640 <HAL_GetTick>:
 8000640:	4b01      	ldr	r3, [pc, #4]	; (8000648 <HAL_GetTick+0x8>)
 8000642:	6818      	ldr	r0, [r3, #0]
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	200059d4 	.word	0x200059d4

0800064c <HAL_Delay>:
 800064c:	b538      	push	{r3, r4, r5, lr}
 800064e:	4604      	mov	r4, r0
 8000650:	f7ff fff6 	bl	8000640 <HAL_GetTick>
 8000654:	4605      	mov	r5, r0
 8000656:	1c63      	adds	r3, r4, #1
 8000658:	d002      	beq.n	8000660 <HAL_Delay+0x14>
 800065a:	4b04      	ldr	r3, [pc, #16]	; (800066c <HAL_Delay+0x20>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	441c      	add	r4, r3
 8000660:	f7ff ffee 	bl	8000640 <HAL_GetTick>
 8000664:	1b40      	subs	r0, r0, r5
 8000666:	42a0      	cmp	r0, r4
 8000668:	d3fa      	bcc.n	8000660 <HAL_Delay+0x14>
 800066a:	bd38      	pop	{r3, r4, r5, pc}
 800066c:	20000000 	.word	0x20000000

08000670 <HAL_NVIC_SetPriorityGrouping>:
 8000670:	4907      	ldr	r1, [pc, #28]	; (8000690 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000672:	0200      	lsls	r0, r0, #8
 8000674:	4b07      	ldr	r3, [pc, #28]	; (8000694 <HAL_NVIC_SetPriorityGrouping+0x24>)
 8000676:	68ca      	ldr	r2, [r1, #12]
 8000678:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 800067c:	b410      	push	{r4}
 800067e:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 8000682:	4022      	ands	r2, r4
 8000684:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000688:	4313      	orrs	r3, r2
 800068a:	4318      	orrs	r0, r3
 800068c:	60c8      	str	r0, [r1, #12]
 800068e:	4770      	bx	lr
 8000690:	e000ed00 	.word	0xe000ed00
 8000694:	05fa0000 	.word	0x05fa0000

08000698 <HAL_NVIC_SetPriority>:
 8000698:	4b17      	ldr	r3, [pc, #92]	; (80006f8 <HAL_NVIC_SetPriority+0x60>)
 800069a:	68db      	ldr	r3, [r3, #12]
 800069c:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80006a0:	b430      	push	{r4, r5}
 80006a2:	f1c3 0507 	rsb	r5, r3, #7
 80006a6:	1d1c      	adds	r4, r3, #4
 80006a8:	2d04      	cmp	r5, #4
 80006aa:	bf28      	it	cs
 80006ac:	2504      	movcs	r5, #4
 80006ae:	2c06      	cmp	r4, #6
 80006b0:	d918      	bls.n	80006e4 <HAL_NVIC_SetPriority+0x4c>
 80006b2:	3b03      	subs	r3, #3
 80006b4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80006b8:	409c      	lsls	r4, r3
 80006ba:	ea22 0404 	bic.w	r4, r2, r4
 80006be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80006c2:	2800      	cmp	r0, #0
 80006c4:	fa02 f205 	lsl.w	r2, r2, r5
 80006c8:	ea21 0102 	bic.w	r1, r1, r2
 80006cc:	fa01 f203 	lsl.w	r2, r1, r3
 80006d0:	ea42 0204 	orr.w	r2, r2, r4
 80006d4:	ea4f 1202 	mov.w	r2, r2, lsl #4
 80006d8:	b2d2      	uxtb	r2, r2
 80006da:	db06      	blt.n	80006ea <HAL_NVIC_SetPriority+0x52>
 80006dc:	4b07      	ldr	r3, [pc, #28]	; (80006fc <HAL_NVIC_SetPriority+0x64>)
 80006de:	541a      	strb	r2, [r3, r0]
 80006e0:	bc30      	pop	{r4, r5}
 80006e2:	4770      	bx	lr
 80006e4:	2400      	movs	r4, #0
 80006e6:	4623      	mov	r3, r4
 80006e8:	e7e9      	b.n	80006be <HAL_NVIC_SetPriority+0x26>
 80006ea:	f000 000f 	and.w	r0, r0, #15
 80006ee:	4b04      	ldr	r3, [pc, #16]	; (8000700 <HAL_NVIC_SetPriority+0x68>)
 80006f0:	541a      	strb	r2, [r3, r0]
 80006f2:	bc30      	pop	{r4, r5}
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	e000ed00 	.word	0xe000ed00
 80006fc:	e000e400 	.word	0xe000e400
 8000700:	e000ed14 	.word	0xe000ed14

08000704 <HAL_NVIC_EnableIRQ>:
 8000704:	2800      	cmp	r0, #0
 8000706:	db07      	blt.n	8000718 <HAL_NVIC_EnableIRQ+0x14>
 8000708:	f000 011f 	and.w	r1, r0, #31
 800070c:	2301      	movs	r3, #1
 800070e:	0940      	lsrs	r0, r0, #5
 8000710:	4a02      	ldr	r2, [pc, #8]	; (800071c <HAL_NVIC_EnableIRQ+0x18>)
 8000712:	408b      	lsls	r3, r1
 8000714:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	e000e100 	.word	0xe000e100

08000720 <ETH_MACDMAConfig>:
 8000720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000722:	4604      	mov	r4, r0
 8000724:	2900      	cmp	r1, #0
 8000726:	d164      	bne.n	80007f2 <ETH_MACDMAConfig+0xd2>
 8000728:	e9d0 3102 	ldrd	r3, r1, [r0, #8]
 800072c:	430b      	orrs	r3, r1
 800072e:	f443 7100 	orr.w	r1, r3, #512	; 0x200
 8000732:	6822      	ldr	r2, [r4, #0]
 8000734:	2001      	movs	r0, #1
 8000736:	69e5      	ldr	r5, [r4, #28]
 8000738:	6816      	ldr	r6, [r2, #0]
 800073a:	4b32      	ldr	r3, [pc, #200]	; (8000804 <ETH_MACDMAConfig+0xe4>)
 800073c:	2d00      	cmp	r5, #0
 800073e:	f241 0518 	movw	r5, #4120	; 0x1018
 8000742:	ea03 0306 	and.w	r3, r3, r6
 8000746:	f04f 0600 	mov.w	r6, #0
 800074a:	ea43 0301 	orr.w	r3, r3, r1
 800074e:	bf14      	ite	ne
 8000750:	4631      	movne	r1, r6
 8000752:	f44f 6180 	moveq.w	r1, #1024	; 0x400
 8000756:	430b      	orrs	r3, r1
 8000758:	6013      	str	r3, [r2, #0]
 800075a:	6817      	ldr	r7, [r2, #0]
 800075c:	f7ff ff76 	bl	800064c <HAL_Delay>
 8000760:	6823      	ldr	r3, [r4, #0]
 8000762:	2241      	movs	r2, #65	; 0x41
 8000764:	2001      	movs	r0, #1
 8000766:	601f      	str	r7, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	685f      	ldr	r7, [r3, #4]
 800076c:	f7ff ff6e 	bl	800064c <HAL_Delay>
 8000770:	6823      	ldr	r3, [r4, #0]
 8000772:	f64f 7141 	movw	r1, #65345	; 0xff41
 8000776:	2001      	movs	r0, #1
 8000778:	605f      	str	r7, [r3, #4]
 800077a:	609e      	str	r6, [r3, #8]
 800077c:	60de      	str	r6, [r3, #12]
 800077e:	699a      	ldr	r2, [r3, #24]
 8000780:	400a      	ands	r2, r1
 8000782:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000786:	619a      	str	r2, [r3, #24]
 8000788:	699f      	ldr	r7, [r3, #24]
 800078a:	f7ff ff5f 	bl	800064c <HAL_Delay>
 800078e:	6823      	ldr	r3, [r4, #0]
 8000790:	2001      	movs	r0, #1
 8000792:	619f      	str	r7, [r3, #24]
 8000794:	61de      	str	r6, [r3, #28]
 8000796:	69de      	ldr	r6, [r3, #28]
 8000798:	f7ff ff58 	bl	800064c <HAL_Delay>
 800079c:	6823      	ldr	r3, [r4, #0]
 800079e:	2001      	movs	r0, #1
 80007a0:	4919      	ldr	r1, [pc, #100]	; (8000808 <ETH_MACDMAConfig+0xe8>)
 80007a2:	61de      	str	r6, [r3, #28]
 80007a4:	595a      	ldr	r2, [r3, r5]
 80007a6:	4011      	ands	r1, r2
 80007a8:	4a18      	ldr	r2, [pc, #96]	; (800080c <ETH_MACDMAConfig+0xec>)
 80007aa:	430a      	orrs	r2, r1
 80007ac:	515a      	str	r2, [r3, r5]
 80007ae:	595e      	ldr	r6, [r3, r5]
 80007b0:	f7ff ff4c 	bl	800064c <HAL_Delay>
 80007b4:	6823      	ldr	r3, [r4, #0]
 80007b6:	2001      	movs	r0, #1
 80007b8:	4a15      	ldr	r2, [pc, #84]	; (8000810 <ETH_MACDMAConfig+0xf0>)
 80007ba:	515e      	str	r6, [r3, r5]
 80007bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	681d      	ldr	r5, [r3, #0]
 80007c4:	f7ff ff42 	bl	800064c <HAL_Delay>
 80007c8:	6823      	ldr	r3, [r4, #0]
 80007ca:	69a2      	ldr	r2, [r4, #24]
 80007cc:	f503 5180 	add.w	r1, r3, #4096	; 0x1000
 80007d0:	2a01      	cmp	r2, #1
 80007d2:	600d      	str	r5, [r1, #0]
 80007d4:	d105      	bne.n	80007e2 <ETH_MACDMAConfig+0xc2>
 80007d6:	f241 011c 	movw	r1, #4124	; 0x101c
 80007da:	4a0e      	ldr	r2, [pc, #56]	; (8000814 <ETH_MACDMAConfig+0xf4>)
 80007dc:	5858      	ldr	r0, [r3, r1]
 80007de:	4302      	orrs	r2, r0
 80007e0:	505a      	str	r2, [r3, r1]
 80007e2:	6963      	ldr	r3, [r4, #20]
 80007e4:	490c      	ldr	r1, [pc, #48]	; (8000818 <ETH_MACDMAConfig+0xf8>)
 80007e6:	8898      	ldrh	r0, [r3, #4]
 80007e8:	4a0c      	ldr	r2, [pc, #48]	; (800081c <ETH_MACDMAConfig+0xfc>)
 80007ea:	6008      	str	r0, [r1, #0]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	6013      	str	r3, [r2, #0]
 80007f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80007f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007fa:	f44f 4194 	mov.w	r1, #18944	; 0x4a00
 80007fe:	e9c0 3202 	strd	r3, r2, [r0, #8]
 8000802:	e796      	b.n	8000732 <ETH_MACDMAConfig+0x12>
 8000804:	ff20810f 	.word	0xff20810f
 8000808:	f8de3f23 	.word	0xf8de3f23
 800080c:	02200004 	.word	0x02200004
 8000810:	02c12080 	.word	0x02c12080
 8000814:	00010040 	.word	0x00010040
 8000818:	40028040 	.word	0x40028040
 800081c:	40028044 	.word	0x40028044

08000820 <HAL_ETH_DMATxDescListInit>:
 8000820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000824:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 8000828:	2c01      	cmp	r4, #1
 800082a:	d07a      	beq.n	8000922 <HAL_ETH_DMATxDescListInit+0x102>
 800082c:	2501      	movs	r5, #1
 800082e:	2402      	movs	r4, #2
 8000830:	62c1      	str	r1, [r0, #44]	; 0x2c
 8000832:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
 8000836:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
 800083a:	b1b3      	cbz	r3, 800086a <HAL_ETH_DMATxDescListInit+0x4a>
 800083c:	69c5      	ldr	r5, [r0, #28]
 800083e:	1e5c      	subs	r4, r3, #1
 8000840:	b30d      	cbz	r5, 8000886 <HAL_ETH_DMATxDescListInit+0x66>
 8000842:	2c00      	cmp	r4, #0
 8000844:	d155      	bne.n	80008f2 <HAL_ETH_DMATxDescListInit+0xd2>
 8000846:	f240 56f4 	movw	r6, #1524	; 0x5f4
 800084a:	eb01 1544 	add.w	r5, r1, r4, lsl #5
 800084e:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
 8000852:	fb06 2204 	mla	r2, r6, r4, r2
 8000856:	3401      	adds	r4, #1
 8000858:	60aa      	str	r2, [r5, #8]
 800085a:	602f      	str	r7, [r5, #0]
 800085c:	f202 52f4 	addw	r2, r2, #1524	; 0x5f4
 8000860:	42a3      	cmp	r3, r4
 8000862:	60e9      	str	r1, [r5, #12]
 8000864:	f105 0520 	add.w	r5, r5, #32
 8000868:	d8f5      	bhi.n	8000856 <HAL_ETH_DMATxDescListInit+0x36>
 800086a:	6805      	ldr	r5, [r0, #0]
 800086c:	2300      	movs	r3, #0
 800086e:	f241 0210 	movw	r2, #4112	; 0x1010
 8000872:	2401      	movs	r4, #1
 8000874:	50a9      	str	r1, [r5, r2]
 8000876:	461a      	mov	r2, r3
 8000878:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
 800087c:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
 8000880:	4610      	mov	r0, r2
 8000882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000886:	b9c4      	cbnz	r4, 80008ba <HAL_ETH_DMATxDescListInit+0x9a>
 8000888:	f240 56f4 	movw	r6, #1524	; 0x5f4
 800088c:	eb01 1544 	add.w	r5, r1, r4, lsl #5
 8000890:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
 8000894:	fb06 2204 	mla	r2, r6, r4, r2
 8000898:	602f      	str	r7, [r5, #0]
 800089a:	3401      	adds	r4, #1
 800089c:	682e      	ldr	r6, [r5, #0]
 800089e:	3520      	adds	r5, #32
 80008a0:	42a3      	cmp	r3, r4
 80008a2:	f845 2c18 	str.w	r2, [r5, #-24]
 80008a6:	f446 0640 	orr.w	r6, r6, #12582912	; 0xc00000
 80008aa:	f845 1c14 	str.w	r1, [r5, #-20]
 80008ae:	f202 52f4 	addw	r2, r2, #1524	; 0x5f4
 80008b2:	f845 6c20 	str.w	r6, [r5, #-32]
 80008b6:	d8ef      	bhi.n	8000898 <HAL_ETH_DMATxDescListInit+0x78>
 80008b8:	e7d7      	b.n	800086a <HAL_ETH_DMATxDescListInit+0x4a>
 80008ba:	429c      	cmp	r4, r3
 80008bc:	4617      	mov	r7, r2
 80008be:	f44f 1e80 	mov.w	lr, #1048576	; 0x100000
 80008c2:	bf28      	it	cs
 80008c4:	461c      	movcs	r4, r3
 80008c6:	46a0      	mov	r8, r4
 80008c8:	462c      	mov	r4, r5
 80008ca:	460d      	mov	r5, r1
 80008cc:	f8c5 e000 	str.w	lr, [r5]
 80008d0:	3401      	adds	r4, #1
 80008d2:	682e      	ldr	r6, [r5, #0]
 80008d4:	46ac      	mov	ip, r5
 80008d6:	4544      	cmp	r4, r8
 80008d8:	60af      	str	r7, [r5, #8]
 80008da:	f446 0640 	orr.w	r6, r6, #12582912	; 0xc00000
 80008de:	f207 57f4 	addw	r7, r7, #1524	; 0x5f4
 80008e2:	f845 6b20 	str.w	r6, [r5], #32
 80008e6:	f8cc 500c 	str.w	r5, [ip, #12]
 80008ea:	d3ef      	bcc.n	80008cc <HAL_ETH_DMATxDescListInit+0xac>
 80008ec:	42a3      	cmp	r3, r4
 80008ee:	d8cb      	bhi.n	8000888 <HAL_ETH_DMATxDescListInit+0x68>
 80008f0:	e7bb      	b.n	800086a <HAL_ETH_DMATxDescListInit+0x4a>
 80008f2:	429c      	cmp	r4, r3
 80008f4:	4616      	mov	r6, r2
 80008f6:	460d      	mov	r5, r1
 80008f8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80008fc:	bf28      	it	cs
 80008fe:	461c      	movcs	r4, r3
 8000900:	46a6      	mov	lr, r4
 8000902:	2400      	movs	r4, #0
 8000904:	3401      	adds	r4, #1
 8000906:	60ae      	str	r6, [r5, #8]
 8000908:	f8c5 c000 	str.w	ip, [r5]
 800090c:	462f      	mov	r7, r5
 800090e:	4574      	cmp	r4, lr
 8000910:	f105 0520 	add.w	r5, r5, #32
 8000914:	f206 56f4 	addw	r6, r6, #1524	; 0x5f4
 8000918:	60fd      	str	r5, [r7, #12]
 800091a:	d3f3      	bcc.n	8000904 <HAL_ETH_DMATxDescListInit+0xe4>
 800091c:	42a3      	cmp	r3, r4
 800091e:	d892      	bhi.n	8000846 <HAL_ETH_DMATxDescListInit+0x26>
 8000920:	e7a3      	b.n	800086a <HAL_ETH_DMATxDescListInit+0x4a>
 8000922:	2202      	movs	r2, #2
 8000924:	4610      	mov	r0, r2
 8000926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800092a:	bf00      	nop

0800092c <HAL_ETH_DMARxDescListInit>:
 800092c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000930:	4696      	mov	lr, r2
 8000932:	f890 2045 	ldrb.w	r2, [r0, #69]	; 0x45
 8000936:	2a01      	cmp	r2, #1
 8000938:	d047      	beq.n	80009ca <HAL_ETH_DMARxDescListInit+0x9e>
 800093a:	2401      	movs	r4, #1
 800093c:	2202      	movs	r2, #2
 800093e:	6281      	str	r1, [r0, #40]	; 0x28
 8000940:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
 8000944:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 8000948:	b1b3      	cbz	r3, 8000978 <HAL_ETH_DMARxDescListInit+0x4c>
 800094a:	1e5d      	subs	r5, r3, #1
 800094c:	d122      	bne.n	8000994 <HAL_ETH_DMARxDescListInit+0x68>
 800094e:	f240 56f4 	movw	r6, #1524	; 0x5f4
 8000952:	eb01 1445 	add.w	r4, r1, r5, lsl #5
 8000956:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800095a:	f244 57f4 	movw	r7, #17908	; 0x45f4
 800095e:	fb06 e605 	mla	r6, r6, r5, lr
 8000962:	3501      	adds	r5, #1
 8000964:	6022      	str	r2, [r4, #0]
 8000966:	60e1      	str	r1, [r4, #12]
 8000968:	42ab      	cmp	r3, r5
 800096a:	e9c4 7601 	strd	r7, r6, [r4, #4]
 800096e:	f206 56f4 	addw	r6, r6, #1524	; 0x5f4
 8000972:	f104 0420 	add.w	r4, r4, #32
 8000976:	d8f4      	bhi.n	8000962 <HAL_ETH_DMARxDescListInit+0x36>
 8000978:	6805      	ldr	r5, [r0, #0]
 800097a:	2300      	movs	r3, #0
 800097c:	f241 020c 	movw	r2, #4108	; 0x100c
 8000980:	2401      	movs	r4, #1
 8000982:	50a9      	str	r1, [r5, r2]
 8000984:	461a      	mov	r2, r3
 8000986:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
 800098a:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
 800098e:	4610      	mov	r0, r2
 8000990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000994:	429d      	cmp	r5, r3
 8000996:	4676      	mov	r6, lr
 8000998:	460c      	mov	r4, r1
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	bf28      	it	cs
 80009a0:	461d      	movcs	r5, r3
 80009a2:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80009a6:	46a8      	mov	r8, r5
 80009a8:	2500      	movs	r5, #0
 80009aa:	3501      	adds	r5, #1
 80009ac:	60a6      	str	r6, [r4, #8]
 80009ae:	f8c4 c000 	str.w	ip, [r4]
 80009b2:	4627      	mov	r7, r4
 80009b4:	6062      	str	r2, [r4, #4]
 80009b6:	4545      	cmp	r5, r8
 80009b8:	f104 0420 	add.w	r4, r4, #32
 80009bc:	f206 56f4 	addw	r6, r6, #1524	; 0x5f4
 80009c0:	60fc      	str	r4, [r7, #12]
 80009c2:	d3f2      	bcc.n	80009aa <HAL_ETH_DMARxDescListInit+0x7e>
 80009c4:	42ab      	cmp	r3, r5
 80009c6:	d8c2      	bhi.n	800094e <HAL_ETH_DMARxDescListInit+0x22>
 80009c8:	e7d6      	b.n	8000978 <HAL_ETH_DMARxDescListInit+0x4c>
 80009ca:	2202      	movs	r2, #2
 80009cc:	4610      	mov	r0, r2
 80009ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80009d2:	bf00      	nop

080009d4 <HAL_ETH_Init>:
 80009d4:	2800      	cmp	r0, #0
 80009d6:	f000 8088 	beq.w	8000aea <HAL_ETH_Init+0x116>
 80009da:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 80009de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80009e6:	b082      	sub	sp, #8
 80009e8:	4604      	mov	r4, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d06f      	beq.n	8000ace <HAL_ETH_Init+0xfa>
 80009ee:	4aae      	ldr	r2, [pc, #696]	; (8000ca8 <HAL_ETH_Init+0x2d4>)
 80009f0:	6823      	ldr	r3, [r4, #0]
 80009f2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80009f4:	48ad      	ldr	r0, [pc, #692]	; (8000cac <HAL_ETH_Init+0x2d8>)
 80009f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80009fa:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80009fe:	6451      	str	r1, [r2, #68]	; 0x44
 8000a00:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000a02:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000a06:	9201      	str	r2, [sp, #4]
 8000a08:	9a01      	ldr	r2, [sp, #4]
 8000a0a:	6842      	ldr	r2, [r0, #4]
 8000a0c:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000a10:	6042      	str	r2, [r0, #4]
 8000a12:	6842      	ldr	r2, [r0, #4]
 8000a14:	6a21      	ldr	r1, [r4, #32]
 8000a16:	430a      	orrs	r2, r1
 8000a18:	6042      	str	r2, [r0, #4]
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	f042 0201 	orr.w	r2, r2, #1
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	f7ff fe0d 	bl	8000640 <HAL_GetTick>
 8000a26:	4605      	mov	r5, r0
 8000a28:	e005      	b.n	8000a36 <HAL_ETH_Init+0x62>
 8000a2a:	f7ff fe09 	bl	8000640 <HAL_GetTick>
 8000a2e:	1b40      	subs	r0, r0, r5
 8000a30:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8000a34:	d850      	bhi.n	8000ad8 <HAL_ETH_Init+0x104>
 8000a36:	6823      	ldr	r3, [r4, #0]
 8000a38:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8000a3c:	6812      	ldr	r2, [r2, #0]
 8000a3e:	07d1      	lsls	r1, r2, #31
 8000a40:	d4f3      	bmi.n	8000a2a <HAL_ETH_Init+0x56>
 8000a42:	691d      	ldr	r5, [r3, #16]
 8000a44:	f001 f83a 	bl	8001abc <HAL_RCC_GetHCLKFreq>
 8000a48:	4b99      	ldr	r3, [pc, #612]	; (8000cb0 <HAL_ETH_Init+0x2dc>)
 8000a4a:	4a9a      	ldr	r2, [pc, #616]	; (8000cb4 <HAL_ETH_Init+0x2e0>)
 8000a4c:	f025 051c 	bic.w	r5, r5, #28
 8000a50:	4403      	add	r3, r0
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d94b      	bls.n	8000aee <HAL_ETH_Init+0x11a>
 8000a56:	4b98      	ldr	r3, [pc, #608]	; (8000cb8 <HAL_ETH_Init+0x2e4>)
 8000a58:	4a98      	ldr	r2, [pc, #608]	; (8000cbc <HAL_ETH_Init+0x2e8>)
 8000a5a:	4403      	add	r3, r0
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d87a      	bhi.n	8000b56 <HAL_ETH_Init+0x182>
 8000a60:	f045 050c 	orr.w	r5, r5, #12
 8000a64:	6821      	ldr	r1, [r4, #0]
 8000a66:	610d      	str	r5, [r1, #16]
 8000a68:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8000a6c:	2b42      	cmp	r3, #66	; 0x42
 8000a6e:	d024      	beq.n	8000aba <HAL_ETH_Init+0xe6>
 8000a70:	2242      	movs	r2, #66	; 0x42
 8000a72:	8a23      	ldrh	r3, [r4, #16]
 8000a74:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000a78:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8000a7c:	02db      	lsls	r3, r3, #11
 8000a7e:	690a      	ldr	r2, [r1, #16]
 8000a80:	b29b      	uxth	r3, r3
 8000a82:	6148      	str	r0, [r1, #20]
 8000a84:	f002 021c 	and.w	r2, r2, #28
 8000a88:	f042 0203 	orr.w	r2, r2, #3
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	610b      	str	r3, [r1, #16]
 8000a90:	f7ff fdd6 	bl	8000640 <HAL_GetTick>
 8000a94:	4606      	mov	r6, r0
 8000a96:	e004      	b.n	8000aa2 <HAL_ETH_Init+0xce>
 8000a98:	6823      	ldr	r3, [r4, #0]
 8000a9a:	691d      	ldr	r5, [r3, #16]
 8000a9c:	f015 0501 	ands.w	r5, r5, #1
 8000aa0:	d028      	beq.n	8000af4 <HAL_ETH_Init+0x120>
 8000aa2:	f7ff fdcd 	bl	8000640 <HAL_GetTick>
 8000aa6:	1b80      	subs	r0, r0, r6
 8000aa8:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000aac:	d3f4      	bcc.n	8000a98 <HAL_ETH_Init+0xc4>
 8000aae:	2201      	movs	r2, #1
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8000ab6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000aba:	4620      	mov	r0, r4
 8000abc:	2101      	movs	r1, #1
 8000abe:	f7ff fe2f 	bl	8000720 <ETH_MACDMAConfig>
 8000ac2:	2001      	movs	r0, #1
 8000ac4:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
 8000ac8:	b002      	add	sp, #8
 8000aca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ace:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
 8000ad2:	f009 f8d7 	bl	8009c84 <HAL_ETH_MspInit>
 8000ad6:	e78a      	b.n	80009ee <HAL_ETH_Init+0x1a>
 8000ad8:	2003      	movs	r0, #3
 8000ada:	2300      	movs	r3, #0
 8000adc:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
 8000ae0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000ae4:	b002      	add	sp, #8
 8000ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aea:	2001      	movs	r0, #1
 8000aec:	4770      	bx	lr
 8000aee:	f045 0508 	orr.w	r5, r5, #8
 8000af2:	e7b7      	b.n	8000a64 <HAL_ETH_Init+0x90>
 8000af4:	2701      	movs	r7, #1
 8000af6:	20ff      	movs	r0, #255	; 0xff
 8000af8:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8000afc:	f7ff fda6 	bl	800064c <HAL_Delay>
 8000b00:	6863      	ldr	r3, [r4, #4]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d136      	bne.n	8000b74 <HAL_ETH_Init+0x1a0>
 8000b06:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8000b0a:	2b42      	cmp	r3, #66	; 0x42
 8000b0c:	d0d5      	beq.n	8000aba <HAL_ETH_Init+0xe6>
 8000b0e:	6820      	ldr	r0, [r4, #0]
 8000b10:	2242      	movs	r2, #66	; 0x42
 8000b12:	8a23      	ldrh	r3, [r4, #16]
 8000b14:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8000b18:	68a2      	ldr	r2, [r4, #8]
 8000b1a:	02db      	lsls	r3, r3, #11
 8000b1c:	6901      	ldr	r1, [r0, #16]
 8000b1e:	68e5      	ldr	r5, [r4, #12]
 8000b20:	0852      	lsrs	r2, r2, #1
 8000b22:	f001 011c 	and.w	r1, r1, #28
 8000b26:	b29b      	uxth	r3, r3
 8000b28:	ea42 02d5 	orr.w	r2, r2, r5, lsr #3
 8000b2c:	f041 0103 	orr.w	r1, r1, #3
 8000b30:	b292      	uxth	r2, r2
 8000b32:	430b      	orrs	r3, r1
 8000b34:	6142      	str	r2, [r0, #20]
 8000b36:	6103      	str	r3, [r0, #16]
 8000b38:	f7ff fd82 	bl	8000640 <HAL_GetTick>
 8000b3c:	4605      	mov	r5, r0
 8000b3e:	e003      	b.n	8000b48 <HAL_ETH_Init+0x174>
 8000b40:	6823      	ldr	r3, [r4, #0]
 8000b42:	691b      	ldr	r3, [r3, #16]
 8000b44:	07db      	lsls	r3, r3, #31
 8000b46:	d573      	bpl.n	8000c30 <HAL_ETH_Init+0x25c>
 8000b48:	f7ff fd7a 	bl	8000640 <HAL_GetTick>
 8000b4c:	1b40      	subs	r0, r0, r5
 8000b4e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000b52:	d3f5      	bcc.n	8000b40 <HAL_ETH_Init+0x16c>
 8000b54:	e7ab      	b.n	8000aae <HAL_ETH_Init+0xda>
 8000b56:	4b5a      	ldr	r3, [pc, #360]	; (8000cc0 <HAL_ETH_Init+0x2ec>)
 8000b58:	4a5a      	ldr	r2, [pc, #360]	; (8000cc4 <HAL_ETH_Init+0x2f0>)
 8000b5a:	4403      	add	r3, r0
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d981      	bls.n	8000a64 <HAL_ETH_Init+0x90>
 8000b60:	4b59      	ldr	r3, [pc, #356]	; (8000cc8 <HAL_ETH_Init+0x2f4>)
 8000b62:	4a5a      	ldr	r2, [pc, #360]	; (8000ccc <HAL_ETH_Init+0x2f8>)
 8000b64:	4403      	add	r3, r0
 8000b66:	4293      	cmp	r3, r2
 8000b68:	bf94      	ite	ls
 8000b6a:	f045 0504 	orrls.w	r5, r5, #4
 8000b6e:	f045 0510 	orrhi.w	r5, r5, #16
 8000b72:	e777      	b.n	8000a64 <HAL_ETH_Init+0x90>
 8000b74:	f7ff fd64 	bl	8000640 <HAL_GetTick>
 8000b78:	46aa      	mov	sl, r5
 8000b7a:	4680      	mov	r8, r0
 8000b7c:	f04f 0982 	mov.w	r9, #130	; 0x82
 8000b80:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8000b84:	2b82      	cmp	r3, #130	; 0x82
 8000b86:	d01e      	beq.n	8000bc6 <HAL_ETH_Init+0x1f2>
 8000b88:	6821      	ldr	r1, [r4, #0]
 8000b8a:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 8000b8e:	8a23      	ldrh	r3, [r4, #16]
 8000b90:	690a      	ldr	r2, [r1, #16]
 8000b92:	02db      	lsls	r3, r3, #11
 8000b94:	f002 021c 	and.w	r2, r2, #28
 8000b98:	b29b      	uxth	r3, r3
 8000b9a:	f042 0241 	orr.w	r2, r2, #65	; 0x41
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	610b      	str	r3, [r1, #16]
 8000ba2:	f7ff fd4d 	bl	8000640 <HAL_GetTick>
 8000ba6:	4606      	mov	r6, r0
 8000ba8:	e003      	b.n	8000bb2 <HAL_ETH_Init+0x1de>
 8000baa:	6823      	ldr	r3, [r4, #0]
 8000bac:	691a      	ldr	r2, [r3, #16]
 8000bae:	07d2      	lsls	r2, r2, #31
 8000bb0:	d539      	bpl.n	8000c26 <HAL_ETH_Init+0x252>
 8000bb2:	f7ff fd45 	bl	8000640 <HAL_GetTick>
 8000bb6:	1b80      	subs	r0, r0, r6
 8000bb8:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000bbc:	d3f5      	bcc.n	8000baa <HAL_ETH_Init+0x1d6>
 8000bbe:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8000bc2:	f884 a045 	strb.w	sl, [r4, #69]	; 0x45
 8000bc6:	f7ff fd3b 	bl	8000640 <HAL_GetTick>
 8000bca:	f241 3388 	movw	r3, #5000	; 0x1388
 8000bce:	eba0 0008 	sub.w	r0, r0, r8
 8000bd2:	4298      	cmp	r0, r3
 8000bd4:	d83c      	bhi.n	8000c50 <HAL_ETH_Init+0x27c>
 8000bd6:	076e      	lsls	r6, r5, #29
 8000bd8:	d5d2      	bpl.n	8000b80 <HAL_ETH_Init+0x1ac>
 8000bda:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8000bde:	2b42      	cmp	r3, #66	; 0x42
 8000be0:	f43f af6b 	beq.w	8000aba <HAL_ETH_Init+0xe6>
 8000be4:	6821      	ldr	r1, [r4, #0]
 8000be6:	2242      	movs	r2, #66	; 0x42
 8000be8:	8a23      	ldrh	r3, [r4, #16]
 8000bea:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000bee:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8000bf2:	690a      	ldr	r2, [r1, #16]
 8000bf4:	02db      	lsls	r3, r3, #11
 8000bf6:	6148      	str	r0, [r1, #20]
 8000bf8:	f002 021c 	and.w	r2, r2, #28
 8000bfc:	b29b      	uxth	r3, r3
 8000bfe:	f042 0203 	orr.w	r2, r2, #3
 8000c02:	4313      	orrs	r3, r2
 8000c04:	610b      	str	r3, [r1, #16]
 8000c06:	f7ff fd1b 	bl	8000640 <HAL_GetTick>
 8000c0a:	4606      	mov	r6, r0
 8000c0c:	e004      	b.n	8000c18 <HAL_ETH_Init+0x244>
 8000c0e:	6823      	ldr	r3, [r4, #0]
 8000c10:	691b      	ldr	r3, [r3, #16]
 8000c12:	f013 0301 	ands.w	r3, r3, #1
 8000c16:	d027      	beq.n	8000c68 <HAL_ETH_Init+0x294>
 8000c18:	f7ff fd12 	bl	8000640 <HAL_GetTick>
 8000c1c:	1b80      	subs	r0, r0, r6
 8000c1e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000c22:	d3f4      	bcc.n	8000c0e <HAL_ETH_Init+0x23a>
 8000c24:	e743      	b.n	8000aae <HAL_ETH_Init+0xda>
 8000c26:	695d      	ldr	r5, [r3, #20]
 8000c28:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8000c2c:	b2ad      	uxth	r5, r5
 8000c2e:	e7ca      	b.n	8000bc6 <HAL_ETH_Init+0x1f2>
 8000c30:	2301      	movs	r3, #1
 8000c32:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000c36:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8000c3a:	f7ff fd07 	bl	800064c <HAL_Delay>
 8000c3e:	4620      	mov	r0, r4
 8000c40:	2100      	movs	r1, #0
 8000c42:	f7ff fd6d 	bl	8000720 <ETH_MACDMAConfig>
 8000c46:	2301      	movs	r3, #1
 8000c48:	2000      	movs	r0, #0
 8000c4a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8000c4e:	e749      	b.n	8000ae4 <HAL_ETH_Init+0x110>
 8000c50:	4620      	mov	r0, r4
 8000c52:	2101      	movs	r1, #1
 8000c54:	f7ff fd64 	bl	8000720 <ETH_MACDMAConfig>
 8000c58:	2201      	movs	r2, #1
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	2003      	movs	r0, #3
 8000c5e:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8000c62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000c66:	e73d      	b.n	8000ae4 <HAL_ETH_Init+0x110>
 8000c68:	f04f 0901 	mov.w	r9, #1
 8000c6c:	461e      	mov	r6, r3
 8000c6e:	f04f 0a82 	mov.w	sl, #130	; 0x82
 8000c72:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 8000c76:	f7ff fce3 	bl	8000640 <HAL_GetTick>
 8000c7a:	4680      	mov	r8, r0
 8000c7c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8000c80:	2b82      	cmp	r3, #130	; 0x82
 8000c82:	d033      	beq.n	8000cec <HAL_ETH_Init+0x318>
 8000c84:	6821      	ldr	r1, [r4, #0]
 8000c86:	f884 a044 	strb.w	sl, [r4, #68]	; 0x44
 8000c8a:	8a23      	ldrh	r3, [r4, #16]
 8000c8c:	690a      	ldr	r2, [r1, #16]
 8000c8e:	02db      	lsls	r3, r3, #11
 8000c90:	f002 021c 	and.w	r2, r2, #28
 8000c94:	b29b      	uxth	r3, r3
 8000c96:	f042 0241 	orr.w	r2, r2, #65	; 0x41
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	610b      	str	r3, [r1, #16]
 8000c9e:	f7ff fccf 	bl	8000640 <HAL_GetTick>
 8000ca2:	4607      	mov	r7, r0
 8000ca4:	e018      	b.n	8000cd8 <HAL_ETH_Init+0x304>
 8000ca6:	bf00      	nop
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	40013800 	.word	0x40013800
 8000cb0:	feced300 	.word	0xfeced300
 8000cb4:	00e4e1bf 	.word	0x00e4e1bf
 8000cb8:	fde9f140 	.word	0xfde9f140
 8000cbc:	017d783f 	.word	0x017d783f
 8000cc0:	fc6c7900 	.word	0xfc6c7900
 8000cc4:	026259ff 	.word	0x026259ff
 8000cc8:	fa0a1f00 	.word	0xfa0a1f00
 8000ccc:	02faf07f 	.word	0x02faf07f
 8000cd0:	6823      	ldr	r3, [r4, #0]
 8000cd2:	691a      	ldr	r2, [r3, #16]
 8000cd4:	07d0      	lsls	r0, r2, #31
 8000cd6:	d537      	bpl.n	8000d48 <HAL_ETH_Init+0x374>
 8000cd8:	f7ff fcb2 	bl	8000640 <HAL_GetTick>
 8000cdc:	1bc0      	subs	r0, r0, r7
 8000cde:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000ce2:	d3f5      	bcc.n	8000cd0 <HAL_ETH_Init+0x2fc>
 8000ce4:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 8000ce8:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
 8000cec:	f7ff fca8 	bl	8000640 <HAL_GetTick>
 8000cf0:	f241 3388 	movw	r3, #5000	; 0x1388
 8000cf4:	eba0 0008 	sub.w	r0, r0, r8
 8000cf8:	4298      	cmp	r0, r3
 8000cfa:	d8a9      	bhi.n	8000c50 <HAL_ETH_Init+0x27c>
 8000cfc:	06a9      	lsls	r1, r5, #26
 8000cfe:	d5bd      	bpl.n	8000c7c <HAL_ETH_Init+0x2a8>
 8000d00:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8000d04:	2b82      	cmp	r3, #130	; 0x82
 8000d06:	f43f aed8 	beq.w	8000aba <HAL_ETH_Init+0xe6>
 8000d0a:	6820      	ldr	r0, [r4, #0]
 8000d0c:	2182      	movs	r1, #130	; 0x82
 8000d0e:	8a23      	ldrh	r3, [r4, #16]
 8000d10:	f240 72c1 	movw	r2, #1985	; 0x7c1
 8000d14:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8000d18:	6901      	ldr	r1, [r0, #16]
 8000d1a:	02db      	lsls	r3, r3, #11
 8000d1c:	f001 011c 	and.w	r1, r1, #28
 8000d20:	b29b      	uxth	r3, r3
 8000d22:	430a      	orrs	r2, r1
 8000d24:	4313      	orrs	r3, r2
 8000d26:	6103      	str	r3, [r0, #16]
 8000d28:	f7ff fc8a 	bl	8000640 <HAL_GetTick>
 8000d2c:	4605      	mov	r5, r0
 8000d2e:	e004      	b.n	8000d3a <HAL_ETH_Init+0x366>
 8000d30:	6822      	ldr	r2, [r4, #0]
 8000d32:	6913      	ldr	r3, [r2, #16]
 8000d34:	f013 0301 	ands.w	r3, r3, #1
 8000d38:	d00b      	beq.n	8000d52 <HAL_ETH_Init+0x37e>
 8000d3a:	f7ff fc81 	bl	8000640 <HAL_GetTick>
 8000d3e:	1b40      	subs	r0, r0, r5
 8000d40:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000d44:	d3f4      	bcc.n	8000d30 <HAL_ETH_Init+0x35c>
 8000d46:	e6b2      	b.n	8000aae <HAL_ETH_Init+0xda>
 8000d48:	695d      	ldr	r5, [r3, #20]
 8000d4a:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 8000d4e:	b2ad      	uxth	r5, r5
 8000d50:	e7cc      	b.n	8000cec <HAL_ETH_Init+0x318>
 8000d52:	6952      	ldr	r2, [r2, #20]
 8000d54:	2001      	movs	r0, #1
 8000d56:	f012 0110 	ands.w	r1, r2, #16
 8000d5a:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
 8000d5e:	bf18      	it	ne
 8000d60:	f44f 6100 	movne.w	r1, #2048	; 0x800
 8000d64:	0752      	lsls	r2, r2, #29
 8000d66:	bf58      	it	pl
 8000d68:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
 8000d6c:	60e1      	str	r1, [r4, #12]
 8000d6e:	60a3      	str	r3, [r4, #8]
 8000d70:	e765      	b.n	8000c3e <HAL_ETH_Init+0x26a>
 8000d72:	bf00      	nop

08000d74 <HAL_ETH_TransmitFrame>:
 8000d74:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d065      	beq.n	8000e48 <HAL_ETH_TransmitFrame+0xd4>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	2302      	movs	r3, #2
 8000d80:	2001      	movs	r0, #1
 8000d82:	f882 3044 	strb.w	r3, [r2, #68]	; 0x44
 8000d86:	f882 0045 	strb.w	r0, [r2, #69]	; 0x45
 8000d8a:	2900      	cmp	r1, #0
 8000d8c:	d033      	beq.n	8000df6 <HAL_ETH_TransmitFrame+0x82>
 8000d8e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8000d90:	b4f0      	push	{r4, r5, r6, r7}
 8000d92:	681c      	ldr	r4, [r3, #0]
 8000d94:	2c00      	cmp	r4, #0
 8000d96:	db59      	blt.n	8000e4c <HAL_ETH_TransmitFrame+0xd8>
 8000d98:	f240 50f4 	movw	r0, #1524	; 0x5f4
 8000d9c:	4281      	cmp	r1, r0
 8000d9e:	d931      	bls.n	8000e04 <HAL_ETH_TransmitFrame+0x90>
 8000da0:	4d31      	ldr	r5, [pc, #196]	; (8000e68 <HAL_ETH_TransmitFrame+0xf4>)
 8000da2:	fba5 4501 	umull	r4, r5, r5, r1
 8000da6:	0aad      	lsrs	r5, r5, #10
 8000da8:	fb00 1015 	mls	r0, r0, r5, r1
 8000dac:	b340      	cbz	r0, 8000e00 <HAL_ETH_TransmitFrame+0x8c>
 8000dae:	3501      	adds	r5, #1
 8000db0:	f201 51f4 	addw	r1, r1, #1524	; 0x5f4
 8000db4:	4c2d      	ldr	r4, [pc, #180]	; (8000e6c <HAL_ETH_TransmitFrame+0xf8>)
 8000db6:	2000      	movs	r0, #0
 8000db8:	f240 56f4 	movw	r6, #1524	; 0x5f4
 8000dbc:	fb04 1105 	mla	r1, r4, r5, r1
 8000dc0:	1e6f      	subs	r7, r5, #1
 8000dc2:	f3c1 010c 	ubfx	r1, r1, #0, #13
 8000dc6:	681c      	ldr	r4, [r3, #0]
 8000dc8:	f024 5440 	bic.w	r4, r4, #805306368	; 0x30000000
 8000dcc:	601c      	str	r4, [r3, #0]
 8000dce:	2800      	cmp	r0, #0
 8000dd0:	d044      	beq.n	8000e5c <HAL_ETH_TransmitFrame+0xe8>
 8000dd2:	4287      	cmp	r7, r0
 8000dd4:	605e      	str	r6, [r3, #4]
 8000dd6:	d104      	bne.n	8000de2 <HAL_ETH_TransmitFrame+0x6e>
 8000dd8:	681c      	ldr	r4, [r3, #0]
 8000dda:	6059      	str	r1, [r3, #4]
 8000ddc:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 8000de0:	601c      	str	r4, [r3, #0]
 8000de2:	681c      	ldr	r4, [r3, #0]
 8000de4:	3001      	adds	r0, #1
 8000de6:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8000dea:	42a8      	cmp	r0, r5
 8000dec:	601c      	str	r4, [r3, #0]
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	d1e9      	bne.n	8000dc6 <HAL_ETH_TransmitFrame+0x52>
 8000df2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000df4:	e013      	b.n	8000e1e <HAL_ETH_TransmitFrame+0xaa>
 8000df6:	f882 0044 	strb.w	r0, [r2, #68]	; 0x44
 8000dfa:	f882 1045 	strb.w	r1, [r2, #69]	; 0x45
 8000dfe:	4770      	bx	lr
 8000e00:	2d01      	cmp	r5, #1
 8000e02:	d1d5      	bne.n	8000db0 <HAL_ETH_TransmitFrame+0x3c>
 8000e04:	6818      	ldr	r0, [r3, #0]
 8000e06:	f3c1 010c 	ubfx	r1, r1, #0, #13
 8000e0a:	68dc      	ldr	r4, [r3, #12]
 8000e0c:	f040 5040 	orr.w	r0, r0, #805306368	; 0x30000000
 8000e10:	6059      	str	r1, [r3, #4]
 8000e12:	6018      	str	r0, [r3, #0]
 8000e14:	6819      	ldr	r1, [r3, #0]
 8000e16:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8000e1a:	6019      	str	r1, [r3, #0]
 8000e1c:	62d4      	str	r4, [r2, #44]	; 0x2c
 8000e1e:	6813      	ldr	r3, [r2, #0]
 8000e20:	f241 0114 	movw	r1, #4116	; 0x1014
 8000e24:	5858      	ldr	r0, [r3, r1]
 8000e26:	0740      	lsls	r0, r0, #29
 8000e28:	d505      	bpl.n	8000e36 <HAL_ETH_TransmitFrame+0xc2>
 8000e2a:	2504      	movs	r5, #4
 8000e2c:	f241 0004 	movw	r0, #4100	; 0x1004
 8000e30:	2400      	movs	r4, #0
 8000e32:	505d      	str	r5, [r3, r1]
 8000e34:	501c      	str	r4, [r3, r0]
 8000e36:	2300      	movs	r3, #0
 8000e38:	2101      	movs	r1, #1
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
 8000e40:	f882 3045 	strb.w	r3, [r2, #69]	; 0x45
 8000e44:	bcf0      	pop	{r4, r5, r6, r7}
 8000e46:	4770      	bx	lr
 8000e48:	2002      	movs	r0, #2
 8000e4a:	4770      	bx	lr
 8000e4c:	2112      	movs	r1, #18
 8000e4e:	2300      	movs	r3, #0
 8000e50:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
 8000e54:	f882 3045 	strb.w	r3, [r2, #69]	; 0x45
 8000e58:	bcf0      	pop	{r4, r5, r6, r7}
 8000e5a:	4770      	bx	lr
 8000e5c:	681c      	ldr	r4, [r3, #0]
 8000e5e:	605e      	str	r6, [r3, #4]
 8000e60:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8000e64:	601c      	str	r4, [r3, #0]
 8000e66:	e7bc      	b.n	8000de2 <HAL_ETH_TransmitFrame+0x6e>
 8000e68:	ac02b00b 	.word	0xac02b00b
 8000e6c:	fffffa0c 	.word	0xfffffa0c

08000e70 <HAL_ETH_GetReceivedFrame_IT>:
 8000e70:	f890 2045 	ldrb.w	r2, [r0, #69]	; 0x45
 8000e74:	2a01      	cmp	r2, #1
 8000e76:	d032      	beq.n	8000ede <HAL_ETH_GetReceivedFrame_IT+0x6e>
 8000e78:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2101      	movs	r1, #1
 8000e7e:	2000      	movs	r0, #0
 8000e80:	b470      	push	{r4, r5, r6}
 8000e82:	2402      	movs	r4, #2
 8000e84:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
 8000e88:	460d      	mov	r5, r1
 8000e8a:	f883 4044 	strb.w	r4, [r3, #68]	; 0x44
 8000e8e:	6811      	ldr	r1, [r2, #0]
 8000e90:	2900      	cmp	r1, #0
 8000e92:	db17      	blt.n	8000ec4 <HAL_ETH_GetReceivedFrame_IT+0x54>
 8000e94:	2804      	cmp	r0, #4
 8000e96:	f100 0001 	add.w	r0, r0, #1
 8000e9a:	d013      	beq.n	8000ec4 <HAL_ETH_GetReceivedFrame_IT+0x54>
 8000e9c:	6811      	ldr	r1, [r2, #0]
 8000e9e:	68d4      	ldr	r4, [r2, #12]
 8000ea0:	f401 7140 	and.w	r1, r1, #768	; 0x300
 8000ea4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8000ea8:	d014      	beq.n	8000ed4 <HAL_ETH_GetReceivedFrame_IT+0x64>
 8000eaa:	6816      	ldr	r6, [r2, #0]
 8000eac:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000eae:	f416 7f40 	tst.w	r6, #768	; 0x300
 8000eb2:	f101 0101 	add.w	r1, r1, #1
 8000eb6:	d114      	bne.n	8000ee2 <HAL_ETH_GetReceivedFrame_IT+0x72>
 8000eb8:	4622      	mov	r2, r4
 8000eba:	6399      	str	r1, [r3, #56]	; 0x38
 8000ebc:	629c      	str	r4, [r3, #40]	; 0x28
 8000ebe:	6811      	ldr	r1, [r2, #0]
 8000ec0:	2900      	cmp	r1, #0
 8000ec2:	dae7      	bge.n	8000e94 <HAL_ETH_GetReceivedFrame_IT+0x24>
 8000ec4:	2001      	movs	r0, #1
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	f883 0044 	strb.w	r0, [r3, #68]	; 0x44
 8000ecc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000ed0:	bc70      	pop	{r4, r5, r6}
 8000ed2:	4770      	bx	lr
 8000ed4:	631a      	str	r2, [r3, #48]	; 0x30
 8000ed6:	4622      	mov	r2, r4
 8000ed8:	639d      	str	r5, [r3, #56]	; 0x38
 8000eda:	629c      	str	r4, [r3, #40]	; 0x28
 8000edc:	e7ef      	b.n	8000ebe <HAL_ETH_GetReceivedFrame_IT+0x4e>
 8000ede:	2002      	movs	r0, #2
 8000ee0:	4770      	bx	lr
 8000ee2:	2901      	cmp	r1, #1
 8000ee4:	e9c3 210d 	strd	r2, r1, [r3, #52]	; 0x34
 8000ee8:	d010      	beq.n	8000f0c <HAL_ETH_GetReceivedFrame_IT+0x9c>
 8000eea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000eec:	6812      	ldr	r2, [r2, #0]
 8000eee:	2501      	movs	r5, #1
 8000ef0:	6888      	ldr	r0, [r1, #8]
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	f3c2 420d 	ubfx	r2, r2, #16, #14
 8000ef8:	629c      	str	r4, [r3, #40]	; 0x28
 8000efa:	6418      	str	r0, [r3, #64]	; 0x40
 8000efc:	4608      	mov	r0, r1
 8000efe:	3a04      	subs	r2, #4
 8000f00:	f883 5044 	strb.w	r5, [r3, #68]	; 0x44
 8000f04:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
 8000f08:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f0a:	e7e1      	b.n	8000ed0 <HAL_ETH_GetReceivedFrame_IT+0x60>
 8000f0c:	4611      	mov	r1, r2
 8000f0e:	631a      	str	r2, [r3, #48]	; 0x30
 8000f10:	e7ec      	b.n	8000eec <HAL_ETH_GetReceivedFrame_IT+0x7c>
 8000f12:	bf00      	nop

08000f14 <HAL_ETH_TxCpltCallback>:
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop

08000f18 <HAL_ETH_ErrorCallback>:
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop

08000f1c <HAL_ETH_IRQHandler>:
 8000f1c:	b570      	push	{r4, r5, r6, lr}
 8000f1e:	6803      	ldr	r3, [r0, #0]
 8000f20:	f241 0614 	movw	r6, #4116	; 0x1014
 8000f24:	4604      	mov	r4, r0
 8000f26:	599d      	ldr	r5, [r3, r6]
 8000f28:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8000f2c:	d123      	bne.n	8000f76 <HAL_ETH_IRQHandler+0x5a>
 8000f2e:	599a      	ldr	r2, [r3, r6]
 8000f30:	07d2      	lsls	r2, r2, #31
 8000f32:	d416      	bmi.n	8000f62 <HAL_ETH_IRQHandler+0x46>
 8000f34:	f241 0514 	movw	r5, #4116	; 0x1014
 8000f38:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f3c:	515a      	str	r2, [r3, r5]
 8000f3e:	595b      	ldr	r3, [r3, r5]
 8000f40:	041b      	lsls	r3, r3, #16
 8000f42:	d400      	bmi.n	8000f46 <HAL_ETH_IRQHandler+0x2a>
 8000f44:	bd70      	pop	{r4, r5, r6, pc}
 8000f46:	4620      	mov	r0, r4
 8000f48:	f7ff ffe6 	bl	8000f18 <HAL_ETH_ErrorCallback>
 8000f4c:	6821      	ldr	r1, [r4, #0]
 8000f4e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000f52:	2201      	movs	r2, #1
 8000f54:	2300      	movs	r3, #0
 8000f56:	5148      	str	r0, [r1, r5]
 8000f58:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8000f5c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000f60:	bd70      	pop	{r4, r5, r6, pc}
 8000f62:	f7ff ffd7 	bl	8000f14 <HAL_ETH_TxCpltCallback>
 8000f66:	2201      	movs	r2, #1
 8000f68:	6823      	ldr	r3, [r4, #0]
 8000f6a:	519a      	str	r2, [r3, r6]
 8000f6c:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8000f70:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8000f74:	e7de      	b.n	8000f34 <HAL_ETH_IRQHandler+0x18>
 8000f76:	f008 ff0d 	bl	8009d94 <HAL_ETH_RxCpltCallback>
 8000f7a:	6823      	ldr	r3, [r4, #0]
 8000f7c:	2040      	movs	r0, #64	; 0x40
 8000f7e:	2101      	movs	r1, #1
 8000f80:	2200      	movs	r2, #0
 8000f82:	5198      	str	r0, [r3, r6]
 8000f84:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8000f88:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8000f8c:	e7d2      	b.n	8000f34 <HAL_ETH_IRQHandler+0x18>
 8000f8e:	bf00      	nop

08000f90 <HAL_ETH_ReadPHYRegister>:
 8000f90:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000f94:	2b82      	cmp	r3, #130	; 0x82
 8000f96:	d033      	beq.n	8001000 <HAL_ETH_ReadPHYRegister+0x70>
 8000f98:	018b      	lsls	r3, r1, #6
 8000f9a:	b570      	push	{r4, r5, r6, lr}
 8000f9c:	4604      	mov	r4, r0
 8000f9e:	4615      	mov	r5, r2
 8000fa0:	6800      	ldr	r0, [r0, #0]
 8000fa2:	2282      	movs	r2, #130	; 0x82
 8000fa4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8000fa8:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8000fac:	8a22      	ldrh	r2, [r4, #16]
 8000fae:	f043 0301 	orr.w	r3, r3, #1
 8000fb2:	6901      	ldr	r1, [r0, #16]
 8000fb4:	02d2      	lsls	r2, r2, #11
 8000fb6:	f001 011c 	and.w	r1, r1, #28
 8000fba:	b292      	uxth	r2, r2
 8000fbc:	430b      	orrs	r3, r1
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	6103      	str	r3, [r0, #16]
 8000fc2:	f7ff fb3d 	bl	8000640 <HAL_GetTick>
 8000fc6:	4606      	mov	r6, r0
 8000fc8:	e004      	b.n	8000fd4 <HAL_ETH_ReadPHYRegister+0x44>
 8000fca:	6822      	ldr	r2, [r4, #0]
 8000fcc:	6913      	ldr	r3, [r2, #16]
 8000fce:	f013 0301 	ands.w	r3, r3, #1
 8000fd2:	d00d      	beq.n	8000ff0 <HAL_ETH_ReadPHYRegister+0x60>
 8000fd4:	f7ff fb34 	bl	8000640 <HAL_GetTick>
 8000fd8:	1b80      	subs	r0, r0, r6
 8000fda:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000fde:	d3f4      	bcc.n	8000fca <HAL_ETH_ReadPHYRegister+0x3a>
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	2003      	movs	r0, #3
 8000fe6:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8000fea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000fee:	bd70      	pop	{r4, r5, r6, pc}
 8000ff0:	6952      	ldr	r2, [r2, #20]
 8000ff2:	2101      	movs	r1, #1
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	b292      	uxth	r2, r2
 8000ff8:	602a      	str	r2, [r5, #0]
 8000ffa:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8000ffe:	bd70      	pop	{r4, r5, r6, pc}
 8001000:	2002      	movs	r0, #2
 8001002:	4770      	bx	lr

08001004 <HAL_ETH_WritePHYRegister>:
 8001004:	b538      	push	{r3, r4, r5, lr}
 8001006:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800100a:	2b42      	cmp	r3, #66	; 0x42
 800100c:	d030      	beq.n	8001070 <HAL_ETH_WritePHYRegister+0x6c>
 800100e:	4604      	mov	r4, r0
 8001010:	018b      	lsls	r3, r1, #6
 8001012:	6800      	ldr	r0, [r0, #0]
 8001014:	2542      	movs	r5, #66	; 0x42
 8001016:	b291      	uxth	r1, r2
 8001018:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800101c:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
 8001020:	8a22      	ldrh	r2, [r4, #16]
 8001022:	f043 0303 	orr.w	r3, r3, #3
 8001026:	6905      	ldr	r5, [r0, #16]
 8001028:	02d2      	lsls	r2, r2, #11
 800102a:	6141      	str	r1, [r0, #20]
 800102c:	f005 051c 	and.w	r5, r5, #28
 8001030:	b292      	uxth	r2, r2
 8001032:	432b      	orrs	r3, r5
 8001034:	4313      	orrs	r3, r2
 8001036:	6103      	str	r3, [r0, #16]
 8001038:	f7ff fb02 	bl	8000640 <HAL_GetTick>
 800103c:	4605      	mov	r5, r0
 800103e:	e004      	b.n	800104a <HAL_ETH_WritePHYRegister+0x46>
 8001040:	6823      	ldr	r3, [r4, #0]
 8001042:	691b      	ldr	r3, [r3, #16]
 8001044:	f013 0301 	ands.w	r3, r3, #1
 8001048:	d00d      	beq.n	8001066 <HAL_ETH_WritePHYRegister+0x62>
 800104a:	f7ff faf9 	bl	8000640 <HAL_GetTick>
 800104e:	1b40      	subs	r0, r0, r5
 8001050:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8001054:	d3f4      	bcc.n	8001040 <HAL_ETH_WritePHYRegister+0x3c>
 8001056:	2201      	movs	r2, #1
 8001058:	2300      	movs	r3, #0
 800105a:	2003      	movs	r0, #3
 800105c:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 8001060:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001064:	bd38      	pop	{r3, r4, r5, pc}
 8001066:	2201      	movs	r2, #1
 8001068:	4618      	mov	r0, r3
 800106a:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
 800106e:	bd38      	pop	{r3, r4, r5, pc}
 8001070:	2002      	movs	r0, #2
 8001072:	bd38      	pop	{r3, r4, r5, pc}

08001074 <HAL_ETH_Start>:
 8001074:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8001078:	2b01      	cmp	r3, #1
 800107a:	d042      	beq.n	8001102 <HAL_ETH_Start+0x8e>
 800107c:	6803      	ldr	r3, [r0, #0]
 800107e:	2202      	movs	r2, #2
 8001080:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001082:	2600      	movs	r6, #0
 8001084:	b085      	sub	sp, #20
 8001086:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 800108a:	4604      	mov	r4, r0
 800108c:	9603      	str	r6, [sp, #12]
 800108e:	2701      	movs	r7, #1
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	f241 0518 	movw	r5, #4120	; 0x1018
 8001096:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800109a:	4638      	mov	r0, r7
 800109c:	f042 0208 	orr.w	r2, r2, #8
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	9303      	str	r3, [sp, #12]
 80010a6:	f7ff fad1 	bl	800064c <HAL_Delay>
 80010aa:	9a03      	ldr	r2, [sp, #12]
 80010ac:	4638      	mov	r0, r7
 80010ae:	6823      	ldr	r3, [r4, #0]
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	9602      	str	r6, [sp, #8]
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	f042 0204 	orr.w	r2, r2, #4
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	9302      	str	r3, [sp, #8]
 80010c0:	f7ff fac4 	bl	800064c <HAL_Delay>
 80010c4:	9a02      	ldr	r2, [sp, #8]
 80010c6:	4638      	mov	r0, r7
 80010c8:	6823      	ldr	r3, [r4, #0]
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	9601      	str	r6, [sp, #4]
 80010ce:	595a      	ldr	r2, [r3, r5]
 80010d0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80010d4:	515a      	str	r2, [r3, r5]
 80010d6:	595b      	ldr	r3, [r3, r5]
 80010d8:	9301      	str	r3, [sp, #4]
 80010da:	f7ff fab7 	bl	800064c <HAL_Delay>
 80010de:	9a01      	ldr	r2, [sp, #4]
 80010e0:	4630      	mov	r0, r6
 80010e2:	6823      	ldr	r3, [r4, #0]
 80010e4:	515a      	str	r2, [r3, r5]
 80010e6:	595a      	ldr	r2, [r3, r5]
 80010e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80010ec:	515a      	str	r2, [r3, r5]
 80010ee:	595a      	ldr	r2, [r3, r5]
 80010f0:	f042 0202 	orr.w	r2, r2, #2
 80010f4:	515a      	str	r2, [r3, r5]
 80010f6:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 80010fa:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
 80010fe:	b005      	add	sp, #20
 8001100:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001102:	2002      	movs	r0, #2
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop

08001108 <HAL_GPIO_Init>:
 8001108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800110c:	f8df c22c 	ldr.w	ip, [pc, #556]	; 800133c <HAL_GPIO_Init+0x234>
 8001110:	b083      	sub	sp, #12
 8001112:	468e      	mov	lr, r1
 8001114:	2500      	movs	r5, #0
 8001116:	f8df 9228 	ldr.w	r9, [pc, #552]	; 8001340 <HAL_GPIO_Init+0x238>
 800111a:	f8d1 8000 	ldr.w	r8, [r1]
 800111e:	e003      	b.n	8001128 <HAL_GPIO_Init+0x20>
 8001120:	3501      	adds	r5, #1
 8001122:	2d10      	cmp	r5, #16
 8001124:	f000 80b6 	beq.w	8001294 <HAL_GPIO_Init+0x18c>
 8001128:	2301      	movs	r3, #1
 800112a:	40ab      	lsls	r3, r5
 800112c:	ea08 0103 	and.w	r1, r8, r3
 8001130:	428b      	cmp	r3, r1
 8001132:	d1f5      	bne.n	8001120 <HAL_GPIO_Init+0x18>
 8001134:	f8de 4004 	ldr.w	r4, [lr, #4]
 8001138:	f024 0710 	bic.w	r7, r4, #16
 800113c:	2f02      	cmp	r7, #2
 800113e:	f040 80ac 	bne.w	800129a <HAL_GPIO_Init+0x192>
 8001142:	08ef      	lsrs	r7, r5, #3
 8001144:	f005 0a07 	and.w	sl, r5, #7
 8001148:	f04f 0b0f 	mov.w	fp, #15
 800114c:	f8de 2010 	ldr.w	r2, [lr, #16]
 8001150:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8001154:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8001158:	6a3e      	ldr	r6, [r7, #32]
 800115a:	fa0b fb0a 	lsl.w	fp, fp, sl
 800115e:	fa02 f20a 	lsl.w	r2, r2, sl
 8001162:	ea4f 0a45 	mov.w	sl, r5, lsl #1
 8001166:	ea26 060b 	bic.w	r6, r6, fp
 800116a:	f04f 0b03 	mov.w	fp, #3
 800116e:	4332      	orrs	r2, r6
 8001170:	fa0b fb0a 	lsl.w	fp, fp, sl
 8001174:	f004 0603 	and.w	r6, r4, #3
 8001178:	623a      	str	r2, [r7, #32]
 800117a:	ea6f 020b 	mvn.w	r2, fp
 800117e:	6807      	ldr	r7, [r0, #0]
 8001180:	fa06 f60a 	lsl.w	r6, r6, sl
 8001184:	4017      	ands	r7, r2
 8001186:	433e      	orrs	r6, r7
 8001188:	6006      	str	r6, [r0, #0]
 800118a:	6886      	ldr	r6, [r0, #8]
 800118c:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8001190:	ea06 0b02 	and.w	fp, r6, r2
 8001194:	f8de 600c 	ldr.w	r6, [lr, #12]
 8001198:	40af      	lsls	r7, r5
 800119a:	fa06 f60a 	lsl.w	r6, r6, sl
 800119e:	ea46 060b 	orr.w	r6, r6, fp
 80011a2:	6086      	str	r6, [r0, #8]
 80011a4:	6846      	ldr	r6, [r0, #4]
 80011a6:	ea26 0303 	bic.w	r3, r6, r3
 80011aa:	431f      	orrs	r7, r3
 80011ac:	6047      	str	r7, [r0, #4]
 80011ae:	68c6      	ldr	r6, [r0, #12]
 80011b0:	00e7      	lsls	r7, r4, #3
 80011b2:	f8de 3008 	ldr.w	r3, [lr, #8]
 80011b6:	ea02 0206 	and.w	r2, r2, r6
 80011ba:	fa03 f30a 	lsl.w	r3, r3, sl
 80011be:	ea43 0302 	orr.w	r3, r3, r2
 80011c2:	60c3      	str	r3, [r0, #12]
 80011c4:	d5ac      	bpl.n	8001120 <HAL_GPIO_Init+0x18>
 80011c6:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 80011ca:	f025 0703 	bic.w	r7, r5, #3
 80011ce:	f005 0303 	and.w	r3, r5, #3
 80011d2:	220f      	movs	r2, #15
 80011d4:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 80011d8:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 80011e2:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 80011e6:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 80011ea:	fa02 fa03 	lsl.w	sl, r2, r3
 80011ee:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 80011f2:	9601      	str	r6, [sp, #4]
 80011f4:	4e48      	ldr	r6, [pc, #288]	; (8001318 <HAL_GPIO_Init+0x210>)
 80011f6:	9a01      	ldr	r2, [sp, #4]
 80011f8:	42b0      	cmp	r0, r6
 80011fa:	68ba      	ldr	r2, [r7, #8]
 80011fc:	ea22 020a 	bic.w	r2, r2, sl
 8001200:	d020      	beq.n	8001244 <HAL_GPIO_Init+0x13c>
 8001202:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001206:	42b0      	cmp	r0, r6
 8001208:	d05e      	beq.n	80012c8 <HAL_GPIO_Init+0x1c0>
 800120a:	4e44      	ldr	r6, [pc, #272]	; (800131c <HAL_GPIO_Init+0x214>)
 800120c:	42b0      	cmp	r0, r6
 800120e:	d060      	beq.n	80012d2 <HAL_GPIO_Init+0x1ca>
 8001210:	4e43      	ldr	r6, [pc, #268]	; (8001320 <HAL_GPIO_Init+0x218>)
 8001212:	42b0      	cmp	r0, r6
 8001214:	d062      	beq.n	80012dc <HAL_GPIO_Init+0x1d4>
 8001216:	4e43      	ldr	r6, [pc, #268]	; (8001324 <HAL_GPIO_Init+0x21c>)
 8001218:	42b0      	cmp	r0, r6
 800121a:	d064      	beq.n	80012e6 <HAL_GPIO_Init+0x1de>
 800121c:	4e42      	ldr	r6, [pc, #264]	; (8001328 <HAL_GPIO_Init+0x220>)
 800121e:	42b0      	cmp	r0, r6
 8001220:	d06b      	beq.n	80012fa <HAL_GPIO_Init+0x1f2>
 8001222:	4e42      	ldr	r6, [pc, #264]	; (800132c <HAL_GPIO_Init+0x224>)
 8001224:	42b0      	cmp	r0, r6
 8001226:	d06d      	beq.n	8001304 <HAL_GPIO_Init+0x1fc>
 8001228:	4e41      	ldr	r6, [pc, #260]	; (8001330 <HAL_GPIO_Init+0x228>)
 800122a:	42b0      	cmp	r0, r6
 800122c:	d060      	beq.n	80012f0 <HAL_GPIO_Init+0x1e8>
 800122e:	4e41      	ldr	r6, [pc, #260]	; (8001334 <HAL_GPIO_Init+0x22c>)
 8001230:	42b0      	cmp	r0, r6
 8001232:	d06c      	beq.n	800130e <HAL_GPIO_Init+0x206>
 8001234:	4e40      	ldr	r6, [pc, #256]	; (8001338 <HAL_GPIO_Init+0x230>)
 8001236:	42b0      	cmp	r0, r6
 8001238:	bf0c      	ite	eq
 800123a:	2609      	moveq	r6, #9
 800123c:	260a      	movne	r6, #10
 800123e:	fa06 f303 	lsl.w	r3, r6, r3
 8001242:	431a      	orrs	r2, r3
 8001244:	60ba      	str	r2, [r7, #8]
 8001246:	03e6      	lsls	r6, r4, #15
 8001248:	f8dc 3000 	ldr.w	r3, [ip]
 800124c:	ea6f 0201 	mvn.w	r2, r1
 8001250:	f105 0501 	add.w	r5, r5, #1
 8001254:	bf54      	ite	pl
 8001256:	4013      	andpl	r3, r2
 8001258:	430b      	orrmi	r3, r1
 800125a:	03a7      	lsls	r7, r4, #14
 800125c:	f8cc 3000 	str.w	r3, [ip]
 8001260:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8001264:	bf54      	ite	pl
 8001266:	4013      	andpl	r3, r2
 8001268:	430b      	orrmi	r3, r1
 800126a:	02e6      	lsls	r6, r4, #11
 800126c:	f8cc 3004 	str.w	r3, [ip, #4]
 8001270:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8001274:	bf54      	ite	pl
 8001276:	4013      	andpl	r3, r2
 8001278:	430b      	orrmi	r3, r1
 800127a:	02a4      	lsls	r4, r4, #10
 800127c:	f8cc 3008 	str.w	r3, [ip, #8]
 8001280:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8001284:	bf54      	ite	pl
 8001286:	4013      	andpl	r3, r2
 8001288:	430b      	orrmi	r3, r1
 800128a:	2d10      	cmp	r5, #16
 800128c:	f8cc 300c 	str.w	r3, [ip, #12]
 8001290:	f47f af4a 	bne.w	8001128 <HAL_GPIO_Init+0x20>
 8001294:	b003      	add	sp, #12
 8001296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800129a:	ea4f 0a45 	mov.w	sl, r5, lsl #1
 800129e:	2203      	movs	r2, #3
 80012a0:	f8d0 b000 	ldr.w	fp, [r0]
 80012a4:	3f01      	subs	r7, #1
 80012a6:	ea04 0602 	and.w	r6, r4, r2
 80012aa:	fa02 f20a 	lsl.w	r2, r2, sl
 80012ae:	2f01      	cmp	r7, #1
 80012b0:	ea6f 0202 	mvn.w	r2, r2
 80012b4:	fa06 f60a 	lsl.w	r6, r6, sl
 80012b8:	ea02 0b0b 	and.w	fp, r2, fp
 80012bc:	ea46 060b 	orr.w	r6, r6, fp
 80012c0:	6006      	str	r6, [r0, #0]
 80012c2:	f63f af74 	bhi.w	80011ae <HAL_GPIO_Init+0xa6>
 80012c6:	e760      	b.n	800118a <HAL_GPIO_Init+0x82>
 80012c8:	2601      	movs	r6, #1
 80012ca:	fa06 f303 	lsl.w	r3, r6, r3
 80012ce:	431a      	orrs	r2, r3
 80012d0:	e7b8      	b.n	8001244 <HAL_GPIO_Init+0x13c>
 80012d2:	2602      	movs	r6, #2
 80012d4:	fa06 f303 	lsl.w	r3, r6, r3
 80012d8:	431a      	orrs	r2, r3
 80012da:	e7b3      	b.n	8001244 <HAL_GPIO_Init+0x13c>
 80012dc:	2603      	movs	r6, #3
 80012de:	fa06 f303 	lsl.w	r3, r6, r3
 80012e2:	431a      	orrs	r2, r3
 80012e4:	e7ae      	b.n	8001244 <HAL_GPIO_Init+0x13c>
 80012e6:	2604      	movs	r6, #4
 80012e8:	fa06 f303 	lsl.w	r3, r6, r3
 80012ec:	431a      	orrs	r2, r3
 80012ee:	e7a9      	b.n	8001244 <HAL_GPIO_Init+0x13c>
 80012f0:	2607      	movs	r6, #7
 80012f2:	fa06 f303 	lsl.w	r3, r6, r3
 80012f6:	431a      	orrs	r2, r3
 80012f8:	e7a4      	b.n	8001244 <HAL_GPIO_Init+0x13c>
 80012fa:	2605      	movs	r6, #5
 80012fc:	fa06 f303 	lsl.w	r3, r6, r3
 8001300:	431a      	orrs	r2, r3
 8001302:	e79f      	b.n	8001244 <HAL_GPIO_Init+0x13c>
 8001304:	2606      	movs	r6, #6
 8001306:	fa06 f303 	lsl.w	r3, r6, r3
 800130a:	431a      	orrs	r2, r3
 800130c:	e79a      	b.n	8001244 <HAL_GPIO_Init+0x13c>
 800130e:	2608      	movs	r6, #8
 8001310:	fa06 f303 	lsl.w	r3, r6, r3
 8001314:	431a      	orrs	r2, r3
 8001316:	e795      	b.n	8001244 <HAL_GPIO_Init+0x13c>
 8001318:	40020000 	.word	0x40020000
 800131c:	40020800 	.word	0x40020800
 8001320:	40020c00 	.word	0x40020c00
 8001324:	40021000 	.word	0x40021000
 8001328:	40021400 	.word	0x40021400
 800132c:	40021800 	.word	0x40021800
 8001330:	40021c00 	.word	0x40021c00
 8001334:	40022000 	.word	0x40022000
 8001338:	40022400 	.word	0x40022400
 800133c:	40013c00 	.word	0x40013c00
 8001340:	40023800 	.word	0x40023800

08001344 <HAL_GPIO_WritePin>:
 8001344:	b902      	cbnz	r2, 8001348 <HAL_GPIO_WritePin+0x4>
 8001346:	0409      	lsls	r1, r1, #16
 8001348:	6181      	str	r1, [r0, #24]
 800134a:	4770      	bx	lr

0800134c <HAL_PCD_Init>:
 800134c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800134e:	b08b      	sub	sp, #44	; 0x2c
 8001350:	2800      	cmp	r0, #0
 8001352:	f000 8084 	beq.w	800145e <HAL_PCD_Init+0x112>
 8001356:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 800135a:	4604      	mov	r4, r0
 800135c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001360:	2b00      	cmp	r3, #0
 8001362:	d077      	beq.n	8001454 <HAL_PCD_Init+0x108>
 8001364:	2303      	movs	r3, #3
 8001366:	4625      	mov	r5, r4
 8001368:	6820      	ldr	r0, [r4, #0]
 800136a:	466f      	mov	r7, sp
 800136c:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
 8001370:	1d26      	adds	r6, r4, #4
 8001372:	f001 fb31 	bl	80029d8 <USB_DisableGlobalInt>
 8001376:	f855 eb10 	ldr.w	lr, [r5], #16
 800137a:	46ac      	mov	ip, r5
 800137c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001380:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8001382:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001386:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8001388:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800138c:	e887 0003 	stmia.w	r7, {r0, r1}
 8001390:	4670      	mov	r0, lr
 8001392:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001396:	f001 fab7 	bl	8002908 <USB_CoreInit>
 800139a:	4607      	mov	r7, r0
 800139c:	b130      	cbz	r0, 80013ac <HAL_PCD_Init+0x60>
 800139e:	2501      	movs	r5, #1
 80013a0:	2302      	movs	r3, #2
 80013a2:	4628      	mov	r0, r5
 80013a4:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
 80013a8:	b00b      	add	sp, #44	; 0x2c
 80013aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013ac:	4601      	mov	r1, r0
 80013ae:	6820      	ldr	r0, [r4, #0]
 80013b0:	f001 fb1a 	bl	80029e8 <USB_SetCurrentMode>
 80013b4:	6860      	ldr	r0, [r4, #4]
 80013b6:	b360      	cbz	r0, 8001412 <HAL_PCD_Init+0xc6>
 80013b8:	4639      	mov	r1, r7
 80013ba:	f04f 0c01 	mov.w	ip, #1
 80013be:	463a      	mov	r2, r7
 80013c0:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 80013c4:	1c4f      	adds	r7, r1, #1
 80013c6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80013ca:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
 80013ce:	f8a3 1042 	strh.w	r1, [r3, #66]	; 0x42
 80013d2:	b2f9      	uxtb	r1, r7
 80013d4:	f883 c03d 	strb.w	ip, [r3, #61]	; 0x3d
 80013d8:	4281      	cmp	r1, r0
 80013da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80013de:	651a      	str	r2, [r3, #80]	; 0x50
 80013e0:	e9c3 2211 	strd	r2, r2, [r3, #68]	; 0x44
 80013e4:	d3ec      	bcc.n	80013c0 <HAL_PCD_Init+0x74>
 80013e6:	2200      	movs	r2, #0
 80013e8:	4611      	mov	r1, r2
 80013ea:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 80013ee:	1c57      	adds	r7, r2, #1
 80013f0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80013f4:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
 80013f8:	b2fa      	uxtb	r2, r7
 80013fa:	f883 11fd 	strb.w	r1, [r3, #509]	; 0x1fd
 80013fe:	4282      	cmp	r2, r0
 8001400:	f883 11ff 	strb.w	r1, [r3, #511]	; 0x1ff
 8001404:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
 8001408:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
 800140c:	f8c3 1210 	str.w	r1, [r3, #528]	; 0x210
 8001410:	d3eb      	bcc.n	80013ea <HAL_PCD_Init+0x9e>
 8001412:	466f      	mov	r7, sp
 8001414:	f8d4 c000 	ldr.w	ip, [r4]
 8001418:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800141a:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800141c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800141e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8001420:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001424:	e887 0003 	stmia.w	r7, {r0, r1}
 8001428:	4660      	mov	r0, ip
 800142a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800142e:	f001 faf3 	bl	8002a18 <USB_DevInit>
 8001432:	4605      	mov	r5, r0
 8001434:	2800      	cmp	r0, #0
 8001436:	d1b2      	bne.n	800139e <HAL_PCD_Init+0x52>
 8001438:	2201      	movs	r2, #1
 800143a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800143c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
 8001440:	4293      	cmp	r3, r2
 8001442:	f884 23bd 	strb.w	r2, [r4, #957]	; 0x3bd
 8001446:	d00e      	beq.n	8001466 <HAL_PCD_Init+0x11a>
 8001448:	6820      	ldr	r0, [r4, #0]
 800144a:	f001 fbe3 	bl	8002c14 <USB_DevDisconnect>
 800144e:	4628      	mov	r0, r5
 8001450:	b00b      	add	sp, #44	; 0x2c
 8001452:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001454:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
 8001458:	f00a fa60 	bl	800b91c <HAL_PCD_MspInit>
 800145c:	e782      	b.n	8001364 <HAL_PCD_Init+0x18>
 800145e:	2501      	movs	r5, #1
 8001460:	4628      	mov	r0, r5
 8001462:	b00b      	add	sp, #44	; 0x2c
 8001464:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001466:	4620      	mov	r0, r4
 8001468:	f000 f802 	bl	8001470 <HAL_PCDEx_ActivateLPM>
 800146c:	e7ec      	b.n	8001448 <HAL_PCD_Init+0xfc>
 800146e:	bf00      	nop

08001470 <HAL_PCDEx_ActivateLPM>:
 8001470:	6803      	ldr	r3, [r0, #0]
 8001472:	2101      	movs	r1, #1
 8001474:	4a08      	ldr	r2, [pc, #32]	; (8001498 <HAL_PCDEx_ActivateLPM+0x28>)
 8001476:	b430      	push	{r4, r5}
 8001478:	f8c0 13fc 	str.w	r1, [r0, #1020]	; 0x3fc
 800147c:	4604      	mov	r4, r0
 800147e:	6999      	ldr	r1, [r3, #24]
 8001480:	2500      	movs	r5, #0
 8001482:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 8001486:	f884 53f4 	strb.w	r5, [r4, #1012]	; 0x3f4
 800148a:	4628      	mov	r0, r5
 800148c:	6199      	str	r1, [r3, #24]
 800148e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001490:	430a      	orrs	r2, r1
 8001492:	bc30      	pop	{r4, r5}
 8001494:	655a      	str	r2, [r3, #84]	; 0x54
 8001496:	4770      	bx	lr
 8001498:	10000003 	.word	0x10000003

0800149c <HAL_PWR_EnableBkUpAccess>:
 800149c:	4a02      	ldr	r2, [pc, #8]	; (80014a8 <HAL_PWR_EnableBkUpAccess+0xc>)
 800149e:	6813      	ldr	r3, [r2, #0]
 80014a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014a4:	6013      	str	r3, [r2, #0]
 80014a6:	4770      	bx	lr
 80014a8:	40007000 	.word	0x40007000

080014ac <HAL_PWREx_EnableOverDrive>:
 80014ac:	4a1b      	ldr	r2, [pc, #108]	; (800151c <HAL_PWREx_EnableOverDrive+0x70>)
 80014ae:	4b1c      	ldr	r3, [pc, #112]	; (8001520 <HAL_PWREx_EnableOverDrive+0x74>)
 80014b0:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80014b2:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80014b6:	b530      	push	{r4, r5, lr}
 80014b8:	6411      	str	r1, [r2, #64]	; 0x40
 80014ba:	b083      	sub	sp, #12
 80014bc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80014be:	461c      	mov	r4, r3
 80014c0:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80014c4:	9201      	str	r2, [sp, #4]
 80014c6:	9a01      	ldr	r2, [sp, #4]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	f7ff f8b6 	bl	8000640 <HAL_GetTick>
 80014d4:	4605      	mov	r5, r0
 80014d6:	e005      	b.n	80014e4 <HAL_PWREx_EnableOverDrive+0x38>
 80014d8:	f7ff f8b2 	bl	8000640 <HAL_GetTick>
 80014dc:	1b40      	subs	r0, r0, r5
 80014de:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80014e2:	d817      	bhi.n	8001514 <HAL_PWREx_EnableOverDrive+0x68>
 80014e4:	6863      	ldr	r3, [r4, #4]
 80014e6:	03da      	lsls	r2, r3, #15
 80014e8:	d5f6      	bpl.n	80014d8 <HAL_PWREx_EnableOverDrive+0x2c>
 80014ea:	6823      	ldr	r3, [r4, #0]
 80014ec:	4d0c      	ldr	r5, [pc, #48]	; (8001520 <HAL_PWREx_EnableOverDrive+0x74>)
 80014ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014f2:	6023      	str	r3, [r4, #0]
 80014f4:	f7ff f8a4 	bl	8000640 <HAL_GetTick>
 80014f8:	4604      	mov	r4, r0
 80014fa:	e005      	b.n	8001508 <HAL_PWREx_EnableOverDrive+0x5c>
 80014fc:	f7ff f8a0 	bl	8000640 <HAL_GetTick>
 8001500:	1b00      	subs	r0, r0, r4
 8001502:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001506:	d805      	bhi.n	8001514 <HAL_PWREx_EnableOverDrive+0x68>
 8001508:	686b      	ldr	r3, [r5, #4]
 800150a:	039b      	lsls	r3, r3, #14
 800150c:	d5f6      	bpl.n	80014fc <HAL_PWREx_EnableOverDrive+0x50>
 800150e:	2000      	movs	r0, #0
 8001510:	b003      	add	sp, #12
 8001512:	bd30      	pop	{r4, r5, pc}
 8001514:	2003      	movs	r0, #3
 8001516:	b003      	add	sp, #12
 8001518:	bd30      	pop	{r4, r5, pc}
 800151a:	bf00      	nop
 800151c:	40023800 	.word	0x40023800
 8001520:	40007000 	.word	0x40007000

08001524 <HAL_RCC_OscConfig>:
 8001524:	2800      	cmp	r0, #0
 8001526:	f000 8134 	beq.w	8001792 <HAL_RCC_OscConfig+0x26e>
 800152a:	6803      	ldr	r3, [r0, #0]
 800152c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001530:	07dd      	lsls	r5, r3, #31
 8001532:	b082      	sub	sp, #8
 8001534:	4604      	mov	r4, r0
 8001536:	d535      	bpl.n	80015a4 <HAL_RCC_OscConfig+0x80>
 8001538:	49ab      	ldr	r1, [pc, #684]	; (80017e8 <HAL_RCC_OscConfig+0x2c4>)
 800153a:	688a      	ldr	r2, [r1, #8]
 800153c:	f002 020c 	and.w	r2, r2, #12
 8001540:	2a04      	cmp	r2, #4
 8001542:	f000 80fe 	beq.w	8001742 <HAL_RCC_OscConfig+0x21e>
 8001546:	688a      	ldr	r2, [r1, #8]
 8001548:	f002 020c 	and.w	r2, r2, #12
 800154c:	2a08      	cmp	r2, #8
 800154e:	f000 80f4 	beq.w	800173a <HAL_RCC_OscConfig+0x216>
 8001552:	6863      	ldr	r3, [r4, #4]
 8001554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001558:	d010      	beq.n	800157c <HAL_RCC_OscConfig+0x58>
 800155a:	2b00      	cmp	r3, #0
 800155c:	f000 811b 	beq.w	8001796 <HAL_RCC_OscConfig+0x272>
 8001560:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001564:	4ba0      	ldr	r3, [pc, #640]	; (80017e8 <HAL_RCC_OscConfig+0x2c4>)
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	f000 8162 	beq.w	8001830 <HAL_RCC_OscConfig+0x30c>
 800156c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	e004      	b.n	8001586 <HAL_RCC_OscConfig+0x62>
 800157c:	4a9a      	ldr	r2, [pc, #616]	; (80017e8 <HAL_RCC_OscConfig+0x2c4>)
 800157e:	6813      	ldr	r3, [r2, #0]
 8001580:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001584:	6013      	str	r3, [r2, #0]
 8001586:	f7ff f85b 	bl	8000640 <HAL_GetTick>
 800158a:	4d97      	ldr	r5, [pc, #604]	; (80017e8 <HAL_RCC_OscConfig+0x2c4>)
 800158c:	4606      	mov	r6, r0
 800158e:	e005      	b.n	800159c <HAL_RCC_OscConfig+0x78>
 8001590:	f7ff f856 	bl	8000640 <HAL_GetTick>
 8001594:	1b80      	subs	r0, r0, r6
 8001596:	2864      	cmp	r0, #100	; 0x64
 8001598:	f200 80ee 	bhi.w	8001778 <HAL_RCC_OscConfig+0x254>
 800159c:	682b      	ldr	r3, [r5, #0]
 800159e:	039a      	lsls	r2, r3, #14
 80015a0:	d5f6      	bpl.n	8001590 <HAL_RCC_OscConfig+0x6c>
 80015a2:	6823      	ldr	r3, [r4, #0]
 80015a4:	079f      	lsls	r7, r3, #30
 80015a6:	d442      	bmi.n	800162e <HAL_RCC_OscConfig+0x10a>
 80015a8:	071a      	lsls	r2, r3, #28
 80015aa:	d517      	bpl.n	80015dc <HAL_RCC_OscConfig+0xb8>
 80015ac:	6963      	ldr	r3, [r4, #20]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	f000 80b0 	beq.w	8001714 <HAL_RCC_OscConfig+0x1f0>
 80015b4:	4b8c      	ldr	r3, [pc, #560]	; (80017e8 <HAL_RCC_OscConfig+0x2c4>)
 80015b6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80015b8:	461d      	mov	r5, r3
 80015ba:	f042 0201 	orr.w	r2, r2, #1
 80015be:	675a      	str	r2, [r3, #116]	; 0x74
 80015c0:	f7ff f83e 	bl	8000640 <HAL_GetTick>
 80015c4:	4606      	mov	r6, r0
 80015c6:	e005      	b.n	80015d4 <HAL_RCC_OscConfig+0xb0>
 80015c8:	f7ff f83a 	bl	8000640 <HAL_GetTick>
 80015cc:	1b80      	subs	r0, r0, r6
 80015ce:	2802      	cmp	r0, #2
 80015d0:	f200 80d2 	bhi.w	8001778 <HAL_RCC_OscConfig+0x254>
 80015d4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80015d6:	079b      	lsls	r3, r3, #30
 80015d8:	d5f6      	bpl.n	80015c8 <HAL_RCC_OscConfig+0xa4>
 80015da:	6823      	ldr	r3, [r4, #0]
 80015dc:	075d      	lsls	r5, r3, #29
 80015de:	d56b      	bpl.n	80016b8 <HAL_RCC_OscConfig+0x194>
 80015e0:	4b81      	ldr	r3, [pc, #516]	; (80017e8 <HAL_RCC_OscConfig+0x2c4>)
 80015e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015e4:	00d0      	lsls	r0, r2, #3
 80015e6:	f100 80ed 	bmi.w	80017c4 <HAL_RCC_OscConfig+0x2a0>
 80015ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015ec:	2501      	movs	r5, #1
 80015ee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80015f2:	641a      	str	r2, [r3, #64]	; 0x40
 80015f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015fa:	9301      	str	r3, [sp, #4]
 80015fc:	9b01      	ldr	r3, [sp, #4]
 80015fe:	4b7b      	ldr	r3, [pc, #492]	; (80017ec <HAL_RCC_OscConfig+0x2c8>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	05d1      	lsls	r1, r2, #23
 8001604:	f140 80a7 	bpl.w	8001756 <HAL_RCC_OscConfig+0x232>
 8001608:	68a3      	ldr	r3, [r4, #8]
 800160a:	2b01      	cmp	r3, #1
 800160c:	d039      	beq.n	8001682 <HAL_RCC_OscConfig+0x15e>
 800160e:	2b00      	cmp	r3, #0
 8001610:	f000 80da 	beq.w	80017c8 <HAL_RCC_OscConfig+0x2a4>
 8001614:	2b05      	cmp	r3, #5
 8001616:	4b74      	ldr	r3, [pc, #464]	; (80017e8 <HAL_RCC_OscConfig+0x2c4>)
 8001618:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800161a:	f000 8111 	beq.w	8001840 <HAL_RCC_OscConfig+0x31c>
 800161e:	f022 0201 	bic.w	r2, r2, #1
 8001622:	671a      	str	r2, [r3, #112]	; 0x70
 8001624:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001626:	f022 0204 	bic.w	r2, r2, #4
 800162a:	671a      	str	r2, [r3, #112]	; 0x70
 800162c:	e02e      	b.n	800168c <HAL_RCC_OscConfig+0x168>
 800162e:	4a6e      	ldr	r2, [pc, #440]	; (80017e8 <HAL_RCC_OscConfig+0x2c4>)
 8001630:	6891      	ldr	r1, [r2, #8]
 8001632:	f011 0f0c 	tst.w	r1, #12
 8001636:	d062      	beq.n	80016fe <HAL_RCC_OscConfig+0x1da>
 8001638:	6891      	ldr	r1, [r2, #8]
 800163a:	f001 010c 	and.w	r1, r1, #12
 800163e:	2908      	cmp	r1, #8
 8001640:	d05a      	beq.n	80016f8 <HAL_RCC_OscConfig+0x1d4>
 8001642:	68e3      	ldr	r3, [r4, #12]
 8001644:	2b00      	cmp	r3, #0
 8001646:	f000 80df 	beq.w	8001808 <HAL_RCC_OscConfig+0x2e4>
 800164a:	4b67      	ldr	r3, [pc, #412]	; (80017e8 <HAL_RCC_OscConfig+0x2c4>)
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	461d      	mov	r5, r3
 8001650:	f042 0201 	orr.w	r2, r2, #1
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	f7fe fff3 	bl	8000640 <HAL_GetTick>
 800165a:	4606      	mov	r6, r0
 800165c:	e005      	b.n	800166a <HAL_RCC_OscConfig+0x146>
 800165e:	f7fe ffef 	bl	8000640 <HAL_GetTick>
 8001662:	1b80      	subs	r0, r0, r6
 8001664:	2802      	cmp	r0, #2
 8001666:	f200 8087 	bhi.w	8001778 <HAL_RCC_OscConfig+0x254>
 800166a:	682b      	ldr	r3, [r5, #0]
 800166c:	0798      	lsls	r0, r3, #30
 800166e:	d5f6      	bpl.n	800165e <HAL_RCC_OscConfig+0x13a>
 8001670:	682b      	ldr	r3, [r5, #0]
 8001672:	6922      	ldr	r2, [r4, #16]
 8001674:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001678:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800167c:	602b      	str	r3, [r5, #0]
 800167e:	6823      	ldr	r3, [r4, #0]
 8001680:	e792      	b.n	80015a8 <HAL_RCC_OscConfig+0x84>
 8001682:	4a59      	ldr	r2, [pc, #356]	; (80017e8 <HAL_RCC_OscConfig+0x2c4>)
 8001684:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001686:	f043 0301 	orr.w	r3, r3, #1
 800168a:	6713      	str	r3, [r2, #112]	; 0x70
 800168c:	f7fe ffd8 	bl	8000640 <HAL_GetTick>
 8001690:	4e55      	ldr	r6, [pc, #340]	; (80017e8 <HAL_RCC_OscConfig+0x2c4>)
 8001692:	4680      	mov	r8, r0
 8001694:	f241 3788 	movw	r7, #5000	; 0x1388
 8001698:	e005      	b.n	80016a6 <HAL_RCC_OscConfig+0x182>
 800169a:	f7fe ffd1 	bl	8000640 <HAL_GetTick>
 800169e:	eba0 0008 	sub.w	r0, r0, r8
 80016a2:	42b8      	cmp	r0, r7
 80016a4:	d868      	bhi.n	8001778 <HAL_RCC_OscConfig+0x254>
 80016a6:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80016a8:	079b      	lsls	r3, r3, #30
 80016aa:	d5f6      	bpl.n	800169a <HAL_RCC_OscConfig+0x176>
 80016ac:	b125      	cbz	r5, 80016b8 <HAL_RCC_OscConfig+0x194>
 80016ae:	4a4e      	ldr	r2, [pc, #312]	; (80017e8 <HAL_RCC_OscConfig+0x2c4>)
 80016b0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80016b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016b6:	6413      	str	r3, [r2, #64]	; 0x40
 80016b8:	69a3      	ldr	r3, [r4, #24]
 80016ba:	b1cb      	cbz	r3, 80016f0 <HAL_RCC_OscConfig+0x1cc>
 80016bc:	4a4a      	ldr	r2, [pc, #296]	; (80017e8 <HAL_RCC_OscConfig+0x2c4>)
 80016be:	6891      	ldr	r1, [r2, #8]
 80016c0:	f001 010c 	and.w	r1, r1, #12
 80016c4:	2908      	cmp	r1, #8
 80016c6:	d021      	beq.n	800170c <HAL_RCC_OscConfig+0x1e8>
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	6813      	ldr	r3, [r2, #0]
 80016cc:	f000 80c0 	beq.w	8001850 <HAL_RCC_OscConfig+0x32c>
 80016d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016d4:	4614      	mov	r4, r2
 80016d6:	6013      	str	r3, [r2, #0]
 80016d8:	f7fe ffb2 	bl	8000640 <HAL_GetTick>
 80016dc:	4605      	mov	r5, r0
 80016de:	e004      	b.n	80016ea <HAL_RCC_OscConfig+0x1c6>
 80016e0:	f7fe ffae 	bl	8000640 <HAL_GetTick>
 80016e4:	1b40      	subs	r0, r0, r5
 80016e6:	2802      	cmp	r0, #2
 80016e8:	d846      	bhi.n	8001778 <HAL_RCC_OscConfig+0x254>
 80016ea:	6823      	ldr	r3, [r4, #0]
 80016ec:	019b      	lsls	r3, r3, #6
 80016ee:	d4f7      	bmi.n	80016e0 <HAL_RCC_OscConfig+0x1bc>
 80016f0:	2000      	movs	r0, #0
 80016f2:	b002      	add	sp, #8
 80016f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80016f8:	6852      	ldr	r2, [r2, #4]
 80016fa:	0256      	lsls	r6, r2, #9
 80016fc:	d4a1      	bmi.n	8001642 <HAL_RCC_OscConfig+0x11e>
 80016fe:	4a3a      	ldr	r2, [pc, #232]	; (80017e8 <HAL_RCC_OscConfig+0x2c4>)
 8001700:	6812      	ldr	r2, [r2, #0]
 8001702:	0795      	lsls	r5, r2, #30
 8001704:	d53c      	bpl.n	8001780 <HAL_RCC_OscConfig+0x25c>
 8001706:	68e2      	ldr	r2, [r4, #12]
 8001708:	2a01      	cmp	r2, #1
 800170a:	d039      	beq.n	8001780 <HAL_RCC_OscConfig+0x25c>
 800170c:	2001      	movs	r0, #1
 800170e:	b002      	add	sp, #8
 8001710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001714:	4b34      	ldr	r3, [pc, #208]	; (80017e8 <HAL_RCC_OscConfig+0x2c4>)
 8001716:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001718:	461d      	mov	r5, r3
 800171a:	f022 0201 	bic.w	r2, r2, #1
 800171e:	675a      	str	r2, [r3, #116]	; 0x74
 8001720:	f7fe ff8e 	bl	8000640 <HAL_GetTick>
 8001724:	4606      	mov	r6, r0
 8001726:	e004      	b.n	8001732 <HAL_RCC_OscConfig+0x20e>
 8001728:	f7fe ff8a 	bl	8000640 <HAL_GetTick>
 800172c:	1b80      	subs	r0, r0, r6
 800172e:	2802      	cmp	r0, #2
 8001730:	d822      	bhi.n	8001778 <HAL_RCC_OscConfig+0x254>
 8001732:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001734:	079f      	lsls	r7, r3, #30
 8001736:	d4f7      	bmi.n	8001728 <HAL_RCC_OscConfig+0x204>
 8001738:	e74f      	b.n	80015da <HAL_RCC_OscConfig+0xb6>
 800173a:	684a      	ldr	r2, [r1, #4]
 800173c:	0250      	lsls	r0, r2, #9
 800173e:	f57f af08 	bpl.w	8001552 <HAL_RCC_OscConfig+0x2e>
 8001742:	4a29      	ldr	r2, [pc, #164]	; (80017e8 <HAL_RCC_OscConfig+0x2c4>)
 8001744:	6812      	ldr	r2, [r2, #0]
 8001746:	0391      	lsls	r1, r2, #14
 8001748:	f57f af2c 	bpl.w	80015a4 <HAL_RCC_OscConfig+0x80>
 800174c:	6862      	ldr	r2, [r4, #4]
 800174e:	2a00      	cmp	r2, #0
 8001750:	f47f af28 	bne.w	80015a4 <HAL_RCC_OscConfig+0x80>
 8001754:	e7da      	b.n	800170c <HAL_RCC_OscConfig+0x1e8>
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	461e      	mov	r6, r3
 800175a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	f7fe ff6e 	bl	8000640 <HAL_GetTick>
 8001764:	4607      	mov	r7, r0
 8001766:	6833      	ldr	r3, [r6, #0]
 8001768:	05da      	lsls	r2, r3, #23
 800176a:	f53f af4d 	bmi.w	8001608 <HAL_RCC_OscConfig+0xe4>
 800176e:	f7fe ff67 	bl	8000640 <HAL_GetTick>
 8001772:	1bc0      	subs	r0, r0, r7
 8001774:	2864      	cmp	r0, #100	; 0x64
 8001776:	d9f6      	bls.n	8001766 <HAL_RCC_OscConfig+0x242>
 8001778:	2003      	movs	r0, #3
 800177a:	b002      	add	sp, #8
 800177c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001780:	4919      	ldr	r1, [pc, #100]	; (80017e8 <HAL_RCC_OscConfig+0x2c4>)
 8001782:	6920      	ldr	r0, [r4, #16]
 8001784:	680a      	ldr	r2, [r1, #0]
 8001786:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800178a:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 800178e:	600a      	str	r2, [r1, #0]
 8001790:	e70a      	b.n	80015a8 <HAL_RCC_OscConfig+0x84>
 8001792:	2001      	movs	r0, #1
 8001794:	4770      	bx	lr
 8001796:	4b14      	ldr	r3, [pc, #80]	; (80017e8 <HAL_RCC_OscConfig+0x2c4>)
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	461d      	mov	r5, r3
 800179c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	f7fe ff49 	bl	8000640 <HAL_GetTick>
 80017ae:	4606      	mov	r6, r0
 80017b0:	e004      	b.n	80017bc <HAL_RCC_OscConfig+0x298>
 80017b2:	f7fe ff45 	bl	8000640 <HAL_GetTick>
 80017b6:	1b80      	subs	r0, r0, r6
 80017b8:	2864      	cmp	r0, #100	; 0x64
 80017ba:	d8dd      	bhi.n	8001778 <HAL_RCC_OscConfig+0x254>
 80017bc:	682b      	ldr	r3, [r5, #0]
 80017be:	039b      	lsls	r3, r3, #14
 80017c0:	d4f7      	bmi.n	80017b2 <HAL_RCC_OscConfig+0x28e>
 80017c2:	e6ee      	b.n	80015a2 <HAL_RCC_OscConfig+0x7e>
 80017c4:	2500      	movs	r5, #0
 80017c6:	e71a      	b.n	80015fe <HAL_RCC_OscConfig+0xda>
 80017c8:	4b07      	ldr	r3, [pc, #28]	; (80017e8 <HAL_RCC_OscConfig+0x2c4>)
 80017ca:	f241 3888 	movw	r8, #5000	; 0x1388
 80017ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80017d0:	461e      	mov	r6, r3
 80017d2:	f022 0201 	bic.w	r2, r2, #1
 80017d6:	671a      	str	r2, [r3, #112]	; 0x70
 80017d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80017da:	f022 0204 	bic.w	r2, r2, #4
 80017de:	671a      	str	r2, [r3, #112]	; 0x70
 80017e0:	f7fe ff2e 	bl	8000640 <HAL_GetTick>
 80017e4:	4607      	mov	r7, r0
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0x2d6>
 80017e8:	40023800 	.word	0x40023800
 80017ec:	40007000 	.word	0x40007000
 80017f0:	f7fe ff26 	bl	8000640 <HAL_GetTick>
 80017f4:	1bc0      	subs	r0, r0, r7
 80017f6:	4540      	cmp	r0, r8
 80017f8:	d8be      	bhi.n	8001778 <HAL_RCC_OscConfig+0x254>
 80017fa:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80017fc:	0798      	lsls	r0, r3, #30
 80017fe:	d4f7      	bmi.n	80017f0 <HAL_RCC_OscConfig+0x2cc>
 8001800:	2d00      	cmp	r5, #0
 8001802:	f43f af59 	beq.w	80016b8 <HAL_RCC_OscConfig+0x194>
 8001806:	e752      	b.n	80016ae <HAL_RCC_OscConfig+0x18a>
 8001808:	4b2c      	ldr	r3, [pc, #176]	; (80018bc <HAL_RCC_OscConfig+0x398>)
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	461d      	mov	r5, r3
 800180e:	f022 0201 	bic.w	r2, r2, #1
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	f7fe ff14 	bl	8000640 <HAL_GetTick>
 8001818:	4606      	mov	r6, r0
 800181a:	e004      	b.n	8001826 <HAL_RCC_OscConfig+0x302>
 800181c:	f7fe ff10 	bl	8000640 <HAL_GetTick>
 8001820:	1b80      	subs	r0, r0, r6
 8001822:	2802      	cmp	r0, #2
 8001824:	d8a8      	bhi.n	8001778 <HAL_RCC_OscConfig+0x254>
 8001826:	682b      	ldr	r3, [r5, #0]
 8001828:	0799      	lsls	r1, r3, #30
 800182a:	d4f7      	bmi.n	800181c <HAL_RCC_OscConfig+0x2f8>
 800182c:	6823      	ldr	r3, [r4, #0]
 800182e:	e6bb      	b.n	80015a8 <HAL_RCC_OscConfig+0x84>
 8001830:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	e6a2      	b.n	8001586 <HAL_RCC_OscConfig+0x62>
 8001840:	f042 0204 	orr.w	r2, r2, #4
 8001844:	671a      	str	r2, [r3, #112]	; 0x70
 8001846:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001848:	f042 0201 	orr.w	r2, r2, #1
 800184c:	671a      	str	r2, [r3, #112]	; 0x70
 800184e:	e71d      	b.n	800168c <HAL_RCC_OscConfig+0x168>
 8001850:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001854:	4615      	mov	r5, r2
 8001856:	6013      	str	r3, [r2, #0]
 8001858:	f7fe fef2 	bl	8000640 <HAL_GetTick>
 800185c:	4606      	mov	r6, r0
 800185e:	e004      	b.n	800186a <HAL_RCC_OscConfig+0x346>
 8001860:	f7fe feee 	bl	8000640 <HAL_GetTick>
 8001864:	1b80      	subs	r0, r0, r6
 8001866:	2802      	cmp	r0, #2
 8001868:	d886      	bhi.n	8001778 <HAL_RCC_OscConfig+0x254>
 800186a:	682b      	ldr	r3, [r5, #0]
 800186c:	0199      	lsls	r1, r3, #6
 800186e:	d4f7      	bmi.n	8001860 <HAL_RCC_OscConfig+0x33c>
 8001870:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8001874:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001876:	4313      	orrs	r3, r2
 8001878:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	; 0x28
 800187c:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8001880:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001882:	0852      	lsrs	r2, r2, #1
 8001884:	4c0d      	ldr	r4, [pc, #52]	; (80018bc <HAL_RCC_OscConfig+0x398>)
 8001886:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800188a:	3a01      	subs	r2, #1
 800188c:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8001890:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001894:	606b      	str	r3, [r5, #4]
 8001896:	682b      	ldr	r3, [r5, #0]
 8001898:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800189c:	602b      	str	r3, [r5, #0]
 800189e:	f7fe fecf 	bl	8000640 <HAL_GetTick>
 80018a2:	4605      	mov	r5, r0
 80018a4:	e005      	b.n	80018b2 <HAL_RCC_OscConfig+0x38e>
 80018a6:	f7fe fecb 	bl	8000640 <HAL_GetTick>
 80018aa:	1b40      	subs	r0, r0, r5
 80018ac:	2802      	cmp	r0, #2
 80018ae:	f63f af63 	bhi.w	8001778 <HAL_RCC_OscConfig+0x254>
 80018b2:	6823      	ldr	r3, [r4, #0]
 80018b4:	019a      	lsls	r2, r3, #6
 80018b6:	d5f6      	bpl.n	80018a6 <HAL_RCC_OscConfig+0x382>
 80018b8:	e71a      	b.n	80016f0 <HAL_RCC_OscConfig+0x1cc>
 80018ba:	bf00      	nop
 80018bc:	40023800 	.word	0x40023800

080018c0 <HAL_RCC_ClockConfig>:
 80018c0:	b178      	cbz	r0, 80018e2 <HAL_RCC_ClockConfig+0x22>
 80018c2:	4a5e      	ldr	r2, [pc, #376]	; (8001a3c <HAL_RCC_ClockConfig+0x17c>)
 80018c4:	6813      	ldr	r3, [r2, #0]
 80018c6:	f003 030f 	and.w	r3, r3, #15
 80018ca:	428b      	cmp	r3, r1
 80018cc:	d20b      	bcs.n	80018e6 <HAL_RCC_ClockConfig+0x26>
 80018ce:	6813      	ldr	r3, [r2, #0]
 80018d0:	f023 030f 	bic.w	r3, r3, #15
 80018d4:	430b      	orrs	r3, r1
 80018d6:	6013      	str	r3, [r2, #0]
 80018d8:	6813      	ldr	r3, [r2, #0]
 80018da:	f003 030f 	and.w	r3, r3, #15
 80018de:	428b      	cmp	r3, r1
 80018e0:	d001      	beq.n	80018e6 <HAL_RCC_ClockConfig+0x26>
 80018e2:	2001      	movs	r0, #1
 80018e4:	4770      	bx	lr
 80018e6:	6803      	ldr	r3, [r0, #0]
 80018e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018ec:	079d      	lsls	r5, r3, #30
 80018ee:	d514      	bpl.n	800191a <HAL_RCC_ClockConfig+0x5a>
 80018f0:	075c      	lsls	r4, r3, #29
 80018f2:	d504      	bpl.n	80018fe <HAL_RCC_ClockConfig+0x3e>
 80018f4:	4c52      	ldr	r4, [pc, #328]	; (8001a40 <HAL_RCC_ClockConfig+0x180>)
 80018f6:	68a2      	ldr	r2, [r4, #8]
 80018f8:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80018fc:	60a2      	str	r2, [r4, #8]
 80018fe:	071a      	lsls	r2, r3, #28
 8001900:	d504      	bpl.n	800190c <HAL_RCC_ClockConfig+0x4c>
 8001902:	4c4f      	ldr	r4, [pc, #316]	; (8001a40 <HAL_RCC_ClockConfig+0x180>)
 8001904:	68a2      	ldr	r2, [r4, #8]
 8001906:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800190a:	60a2      	str	r2, [r4, #8]
 800190c:	4c4c      	ldr	r4, [pc, #304]	; (8001a40 <HAL_RCC_ClockConfig+0x180>)
 800190e:	6885      	ldr	r5, [r0, #8]
 8001910:	68a2      	ldr	r2, [r4, #8]
 8001912:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001916:	432a      	orrs	r2, r5
 8001918:	60a2      	str	r2, [r4, #8]
 800191a:	07df      	lsls	r7, r3, #31
 800191c:	4604      	mov	r4, r0
 800191e:	460d      	mov	r5, r1
 8001920:	d521      	bpl.n	8001966 <HAL_RCC_ClockConfig+0xa6>
 8001922:	6842      	ldr	r2, [r0, #4]
 8001924:	4b46      	ldr	r3, [pc, #280]	; (8001a40 <HAL_RCC_ClockConfig+0x180>)
 8001926:	2a01      	cmp	r2, #1
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	d063      	beq.n	80019f4 <HAL_RCC_ClockConfig+0x134>
 800192c:	2a02      	cmp	r2, #2
 800192e:	d078      	beq.n	8001a22 <HAL_RCC_ClockConfig+0x162>
 8001930:	0799      	lsls	r1, r3, #30
 8001932:	d528      	bpl.n	8001986 <HAL_RCC_ClockConfig+0xc6>
 8001934:	4942      	ldr	r1, [pc, #264]	; (8001a40 <HAL_RCC_ClockConfig+0x180>)
 8001936:	f241 3888 	movw	r8, #5000	; 0x1388
 800193a:	688b      	ldr	r3, [r1, #8]
 800193c:	460e      	mov	r6, r1
 800193e:	f023 0303 	bic.w	r3, r3, #3
 8001942:	4313      	orrs	r3, r2
 8001944:	608b      	str	r3, [r1, #8]
 8001946:	f7fe fe7b 	bl	8000640 <HAL_GetTick>
 800194a:	4607      	mov	r7, r0
 800194c:	e004      	b.n	8001958 <HAL_RCC_ClockConfig+0x98>
 800194e:	f7fe fe77 	bl	8000640 <HAL_GetTick>
 8001952:	1bc0      	subs	r0, r0, r7
 8001954:	4540      	cmp	r0, r8
 8001956:	d862      	bhi.n	8001a1e <HAL_RCC_ClockConfig+0x15e>
 8001958:	68b3      	ldr	r3, [r6, #8]
 800195a:	6862      	ldr	r2, [r4, #4]
 800195c:	f003 030c 	and.w	r3, r3, #12
 8001960:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001964:	d1f3      	bne.n	800194e <HAL_RCC_ClockConfig+0x8e>
 8001966:	4a35      	ldr	r2, [pc, #212]	; (8001a3c <HAL_RCC_ClockConfig+0x17c>)
 8001968:	6813      	ldr	r3, [r2, #0]
 800196a:	f003 030f 	and.w	r3, r3, #15
 800196e:	42ab      	cmp	r3, r5
 8001970:	d90c      	bls.n	800198c <HAL_RCC_ClockConfig+0xcc>
 8001972:	6813      	ldr	r3, [r2, #0]
 8001974:	f023 030f 	bic.w	r3, r3, #15
 8001978:	432b      	orrs	r3, r5
 800197a:	6013      	str	r3, [r2, #0]
 800197c:	6813      	ldr	r3, [r2, #0]
 800197e:	f003 030f 	and.w	r3, r3, #15
 8001982:	42ab      	cmp	r3, r5
 8001984:	d002      	beq.n	800198c <HAL_RCC_ClockConfig+0xcc>
 8001986:	2001      	movs	r0, #1
 8001988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800198c:	6823      	ldr	r3, [r4, #0]
 800198e:	075a      	lsls	r2, r3, #29
 8001990:	d506      	bpl.n	80019a0 <HAL_RCC_ClockConfig+0xe0>
 8001992:	492b      	ldr	r1, [pc, #172]	; (8001a40 <HAL_RCC_ClockConfig+0x180>)
 8001994:	68e0      	ldr	r0, [r4, #12]
 8001996:	688a      	ldr	r2, [r1, #8]
 8001998:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800199c:	4302      	orrs	r2, r0
 800199e:	608a      	str	r2, [r1, #8]
 80019a0:	071b      	lsls	r3, r3, #28
 80019a2:	d507      	bpl.n	80019b4 <HAL_RCC_ClockConfig+0xf4>
 80019a4:	4a26      	ldr	r2, [pc, #152]	; (8001a40 <HAL_RCC_ClockConfig+0x180>)
 80019a6:	6921      	ldr	r1, [r4, #16]
 80019a8:	6893      	ldr	r3, [r2, #8]
 80019aa:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80019ae:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80019b2:	6093      	str	r3, [r2, #8]
 80019b4:	4922      	ldr	r1, [pc, #136]	; (8001a40 <HAL_RCC_ClockConfig+0x180>)
 80019b6:	688b      	ldr	r3, [r1, #8]
 80019b8:	f003 030c 	and.w	r3, r3, #12
 80019bc:	2b04      	cmp	r3, #4
 80019be:	d01c      	beq.n	80019fa <HAL_RCC_ClockConfig+0x13a>
 80019c0:	2b08      	cmp	r3, #8
 80019c2:	d12a      	bne.n	8001a1a <HAL_RCC_ClockConfig+0x15a>
 80019c4:	684a      	ldr	r2, [r1, #4]
 80019c6:	684b      	ldr	r3, [r1, #4]
 80019c8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80019cc:	6849      	ldr	r1, [r1, #4]
 80019ce:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 80019d2:	d129      	bne.n	8001a28 <HAL_RCC_ClockConfig+0x168>
 80019d4:	481b      	ldr	r0, [pc, #108]	; (8001a44 <HAL_RCC_ClockConfig+0x184>)
 80019d6:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80019da:	fba1 0100 	umull	r0, r1, r1, r0
 80019de:	f7fe fc97 	bl	8000310 <__aeabi_uldivmod>
 80019e2:	4b17      	ldr	r3, [pc, #92]	; (8001a40 <HAL_RCC_ClockConfig+0x180>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80019ea:	3301      	adds	r3, #1
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80019f2:	e003      	b.n	80019fc <HAL_RCC_ClockConfig+0x13c>
 80019f4:	039e      	lsls	r6, r3, #14
 80019f6:	d49d      	bmi.n	8001934 <HAL_RCC_ClockConfig+0x74>
 80019f8:	e7c5      	b.n	8001986 <HAL_RCC_ClockConfig+0xc6>
 80019fa:	4b13      	ldr	r3, [pc, #76]	; (8001a48 <HAL_RCC_ClockConfig+0x188>)
 80019fc:	4a10      	ldr	r2, [pc, #64]	; (8001a40 <HAL_RCC_ClockConfig+0x180>)
 80019fe:	2000      	movs	r0, #0
 8001a00:	4c12      	ldr	r4, [pc, #72]	; (8001a4c <HAL_RCC_ClockConfig+0x18c>)
 8001a02:	6892      	ldr	r2, [r2, #8]
 8001a04:	4912      	ldr	r1, [pc, #72]	; (8001a50 <HAL_RCC_ClockConfig+0x190>)
 8001a06:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8001a0a:	5ca2      	ldrb	r2, [r4, r2]
 8001a0c:	40d3      	lsrs	r3, r2
 8001a0e:	600b      	str	r3, [r1, #0]
 8001a10:	f009 ffcc 	bl	800b9ac <HAL_InitTick>
 8001a14:	2000      	movs	r0, #0
 8001a16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a1a:	4b0a      	ldr	r3, [pc, #40]	; (8001a44 <HAL_RCC_ClockConfig+0x184>)
 8001a1c:	e7ee      	b.n	80019fc <HAL_RCC_ClockConfig+0x13c>
 8001a1e:	2003      	movs	r0, #3
 8001a20:	e7b2      	b.n	8001988 <HAL_RCC_ClockConfig+0xc8>
 8001a22:	0198      	lsls	r0, r3, #6
 8001a24:	d486      	bmi.n	8001934 <HAL_RCC_ClockConfig+0x74>
 8001a26:	e7ae      	b.n	8001986 <HAL_RCC_ClockConfig+0xc6>
 8001a28:	4807      	ldr	r0, [pc, #28]	; (8001a48 <HAL_RCC_ClockConfig+0x188>)
 8001a2a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001a2e:	2300      	movs	r3, #0
 8001a30:	fba1 0100 	umull	r0, r1, r1, r0
 8001a34:	f7fe fc6c 	bl	8000310 <__aeabi_uldivmod>
 8001a38:	e7d3      	b.n	80019e2 <HAL_RCC_ClockConfig+0x122>
 8001a3a:	bf00      	nop
 8001a3c:	40023c00 	.word	0x40023c00
 8001a40:	40023800 	.word	0x40023800
 8001a44:	00f42400 	.word	0x00f42400
 8001a48:	007a1200 	.word	0x007a1200
 8001a4c:	08010d60 	.word	0x08010d60
 8001a50:	20000010 	.word	0x20000010

08001a54 <HAL_RCC_GetSysClockFreq>:
 8001a54:	4916      	ldr	r1, [pc, #88]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0x5c>)
 8001a56:	b508      	push	{r3, lr}
 8001a58:	688b      	ldr	r3, [r1, #8]
 8001a5a:	f003 030c 	and.w	r3, r3, #12
 8001a5e:	2b04      	cmp	r3, #4
 8001a60:	d01b      	beq.n	8001a9a <HAL_RCC_GetSysClockFreq+0x46>
 8001a62:	2b08      	cmp	r3, #8
 8001a64:	d117      	bne.n	8001a96 <HAL_RCC_GetSysClockFreq+0x42>
 8001a66:	684a      	ldr	r2, [r1, #4]
 8001a68:	684b      	ldr	r3, [r1, #4]
 8001a6a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001a6e:	6849      	ldr	r1, [r1, #4]
 8001a70:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 8001a74:	d113      	bne.n	8001a9e <HAL_RCC_GetSysClockFreq+0x4a>
 8001a76:	480f      	ldr	r0, [pc, #60]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x60>)
 8001a78:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001a7c:	fba1 0100 	umull	r0, r1, r1, r0
 8001a80:	f7fe fc46 	bl	8000310 <__aeabi_uldivmod>
 8001a84:	4b0a      	ldr	r3, [pc, #40]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0x5c>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	fbb0 f0f3 	udiv	r0, r0, r3
 8001a94:	bd08      	pop	{r3, pc}
 8001a96:	4807      	ldr	r0, [pc, #28]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0x60>)
 8001a98:	bd08      	pop	{r3, pc}
 8001a9a:	4807      	ldr	r0, [pc, #28]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x64>)
 8001a9c:	bd08      	pop	{r3, pc}
 8001a9e:	4806      	ldr	r0, [pc, #24]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0x64>)
 8001aa0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	fba1 0100 	umull	r0, r1, r1, r0
 8001aaa:	f7fe fc31 	bl	8000310 <__aeabi_uldivmod>
 8001aae:	e7e9      	b.n	8001a84 <HAL_RCC_GetSysClockFreq+0x30>
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	00f42400 	.word	0x00f42400
 8001ab8:	007a1200 	.word	0x007a1200

08001abc <HAL_RCC_GetHCLKFreq>:
 8001abc:	4b01      	ldr	r3, [pc, #4]	; (8001ac4 <HAL_RCC_GetHCLKFreq+0x8>)
 8001abe:	6818      	ldr	r0, [r3, #0]
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	20000010 	.word	0x20000010

08001ac8 <HAL_RCC_GetPCLK1Freq>:
 8001ac8:	4b04      	ldr	r3, [pc, #16]	; (8001adc <HAL_RCC_GetPCLK1Freq+0x14>)
 8001aca:	4a05      	ldr	r2, [pc, #20]	; (8001ae0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	4905      	ldr	r1, [pc, #20]	; (8001ae4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001ad0:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001ad4:	6808      	ldr	r0, [r1, #0]
 8001ad6:	5cd3      	ldrb	r3, [r2, r3]
 8001ad8:	40d8      	lsrs	r0, r3
 8001ada:	4770      	bx	lr
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	08010d70 	.word	0x08010d70
 8001ae4:	20000010 	.word	0x20000010

08001ae8 <HAL_RCC_GetPCLK2Freq>:
 8001ae8:	4b04      	ldr	r3, [pc, #16]	; (8001afc <HAL_RCC_GetPCLK2Freq+0x14>)
 8001aea:	4a05      	ldr	r2, [pc, #20]	; (8001b00 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	4905      	ldr	r1, [pc, #20]	; (8001b04 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001af0:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001af4:	6808      	ldr	r0, [r1, #0]
 8001af6:	5cd3      	ldrb	r3, [r2, r3]
 8001af8:	40d8      	lsrs	r0, r3
 8001afa:	4770      	bx	lr
 8001afc:	40023800 	.word	0x40023800
 8001b00:	08010d70 	.word	0x08010d70
 8001b04:	20000010 	.word	0x20000010

08001b08 <HAL_RCC_GetClockConfig>:
 8001b08:	4b0e      	ldr	r3, [pc, #56]	; (8001b44 <HAL_RCC_GetClockConfig+0x3c>)
 8001b0a:	220f      	movs	r2, #15
 8001b0c:	6002      	str	r2, [r0, #0]
 8001b0e:	689a      	ldr	r2, [r3, #8]
 8001b10:	f002 0203 	and.w	r2, r2, #3
 8001b14:	6042      	str	r2, [r0, #4]
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001b1c:	6082      	str	r2, [r0, #8]
 8001b1e:	689a      	ldr	r2, [r3, #8]
 8001b20:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8001b24:	60c2      	str	r2, [r0, #12]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	08db      	lsrs	r3, r3, #3
 8001b2a:	b410      	push	{r4}
 8001b2c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001b30:	4c05      	ldr	r4, [pc, #20]	; (8001b48 <HAL_RCC_GetClockConfig+0x40>)
 8001b32:	6103      	str	r3, [r0, #16]
 8001b34:	6823      	ldr	r3, [r4, #0]
 8001b36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001b3a:	f003 030f 	and.w	r3, r3, #15
 8001b3e:	600b      	str	r3, [r1, #0]
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	40023800 	.word	0x40023800
 8001b48:	40023c00 	.word	0x40023c00

08001b4c <HAL_RCCEx_PeriphCLKConfig>:
 8001b4c:	6803      	ldr	r3, [r0, #0]
 8001b4e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b52:	f013 0601 	ands.w	r6, r3, #1
 8001b56:	b083      	sub	sp, #12
 8001b58:	4604      	mov	r4, r0
 8001b5a:	d00b      	beq.n	8001b74 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8001b5c:	4a9f      	ldr	r2, [pc, #636]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001b5e:	6891      	ldr	r1, [r2, #8]
 8001b60:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8001b64:	6091      	str	r1, [r2, #8]
 8001b66:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8001b68:	6891      	ldr	r1, [r2, #8]
 8001b6a:	4331      	orrs	r1, r6
 8001b6c:	fab6 f686 	clz	r6, r6
 8001b70:	0976      	lsrs	r6, r6, #5
 8001b72:	6091      	str	r1, [r2, #8]
 8001b74:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 8001b78:	d010      	beq.n	8001b9c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8001b7a:	4998      	ldr	r1, [pc, #608]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001b7c:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8001b7e:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8001b82:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8001b86:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001b8a:	ea42 0205 	orr.w	r2, r2, r5
 8001b8e:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
 8001b92:	f000 81d4 	beq.w	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8001b96:	fab5 f585 	clz	r5, r5
 8001b9a:	096d      	lsrs	r5, r5, #5
 8001b9c:	02d9      	lsls	r1, r3, #11
 8001b9e:	d510      	bpl.n	8001bc2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001ba0:	488e      	ldr	r0, [pc, #568]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001ba2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001ba4:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8001ba8:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8001bac:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8001bb0:	ea42 0201 	orr.w	r2, r2, r1
 8001bb4:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
 8001bb8:	f000 81bf 	beq.w	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x3ee>
 8001bbc:	2900      	cmp	r1, #0
 8001bbe:	bf08      	it	eq
 8001bc0:	2501      	moveq	r5, #1
 8001bc2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001bc6:	bf18      	it	ne
 8001bc8:	2601      	movne	r6, #1
 8001bca:	069a      	lsls	r2, r3, #26
 8001bcc:	f100 816d 	bmi.w	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8001bd0:	06da      	lsls	r2, r3, #27
 8001bd2:	d50c      	bpl.n	8001bee <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001bd4:	4a81      	ldr	r2, [pc, #516]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001bd6:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8001bda:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8001bde:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8001be2:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8001be6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001be8:	4301      	orrs	r1, r0
 8001bea:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8001bee:	045f      	lsls	r7, r3, #17
 8001bf0:	d508      	bpl.n	8001c04 <HAL_RCCEx_PeriphCLKConfig+0xb8>
 8001bf2:	497a      	ldr	r1, [pc, #488]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001bf4:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8001bf6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001bfa:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001bfe:	4302      	orrs	r2, r0
 8001c00:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
 8001c04:	0418      	lsls	r0, r3, #16
 8001c06:	d508      	bpl.n	8001c1a <HAL_RCCEx_PeriphCLKConfig+0xce>
 8001c08:	4974      	ldr	r1, [pc, #464]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001c0a:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8001c0c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001c10:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8001c14:	4302      	orrs	r2, r0
 8001c16:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
 8001c1a:	03d9      	lsls	r1, r3, #15
 8001c1c:	d508      	bpl.n	8001c30 <HAL_RCCEx_PeriphCLKConfig+0xe4>
 8001c1e:	496f      	ldr	r1, [pc, #444]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001c20:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001c22:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001c26:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001c2a:	4302      	orrs	r2, r0
 8001c2c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
 8001c30:	039a      	lsls	r2, r3, #14
 8001c32:	d508      	bpl.n	8001c46 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8001c34:	4969      	ldr	r1, [pc, #420]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001c36:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8001c38:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001c3c:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8001c40:	4302      	orrs	r2, r0
 8001c42:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
 8001c46:	065f      	lsls	r7, r3, #25
 8001c48:	d508      	bpl.n	8001c5c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8001c4a:	4964      	ldr	r1, [pc, #400]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001c4c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001c4e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001c52:	f022 0203 	bic.w	r2, r2, #3
 8001c56:	4302      	orrs	r2, r0
 8001c58:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
 8001c5c:	0618      	lsls	r0, r3, #24
 8001c5e:	d508      	bpl.n	8001c72 <HAL_RCCEx_PeriphCLKConfig+0x126>
 8001c60:	495e      	ldr	r1, [pc, #376]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001c62:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001c64:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001c68:	f022 020c 	bic.w	r2, r2, #12
 8001c6c:	4302      	orrs	r2, r0
 8001c6e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
 8001c72:	05d9      	lsls	r1, r3, #23
 8001c74:	d508      	bpl.n	8001c88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001c76:	4959      	ldr	r1, [pc, #356]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001c78:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8001c7a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001c7e:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8001c82:	4302      	orrs	r2, r0
 8001c84:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
 8001c88:	059a      	lsls	r2, r3, #22
 8001c8a:	d508      	bpl.n	8001c9e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001c8c:	4953      	ldr	r1, [pc, #332]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001c8e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001c90:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001c94:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001c98:	4302      	orrs	r2, r0
 8001c9a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
 8001c9e:	055f      	lsls	r7, r3, #21
 8001ca0:	d508      	bpl.n	8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8001ca2:	494e      	ldr	r1, [pc, #312]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001ca4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001ca6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001caa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001cae:	4302      	orrs	r2, r0
 8001cb0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
 8001cb4:	0518      	lsls	r0, r3, #20
 8001cb6:	d508      	bpl.n	8001cca <HAL_RCCEx_PeriphCLKConfig+0x17e>
 8001cb8:	4948      	ldr	r1, [pc, #288]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001cba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001cbc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001cc0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001cc4:	4302      	orrs	r2, r0
 8001cc6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
 8001cca:	04d9      	lsls	r1, r3, #19
 8001ccc:	d508      	bpl.n	8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x194>
 8001cce:	4943      	ldr	r1, [pc, #268]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001cd0:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8001cd2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001cd6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001cda:	4302      	orrs	r2, r0
 8001cdc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
 8001ce0:	049a      	lsls	r2, r3, #18
 8001ce2:	d508      	bpl.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001ce4:	493d      	ldr	r1, [pc, #244]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001ce6:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001ce8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001cec:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001cf0:	4302      	orrs	r2, r0
 8001cf2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
 8001cf6:	025f      	lsls	r7, r3, #9
 8001cf8:	d508      	bpl.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8001cfa:	4938      	ldr	r1, [pc, #224]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001cfc:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8001cfe:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001d02:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001d06:	4302      	orrs	r2, r0
 8001d08:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
 8001d0c:	0298      	lsls	r0, r3, #10
 8001d0e:	d50c      	bpl.n	8001d2a <HAL_RCCEx_PeriphCLKConfig+0x1de>
 8001d10:	4932      	ldr	r1, [pc, #200]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001d12:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8001d14:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001d18:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
 8001d1c:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
 8001d20:	bf08      	it	eq
 8001d22:	2501      	moveq	r5, #1
 8001d24:	4302      	orrs	r2, r0
 8001d26:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
 8001d2a:	f013 0f08 	tst.w	r3, #8
 8001d2e:	bf18      	it	ne
 8001d30:	2501      	movne	r5, #1
 8001d32:	0359      	lsls	r1, r3, #13
 8001d34:	d508      	bpl.n	8001d48 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
 8001d36:	4929      	ldr	r1, [pc, #164]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001d38:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8001d3a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001d3e:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001d42:	4302      	orrs	r2, r0
 8001d44:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
 8001d48:	021a      	lsls	r2, r3, #8
 8001d4a:	d509      	bpl.n	8001d60 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8001d4c:	4923      	ldr	r1, [pc, #140]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001d4e:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8001d52:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001d56:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001d5a:	4302      	orrs	r2, r0
 8001d5c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
 8001d60:	015f      	lsls	r7, r3, #5
 8001d62:	d509      	bpl.n	8001d78 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 8001d64:	491d      	ldr	r1, [pc, #116]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001d66:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8001d6a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001d6e:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8001d72:	4302      	orrs	r2, r0
 8001d74:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
 8001d78:	0118      	lsls	r0, r3, #4
 8001d7a:	d509      	bpl.n	8001d90 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8001d7c:	4917      	ldr	r1, [pc, #92]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001d7e:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8001d82:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8001d86:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8001d8a:	4302      	orrs	r2, r0
 8001d8c:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
 8001d90:	00d9      	lsls	r1, r3, #3
 8001d92:	d40b      	bmi.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0x260>
 8001d94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001d98:	d016      	beq.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8001d9a:	07f2      	lsls	r2, r6, #31
 8001d9c:	d414      	bmi.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8001d9e:	2d01      	cmp	r5, #1
 8001da0:	f000 80d0 	beq.w	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8001da4:	2000      	movs	r0, #0
 8001da6:	b003      	add	sp, #12
 8001da8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001dac:	490b      	ldr	r1, [pc, #44]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001dae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001db2:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8001db6:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8001dba:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001dbe:	ea42 0200 	orr.w	r2, r2, r0
 8001dc2:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
 8001dc6:	d1e8      	bne.n	8001d9a <HAL_RCCEx_PeriphCLKConfig+0x24e>
 8001dc8:	4b04      	ldr	r3, [pc, #16]	; (8001ddc <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	461e      	mov	r6, r3
 8001dce:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	f7fe fc34 	bl	8000640 <HAL_GetTick>
 8001dd8:	4607      	mov	r7, r0
 8001dda:	e006      	b.n	8001dea <HAL_RCCEx_PeriphCLKConfig+0x29e>
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	f7fe fc2e 	bl	8000640 <HAL_GetTick>
 8001de4:	1bc0      	subs	r0, r0, r7
 8001de6:	2864      	cmp	r0, #100	; 0x64
 8001de8:	d85b      	bhi.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8001dea:	6833      	ldr	r3, [r6, #0]
 8001dec:	011b      	lsls	r3, r3, #4
 8001dee:	d4f7      	bmi.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0x294>
 8001df0:	6823      	ldr	r3, [r4, #0]
 8001df2:	07df      	lsls	r7, r3, #31
 8001df4:	d512      	bpl.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8001df6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001df8:	b982      	cbnz	r2, 8001e1c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8001dfa:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
 8001dfe:	f8d6 7084 	ldr.w	r7, [r6, #132]	; 0x84
 8001e02:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8001e06:	6860      	ldr	r0, [r4, #4]
 8001e08:	f007 6770 	and.w	r7, r7, #251658240	; 0xf000000
 8001e0c:	68a1      	ldr	r1, [r4, #8]
 8001e0e:	433a      	orrs	r2, r7
 8001e10:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8001e14:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8001e18:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
 8001e1c:	031e      	lsls	r6, r3, #12
 8001e1e:	f100 810f 	bmi.w	8002040 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8001e22:	02d8      	lsls	r0, r3, #11
 8001e24:	d504      	bpl.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8001e26:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001e28:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8001e2c:	f000 810d 	beq.w	800204a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8001e30:	01d9      	lsls	r1, r3, #7
 8001e32:	d511      	bpl.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8001e34:	4ea4      	ldr	r6, [pc, #656]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x57c>)
 8001e36:	6860      	ldr	r0, [r4, #4]
 8001e38:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
 8001e3c:	f8d6 7084 	ldr.w	r7, [r6, #132]	; 0x84
 8001e40:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8001e44:	6921      	ldr	r1, [r4, #16]
 8001e46:	f007 47e0 	and.w	r7, r7, #1879048192	; 0x70000000
 8001e4a:	433a      	orrs	r2, r7
 8001e4c:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8001e50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001e54:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
 8001e58:	019a      	lsls	r2, r3, #6
 8001e5a:	d50d      	bpl.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0x32c>
 8001e5c:	6923      	ldr	r3, [r4, #16]
 8001e5e:	6862      	ldr	r2, [r4, #4]
 8001e60:	041b      	lsls	r3, r3, #16
 8001e62:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 8001e66:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001e6a:	4a97      	ldr	r2, [pc, #604]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x57c>)
 8001e6c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001e70:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8001e74:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8001e78:	4b93      	ldr	r3, [pc, #588]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x57c>)
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	461e      	mov	r6, r3
 8001e7e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	f7fe fbdc 	bl	8000640 <HAL_GetTick>
 8001e88:	4607      	mov	r7, r0
 8001e8a:	e004      	b.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8001e8c:	f7fe fbd8 	bl	8000640 <HAL_GetTick>
 8001e90:	1bc0      	subs	r0, r0, r7
 8001e92:	2864      	cmp	r0, #100	; 0x64
 8001e94:	d805      	bhi.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8001e96:	6833      	ldr	r3, [r6, #0]
 8001e98:	011b      	lsls	r3, r3, #4
 8001e9a:	d5f7      	bpl.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x340>
 8001e9c:	2d01      	cmp	r5, #1
 8001e9e:	d181      	bne.n	8001da4 <HAL_RCCEx_PeriphCLKConfig+0x258>
 8001ea0:	e050      	b.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8001ea2:	2003      	movs	r0, #3
 8001ea4:	b003      	add	sp, #12
 8001ea6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001eaa:	4a87      	ldr	r2, [pc, #540]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x57c>)
 8001eac:	4b87      	ldr	r3, [pc, #540]	; (80020cc <HAL_RCCEx_PeriphCLKConfig+0x580>)
 8001eae:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001eb0:	461f      	mov	r7, r3
 8001eb2:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001eb6:	6411      	str	r1, [r2, #64]	; 0x40
 8001eb8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001eba:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001ebe:	9201      	str	r2, [sp, #4]
 8001ec0:	9a01      	ldr	r2, [sp, #4]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ec8:	601a      	str	r2, [r3, #0]
 8001eca:	f7fe fbb9 	bl	8000640 <HAL_GetTick>
 8001ece:	4680      	mov	r8, r0
 8001ed0:	e005      	b.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x392>
 8001ed2:	f7fe fbb5 	bl	8000640 <HAL_GetTick>
 8001ed6:	eba0 0008 	sub.w	r0, r0, r8
 8001eda:	2864      	cmp	r0, #100	; 0x64
 8001edc:	d8e1      	bhi.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	05db      	lsls	r3, r3, #23
 8001ee2:	d5f6      	bpl.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8001ee4:	4a78      	ldr	r2, [pc, #480]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x57c>)
 8001ee6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001ee8:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8001eea:	f403 7040 	and.w	r0, r3, #768	; 0x300
 8001eee:	f411 7140 	ands.w	r1, r1, #768	; 0x300
 8001ef2:	d011      	beq.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8001ef4:	4281      	cmp	r1, r0
 8001ef6:	d00f      	beq.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8001ef8:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8001efa:	6f17      	ldr	r7, [r2, #112]	; 0x70
 8001efc:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8001f00:	f447 3780 	orr.w	r7, r7, #65536	; 0x10000
 8001f04:	6717      	str	r7, [r2, #112]	; 0x70
 8001f06:	6f17      	ldr	r7, [r2, #112]	; 0x70
 8001f08:	f427 3780 	bic.w	r7, r7, #65536	; 0x10000
 8001f0c:	6717      	str	r7, [r2, #112]	; 0x70
 8001f0e:	6711      	str	r1, [r2, #112]	; 0x70
 8001f10:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8001f12:	07cf      	lsls	r7, r1, #31
 8001f14:	f100 80c3 	bmi.w	800209e <HAL_RCCEx_PeriphCLKConfig+0x552>
 8001f18:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
 8001f1c:	f000 80b1 	beq.w	8002082 <HAL_RCCEx_PeriphCLKConfig+0x536>
 8001f20:	4969      	ldr	r1, [pc, #420]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x57c>)
 8001f22:	688a      	ldr	r2, [r1, #8]
 8001f24:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8001f28:	608a      	str	r2, [r1, #8]
 8001f2a:	4a67      	ldr	r2, [pc, #412]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x57c>)
 8001f2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f30:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8001f32:	430b      	orrs	r3, r1
 8001f34:	6713      	str	r3, [r2, #112]	; 0x70
 8001f36:	6823      	ldr	r3, [r4, #0]
 8001f38:	e64a      	b.n	8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x84>
 8001f3a:	2601      	movs	r6, #1
 8001f3c:	e641      	b.n	8001bc2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f3e:	2500      	movs	r5, #0
 8001f40:	2601      	movs	r6, #1
 8001f42:	e62b      	b.n	8001b9c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8001f44:	4b60      	ldr	r3, [pc, #384]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x57c>)
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	461d      	mov	r5, r3
 8001f4a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	f7fe fb76 	bl	8000640 <HAL_GetTick>
 8001f54:	4606      	mov	r6, r0
 8001f56:	e004      	b.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8001f58:	f7fe fb72 	bl	8000640 <HAL_GetTick>
 8001f5c:	1b80      	subs	r0, r0, r6
 8001f5e:	2864      	cmp	r0, #100	; 0x64
 8001f60:	d89f      	bhi.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8001f62:	682b      	ldr	r3, [r5, #0]
 8001f64:	009f      	lsls	r7, r3, #2
 8001f66:	d4f7      	bmi.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8001f68:	6823      	ldr	r3, [r4, #0]
 8001f6a:	031d      	lsls	r5, r3, #12
 8001f6c:	f100 8092 	bmi.w	8002094 <HAL_RCCEx_PeriphCLKConfig+0x548>
 8001f70:	02d8      	lsls	r0, r3, #11
 8001f72:	d51d      	bpl.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8001f74:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001f76:	b9da      	cbnz	r2, 8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8001f78:	4953      	ldr	r1, [pc, #332]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x57c>)
 8001f7a:	6965      	ldr	r5, [r4, #20]
 8001f7c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001f80:	f8d1 6088 	ldr.w	r6, [r1, #136]	; 0x88
 8001f84:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8001f88:	69a0      	ldr	r0, [r4, #24]
 8001f8a:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 8001f8e:	4332      	orrs	r2, r6
 8001f90:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 8001f94:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8001f98:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
 8001f9c:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8001fa0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001fa2:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 8001fa6:	3801      	subs	r0, #1
 8001fa8:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8001fac:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
 8001fb0:	0299      	lsls	r1, r3, #10
 8001fb2:	d515      	bpl.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8001fb4:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8001fb6:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 8001fba:	d111      	bne.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8001fbc:	4942      	ldr	r1, [pc, #264]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x57c>)
 8001fbe:	6965      	ldr	r5, [r4, #20]
 8001fc0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001fc4:	f8d1 6088 	ldr.w	r6, [r1, #136]	; 0x88
 8001fc8:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 8001fcc:	6a20      	ldr	r0, [r4, #32]
 8001fce:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 8001fd2:	4332      	orrs	r2, r6
 8001fd4:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 8001fd8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8001fdc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
 8001fe0:	071a      	lsls	r2, r3, #28
 8001fe2:	d519      	bpl.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
 8001fe4:	4a38      	ldr	r2, [pc, #224]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x57c>)
 8001fe6:	6965      	ldr	r5, [r4, #20]
 8001fe8:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 8001fec:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001ff0:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8001ff4:	69e0      	ldr	r0, [r4, #28]
 8001ff6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ffa:	430b      	orrs	r3, r1
 8001ffc:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8002000:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
 8002004:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002008:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800200c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800200e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002012:	430b      	orrs	r3, r1
 8002014:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002018:	4b2b      	ldr	r3, [pc, #172]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x57c>)
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	461c      	mov	r4, r3
 800201e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002022:	601a      	str	r2, [r3, #0]
 8002024:	f7fe fb0c 	bl	8000640 <HAL_GetTick>
 8002028:	4605      	mov	r5, r0
 800202a:	e005      	b.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 800202c:	f7fe fb08 	bl	8000640 <HAL_GetTick>
 8002030:	1b40      	subs	r0, r0, r5
 8002032:	2864      	cmp	r0, #100	; 0x64
 8002034:	f63f af35 	bhi.w	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8002038:	6823      	ldr	r3, [r4, #0]
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	d5f6      	bpl.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800203e:	e6b1      	b.n	8001da4 <HAL_RCCEx_PeriphCLKConfig+0x258>
 8002040:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002042:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8002046:	f47f aeec 	bne.w	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 800204a:	4e1f      	ldr	r6, [pc, #124]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x57c>)
 800204c:	6860      	ldr	r0, [r4, #4]
 800204e:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
 8002052:	f8d6 7084 	ldr.w	r7, [r6, #132]	; 0x84
 8002056:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 800205a:	68e1      	ldr	r1, [r4, #12]
 800205c:	f007 47e0 	and.w	r7, r7, #1879048192	; 0x70000000
 8002060:	433a      	orrs	r2, r7
 8002062:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 8002066:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800206a:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
 800206e:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 8002072:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002074:	f021 011f 	bic.w	r1, r1, #31
 8002078:	3a01      	subs	r2, #1
 800207a:	430a      	orrs	r2, r1
 800207c:	f8c6 208c 	str.w	r2, [r6, #140]	; 0x8c
 8002080:	e6d6      	b.n	8001e30 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8002082:	4811      	ldr	r0, [pc, #68]	; (80020c8 <HAL_RCCEx_PeriphCLKConfig+0x57c>)
 8002084:	4912      	ldr	r1, [pc, #72]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8002086:	6882      	ldr	r2, [r0, #8]
 8002088:	4019      	ands	r1, r3
 800208a:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800208e:	430a      	orrs	r2, r1
 8002090:	6082      	str	r2, [r0, #8]
 8002092:	e74a      	b.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002094:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002096:	2a00      	cmp	r2, #0
 8002098:	f43f af6e 	beq.w	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 800209c:	e768      	b.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x424>
 800209e:	4617      	mov	r7, r2
 80020a0:	f241 3888 	movw	r8, #5000	; 0x1388
 80020a4:	f7fe facc 	bl	8000640 <HAL_GetTick>
 80020a8:	4681      	mov	r9, r0
 80020aa:	e006      	b.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x56e>
 80020ac:	f7fe fac8 	bl	8000640 <HAL_GetTick>
 80020b0:	eba0 0009 	sub.w	r0, r0, r9
 80020b4:	4540      	cmp	r0, r8
 80020b6:	f63f aef4 	bhi.w	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x356>
 80020ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020bc:	0799      	lsls	r1, r3, #30
 80020be:	d5f5      	bpl.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x560>
 80020c0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80020c2:	f403 7040 	and.w	r0, r3, #768	; 0x300
 80020c6:	e727      	b.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80020c8:	40023800 	.word	0x40023800
 80020cc:	40007000 	.word	0x40007000
 80020d0:	0ffffcff 	.word	0x0ffffcff

080020d4 <HAL_TIM_Base_MspInit>:
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop

080020d8 <HAL_TIM_Base_Init>:
 80020d8:	2800      	cmp	r0, #0
 80020da:	d065      	beq.n	80021a8 <HAL_TIM_Base_Init+0xd0>
 80020dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020de:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80020e2:	4604      	mov	r4, r0
 80020e4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d03b      	beq.n	8002164 <HAL_TIM_Base_Init+0x8c>
 80020ec:	6822      	ldr	r2, [r4, #0]
 80020ee:	2002      	movs	r0, #2
 80020f0:	4e36      	ldr	r6, [pc, #216]	; (80021cc <HAL_TIM_Base_Init+0xf4>)
 80020f2:	4f37      	ldr	r7, [pc, #220]	; (80021d0 <HAL_TIM_Base_Init+0xf8>)
 80020f4:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80020f8:	eba2 0606 	sub.w	r6, r2, r6
 80020fc:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
 8002100:	eba2 0707 	sub.w	r7, r2, r7
 8002104:	6813      	ldr	r3, [r2, #0]
 8002106:	fab6 f686 	clz	r6, r6
 800210a:	fab7 f787 	clz	r7, r7
 800210e:	ea4f 1656 	mov.w	r6, r6, lsr #5
 8002112:	ea4f 1757 	mov.w	r7, r7, lsr #5
 8002116:	d02a      	beq.n	800216e <HAL_TIM_Base_Init+0x96>
 8002118:	bb4e      	cbnz	r6, 800216e <HAL_TIM_Base_Init+0x96>
 800211a:	492e      	ldr	r1, [pc, #184]	; (80021d4 <HAL_TIM_Base_Init+0xfc>)
 800211c:	428a      	cmp	r2, r1
 800211e:	d045      	beq.n	80021ac <HAL_TIM_Base_Init+0xd4>
 8002120:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002124:	428a      	cmp	r2, r1
 8002126:	d041      	beq.n	80021ac <HAL_TIM_Base_Init+0xd4>
 8002128:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800212c:	428a      	cmp	r2, r1
 800212e:	d042      	beq.n	80021b6 <HAL_TIM_Base_Init+0xde>
 8002130:	2f00      	cmp	r7, #0
 8002132:	d140      	bne.n	80021b6 <HAL_TIM_Base_Init+0xde>
 8002134:	4928      	ldr	r1, [pc, #160]	; (80021d8 <HAL_TIM_Base_Init+0x100>)
 8002136:	428a      	cmp	r2, r1
 8002138:	d01e      	beq.n	8002178 <HAL_TIM_Base_Init+0xa0>
 800213a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800213e:	428a      	cmp	r2, r1
 8002140:	d01a      	beq.n	8002178 <HAL_TIM_Base_Init+0xa0>
 8002142:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002146:	428a      	cmp	r2, r1
 8002148:	d016      	beq.n	8002178 <HAL_TIM_Base_Init+0xa0>
 800214a:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 800214e:	428a      	cmp	r2, r1
 8002150:	d012      	beq.n	8002178 <HAL_TIM_Base_Init+0xa0>
 8002152:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002156:	428a      	cmp	r2, r1
 8002158:	d00e      	beq.n	8002178 <HAL_TIM_Base_Init+0xa0>
 800215a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800215e:	428a      	cmp	r2, r1
 8002160:	d10e      	bne.n	8002180 <HAL_TIM_Base_Init+0xa8>
 8002162:	e009      	b.n	8002178 <HAL_TIM_Base_Init+0xa0>
 8002164:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
 8002168:	f7ff ffb4 	bl	80020d4 <HAL_TIM_Base_MspInit>
 800216c:	e7be      	b.n	80020ec <HAL_TIM_Base_Init+0x14>
 800216e:	f023 0570 	bic.w	r5, r3, #112	; 0x70
 8002172:	68a0      	ldr	r0, [r4, #8]
 8002174:	ea45 0300 	orr.w	r3, r5, r0
 8002178:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800217c:	6920      	ldr	r0, [r4, #16]
 800217e:	4303      	orrs	r3, r0
 8002180:	69a1      	ldr	r1, [r4, #24]
 8002182:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002186:	68e0      	ldr	r0, [r4, #12]
 8002188:	430b      	orrs	r3, r1
 800218a:	6861      	ldr	r1, [r4, #4]
 800218c:	6013      	str	r3, [r2, #0]
 800218e:	62d0      	str	r0, [r2, #44]	; 0x2c
 8002190:	6291      	str	r1, [r2, #40]	; 0x28
 8002192:	b936      	cbnz	r6, 80021a2 <HAL_TIM_Base_Init+0xca>
 8002194:	b92f      	cbnz	r7, 80021a2 <HAL_TIM_Base_Init+0xca>
 8002196:	2301      	movs	r3, #1
 8002198:	2000      	movs	r0, #0
 800219a:	6153      	str	r3, [r2, #20]
 800219c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 80021a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021a2:	6963      	ldr	r3, [r4, #20]
 80021a4:	6313      	str	r3, [r2, #48]	; 0x30
 80021a6:	e7f6      	b.n	8002196 <HAL_TIM_Base_Init+0xbe>
 80021a8:	2001      	movs	r0, #1
 80021aa:	4770      	bx	lr
 80021ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021b0:	68a1      	ldr	r1, [r4, #8]
 80021b2:	430b      	orrs	r3, r1
 80021b4:	e7e0      	b.n	8002178 <HAL_TIM_Base_Init+0xa0>
 80021b6:	4909      	ldr	r1, [pc, #36]	; (80021dc <HAL_TIM_Base_Init+0x104>)
 80021b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021bc:	68a0      	ldr	r0, [r4, #8]
 80021be:	428a      	cmp	r2, r1
 80021c0:	ea43 0300 	orr.w	r3, r3, r0
 80021c4:	d0d8      	beq.n	8002178 <HAL_TIM_Base_Init+0xa0>
 80021c6:	2f00      	cmp	r7, #0
 80021c8:	d1d6      	bne.n	8002178 <HAL_TIM_Base_Init+0xa0>
 80021ca:	e7b3      	b.n	8002134 <HAL_TIM_Base_Init+0x5c>
 80021cc:	40010000 	.word	0x40010000
 80021d0:	40010400 	.word	0x40010400
 80021d4:	40000400 	.word	0x40000400
 80021d8:	40014000 	.word	0x40014000
 80021dc:	40000c00 	.word	0x40000c00

080021e0 <HAL_TIM_Base_Start_IT>:
 80021e0:	6803      	ldr	r3, [r0, #0]
 80021e2:	4a09      	ldr	r2, [pc, #36]	; (8002208 <HAL_TIM_Base_Start_IT+0x28>)
 80021e4:	68d9      	ldr	r1, [r3, #12]
 80021e6:	f041 0101 	orr.w	r1, r1, #1
 80021ea:	60d9      	str	r1, [r3, #12]
 80021ec:	6899      	ldr	r1, [r3, #8]
 80021ee:	400a      	ands	r2, r1
 80021f0:	2a06      	cmp	r2, #6
 80021f2:	d006      	beq.n	8002202 <HAL_TIM_Base_Start_IT+0x22>
 80021f4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80021f8:	d003      	beq.n	8002202 <HAL_TIM_Base_Start_IT+0x22>
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	f042 0201 	orr.w	r2, r2, #1
 8002200:	601a      	str	r2, [r3, #0]
 8002202:	2000      	movs	r0, #0
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	00010007 	.word	0x00010007

0800220c <HAL_TIM_OC_DelayElapsedCallback>:
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop

08002210 <HAL_TIM_IC_CaptureCallback>:
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop

08002214 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop

08002218 <HAL_TIM_TriggerCallback>:
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop

0800221c <HAL_TIM_IRQHandler>:
 800221c:	6803      	ldr	r3, [r0, #0]
 800221e:	691a      	ldr	r2, [r3, #16]
 8002220:	0791      	lsls	r1, r2, #30
 8002222:	b510      	push	{r4, lr}
 8002224:	4604      	mov	r4, r0
 8002226:	d502      	bpl.n	800222e <HAL_TIM_IRQHandler+0x12>
 8002228:	68da      	ldr	r2, [r3, #12]
 800222a:	0792      	lsls	r2, r2, #30
 800222c:	d468      	bmi.n	8002300 <HAL_TIM_IRQHandler+0xe4>
 800222e:	691a      	ldr	r2, [r3, #16]
 8002230:	0752      	lsls	r2, r2, #29
 8002232:	d502      	bpl.n	800223a <HAL_TIM_IRQHandler+0x1e>
 8002234:	68da      	ldr	r2, [r3, #12]
 8002236:	0750      	lsls	r0, r2, #29
 8002238:	d44f      	bmi.n	80022da <HAL_TIM_IRQHandler+0xbe>
 800223a:	691a      	ldr	r2, [r3, #16]
 800223c:	0711      	lsls	r1, r2, #28
 800223e:	d502      	bpl.n	8002246 <HAL_TIM_IRQHandler+0x2a>
 8002240:	68da      	ldr	r2, [r3, #12]
 8002242:	0712      	lsls	r2, r2, #28
 8002244:	d437      	bmi.n	80022b6 <HAL_TIM_IRQHandler+0x9a>
 8002246:	691a      	ldr	r2, [r3, #16]
 8002248:	06d0      	lsls	r0, r2, #27
 800224a:	d502      	bpl.n	8002252 <HAL_TIM_IRQHandler+0x36>
 800224c:	68da      	ldr	r2, [r3, #12]
 800224e:	06d1      	lsls	r1, r2, #27
 8002250:	d41e      	bmi.n	8002290 <HAL_TIM_IRQHandler+0x74>
 8002252:	691a      	ldr	r2, [r3, #16]
 8002254:	07d2      	lsls	r2, r2, #31
 8002256:	d502      	bpl.n	800225e <HAL_TIM_IRQHandler+0x42>
 8002258:	68da      	ldr	r2, [r3, #12]
 800225a:	07d0      	lsls	r0, r2, #31
 800225c:	d469      	bmi.n	8002332 <HAL_TIM_IRQHandler+0x116>
 800225e:	691a      	ldr	r2, [r3, #16]
 8002260:	0611      	lsls	r1, r2, #24
 8002262:	d502      	bpl.n	800226a <HAL_TIM_IRQHandler+0x4e>
 8002264:	68da      	ldr	r2, [r3, #12]
 8002266:	0612      	lsls	r2, r2, #24
 8002268:	d46b      	bmi.n	8002342 <HAL_TIM_IRQHandler+0x126>
 800226a:	691a      	ldr	r2, [r3, #16]
 800226c:	05d0      	lsls	r0, r2, #23
 800226e:	d502      	bpl.n	8002276 <HAL_TIM_IRQHandler+0x5a>
 8002270:	68da      	ldr	r2, [r3, #12]
 8002272:	0611      	lsls	r1, r2, #24
 8002274:	d46d      	bmi.n	8002352 <HAL_TIM_IRQHandler+0x136>
 8002276:	691a      	ldr	r2, [r3, #16]
 8002278:	0652      	lsls	r2, r2, #25
 800227a:	d502      	bpl.n	8002282 <HAL_TIM_IRQHandler+0x66>
 800227c:	68da      	ldr	r2, [r3, #12]
 800227e:	0650      	lsls	r0, r2, #25
 8002280:	d46f      	bmi.n	8002362 <HAL_TIM_IRQHandler+0x146>
 8002282:	691a      	ldr	r2, [r3, #16]
 8002284:	0691      	lsls	r1, r2, #26
 8002286:	d502      	bpl.n	800228e <HAL_TIM_IRQHandler+0x72>
 8002288:	68da      	ldr	r2, [r3, #12]
 800228a:	0692      	lsls	r2, r2, #26
 800228c:	d449      	bmi.n	8002322 <HAL_TIM_IRQHandler+0x106>
 800228e:	bd10      	pop	{r4, pc}
 8002290:	f06f 0110 	mvn.w	r1, #16
 8002294:	2208      	movs	r2, #8
 8002296:	4620      	mov	r0, r4
 8002298:	6119      	str	r1, [r3, #16]
 800229a:	69db      	ldr	r3, [r3, #28]
 800229c:	7722      	strb	r2, [r4, #28]
 800229e:	f413 7f40 	tst.w	r3, #768	; 0x300
 80022a2:	d16f      	bne.n	8002384 <HAL_TIM_IRQHandler+0x168>
 80022a4:	f7ff ffb2 	bl	800220c <HAL_TIM_OC_DelayElapsedCallback>
 80022a8:	4620      	mov	r0, r4
 80022aa:	f7ff ffb3 	bl	8002214 <HAL_TIM_PWM_PulseFinishedCallback>
 80022ae:	2200      	movs	r2, #0
 80022b0:	6823      	ldr	r3, [r4, #0]
 80022b2:	7722      	strb	r2, [r4, #28]
 80022b4:	e7cd      	b.n	8002252 <HAL_TIM_IRQHandler+0x36>
 80022b6:	f06f 0108 	mvn.w	r1, #8
 80022ba:	2204      	movs	r2, #4
 80022bc:	4620      	mov	r0, r4
 80022be:	6119      	str	r1, [r3, #16]
 80022c0:	69db      	ldr	r3, [r3, #28]
 80022c2:	7722      	strb	r2, [r4, #28]
 80022c4:	079b      	lsls	r3, r3, #30
 80022c6:	d15a      	bne.n	800237e <HAL_TIM_IRQHandler+0x162>
 80022c8:	f7ff ffa0 	bl	800220c <HAL_TIM_OC_DelayElapsedCallback>
 80022cc:	4620      	mov	r0, r4
 80022ce:	f7ff ffa1 	bl	8002214 <HAL_TIM_PWM_PulseFinishedCallback>
 80022d2:	2200      	movs	r2, #0
 80022d4:	6823      	ldr	r3, [r4, #0]
 80022d6:	7722      	strb	r2, [r4, #28]
 80022d8:	e7b5      	b.n	8002246 <HAL_TIM_IRQHandler+0x2a>
 80022da:	f06f 0104 	mvn.w	r1, #4
 80022de:	2202      	movs	r2, #2
 80022e0:	4620      	mov	r0, r4
 80022e2:	6119      	str	r1, [r3, #16]
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	7722      	strb	r2, [r4, #28]
 80022e8:	f413 7f40 	tst.w	r3, #768	; 0x300
 80022ec:	d144      	bne.n	8002378 <HAL_TIM_IRQHandler+0x15c>
 80022ee:	f7ff ff8d 	bl	800220c <HAL_TIM_OC_DelayElapsedCallback>
 80022f2:	4620      	mov	r0, r4
 80022f4:	f7ff ff8e 	bl	8002214 <HAL_TIM_PWM_PulseFinishedCallback>
 80022f8:	2200      	movs	r2, #0
 80022fa:	6823      	ldr	r3, [r4, #0]
 80022fc:	7722      	strb	r2, [r4, #28]
 80022fe:	e79c      	b.n	800223a <HAL_TIM_IRQHandler+0x1e>
 8002300:	f06f 0102 	mvn.w	r1, #2
 8002304:	2201      	movs	r2, #1
 8002306:	6119      	str	r1, [r3, #16]
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	7702      	strb	r2, [r0, #28]
 800230c:	0799      	lsls	r1, r3, #30
 800230e:	d130      	bne.n	8002372 <HAL_TIM_IRQHandler+0x156>
 8002310:	f7ff ff7c 	bl	800220c <HAL_TIM_OC_DelayElapsedCallback>
 8002314:	4620      	mov	r0, r4
 8002316:	f7ff ff7d 	bl	8002214 <HAL_TIM_PWM_PulseFinishedCallback>
 800231a:	2200      	movs	r2, #0
 800231c:	6823      	ldr	r3, [r4, #0]
 800231e:	7722      	strb	r2, [r4, #28]
 8002320:	e785      	b.n	800222e <HAL_TIM_IRQHandler+0x12>
 8002322:	f06f 0220 	mvn.w	r2, #32
 8002326:	4620      	mov	r0, r4
 8002328:	611a      	str	r2, [r3, #16]
 800232a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800232e:	f000 b82d 	b.w	800238c <HAL_TIMEx_CommutCallback>
 8002332:	f06f 0201 	mvn.w	r2, #1
 8002336:	4620      	mov	r0, r4
 8002338:	611a      	str	r2, [r3, #16]
 800233a:	f008 fef9 	bl	800b130 <HAL_TIM_PeriodElapsedCallback>
 800233e:	6823      	ldr	r3, [r4, #0]
 8002340:	e78d      	b.n	800225e <HAL_TIM_IRQHandler+0x42>
 8002342:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002346:	4620      	mov	r0, r4
 8002348:	611a      	str	r2, [r3, #16]
 800234a:	f000 f821 	bl	8002390 <HAL_TIMEx_BreakCallback>
 800234e:	6823      	ldr	r3, [r4, #0]
 8002350:	e78b      	b.n	800226a <HAL_TIM_IRQHandler+0x4e>
 8002352:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002356:	4620      	mov	r0, r4
 8002358:	611a      	str	r2, [r3, #16]
 800235a:	f000 f81b 	bl	8002394 <HAL_TIMEx_Break2Callback>
 800235e:	6823      	ldr	r3, [r4, #0]
 8002360:	e789      	b.n	8002276 <HAL_TIM_IRQHandler+0x5a>
 8002362:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002366:	4620      	mov	r0, r4
 8002368:	611a      	str	r2, [r3, #16]
 800236a:	f7ff ff55 	bl	8002218 <HAL_TIM_TriggerCallback>
 800236e:	6823      	ldr	r3, [r4, #0]
 8002370:	e787      	b.n	8002282 <HAL_TIM_IRQHandler+0x66>
 8002372:	f7ff ff4d 	bl	8002210 <HAL_TIM_IC_CaptureCallback>
 8002376:	e7d0      	b.n	800231a <HAL_TIM_IRQHandler+0xfe>
 8002378:	f7ff ff4a 	bl	8002210 <HAL_TIM_IC_CaptureCallback>
 800237c:	e7bc      	b.n	80022f8 <HAL_TIM_IRQHandler+0xdc>
 800237e:	f7ff ff47 	bl	8002210 <HAL_TIM_IC_CaptureCallback>
 8002382:	e7a6      	b.n	80022d2 <HAL_TIM_IRQHandler+0xb6>
 8002384:	f7ff ff44 	bl	8002210 <HAL_TIM_IC_CaptureCallback>
 8002388:	e791      	b.n	80022ae <HAL_TIM_IRQHandler+0x92>
 800238a:	bf00      	nop

0800238c <HAL_TIMEx_CommutCallback>:
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop

08002390 <HAL_TIMEx_BreakCallback>:
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop

08002394 <HAL_TIMEx_Break2Callback>:
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop

08002398 <HAL_UART_Transmit>:
 8002398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800239c:	461d      	mov	r5, r3
 800239e:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80023a0:	b082      	sub	sp, #8
 80023a2:	2b20      	cmp	r3, #32
 80023a4:	d146      	bne.n	8002434 <HAL_UART_Transmit+0x9c>
 80023a6:	4688      	mov	r8, r1
 80023a8:	2900      	cmp	r1, #0
 80023aa:	d047      	beq.n	800243c <HAL_UART_Transmit+0xa4>
 80023ac:	fab2 f682 	clz	r6, r2
 80023b0:	9201      	str	r2, [sp, #4]
 80023b2:	0976      	lsrs	r6, r6, #5
 80023b4:	2e00      	cmp	r6, #0
 80023b6:	d141      	bne.n	800243c <HAL_UART_Transmit+0xa4>
 80023b8:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 80023bc:	4604      	mov	r4, r0
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d038      	beq.n	8002434 <HAL_UART_Transmit+0x9c>
 80023c2:	2321      	movs	r3, #33	; 0x21
 80023c4:	2101      	movs	r1, #1
 80023c6:	67c6      	str	r6, [r0, #124]	; 0x7c
 80023c8:	f880 1070 	strb.w	r1, [r0, #112]	; 0x70
 80023cc:	6743      	str	r3, [r0, #116]	; 0x74
 80023ce:	f7fe f937 	bl	8000640 <HAL_GetTick>
 80023d2:	68a3      	ldr	r3, [r4, #8]
 80023d4:	9a01      	ldr	r2, [sp, #4]
 80023d6:	4607      	mov	r7, r0
 80023d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023dc:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 80023e0:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 80023e4:	d05d      	beq.n	80024a2 <HAL_UART_Transmit+0x10a>
 80023e6:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 80023ea:	6820      	ldr	r0, [r4, #0]
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	b1ab      	cbz	r3, 800241c <HAL_UART_Transmit+0x84>
 80023f0:	1c69      	adds	r1, r5, #1
 80023f2:	d127      	bne.n	8002444 <HAL_UART_Transmit+0xac>
 80023f4:	69c2      	ldr	r2, [r0, #28]
 80023f6:	0612      	lsls	r2, r2, #24
 80023f8:	d5fc      	bpl.n	80023f4 <HAL_UART_Transmit+0x5c>
 80023fa:	f1b8 0f00 	cmp.w	r8, #0
 80023fe:	d02c      	beq.n	800245a <HAL_UART_Transmit+0xc2>
 8002400:	f818 3b01 	ldrb.w	r3, [r8], #1
 8002404:	6283      	str	r3, [r0, #40]	; 0x28
 8002406:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800240a:	3b01      	subs	r3, #1
 800240c:	b29b      	uxth	r3, r3
 800240e:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8002412:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8002416:	b29b      	uxth	r3, r3
 8002418:	2b00      	cmp	r3, #0
 800241a:	d1e9      	bne.n	80023f0 <HAL_UART_Transmit+0x58>
 800241c:	1c69      	adds	r1, r5, #1
 800241e:	d134      	bne.n	800248a <HAL_UART_Transmit+0xf2>
 8002420:	69c3      	ldr	r3, [r0, #28]
 8002422:	065a      	lsls	r2, r3, #25
 8002424:	d5fc      	bpl.n	8002420 <HAL_UART_Transmit+0x88>
 8002426:	2300      	movs	r3, #0
 8002428:	2220      	movs	r2, #32
 800242a:	4618      	mov	r0, r3
 800242c:	6762      	str	r2, [r4, #116]	; 0x74
 800242e:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 8002432:	e000      	b.n	8002436 <HAL_UART_Transmit+0x9e>
 8002434:	2002      	movs	r0, #2
 8002436:	b002      	add	sp, #8
 8002438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800243c:	2001      	movs	r0, #1
 800243e:	b002      	add	sp, #8
 8002440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002444:	69c3      	ldr	r3, [r0, #28]
 8002446:	061b      	lsls	r3, r3, #24
 8002448:	d4d7      	bmi.n	80023fa <HAL_UART_Transmit+0x62>
 800244a:	f7fe f8f9 	bl	8000640 <HAL_GetTick>
 800244e:	1bc0      	subs	r0, r0, r7
 8002450:	4285      	cmp	r5, r0
 8002452:	d307      	bcc.n	8002464 <HAL_UART_Transmit+0xcc>
 8002454:	b135      	cbz	r5, 8002464 <HAL_UART_Transmit+0xcc>
 8002456:	6820      	ldr	r0, [r4, #0]
 8002458:	e7ca      	b.n	80023f0 <HAL_UART_Transmit+0x58>
 800245a:	f836 3b02 	ldrh.w	r3, [r6], #2
 800245e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002462:	e7cf      	b.n	8002404 <HAL_UART_Transmit+0x6c>
 8002464:	6823      	ldr	r3, [r4, #0]
 8002466:	2120      	movs	r1, #32
 8002468:	2500      	movs	r5, #0
 800246a:	2003      	movs	r0, #3
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	689a      	ldr	r2, [r3, #8]
 8002476:	f022 0201 	bic.w	r2, r2, #1
 800247a:	609a      	str	r2, [r3, #8]
 800247c:	6761      	str	r1, [r4, #116]	; 0x74
 800247e:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
 8002482:	67a1      	str	r1, [r4, #120]	; 0x78
 8002484:	b002      	add	sp, #8
 8002486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800248a:	69c3      	ldr	r3, [r0, #28]
 800248c:	065b      	lsls	r3, r3, #25
 800248e:	d4ca      	bmi.n	8002426 <HAL_UART_Transmit+0x8e>
 8002490:	f7fe f8d6 	bl	8000640 <HAL_GetTick>
 8002494:	1bc0      	subs	r0, r0, r7
 8002496:	4285      	cmp	r5, r0
 8002498:	d3e4      	bcc.n	8002464 <HAL_UART_Transmit+0xcc>
 800249a:	2d00      	cmp	r5, #0
 800249c:	d0e2      	beq.n	8002464 <HAL_UART_Transmit+0xcc>
 800249e:	6820      	ldr	r0, [r4, #0]
 80024a0:	e7bc      	b.n	800241c <HAL_UART_Transmit+0x84>
 80024a2:	6923      	ldr	r3, [r4, #16]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d19e      	bne.n	80023e6 <HAL_UART_Transmit+0x4e>
 80024a8:	4646      	mov	r6, r8
 80024aa:	4698      	mov	r8, r3
 80024ac:	e79b      	b.n	80023e6 <HAL_UART_Transmit+0x4e>
 80024ae:	bf00      	nop

080024b0 <UART_AdvFeatureConfig>:
 80024b0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80024b2:	07da      	lsls	r2, r3, #31
 80024b4:	b410      	push	{r4}
 80024b6:	d506      	bpl.n	80024c6 <UART_AdvFeatureConfig+0x16>
 80024b8:	6801      	ldr	r1, [r0, #0]
 80024ba:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80024bc:	684a      	ldr	r2, [r1, #4]
 80024be:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80024c2:	4322      	orrs	r2, r4
 80024c4:	604a      	str	r2, [r1, #4]
 80024c6:	079c      	lsls	r4, r3, #30
 80024c8:	d506      	bpl.n	80024d8 <UART_AdvFeatureConfig+0x28>
 80024ca:	6801      	ldr	r1, [r0, #0]
 80024cc:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80024ce:	684a      	ldr	r2, [r1, #4]
 80024d0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80024d4:	4322      	orrs	r2, r4
 80024d6:	604a      	str	r2, [r1, #4]
 80024d8:	0759      	lsls	r1, r3, #29
 80024da:	d506      	bpl.n	80024ea <UART_AdvFeatureConfig+0x3a>
 80024dc:	6801      	ldr	r1, [r0, #0]
 80024de:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80024e0:	684a      	ldr	r2, [r1, #4]
 80024e2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80024e6:	4322      	orrs	r2, r4
 80024e8:	604a      	str	r2, [r1, #4]
 80024ea:	071a      	lsls	r2, r3, #28
 80024ec:	d506      	bpl.n	80024fc <UART_AdvFeatureConfig+0x4c>
 80024ee:	6801      	ldr	r1, [r0, #0]
 80024f0:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80024f2:	684a      	ldr	r2, [r1, #4]
 80024f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024f8:	4322      	orrs	r2, r4
 80024fa:	604a      	str	r2, [r1, #4]
 80024fc:	06dc      	lsls	r4, r3, #27
 80024fe:	d506      	bpl.n	800250e <UART_AdvFeatureConfig+0x5e>
 8002500:	6801      	ldr	r1, [r0, #0]
 8002502:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002504:	688a      	ldr	r2, [r1, #8]
 8002506:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800250a:	4322      	orrs	r2, r4
 800250c:	608a      	str	r2, [r1, #8]
 800250e:	0699      	lsls	r1, r3, #26
 8002510:	d506      	bpl.n	8002520 <UART_AdvFeatureConfig+0x70>
 8002512:	6801      	ldr	r1, [r0, #0]
 8002514:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002516:	688a      	ldr	r2, [r1, #8]
 8002518:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800251c:	4322      	orrs	r2, r4
 800251e:	608a      	str	r2, [r1, #8]
 8002520:	065a      	lsls	r2, r3, #25
 8002522:	d50a      	bpl.n	800253a <UART_AdvFeatureConfig+0x8a>
 8002524:	6801      	ldr	r1, [r0, #0]
 8002526:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002528:	684a      	ldr	r2, [r1, #4]
 800252a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800252e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002532:	ea42 0204 	orr.w	r2, r2, r4
 8002536:	604a      	str	r2, [r1, #4]
 8002538:	d00b      	beq.n	8002552 <UART_AdvFeatureConfig+0xa2>
 800253a:	061b      	lsls	r3, r3, #24
 800253c:	d506      	bpl.n	800254c <UART_AdvFeatureConfig+0x9c>
 800253e:	6802      	ldr	r2, [r0, #0]
 8002540:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002542:	6853      	ldr	r3, [r2, #4]
 8002544:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002548:	430b      	orrs	r3, r1
 800254a:	6053      	str	r3, [r2, #4]
 800254c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	684a      	ldr	r2, [r1, #4]
 8002554:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002556:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800255a:	4322      	orrs	r2, r4
 800255c:	604a      	str	r2, [r1, #4]
 800255e:	e7ec      	b.n	800253a <UART_AdvFeatureConfig+0x8a>

08002560 <HAL_UART_Init>:
 8002560:	2800      	cmp	r0, #0
 8002562:	d04f      	beq.n	8002604 <HAL_UART_Init+0xa4>
 8002564:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8002566:	b570      	push	{r4, r5, r6, lr}
 8002568:	4604      	mov	r4, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d045      	beq.n	80025fa <HAL_UART_Init+0x9a>
 800256e:	6823      	ldr	r3, [r4, #0]
 8002570:	2124      	movs	r1, #36	; 0x24
 8002572:	6920      	ldr	r0, [r4, #16]
 8002574:	6761      	str	r1, [r4, #116]	; 0x74
 8002576:	68a2      	ldr	r2, [r4, #8]
 8002578:	6819      	ldr	r1, [r3, #0]
 800257a:	4302      	orrs	r2, r0
 800257c:	6960      	ldr	r0, [r4, #20]
 800257e:	f021 0101 	bic.w	r1, r1, #1
 8002582:	4dbf      	ldr	r5, [pc, #764]	; (8002880 <HAL_UART_Init+0x320>)
 8002584:	4302      	orrs	r2, r0
 8002586:	69e0      	ldr	r0, [r4, #28]
 8002588:	6019      	str	r1, [r3, #0]
 800258a:	6819      	ldr	r1, [r3, #0]
 800258c:	4302      	orrs	r2, r0
 800258e:	68e6      	ldr	r6, [r4, #12]
 8002590:	400d      	ands	r5, r1
 8002592:	69a1      	ldr	r1, [r4, #24]
 8002594:	432a      	orrs	r2, r5
 8002596:	6a25      	ldr	r5, [r4, #32]
 8002598:	601a      	str	r2, [r3, #0]
 800259a:	ea41 0205 	orr.w	r2, r1, r5
 800259e:	6859      	ldr	r1, [r3, #4]
 80025a0:	4db8      	ldr	r5, [pc, #736]	; (8002884 <HAL_UART_Init+0x324>)
 80025a2:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 80025a6:	42ab      	cmp	r3, r5
 80025a8:	ea41 0106 	orr.w	r1, r1, r6
 80025ac:	6059      	str	r1, [r3, #4]
 80025ae:	6899      	ldr	r1, [r3, #8]
 80025b0:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 80025b4:	ea42 0201 	orr.w	r2, r2, r1
 80025b8:	609a      	str	r2, [r3, #8]
 80025ba:	d025      	beq.n	8002608 <HAL_UART_Init+0xa8>
 80025bc:	4ab2      	ldr	r2, [pc, #712]	; (8002888 <HAL_UART_Init+0x328>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d044      	beq.n	800264c <HAL_UART_Init+0xec>
 80025c2:	4ab2      	ldr	r2, [pc, #712]	; (800288c <HAL_UART_Init+0x32c>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	f000 80d5 	beq.w	8002774 <HAL_UART_Init+0x214>
 80025ca:	4ab1      	ldr	r2, [pc, #708]	; (8002890 <HAL_UART_Init+0x330>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d047      	beq.n	8002660 <HAL_UART_Init+0x100>
 80025d0:	4ab0      	ldr	r2, [pc, #704]	; (8002894 <HAL_UART_Init+0x334>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	f000 80e3 	beq.w	800279e <HAL_UART_Init+0x23e>
 80025d8:	4aaf      	ldr	r2, [pc, #700]	; (8002898 <HAL_UART_Init+0x338>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	f000 816a 	beq.w	80028b4 <HAL_UART_Init+0x354>
 80025e0:	4aae      	ldr	r2, [pc, #696]	; (800289c <HAL_UART_Init+0x33c>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	f000 8179 	beq.w	80028da <HAL_UART_Init+0x37a>
 80025e8:	4aad      	ldr	r2, [pc, #692]	; (80028a0 <HAL_UART_Init+0x340>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	f000 8137 	beq.w	800285e <HAL_UART_Init+0x2fe>
 80025f0:	2300      	movs	r3, #0
 80025f2:	2001      	movs	r0, #1
 80025f4:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
 80025f8:	bd70      	pop	{r4, r5, r6, pc}
 80025fa:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
 80025fe:	f009 f92d 	bl	800b85c <HAL_UART_MspInit>
 8002602:	e7b4      	b.n	800256e <HAL_UART_Init+0xe>
 8002604:	2001      	movs	r0, #1
 8002606:	4770      	bx	lr
 8002608:	4ba6      	ldr	r3, [pc, #664]	; (80028a4 <HAL_UART_Init+0x344>)
 800260a:	4aa7      	ldr	r2, [pc, #668]	; (80028a8 <HAL_UART_Init+0x348>)
 800260c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002610:	f003 0303 	and.w	r3, r3, #3
 8002614:	5cd3      	ldrb	r3, [r2, r3]
 8002616:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800261a:	d031      	beq.n	8002680 <HAL_UART_Init+0x120>
 800261c:	2b08      	cmp	r3, #8
 800261e:	d8e7      	bhi.n	80025f0 <HAL_UART_Init+0x90>
 8002620:	a201      	add	r2, pc, #4	; (adr r2, 8002628 <HAL_UART_Init+0xc8>)
 8002622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002626:	bf00      	nop
 8002628:	08002763 	.word	0x08002763
 800262c:	080026bd 	.word	0x080026bd
 8002630:	0800278f 	.word	0x0800278f
 8002634:	080025f1 	.word	0x080025f1
 8002638:	080027b5 	.word	0x080027b5
 800263c:	080025f1 	.word	0x080025f1
 8002640:	080025f1 	.word	0x080025f1
 8002644:	080025f1 	.word	0x080025f1
 8002648:	080027c7 	.word	0x080027c7
 800264c:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 8002650:	4b95      	ldr	r3, [pc, #596]	; (80028a8 <HAL_UART_Init+0x348>)
 8002652:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002656:	f002 020c 	and.w	r2, r2, #12
 800265a:	4413      	add	r3, r2
 800265c:	791b      	ldrb	r3, [r3, #4]
 800265e:	e7da      	b.n	8002616 <HAL_UART_Init+0xb6>
 8002660:	4b90      	ldr	r3, [pc, #576]	; (80028a4 <HAL_UART_Init+0x344>)
 8002662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002666:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800266a:	2b40      	cmp	r3, #64	; 0x40
 800266c:	f000 809f 	beq.w	80027ae <HAL_UART_Init+0x24e>
 8002670:	d971      	bls.n	8002756 <HAL_UART_Init+0x1f6>
 8002672:	2b80      	cmp	r3, #128	; 0x80
 8002674:	f000 8088 	beq.w	8002788 <HAL_UART_Init+0x228>
 8002678:	2bc0      	cmp	r3, #192	; 0xc0
 800267a:	f000 80b9 	beq.w	80027f0 <HAL_UART_Init+0x290>
 800267e:	e7b7      	b.n	80025f0 <HAL_UART_Init+0x90>
 8002680:	2b08      	cmp	r3, #8
 8002682:	d8b5      	bhi.n	80025f0 <HAL_UART_Init+0x90>
 8002684:	a201      	add	r2, pc, #4	; (adr r2, 800268c <HAL_UART_Init+0x12c>)
 8002686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800268a:	bf00      	nop
 800268c:	08002859 	.word	0x08002859
 8002690:	0800282f 	.word	0x0800282f
 8002694:	08002849 	.word	0x08002849
 8002698:	080025f1 	.word	0x080025f1
 800269c:	08002843 	.word	0x08002843
 80026a0:	080025f1 	.word	0x080025f1
 80026a4:	080025f1 	.word	0x080025f1
 80026a8:	080025f1 	.word	0x080025f1
 80026ac:	080027f7 	.word	0x080027f7
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d19d      	bne.n	80025f0 <HAL_UART_Init+0x90>
 80026b4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80026b8:	f000 80b9 	beq.w	800282e <HAL_UART_Init+0x2ce>
 80026bc:	f7ff fa14 	bl	8001ae8 <HAL_RCC_GetPCLK2Freq>
 80026c0:	6863      	ldr	r3, [r4, #4]
 80026c2:	eb00 0253 	add.w	r2, r0, r3, lsr #1
 80026c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80026ca:	b292      	uxth	r2, r2
 80026cc:	f1a2 0110 	sub.w	r1, r2, #16
 80026d0:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80026d4:	4299      	cmp	r1, r3
 80026d6:	d88b      	bhi.n	80025f0 <HAL_UART_Init+0x90>
 80026d8:	6823      	ldr	r3, [r4, #0]
 80026da:	2100      	movs	r1, #0
 80026dc:	60da      	str	r2, [r3, #12]
 80026de:	e9c4 1118 	strd	r1, r1, [r4, #96]	; 0x60
 80026e2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80026e4:	2a00      	cmp	r2, #0
 80026e6:	d176      	bne.n	80027d6 <HAL_UART_Init+0x276>
 80026e8:	685a      	ldr	r2, [r3, #4]
 80026ea:	2100      	movs	r1, #0
 80026ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026f0:	605a      	str	r2, [r3, #4]
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026f8:	609a      	str	r2, [r3, #8]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	f042 0201 	orr.w	r2, r2, #1
 8002700:	601a      	str	r2, [r3, #0]
 8002702:	67e1      	str	r1, [r4, #124]	; 0x7c
 8002704:	f7fd ff9c 	bl	8000640 <HAL_GetTick>
 8002708:	6823      	ldr	r3, [r4, #0]
 800270a:	4606      	mov	r6, r0
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	0712      	lsls	r2, r2, #28
 8002710:	d407      	bmi.n	8002722 <HAL_UART_Init+0x1c2>
 8002712:	2220      	movs	r2, #32
 8002714:	2300      	movs	r3, #0
 8002716:	6762      	str	r2, [r4, #116]	; 0x74
 8002718:	4618      	mov	r0, r3
 800271a:	67a2      	str	r2, [r4, #120]	; 0x78
 800271c:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 8002720:	bd70      	pop	{r4, r5, r6, pc}
 8002722:	69dd      	ldr	r5, [r3, #28]
 8002724:	f415 1500 	ands.w	r5, r5, #2097152	; 0x200000
 8002728:	d1f3      	bne.n	8002712 <HAL_UART_Init+0x1b2>
 800272a:	f7fd ff89 	bl	8000640 <HAL_GetTick>
 800272e:	1b80      	subs	r0, r0, r6
 8002730:	6823      	ldr	r3, [r4, #0]
 8002732:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 8002736:	d3f4      	bcc.n	8002722 <HAL_UART_Init+0x1c2>
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	2120      	movs	r1, #32
 800273c:	2003      	movs	r0, #3
 800273e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	689a      	ldr	r2, [r3, #8]
 8002746:	f022 0201 	bic.w	r2, r2, #1
 800274a:	609a      	str	r2, [r3, #8]
 800274c:	6761      	str	r1, [r4, #116]	; 0x74
 800274e:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
 8002752:	67a1      	str	r1, [r4, #120]	; 0x78
 8002754:	bd70      	pop	{r4, r5, r6, pc}
 8002756:	2b00      	cmp	r3, #0
 8002758:	f47f af4a 	bne.w	80025f0 <HAL_UART_Init+0x90>
 800275c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002760:	d07a      	beq.n	8002858 <HAL_UART_Init+0x2f8>
 8002762:	f7ff f9b1 	bl	8001ac8 <HAL_RCC_GetPCLK1Freq>
 8002766:	6863      	ldr	r3, [r4, #4]
 8002768:	eb00 0253 	add.w	r2, r0, r3, lsr #1
 800276c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002770:	b292      	uxth	r2, r2
 8002772:	e7ab      	b.n	80026cc <HAL_UART_Init+0x16c>
 8002774:	4b4b      	ldr	r3, [pc, #300]	; (80028a4 <HAL_UART_Init+0x344>)
 8002776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800277a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800277e:	2b10      	cmp	r3, #16
 8002780:	d015      	beq.n	80027ae <HAL_UART_Init+0x24e>
 8002782:	d9e8      	bls.n	8002756 <HAL_UART_Init+0x1f6>
 8002784:	2b20      	cmp	r3, #32
 8002786:	d14f      	bne.n	8002828 <HAL_UART_Init+0x2c8>
 8002788:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800278c:	d05c      	beq.n	8002848 <HAL_UART_Init+0x2e8>
 800278e:	6863      	ldr	r3, [r4, #4]
 8002790:	4a46      	ldr	r2, [pc, #280]	; (80028ac <HAL_UART_Init+0x34c>)
 8002792:	eb02 0253 	add.w	r2, r2, r3, lsr #1
 8002796:	fbb2 f2f3 	udiv	r2, r2, r3
 800279a:	b292      	uxth	r2, r2
 800279c:	e796      	b.n	80026cc <HAL_UART_Init+0x16c>
 800279e:	4b41      	ldr	r3, [pc, #260]	; (80028a4 <HAL_UART_Init+0x344>)
 80027a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027ac:	d118      	bne.n	80027e0 <HAL_UART_Init+0x280>
 80027ae:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80027b2:	d046      	beq.n	8002842 <HAL_UART_Init+0x2e2>
 80027b4:	f7ff f94e 	bl	8001a54 <HAL_RCC_GetSysClockFreq>
 80027b8:	6863      	ldr	r3, [r4, #4]
 80027ba:	eb00 0253 	add.w	r2, r0, r3, lsr #1
 80027be:	fbb2 f2f3 	udiv	r2, r2, r3
 80027c2:	b292      	uxth	r2, r2
 80027c4:	e782      	b.n	80026cc <HAL_UART_Init+0x16c>
 80027c6:	6863      	ldr	r3, [r4, #4]
 80027c8:	085a      	lsrs	r2, r3, #1
 80027ca:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80027ce:	fbb2 f2f3 	udiv	r2, r2, r3
 80027d2:	b292      	uxth	r2, r2
 80027d4:	e77a      	b.n	80026cc <HAL_UART_Init+0x16c>
 80027d6:	4620      	mov	r0, r4
 80027d8:	f7ff fe6a 	bl	80024b0 <UART_AdvFeatureConfig>
 80027dc:	6823      	ldr	r3, [r4, #0]
 80027de:	e783      	b.n	80026e8 <HAL_UART_Init+0x188>
 80027e0:	d9b9      	bls.n	8002756 <HAL_UART_Init+0x1f6>
 80027e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027e6:	d0cf      	beq.n	8002788 <HAL_UART_Init+0x228>
 80027e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80027ec:	f47f af00 	bne.w	80025f0 <HAL_UART_Init+0x90>
 80027f0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80027f4:	d1e7      	bne.n	80027c6 <HAL_UART_Init+0x266>
 80027f6:	6862      	ldr	r2, [r4, #4]
 80027f8:	0853      	lsrs	r3, r2, #1
 80027fa:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80027fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8002802:	b29b      	uxth	r3, r3
 8002804:	f1a3 0110 	sub.w	r1, r3, #16
 8002808:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800280c:	4291      	cmp	r1, r2
 800280e:	f63f aeef 	bhi.w	80025f0 <HAL_UART_Init+0x90>
 8002812:	f023 010f 	bic.w	r1, r3, #15
 8002816:	f3c3 0242 	ubfx	r2, r3, #1, #3
 800281a:	2000      	movs	r0, #0
 800281c:	6823      	ldr	r3, [r4, #0]
 800281e:	430a      	orrs	r2, r1
 8002820:	60da      	str	r2, [r3, #12]
 8002822:	e9c4 0018 	strd	r0, r0, [r4, #96]	; 0x60
 8002826:	e75c      	b.n	80026e2 <HAL_UART_Init+0x182>
 8002828:	2b30      	cmp	r3, #48	; 0x30
 800282a:	d0e1      	beq.n	80027f0 <HAL_UART_Init+0x290>
 800282c:	e6e0      	b.n	80025f0 <HAL_UART_Init+0x90>
 800282e:	f7ff f95b 	bl	8001ae8 <HAL_RCC_GetPCLK2Freq>
 8002832:	6862      	ldr	r2, [r4, #4]
 8002834:	0853      	lsrs	r3, r2, #1
 8002836:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800283a:	fbb3 f3f2 	udiv	r3, r3, r2
 800283e:	b29b      	uxth	r3, r3
 8002840:	e7e0      	b.n	8002804 <HAL_UART_Init+0x2a4>
 8002842:	f7ff f907 	bl	8001a54 <HAL_RCC_GetSysClockFreq>
 8002846:	e7f4      	b.n	8002832 <HAL_UART_Init+0x2d2>
 8002848:	6862      	ldr	r2, [r4, #4]
 800284a:	4b19      	ldr	r3, [pc, #100]	; (80028b0 <HAL_UART_Init+0x350>)
 800284c:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8002850:	fbb3 f3f2 	udiv	r3, r3, r2
 8002854:	b29b      	uxth	r3, r3
 8002856:	e7d5      	b.n	8002804 <HAL_UART_Init+0x2a4>
 8002858:	f7ff f936 	bl	8001ac8 <HAL_RCC_GetPCLK1Freq>
 800285c:	e7e9      	b.n	8002832 <HAL_UART_Init+0x2d2>
 800285e:	4b11      	ldr	r3, [pc, #68]	; (80028a4 <HAL_UART_Init+0x344>)
 8002860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002864:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002868:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800286c:	d09f      	beq.n	80027ae <HAL_UART_Init+0x24e>
 800286e:	f67f af72 	bls.w	8002756 <HAL_UART_Init+0x1f6>
 8002872:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002876:	d087      	beq.n	8002788 <HAL_UART_Init+0x228>
 8002878:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800287c:	d0b8      	beq.n	80027f0 <HAL_UART_Init+0x290>
 800287e:	e6b7      	b.n	80025f0 <HAL_UART_Init+0x90>
 8002880:	efff69f3 	.word	0xefff69f3
 8002884:	40011000 	.word	0x40011000
 8002888:	40004400 	.word	0x40004400
 800288c:	40004800 	.word	0x40004800
 8002890:	40004c00 	.word	0x40004c00
 8002894:	40005000 	.word	0x40005000
 8002898:	40011400 	.word	0x40011400
 800289c:	40007800 	.word	0x40007800
 80028a0:	40007c00 	.word	0x40007c00
 80028a4:	40023800 	.word	0x40023800
 80028a8:	08010c34 	.word	0x08010c34
 80028ac:	00f42400 	.word	0x00f42400
 80028b0:	01e84800 	.word	0x01e84800
 80028b4:	4b13      	ldr	r3, [pc, #76]	; (8002904 <HAL_UART_Init+0x3a4>)
 80028b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ba:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80028be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028c2:	f43f af74 	beq.w	80027ae <HAL_UART_Init+0x24e>
 80028c6:	f67f aef3 	bls.w	80026b0 <HAL_UART_Init+0x150>
 80028ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028ce:	f43f af5b 	beq.w	8002788 <HAL_UART_Init+0x228>
 80028d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80028d6:	d08b      	beq.n	80027f0 <HAL_UART_Init+0x290>
 80028d8:	e68a      	b.n	80025f0 <HAL_UART_Init+0x90>
 80028da:	4b0a      	ldr	r3, [pc, #40]	; (8002904 <HAL_UART_Init+0x3a4>)
 80028dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80028e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028e8:	f43f af61 	beq.w	80027ae <HAL_UART_Init+0x24e>
 80028ec:	f67f af33 	bls.w	8002756 <HAL_UART_Init+0x1f6>
 80028f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028f4:	f43f af48 	beq.w	8002788 <HAL_UART_Init+0x228>
 80028f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80028fc:	f43f af78 	beq.w	80027f0 <HAL_UART_Init+0x290>
 8002900:	e676      	b.n	80025f0 <HAL_UART_Init+0x90>
 8002902:	bf00      	nop
 8002904:	40023800 	.word	0x40023800

08002908 <USB_CoreInit>:
 8002908:	b084      	sub	sp, #16
 800290a:	b430      	push	{r4, r5}
 800290c:	9d08      	ldr	r5, [sp, #32]
 800290e:	ac03      	add	r4, sp, #12
 8002910:	2d01      	cmp	r5, #1
 8002912:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8002916:	d131      	bne.n	800297c <USB_CoreInit+0x74>
 8002918:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800291a:	4b2d      	ldr	r3, [pc, #180]	; (80029d0 <USB_CoreInit+0xc8>)
 800291c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002920:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8002922:	6382      	str	r2, [r0, #56]	; 0x38
 8002924:	2901      	cmp	r1, #1
 8002926:	68c2      	ldr	r2, [r0, #12]
 8002928:	ea03 0302 	and.w	r3, r3, r2
 800292c:	60c3      	str	r3, [r0, #12]
 800292e:	68c3      	ldr	r3, [r0, #12]
 8002930:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002934:	60c3      	str	r3, [r0, #12]
 8002936:	d03d      	beq.n	80029b4 <USB_CoreInit+0xac>
 8002938:	4b26      	ldr	r3, [pc, #152]	; (80029d4 <USB_CoreInit+0xcc>)
 800293a:	e001      	b.n	8002940 <USB_CoreInit+0x38>
 800293c:	3b01      	subs	r3, #1
 800293e:	d03e      	beq.n	80029be <USB_CoreInit+0xb6>
 8002940:	6902      	ldr	r2, [r0, #16]
 8002942:	2a00      	cmp	r2, #0
 8002944:	dafa      	bge.n	800293c <USB_CoreInit+0x34>
 8002946:	6903      	ldr	r3, [r0, #16]
 8002948:	4a22      	ldr	r2, [pc, #136]	; (80029d4 <USB_CoreInit+0xcc>)
 800294a:	f043 0301 	orr.w	r3, r3, #1
 800294e:	6103      	str	r3, [r0, #16]
 8002950:	e001      	b.n	8002956 <USB_CoreInit+0x4e>
 8002952:	3a01      	subs	r2, #1
 8002954:	d033      	beq.n	80029be <USB_CoreInit+0xb6>
 8002956:	6903      	ldr	r3, [r0, #16]
 8002958:	f013 0301 	ands.w	r3, r3, #1
 800295c:	d1f9      	bne.n	8002952 <USB_CoreInit+0x4a>
 800295e:	9a06      	ldr	r2, [sp, #24]
 8002960:	2a01      	cmp	r2, #1
 8002962:	d107      	bne.n	8002974 <USB_CoreInit+0x6c>
 8002964:	6882      	ldr	r2, [r0, #8]
 8002966:	f042 0206 	orr.w	r2, r2, #6
 800296a:	6082      	str	r2, [r0, #8]
 800296c:	6882      	ldr	r2, [r0, #8]
 800296e:	f042 0220 	orr.w	r2, r2, #32
 8002972:	6082      	str	r2, [r0, #8]
 8002974:	4618      	mov	r0, r3
 8002976:	bc30      	pop	{r4, r5}
 8002978:	b004      	add	sp, #16
 800297a:	4770      	bx	lr
 800297c:	68c2      	ldr	r2, [r0, #12]
 800297e:	4b15      	ldr	r3, [pc, #84]	; (80029d4 <USB_CoreInit+0xcc>)
 8002980:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002984:	60c2      	str	r2, [r0, #12]
 8002986:	e001      	b.n	800298c <USB_CoreInit+0x84>
 8002988:	3b01      	subs	r3, #1
 800298a:	d01a      	beq.n	80029c2 <USB_CoreInit+0xba>
 800298c:	6902      	ldr	r2, [r0, #16]
 800298e:	2a00      	cmp	r2, #0
 8002990:	dafa      	bge.n	8002988 <USB_CoreInit+0x80>
 8002992:	6903      	ldr	r3, [r0, #16]
 8002994:	4a0f      	ldr	r2, [pc, #60]	; (80029d4 <USB_CoreInit+0xcc>)
 8002996:	f043 0301 	orr.w	r3, r3, #1
 800299a:	6103      	str	r3, [r0, #16]
 800299c:	e001      	b.n	80029a2 <USB_CoreInit+0x9a>
 800299e:	3a01      	subs	r2, #1
 80029a0:	d00f      	beq.n	80029c2 <USB_CoreInit+0xba>
 80029a2:	6903      	ldr	r3, [r0, #16]
 80029a4:	f013 0301 	ands.w	r3, r3, #1
 80029a8:	d1f9      	bne.n	800299e <USB_CoreInit+0x96>
 80029aa:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80029ac:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80029b0:	6382      	str	r2, [r0, #56]	; 0x38
 80029b2:	e7d4      	b.n	800295e <USB_CoreInit+0x56>
 80029b4:	68c3      	ldr	r3, [r0, #12]
 80029b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029ba:	60c3      	str	r3, [r0, #12]
 80029bc:	e7bc      	b.n	8002938 <USB_CoreInit+0x30>
 80029be:	2303      	movs	r3, #3
 80029c0:	e7cd      	b.n	800295e <USB_CoreInit+0x56>
 80029c2:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80029c4:	2303      	movs	r3, #3
 80029c6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80029ca:	6382      	str	r2, [r0, #56]	; 0x38
 80029cc:	e7c7      	b.n	800295e <USB_CoreInit+0x56>
 80029ce:	bf00      	nop
 80029d0:	ffbdffbf 	.word	0xffbdffbf
 80029d4:	00030d40 	.word	0x00030d40

080029d8 <USB_DisableGlobalInt>:
 80029d8:	4602      	mov	r2, r0
 80029da:	2000      	movs	r0, #0
 80029dc:	6893      	ldr	r3, [r2, #8]
 80029de:	f023 0301 	bic.w	r3, r3, #1
 80029e2:	6093      	str	r3, [r2, #8]
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop

080029e8 <USB_SetCurrentMode>:
 80029e8:	b508      	push	{r3, lr}
 80029ea:	68c3      	ldr	r3, [r0, #12]
 80029ec:	2901      	cmp	r1, #1
 80029ee:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80029f2:	60c3      	str	r3, [r0, #12]
 80029f4:	d00b      	beq.n	8002a0e <USB_SetCurrentMode+0x26>
 80029f6:	b941      	cbnz	r1, 8002a0a <USB_SetCurrentMode+0x22>
 80029f8:	68c3      	ldr	r3, [r0, #12]
 80029fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80029fe:	60c3      	str	r3, [r0, #12]
 8002a00:	2032      	movs	r0, #50	; 0x32
 8002a02:	f7fd fe23 	bl	800064c <HAL_Delay>
 8002a06:	2000      	movs	r0, #0
 8002a08:	bd08      	pop	{r3, pc}
 8002a0a:	2001      	movs	r0, #1
 8002a0c:	bd08      	pop	{r3, pc}
 8002a0e:	68c3      	ldr	r3, [r0, #12]
 8002a10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002a14:	60c3      	str	r3, [r0, #12]
 8002a16:	e7f3      	b.n	8002a00 <USB_SetCurrentMode+0x18>

08002a18 <USB_DevInit>:
 8002a18:	b084      	sub	sp, #16
 8002a1a:	468c      	mov	ip, r1
 8002a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a20:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8002a22:	4604      	mov	r4, r0
 8002a24:	af09      	add	r7, sp, #36	; 0x24
 8002a26:	2000      	movs	r0, #0
 8002a28:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8002a2a:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
 8002a2e:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
 8002a32:	f8c4 010c 	str.w	r0, [r4, #268]	; 0x10c
 8002a36:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
 8002a3a:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
 8002a3e:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
 8002a42:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
 8002a46:	f8c4 0120 	str.w	r0, [r4, #288]	; 0x120
 8002a4a:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
 8002a4e:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
 8002a52:	f8c4 012c 	str.w	r0, [r4, #300]	; 0x12c
 8002a56:	f8c4 0130 	str.w	r0, [r4, #304]	; 0x130
 8002a5a:	f8c4 0134 	str.w	r0, [r4, #308]	; 0x134
 8002a5e:	f8c4 0138 	str.w	r0, [r4, #312]	; 0x138
 8002a62:	f8c4 013c 	str.w	r0, [r4, #316]	; 0x13c
 8002a66:	e887 000e 	stmia.w	r7, {r1, r2, r3}
 8002a6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002a6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002a6e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002a70:	2d00      	cmp	r5, #0
 8002a72:	d157      	bne.n	8002b24 <USB_DevInit+0x10c>
 8002a74:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8002a78:	63a2      	str	r2, [r4, #56]	; 0x38
 8002a7a:	6822      	ldr	r2, [r4, #0]
 8002a7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a80:	6022      	str	r2, [r4, #0]
 8002a82:	6822      	ldr	r2, [r4, #0]
 8002a84:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a88:	6022      	str	r2, [r4, #0]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	f504 6700 	add.w	r7, r4, #2048	; 0x800
 8002a92:	f8c4 2e00 	str.w	r2, [r4, #3584]	; 0xe00
 8002a96:	f8d4 2800 	ldr.w	r2, [r4, #2048]	; 0x800
 8002a9a:	f8c4 2800 	str.w	r2, [r4, #2048]	; 0x800
 8002a9e:	f000 808e 	beq.w	8002bbe <USB_DevInit+0x1a6>
 8002aa2:	2b03      	cmp	r3, #3
 8002aa4:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8002aa8:	d040      	beq.n	8002b2c <USB_DevInit+0x114>
 8002aaa:	f043 0303 	orr.w	r3, r3, #3
 8002aae:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
 8002ab2:	f44f 6284 	mov.w	r2, #1056	; 0x420
 8002ab6:	4b52      	ldr	r3, [pc, #328]	; (8002c00 <USB_DevInit+0x1e8>)
 8002ab8:	6122      	str	r2, [r4, #16]
 8002aba:	e002      	b.n	8002ac2 <USB_DevInit+0xaa>
 8002abc:	3b01      	subs	r3, #1
 8002abe:	f000 8094 	beq.w	8002bea <USB_DevInit+0x1d2>
 8002ac2:	6920      	ldr	r0, [r4, #16]
 8002ac4:	f010 0020 	ands.w	r0, r0, #32
 8002ac8:	d1f8      	bne.n	8002abc <USB_DevInit+0xa4>
 8002aca:	2210      	movs	r2, #16
 8002acc:	4b4c      	ldr	r3, [pc, #304]	; (8002c00 <USB_DevInit+0x1e8>)
 8002ace:	6122      	str	r2, [r4, #16]
 8002ad0:	e002      	b.n	8002ad8 <USB_DevInit+0xc0>
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	f000 808b 	beq.w	8002bee <USB_DevInit+0x1d6>
 8002ad8:	6922      	ldr	r2, [r4, #16]
 8002ada:	06d2      	lsls	r2, r2, #27
 8002adc:	d4f9      	bmi.n	8002ad2 <USB_DevInit+0xba>
 8002ade:	2200      	movs	r2, #0
 8002ae0:	613a      	str	r2, [r7, #16]
 8002ae2:	617a      	str	r2, [r7, #20]
 8002ae4:	61fa      	str	r2, [r7, #28]
 8002ae6:	f1bc 0f00 	cmp.w	ip, #0
 8002aea:	d026      	beq.n	8002b3a <USB_DevInit+0x122>
 8002aec:	f504 6310 	add.w	r3, r4, #2304	; 0x900
 8002af0:	f04f 4990 	mov.w	r9, #1207959552	; 0x48000000
 8002af4:	f04f 6a00 	mov.w	sl, #134217728	; 0x8000000
 8002af8:	4696      	mov	lr, r2
 8002afa:	f64f 387f 	movw	r8, #64383	; 0xfb7f
 8002afe:	e009      	b.n	8002b14 <USB_DevInit+0xfc>
 8002b00:	f8c3 e000 	str.w	lr, [r3]
 8002b04:	3201      	adds	r2, #1
 8002b06:	f8c3 e010 	str.w	lr, [r3, #16]
 8002b0a:	f8c3 8008 	str.w	r8, [r3, #8]
 8002b0e:	3320      	adds	r3, #32
 8002b10:	4562      	cmp	r2, ip
 8002b12:	d036      	beq.n	8002b82 <USB_DevInit+0x16a>
 8002b14:	6819      	ldr	r1, [r3, #0]
 8002b16:	2900      	cmp	r1, #0
 8002b18:	daf2      	bge.n	8002b00 <USB_DevInit+0xe8>
 8002b1a:	2a00      	cmp	r2, #0
 8002b1c:	d06c      	beq.n	8002bf8 <USB_DevInit+0x1e0>
 8002b1e:	f8c3 9000 	str.w	r9, [r3]
 8002b22:	e7ef      	b.n	8002b04 <USB_DevInit+0xec>
 8002b24:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002b28:	63a2      	str	r2, [r4, #56]	; 0x38
 8002b2a:	e7ae      	b.n	8002a8a <USB_DevInit+0x72>
 8002b2c:	2900      	cmp	r1, #0
 8002b2e:	d0be      	beq.n	8002aae <USB_DevInit+0x96>
 8002b30:	f043 0301 	orr.w	r3, r3, #1
 8002b34:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
 8002b38:	e7bb      	b.n	8002ab2 <USB_DevInit+0x9a>
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	2e01      	cmp	r6, #1
 8002b3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b42:	613b      	str	r3, [r7, #16]
 8002b44:	d045      	beq.n	8002bd2 <USB_DevInit+0x1ba>
 8002b46:	2200      	movs	r2, #0
 8002b48:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8002b4c:	61a2      	str	r2, [r4, #24]
 8002b4e:	6163      	str	r3, [r4, #20]
 8002b50:	b91e      	cbnz	r6, 8002b5a <USB_DevInit+0x142>
 8002b52:	69a3      	ldr	r3, [r4, #24]
 8002b54:	f043 0310 	orr.w	r3, r3, #16
 8002b58:	61a3      	str	r3, [r4, #24]
 8002b5a:	69a1      	ldr	r1, [r4, #24]
 8002b5c:	4b29      	ldr	r3, [pc, #164]	; (8002c04 <USB_DevInit+0x1ec>)
 8002b5e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002b60:	430b      	orrs	r3, r1
 8002b62:	61a3      	str	r3, [r4, #24]
 8002b64:	b11a      	cbz	r2, 8002b6e <USB_DevInit+0x156>
 8002b66:	69a3      	ldr	r3, [r4, #24]
 8002b68:	f043 0308 	orr.w	r3, r3, #8
 8002b6c:	61a3      	str	r3, [r4, #24]
 8002b6e:	2d01      	cmp	r5, #1
 8002b70:	d103      	bne.n	8002b7a <USB_DevInit+0x162>
 8002b72:	69a2      	ldr	r2, [r4, #24]
 8002b74:	4b24      	ldr	r3, [pc, #144]	; (8002c08 <USB_DevInit+0x1f0>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	61a3      	str	r3, [r4, #24]
 8002b7a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b7e:	b004      	add	sp, #16
 8002b80:	4770      	bx	lr
 8002b82:	2100      	movs	r1, #0
 8002b84:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
 8002b88:	f04f 4990 	mov.w	r9, #1207959552	; 0x48000000
 8002b8c:	f04f 6a00 	mov.w	sl, #134217728	; 0x8000000
 8002b90:	468e      	mov	lr, r1
 8002b92:	f64f 387f 	movw	r8, #64383	; 0xfb7f
 8002b96:	e009      	b.n	8002bac <USB_DevInit+0x194>
 8002b98:	f8c3 e000 	str.w	lr, [r3]
 8002b9c:	3101      	adds	r1, #1
 8002b9e:	f8c3 e010 	str.w	lr, [r3, #16]
 8002ba2:	f8c3 8008 	str.w	r8, [r3, #8]
 8002ba6:	3320      	adds	r3, #32
 8002ba8:	4291      	cmp	r1, r2
 8002baa:	d0c6      	beq.n	8002b3a <USB_DevInit+0x122>
 8002bac:	f8d3 c000 	ldr.w	ip, [r3]
 8002bb0:	f1bc 0f00 	cmp.w	ip, #0
 8002bb4:	daf0      	bge.n	8002b98 <USB_DevInit+0x180>
 8002bb6:	b1e1      	cbz	r1, 8002bf2 <USB_DevInit+0x1da>
 8002bb8:	f8c3 9000 	str.w	r9, [r3]
 8002bbc:	e7ee      	b.n	8002b9c <USB_DevInit+0x184>
 8002bbe:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8002bc2:	2900      	cmp	r1, #0
 8002bc4:	f43f af73 	beq.w	8002aae <USB_DevInit+0x96>
 8002bc8:	f043 0301 	orr.w	r3, r3, #1
 8002bcc:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
 8002bd0:	e76f      	b.n	8002ab2 <USB_DevInit+0x9a>
 8002bd2:	4a0e      	ldr	r2, [pc, #56]	; (8002c0c <USB_DevInit+0x1f4>)
 8002bd4:	2100      	movs	r1, #0
 8002bd6:	4b0e      	ldr	r3, [pc, #56]	; (8002c10 <USB_DevInit+0x1f8>)
 8002bd8:	633a      	str	r2, [r7, #48]	; 0x30
 8002bda:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8002bde:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 8002be0:	4333      	orrs	r3, r6
 8002be2:	633b      	str	r3, [r7, #48]	; 0x30
 8002be4:	61a1      	str	r1, [r4, #24]
 8002be6:	6162      	str	r2, [r4, #20]
 8002be8:	e7b7      	b.n	8002b5a <USB_DevInit+0x142>
 8002bea:	2001      	movs	r0, #1
 8002bec:	e76d      	b.n	8002aca <USB_DevInit+0xb2>
 8002bee:	2001      	movs	r0, #1
 8002bf0:	e775      	b.n	8002ade <USB_DevInit+0xc6>
 8002bf2:	f8c3 a000 	str.w	sl, [r3]
 8002bf6:	e7d1      	b.n	8002b9c <USB_DevInit+0x184>
 8002bf8:	f8c3 a000 	str.w	sl, [r3]
 8002bfc:	e782      	b.n	8002b04 <USB_DevInit+0xec>
 8002bfe:	bf00      	nop
 8002c00:	00030d40 	.word	0x00030d40
 8002c04:	803c3800 	.word	0x803c3800
 8002c08:	40000004 	.word	0x40000004
 8002c0c:	00800100 	.word	0x00800100
 8002c10:	00010003 	.word	0x00010003

08002c14 <USB_DevDisconnect>:
 8002c14:	f500 6200 	add.w	r2, r0, #2048	; 0x800
 8002c18:	2003      	movs	r0, #3
 8002c1a:	b508      	push	{r3, lr}
 8002c1c:	6853      	ldr	r3, [r2, #4]
 8002c1e:	f043 0302 	orr.w	r3, r3, #2
 8002c22:	6053      	str	r3, [r2, #4]
 8002c24:	f7fd fd12 	bl	800064c <HAL_Delay>
 8002c28:	2000      	movs	r0, #0
 8002c2a:	bd08      	pop	{r3, pc}

08002c2c <osKernelStart>:
 8002c2c:	b508      	push	{r3, lr}
 8002c2e:	f001 fb61 	bl	80042f4 <vTaskStartScheduler>
 8002c32:	2000      	movs	r0, #0
 8002c34:	bd08      	pop	{r3, pc}
 8002c36:	bf00      	nop

08002c38 <osKernelSysTick>:
 8002c38:	f3ef 8305 	mrs	r3, IPSR
 8002c3c:	b90b      	cbnz	r3, 8002c42 <osKernelSysTick+0xa>
 8002c3e:	f001 bc43 	b.w	80044c8 <xTaskGetTickCount>
 8002c42:	f001 bc47 	b.w	80044d4 <xTaskGetTickCountFromISR>
 8002c46:	bf00      	nop

08002c48 <osThreadCreate>:
 8002c48:	b530      	push	{r4, r5, lr}
 8002c4a:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 8002c4e:	b085      	sub	sp, #20
 8002c50:	4602      	mov	r2, r0
 8002c52:	460b      	mov	r3, r1
 8002c54:	2c84      	cmp	r4, #132	; 0x84
 8002c56:	ad03      	add	r5, sp, #12
 8002c58:	6811      	ldr	r1, [r2, #0]
 8002c5a:	bf14      	ite	ne
 8002c5c:	3403      	addne	r4, #3
 8002c5e:	2400      	moveq	r4, #0
 8002c60:	8a12      	ldrh	r2, [r2, #16]
 8002c62:	6840      	ldr	r0, [r0, #4]
 8002c64:	e9cd 4500 	strd	r4, r5, [sp]
 8002c68:	f001 fa22 	bl	80040b0 <xTaskCreate>
 8002c6c:	2801      	cmp	r0, #1
 8002c6e:	bf0c      	ite	eq
 8002c70:	9803      	ldreq	r0, [sp, #12]
 8002c72:	2000      	movne	r0, #0
 8002c74:	b005      	add	sp, #20
 8002c76:	bd30      	pop	{r4, r5, pc}

08002c78 <osMutexCreate>:
 8002c78:	2001      	movs	r0, #1
 8002c7a:	f000 ba2b 	b.w	80030d4 <xQueueCreateMutex>
 8002c7e:	bf00      	nop

08002c80 <osMutexWait>:
 8002c80:	b510      	push	{r4, lr}
 8002c82:	2400      	movs	r4, #0
 8002c84:	b082      	sub	sp, #8
 8002c86:	9401      	str	r4, [sp, #4]
 8002c88:	b300      	cbz	r0, 8002ccc <osMutexWait+0x4c>
 8002c8a:	f3ef 8305 	mrs	r3, IPSR
 8002c8e:	b933      	cbnz	r3, 8002c9e <osMutexWait+0x1e>
 8002c90:	f000 ff66 	bl	8003b60 <xQueueSemaphoreTake>
 8002c94:	2801      	cmp	r0, #1
 8002c96:	d116      	bne.n	8002cc6 <osMutexWait+0x46>
 8002c98:	2000      	movs	r0, #0
 8002c9a:	b002      	add	sp, #8
 8002c9c:	bd10      	pop	{r4, pc}
 8002c9e:	aa01      	add	r2, sp, #4
 8002ca0:	4621      	mov	r1, r4
 8002ca2:	f001 f8ef 	bl	8003e84 <xQueueReceiveFromISR>
 8002ca6:	2801      	cmp	r0, #1
 8002ca8:	d10d      	bne.n	8002cc6 <osMutexWait+0x46>
 8002caa:	9b01      	ldr	r3, [sp, #4]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d0f3      	beq.n	8002c98 <osMutexWait+0x18>
 8002cb0:	4b08      	ldr	r3, [pc, #32]	; (8002cd4 <osMutexWait+0x54>)
 8002cb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cb6:	601a      	str	r2, [r3, #0]
 8002cb8:	f3bf 8f4f 	dsb	sy
 8002cbc:	f3bf 8f6f 	isb	sy
 8002cc0:	4620      	mov	r0, r4
 8002cc2:	b002      	add	sp, #8
 8002cc4:	bd10      	pop	{r4, pc}
 8002cc6:	20ff      	movs	r0, #255	; 0xff
 8002cc8:	b002      	add	sp, #8
 8002cca:	bd10      	pop	{r4, pc}
 8002ccc:	2080      	movs	r0, #128	; 0x80
 8002cce:	b002      	add	sp, #8
 8002cd0:	bd10      	pop	{r4, pc}
 8002cd2:	bf00      	nop
 8002cd4:	e000ed04 	.word	0xe000ed04

08002cd8 <osMutexRelease>:
 8002cd8:	b510      	push	{r4, lr}
 8002cda:	2400      	movs	r4, #0
 8002cdc:	b082      	sub	sp, #8
 8002cde:	9401      	str	r4, [sp, #4]
 8002ce0:	f3ef 8305 	mrs	r3, IPSR
 8002ce4:	b14b      	cbz	r3, 8002cfa <osMutexRelease+0x22>
 8002ce6:	a901      	add	r1, sp, #4
 8002ce8:	f000 fd6c 	bl	80037c4 <xQueueGiveFromISR>
 8002cec:	2801      	cmp	r0, #1
 8002cee:	d10a      	bne.n	8002d06 <osMutexRelease+0x2e>
 8002cf0:	9b01      	ldr	r3, [sp, #4]
 8002cf2:	b95b      	cbnz	r3, 8002d0c <osMutexRelease+0x34>
 8002cf4:	2000      	movs	r0, #0
 8002cf6:	b002      	add	sp, #8
 8002cf8:	bd10      	pop	{r4, pc}
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	f000 fb35 	bl	800336c <xQueueGenericSend>
 8002d02:	2801      	cmp	r0, #1
 8002d04:	d0f6      	beq.n	8002cf4 <osMutexRelease+0x1c>
 8002d06:	20ff      	movs	r0, #255	; 0xff
 8002d08:	b002      	add	sp, #8
 8002d0a:	bd10      	pop	{r4, pc}
 8002d0c:	4b05      	ldr	r3, [pc, #20]	; (8002d24 <osMutexRelease+0x4c>)
 8002d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d12:	601a      	str	r2, [r3, #0]
 8002d14:	f3bf 8f4f 	dsb	sy
 8002d18:	f3bf 8f6f 	isb	sy
 8002d1c:	4620      	mov	r0, r4
 8002d1e:	b002      	add	sp, #8
 8002d20:	bd10      	pop	{r4, pc}
 8002d22:	bf00      	nop
 8002d24:	e000ed04 	.word	0xe000ed04

08002d28 <osMutexDelete>:
 8002d28:	b510      	push	{r4, lr}
 8002d2a:	f3ef 8405 	mrs	r4, IPSR
 8002d2e:	b91c      	cbnz	r4, 8002d38 <osMutexDelete+0x10>
 8002d30:	f001 f90a 	bl	8003f48 <vQueueDelete>
 8002d34:	4620      	mov	r0, r4
 8002d36:	bd10      	pop	{r4, pc}
 8002d38:	2082      	movs	r0, #130	; 0x82
 8002d3a:	bd10      	pop	{r4, pc}

08002d3c <osSemaphoreCreate>:
 8002d3c:	2901      	cmp	r1, #1
 8002d3e:	b510      	push	{r4, lr}
 8002d40:	d10d      	bne.n	8002d5e <osSemaphoreCreate+0x22>
 8002d42:	4608      	mov	r0, r1
 8002d44:	2203      	movs	r2, #3
 8002d46:	2100      	movs	r1, #0
 8002d48:	f000 f97a 	bl	8003040 <xQueueGenericCreate>
 8002d4c:	4604      	mov	r4, r0
 8002d4e:	b120      	cbz	r0, 8002d5a <osSemaphoreCreate+0x1e>
 8002d50:	2300      	movs	r3, #0
 8002d52:	461a      	mov	r2, r3
 8002d54:	4619      	mov	r1, r3
 8002d56:	f000 fb09 	bl	800336c <xQueueGenericSend>
 8002d5a:	4620      	mov	r0, r4
 8002d5c:	bd10      	pop	{r4, pc}
 8002d5e:	2400      	movs	r4, #0
 8002d60:	4620      	mov	r0, r4
 8002d62:	bd10      	pop	{r4, pc}

08002d64 <osSemaphoreWait>:
 8002d64:	b510      	push	{r4, lr}
 8002d66:	2400      	movs	r4, #0
 8002d68:	b082      	sub	sp, #8
 8002d6a:	9401      	str	r4, [sp, #4]
 8002d6c:	b300      	cbz	r0, 8002db0 <osSemaphoreWait+0x4c>
 8002d6e:	f3ef 8305 	mrs	r3, IPSR
 8002d72:	b933      	cbnz	r3, 8002d82 <osSemaphoreWait+0x1e>
 8002d74:	f000 fef4 	bl	8003b60 <xQueueSemaphoreTake>
 8002d78:	2801      	cmp	r0, #1
 8002d7a:	d116      	bne.n	8002daa <osSemaphoreWait+0x46>
 8002d7c:	2000      	movs	r0, #0
 8002d7e:	b002      	add	sp, #8
 8002d80:	bd10      	pop	{r4, pc}
 8002d82:	aa01      	add	r2, sp, #4
 8002d84:	4621      	mov	r1, r4
 8002d86:	f001 f87d 	bl	8003e84 <xQueueReceiveFromISR>
 8002d8a:	2801      	cmp	r0, #1
 8002d8c:	d10d      	bne.n	8002daa <osSemaphoreWait+0x46>
 8002d8e:	9b01      	ldr	r3, [sp, #4]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d0f3      	beq.n	8002d7c <osSemaphoreWait+0x18>
 8002d94:	4b08      	ldr	r3, [pc, #32]	; (8002db8 <osSemaphoreWait+0x54>)
 8002d96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	f3bf 8f4f 	dsb	sy
 8002da0:	f3bf 8f6f 	isb	sy
 8002da4:	4620      	mov	r0, r4
 8002da6:	b002      	add	sp, #8
 8002da8:	bd10      	pop	{r4, pc}
 8002daa:	20ff      	movs	r0, #255	; 0xff
 8002dac:	b002      	add	sp, #8
 8002dae:	bd10      	pop	{r4, pc}
 8002db0:	2080      	movs	r0, #128	; 0x80
 8002db2:	b002      	add	sp, #8
 8002db4:	bd10      	pop	{r4, pc}
 8002db6:	bf00      	nop
 8002db8:	e000ed04 	.word	0xe000ed04

08002dbc <osSemaphoreRelease>:
 8002dbc:	b510      	push	{r4, lr}
 8002dbe:	2400      	movs	r4, #0
 8002dc0:	b082      	sub	sp, #8
 8002dc2:	9401      	str	r4, [sp, #4]
 8002dc4:	f3ef 8305 	mrs	r3, IPSR
 8002dc8:	b14b      	cbz	r3, 8002dde <osSemaphoreRelease+0x22>
 8002dca:	a901      	add	r1, sp, #4
 8002dcc:	f000 fcfa 	bl	80037c4 <xQueueGiveFromISR>
 8002dd0:	2801      	cmp	r0, #1
 8002dd2:	d10a      	bne.n	8002dea <osSemaphoreRelease+0x2e>
 8002dd4:	9b01      	ldr	r3, [sp, #4]
 8002dd6:	b95b      	cbnz	r3, 8002df0 <osSemaphoreRelease+0x34>
 8002dd8:	2000      	movs	r0, #0
 8002dda:	b002      	add	sp, #8
 8002ddc:	bd10      	pop	{r4, pc}
 8002dde:	461a      	mov	r2, r3
 8002de0:	4619      	mov	r1, r3
 8002de2:	f000 fac3 	bl	800336c <xQueueGenericSend>
 8002de6:	2801      	cmp	r0, #1
 8002de8:	d0f6      	beq.n	8002dd8 <osSemaphoreRelease+0x1c>
 8002dea:	20ff      	movs	r0, #255	; 0xff
 8002dec:	b002      	add	sp, #8
 8002dee:	bd10      	pop	{r4, pc}
 8002df0:	4b05      	ldr	r3, [pc, #20]	; (8002e08 <osSemaphoreRelease+0x4c>)
 8002df2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002df6:	601a      	str	r2, [r3, #0]
 8002df8:	f3bf 8f4f 	dsb	sy
 8002dfc:	f3bf 8f6f 	isb	sy
 8002e00:	4620      	mov	r0, r4
 8002e02:	b002      	add	sp, #8
 8002e04:	bd10      	pop	{r4, pc}
 8002e06:	bf00      	nop
 8002e08:	e000ed04 	.word	0xe000ed04

08002e0c <osSemaphoreDelete>:
 8002e0c:	b510      	push	{r4, lr}
 8002e0e:	f3ef 8405 	mrs	r4, IPSR
 8002e12:	b91c      	cbnz	r4, 8002e1c <osSemaphoreDelete+0x10>
 8002e14:	f001 f898 	bl	8003f48 <vQueueDelete>
 8002e18:	4620      	mov	r0, r4
 8002e1a:	bd10      	pop	{r4, pc}
 8002e1c:	2082      	movs	r0, #130	; 0x82
 8002e1e:	bd10      	pop	{r4, pc}

08002e20 <osMessageCreate>:
 8002e20:	2200      	movs	r2, #0
 8002e22:	e9d0 0100 	ldrd	r0, r1, [r0]
 8002e26:	f000 b90b 	b.w	8003040 <xQueueGenericCreate>
 8002e2a:	bf00      	nop

08002e2c <osMessagePut>:
 8002e2c:	b510      	push	{r4, lr}
 8002e2e:	2400      	movs	r4, #0
 8002e30:	b084      	sub	sp, #16
 8002e32:	42a2      	cmp	r2, r4
 8002e34:	bf08      	it	eq
 8002e36:	2201      	moveq	r2, #1
 8002e38:	9101      	str	r1, [sp, #4]
 8002e3a:	9403      	str	r4, [sp, #12]
 8002e3c:	f3ef 8305 	mrs	r3, IPSR
 8002e40:	b15b      	cbz	r3, 8002e5a <osMessagePut+0x2e>
 8002e42:	4623      	mov	r3, r4
 8002e44:	aa03      	add	r2, sp, #12
 8002e46:	a901      	add	r1, sp, #4
 8002e48:	f000 fc18 	bl	800367c <xQueueGenericSendFromISR>
 8002e4c:	2801      	cmp	r0, #1
 8002e4e:	d109      	bne.n	8002e64 <osMessagePut+0x38>
 8002e50:	9b03      	ldr	r3, [sp, #12]
 8002e52:	b953      	cbnz	r3, 8002e6a <osMessagePut+0x3e>
 8002e54:	2000      	movs	r0, #0
 8002e56:	b004      	add	sp, #16
 8002e58:	bd10      	pop	{r4, pc}
 8002e5a:	a901      	add	r1, sp, #4
 8002e5c:	f000 fa86 	bl	800336c <xQueueGenericSend>
 8002e60:	2801      	cmp	r0, #1
 8002e62:	d0f7      	beq.n	8002e54 <osMessagePut+0x28>
 8002e64:	20ff      	movs	r0, #255	; 0xff
 8002e66:	b004      	add	sp, #16
 8002e68:	bd10      	pop	{r4, pc}
 8002e6a:	4b05      	ldr	r3, [pc, #20]	; (8002e80 <osMessagePut+0x54>)
 8002e6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e70:	601a      	str	r2, [r3, #0]
 8002e72:	f3bf 8f4f 	dsb	sy
 8002e76:	f3bf 8f6f 	isb	sy
 8002e7a:	4620      	mov	r0, r4
 8002e7c:	b004      	add	sp, #16
 8002e7e:	bd10      	pop	{r4, pc}
 8002e80:	e000ed04 	.word	0xe000ed04

08002e84 <osMessageGet>:
 8002e84:	b530      	push	{r4, r5, lr}
 8002e86:	2300      	movs	r3, #0
 8002e88:	b085      	sub	sp, #20
 8002e8a:	4604      	mov	r4, r0
 8002e8c:	e9cd 3102 	strd	r3, r1, [sp, #8]
 8002e90:	b369      	cbz	r1, 8002eee <osMessageGet+0x6a>
 8002e92:	9300      	str	r3, [sp, #0]
 8002e94:	f3ef 8305 	mrs	r3, IPSR
 8002e98:	b99b      	cbnz	r3, 8002ec2 <osMessageGet+0x3e>
 8002e9a:	4608      	mov	r0, r1
 8002e9c:	a902      	add	r1, sp, #8
 8002e9e:	4615      	mov	r5, r2
 8002ea0:	f000 fcf0 	bl	8003884 <xQueueReceive>
 8002ea4:	2801      	cmp	r0, #1
 8002ea6:	d02d      	beq.n	8002f04 <osMessageGet+0x80>
 8002ea8:	2d00      	cmp	r5, #0
 8002eaa:	bf0c      	ite	eq
 8002eac:	2300      	moveq	r3, #0
 8002eae:	2340      	movne	r3, #64	; 0x40
 8002eb0:	9301      	str	r3, [sp, #4]
 8002eb2:	ab04      	add	r3, sp, #16
 8002eb4:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8002eb8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002ebc:	4620      	mov	r0, r4
 8002ebe:	b005      	add	sp, #20
 8002ec0:	bd30      	pop	{r4, r5, pc}
 8002ec2:	466a      	mov	r2, sp
 8002ec4:	4608      	mov	r0, r1
 8002ec6:	a902      	add	r1, sp, #8
 8002ec8:	f000 ffdc 	bl	8003e84 <xQueueReceiveFromISR>
 8002ecc:	2801      	cmp	r0, #1
 8002ece:	9b00      	ldr	r3, [sp, #0]
 8002ed0:	bf0c      	ite	eq
 8002ed2:	2210      	moveq	r2, #16
 8002ed4:	2200      	movne	r2, #0
 8002ed6:	9201      	str	r2, [sp, #4]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d0ea      	beq.n	8002eb2 <osMessageGet+0x2e>
 8002edc:	4b0b      	ldr	r3, [pc, #44]	; (8002f0c <osMessageGet+0x88>)
 8002ede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ee2:	601a      	str	r2, [r3, #0]
 8002ee4:	f3bf 8f4f 	dsb	sy
 8002ee8:	f3bf 8f6f 	isb	sy
 8002eec:	e7e1      	b.n	8002eb2 <osMessageGet+0x2e>
 8002eee:	ab04      	add	r3, sp, #16
 8002ef0:	2280      	movs	r2, #128	; 0x80
 8002ef2:	f843 2d0c 	str.w	r2, [r3, #-12]!
 8002ef6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002efa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002efe:	4620      	mov	r0, r4
 8002f00:	b005      	add	sp, #20
 8002f02:	bd30      	pop	{r4, r5, pc}
 8002f04:	2310      	movs	r3, #16
 8002f06:	9301      	str	r3, [sp, #4]
 8002f08:	e7d3      	b.n	8002eb2 <osMessageGet+0x2e>
 8002f0a:	bf00      	nop
 8002f0c:	e000ed04 	.word	0xe000ed04

08002f10 <vListInitialise>:
 8002f10:	f100 0308 	add.w	r3, r0, #8
 8002f14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002f18:	2200      	movs	r2, #0
 8002f1a:	6081      	str	r1, [r0, #8]
 8002f1c:	6002      	str	r2, [r0, #0]
 8002f1e:	6043      	str	r3, [r0, #4]
 8002f20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop

08002f28 <vListInitialiseItem>:
 8002f28:	2300      	movs	r3, #0
 8002f2a:	6103      	str	r3, [r0, #16]
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop

08002f30 <vListInsertEnd>:
 8002f30:	6843      	ldr	r3, [r0, #4]
 8002f32:	6802      	ldr	r2, [r0, #0]
 8002f34:	b410      	push	{r4}
 8002f36:	689c      	ldr	r4, [r3, #8]
 8002f38:	3201      	adds	r2, #1
 8002f3a:	e9c1 3401 	strd	r3, r4, [r1, #4]
 8002f3e:	689c      	ldr	r4, [r3, #8]
 8002f40:	6061      	str	r1, [r4, #4]
 8002f42:	6099      	str	r1, [r3, #8]
 8002f44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f48:	6108      	str	r0, [r1, #16]
 8002f4a:	6002      	str	r2, [r0, #0]
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop

08002f50 <vListInsert>:
 8002f50:	b430      	push	{r4, r5}
 8002f52:	680d      	ldr	r5, [r1, #0]
 8002f54:	1c6b      	adds	r3, r5, #1
 8002f56:	d011      	beq.n	8002f7c <vListInsert+0x2c>
 8002f58:	f100 0208 	add.w	r2, r0, #8
 8002f5c:	e000      	b.n	8002f60 <vListInsert+0x10>
 8002f5e:	461a      	mov	r2, r3
 8002f60:	6853      	ldr	r3, [r2, #4]
 8002f62:	681c      	ldr	r4, [r3, #0]
 8002f64:	42ac      	cmp	r4, r5
 8002f66:	d9fa      	bls.n	8002f5e <vListInsert+0xe>
 8002f68:	6804      	ldr	r4, [r0, #0]
 8002f6a:	604b      	str	r3, [r1, #4]
 8002f6c:	3401      	adds	r4, #1
 8002f6e:	6099      	str	r1, [r3, #8]
 8002f70:	608a      	str	r2, [r1, #8]
 8002f72:	6051      	str	r1, [r2, #4]
 8002f74:	6108      	str	r0, [r1, #16]
 8002f76:	6004      	str	r4, [r0, #0]
 8002f78:	bc30      	pop	{r4, r5}
 8002f7a:	4770      	bx	lr
 8002f7c:	6902      	ldr	r2, [r0, #16]
 8002f7e:	6853      	ldr	r3, [r2, #4]
 8002f80:	e7f2      	b.n	8002f68 <vListInsert+0x18>
 8002f82:	bf00      	nop

08002f84 <uxListRemove>:
 8002f84:	6903      	ldr	r3, [r0, #16]
 8002f86:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8002f8a:	b410      	push	{r4}
 8002f8c:	685c      	ldr	r4, [r3, #4]
 8002f8e:	6091      	str	r1, [r2, #8]
 8002f90:	6881      	ldr	r1, [r0, #8]
 8002f92:	4284      	cmp	r4, r0
 8002f94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f98:	604a      	str	r2, [r1, #4]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	bf08      	it	eq
 8002f9e:	6059      	streq	r1, [r3, #4]
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	3a01      	subs	r2, #1
 8002fa4:	6101      	str	r1, [r0, #16]
 8002fa6:	601a      	str	r2, [r3, #0]
 8002fa8:	6818      	ldr	r0, [r3, #0]
 8002faa:	4770      	bx	lr

08002fac <prvUnlockQueue>:
 8002fac:	b570      	push	{r4, r5, r6, lr}
 8002fae:	4605      	mov	r5, r0
 8002fb0:	f001 ffb8 	bl	8004f24 <vPortEnterCritical>
 8002fb4:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8002fb8:	b264      	sxtb	r4, r4
 8002fba:	2c00      	cmp	r4, #0
 8002fbc:	dd16      	ble.n	8002fec <prvUnlockQueue+0x40>
 8002fbe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002fc0:	b1a3      	cbz	r3, 8002fec <prvUnlockQueue+0x40>
 8002fc2:	f105 0624 	add.w	r6, r5, #36	; 0x24
 8002fc6:	e005      	b.n	8002fd4 <prvUnlockQueue+0x28>
 8002fc8:	3c01      	subs	r4, #1
 8002fca:	b2e3      	uxtb	r3, r4
 8002fcc:	b25c      	sxtb	r4, r3
 8002fce:	b16b      	cbz	r3, 8002fec <prvUnlockQueue+0x40>
 8002fd0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002fd2:	b15b      	cbz	r3, 8002fec <prvUnlockQueue+0x40>
 8002fd4:	4630      	mov	r0, r6
 8002fd6:	f001 fc69 	bl	80048ac <xTaskRemoveFromEventList>
 8002fda:	2800      	cmp	r0, #0
 8002fdc:	d0f4      	beq.n	8002fc8 <prvUnlockQueue+0x1c>
 8002fde:	3c01      	subs	r4, #1
 8002fe0:	f001 fcfa 	bl	80049d8 <vTaskMissedYield>
 8002fe4:	b2e3      	uxtb	r3, r4
 8002fe6:	b25c      	sxtb	r4, r3
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1f1      	bne.n	8002fd0 <prvUnlockQueue+0x24>
 8002fec:	23ff      	movs	r3, #255	; 0xff
 8002fee:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
 8002ff2:	f001 ffbd 	bl	8004f70 <vPortExitCritical>
 8002ff6:	f001 ff95 	bl	8004f24 <vPortEnterCritical>
 8002ffa:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8002ffe:	b264      	sxtb	r4, r4
 8003000:	2c00      	cmp	r4, #0
 8003002:	dd16      	ble.n	8003032 <prvUnlockQueue+0x86>
 8003004:	692b      	ldr	r3, [r5, #16]
 8003006:	b1a3      	cbz	r3, 8003032 <prvUnlockQueue+0x86>
 8003008:	f105 0610 	add.w	r6, r5, #16
 800300c:	e005      	b.n	800301a <prvUnlockQueue+0x6e>
 800300e:	3c01      	subs	r4, #1
 8003010:	b2e3      	uxtb	r3, r4
 8003012:	b25c      	sxtb	r4, r3
 8003014:	b16b      	cbz	r3, 8003032 <prvUnlockQueue+0x86>
 8003016:	692b      	ldr	r3, [r5, #16]
 8003018:	b15b      	cbz	r3, 8003032 <prvUnlockQueue+0x86>
 800301a:	4630      	mov	r0, r6
 800301c:	f001 fc46 	bl	80048ac <xTaskRemoveFromEventList>
 8003020:	2800      	cmp	r0, #0
 8003022:	d0f4      	beq.n	800300e <prvUnlockQueue+0x62>
 8003024:	3c01      	subs	r4, #1
 8003026:	f001 fcd7 	bl	80049d8 <vTaskMissedYield>
 800302a:	b2e3      	uxtb	r3, r4
 800302c:	b25c      	sxtb	r4, r3
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1f1      	bne.n	8003016 <prvUnlockQueue+0x6a>
 8003032:	23ff      	movs	r3, #255	; 0xff
 8003034:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 8003038:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800303c:	f001 bf98 	b.w	8004f70 <vPortExitCritical>

08003040 <xQueueGenericCreate>:
 8003040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003042:	b950      	cbnz	r0, 800305a <xQueueGenericCreate+0x1a>
 8003044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003048:	b672      	cpsid	i
 800304a:	f383 8811 	msr	BASEPRI, r3
 800304e:	f3bf 8f6f 	isb	sy
 8003052:	f3bf 8f4f 	dsb	sy
 8003056:	b662      	cpsie	i
 8003058:	e7fe      	b.n	8003058 <xQueueGenericCreate+0x18>
 800305a:	4606      	mov	r6, r0
 800305c:	4617      	mov	r7, r2
 800305e:	460d      	mov	r5, r1
 8003060:	b151      	cbz	r1, 8003078 <xQueueGenericCreate+0x38>
 8003062:	fb01 f000 	mul.w	r0, r1, r0
 8003066:	3050      	adds	r0, #80	; 0x50
 8003068:	f002 f8bc 	bl	80051e4 <pvPortMalloc>
 800306c:	4604      	mov	r4, r0
 800306e:	b368      	cbz	r0, 80030cc <xQueueGenericCreate+0x8c>
 8003070:	f100 0350 	add.w	r3, r0, #80	; 0x50
 8003074:	6003      	str	r3, [r0, #0]
 8003076:	e005      	b.n	8003084 <xQueueGenericCreate+0x44>
 8003078:	2050      	movs	r0, #80	; 0x50
 800307a:	f002 f8b3 	bl	80051e4 <pvPortMalloc>
 800307e:	4604      	mov	r4, r0
 8003080:	b320      	cbz	r0, 80030cc <xQueueGenericCreate+0x8c>
 8003082:	6024      	str	r4, [r4, #0]
 8003084:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
 8003088:	f001 ff4c 	bl	8004f24 <vPortEnterCritical>
 800308c:	6822      	ldr	r2, [r4, #0]
 800308e:	25ff      	movs	r5, #255	; 0xff
 8003090:	2000      	movs	r0, #0
 8003092:	60a2      	str	r2, [r4, #8]
 8003094:	63a0      	str	r0, [r4, #56]	; 0x38
 8003096:	f104 0010 	add.w	r0, r4, #16
 800309a:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
 800309e:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 80030a2:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
 80030a6:	fb03 f301 	mul.w	r3, r3, r1
 80030aa:	1a59      	subs	r1, r3, r1
 80030ac:	4413      	add	r3, r2
 80030ae:	440a      	add	r2, r1
 80030b0:	6063      	str	r3, [r4, #4]
 80030b2:	60e2      	str	r2, [r4, #12]
 80030b4:	f7ff ff2c 	bl	8002f10 <vListInitialise>
 80030b8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80030bc:	f7ff ff28 	bl	8002f10 <vListInitialise>
 80030c0:	f001 ff56 	bl	8004f70 <vPortExitCritical>
 80030c4:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
 80030c8:	4620      	mov	r0, r4
 80030ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030cc:	2400      	movs	r4, #0
 80030ce:	4620      	mov	r0, r4
 80030d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030d2:	bf00      	nop

080030d4 <xQueueCreateMutex>:
 80030d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80030d8:	4681      	mov	r9, r0
 80030da:	b085      	sub	sp, #20
 80030dc:	2050      	movs	r0, #80	; 0x50
 80030de:	f002 f881 	bl	80051e4 <pvPortMalloc>
 80030e2:	4604      	mov	r4, r0
 80030e4:	2800      	cmp	r0, #0
 80030e6:	d055      	beq.n	8003194 <xQueueCreateMutex+0xc0>
 80030e8:	f04f 0800 	mov.w	r8, #0
 80030ec:	2301      	movs	r3, #1
 80030ee:	6020      	str	r0, [r4, #0]
 80030f0:	f100 0710 	add.w	r7, r0, #16
 80030f4:	f104 0624 	add.w	r6, r4, #36	; 0x24
 80030f8:	e9c0 380f 	strd	r3, r8, [r0, #60]	; 0x3c
 80030fc:	f001 ff12 	bl	8004f24 <vPortEnterCritical>
 8003100:	6822      	ldr	r2, [r4, #0]
 8003102:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
 8003106:	4638      	mov	r0, r7
 8003108:	60a2      	str	r2, [r4, #8]
 800310a:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
 800310e:	fb03 f301 	mul.w	r3, r3, r1
 8003112:	1a59      	subs	r1, r3, r1
 8003114:	4413      	add	r3, r2
 8003116:	440a      	add	r2, r1
 8003118:	21ff      	movs	r1, #255	; 0xff
 800311a:	6063      	str	r3, [r4, #4]
 800311c:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8003120:	60e2      	str	r2, [r4, #12]
 8003122:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003126:	f7ff fef3 	bl	8002f10 <vListInitialise>
 800312a:	4630      	mov	r0, r6
 800312c:	f7ff fef0 	bl	8002f10 <vListInitialise>
 8003130:	f001 ff1e 	bl	8004f70 <vPortExitCritical>
 8003134:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8003136:	f8c4 800c 	str.w	r8, [r4, #12]
 800313a:	f884 904c 	strb.w	r9, [r4, #76]	; 0x4c
 800313e:	e9c4 8800 	strd	r8, r8, [r4]
 8003142:	f8cd 8004 	str.w	r8, [sp, #4]
 8003146:	b34d      	cbz	r5, 800319c <xQueueCreateMutex+0xc8>
 8003148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800314c:	b672      	cpsid	i
 800314e:	f383 8811 	msr	BASEPRI, r3
 8003152:	f3bf 8f6f 	isb	sy
 8003156:	f3bf 8f4f 	dsb	sy
 800315a:	b662      	cpsie	i
 800315c:	e7fe      	b.n	800315c <xQueueCreateMutex+0x88>
 800315e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003160:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8003162:	2a00      	cmp	r2, #0
 8003164:	f040 80e1 	bne.w	800332a <xQueueCreateMutex+0x256>
 8003168:	6827      	ldr	r7, [r4, #0]
 800316a:	3501      	adds	r5, #1
 800316c:	2f00      	cmp	r7, #0
 800316e:	f000 80e9 	beq.w	8003344 <xQueueCreateMutex+0x270>
 8003172:	63a5      	str	r5, [r4, #56]	; 0x38
 8003174:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003176:	b15b      	cbz	r3, 8003190 <xQueueCreateMutex+0xbc>
 8003178:	4630      	mov	r0, r6
 800317a:	f001 fb97 	bl	80048ac <xTaskRemoveFromEventList>
 800317e:	b138      	cbz	r0, 8003190 <xQueueCreateMutex+0xbc>
 8003180:	4b79      	ldr	r3, [pc, #484]	; (8003368 <xQueueCreateMutex+0x294>)
 8003182:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003186:	601a      	str	r2, [r3, #0]
 8003188:	f3bf 8f4f 	dsb	sy
 800318c:	f3bf 8f6f 	isb	sy
 8003190:	f001 feee 	bl	8004f70 <vPortExitCritical>
 8003194:	4620      	mov	r0, r4
 8003196:	b005      	add	sp, #20
 8003198:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800319c:	f001 fc3e 	bl	8004a1c <xTaskGetSchedulerState>
 80031a0:	b960      	cbnz	r0, 80031bc <xQueueCreateMutex+0xe8>
 80031a2:	9d01      	ldr	r5, [sp, #4]
 80031a4:	b155      	cbz	r5, 80031bc <xQueueCreateMutex+0xe8>
 80031a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031aa:	b672      	cpsid	i
 80031ac:	f383 8811 	msr	BASEPRI, r3
 80031b0:	f3bf 8f6f 	isb	sy
 80031b4:	f3bf 8f4f 	dsb	sy
 80031b8:	b662      	cpsie	i
 80031ba:	e7fe      	b.n	80031ba <xQueueCreateMutex+0xe6>
 80031bc:	f04f 0800 	mov.w	r8, #0
 80031c0:	f8df 91a4 	ldr.w	r9, [pc, #420]	; 8003368 <xQueueCreateMutex+0x294>
 80031c4:	f001 feae 	bl	8004f24 <vPortEnterCritical>
 80031c8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80031ca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d3c6      	bcc.n	800315e <xQueueCreateMutex+0x8a>
 80031d0:	9b01      	ldr	r3, [sp, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d0dc      	beq.n	8003190 <xQueueCreateMutex+0xbc>
 80031d6:	b915      	cbnz	r5, 80031de <xQueueCreateMutex+0x10a>
 80031d8:	a802      	add	r0, sp, #8
 80031da:	f001 fbad 	bl	8004938 <vTaskInternalSetTimeOutState>
 80031de:	f001 fec7 	bl	8004f70 <vPortExitCritical>
 80031e2:	f001 f967 	bl	80044b4 <vTaskSuspendAll>
 80031e6:	f001 fe9d 	bl	8004f24 <vPortEnterCritical>
 80031ea:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80031ee:	2bff      	cmp	r3, #255	; 0xff
 80031f0:	d101      	bne.n	80031f6 <xQueueCreateMutex+0x122>
 80031f2:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 80031f6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80031fa:	2bff      	cmp	r3, #255	; 0xff
 80031fc:	d101      	bne.n	8003202 <xQueueCreateMutex+0x12e>
 80031fe:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 8003202:	f001 feb5 	bl	8004f70 <vPortExitCritical>
 8003206:	a901      	add	r1, sp, #4
 8003208:	a802      	add	r0, sp, #8
 800320a:	f001 fb9f 	bl	800494c <xTaskCheckForTimeOut>
 800320e:	2800      	cmp	r0, #0
 8003210:	f040 8085 	bne.w	800331e <xQueueCreateMutex+0x24a>
 8003214:	f001 fe86 	bl	8004f24 <vPortEnterCritical>
 8003218:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800321a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800321c:	429a      	cmp	r2, r3
 800321e:	d037      	beq.n	8003290 <xQueueCreateMutex+0x1bc>
 8003220:	f001 fea6 	bl	8004f70 <vPortExitCritical>
 8003224:	f001 fe7e 	bl	8004f24 <vPortEnterCritical>
 8003228:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800322c:	b26d      	sxtb	r5, r5
 800322e:	2d00      	cmp	r5, #0
 8003230:	dd0c      	ble.n	800324c <xQueueCreateMutex+0x178>
 8003232:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003234:	b153      	cbz	r3, 800324c <xQueueCreateMutex+0x178>
 8003236:	4630      	mov	r0, r6
 8003238:	f001 fb38 	bl	80048ac <xTaskRemoveFromEventList>
 800323c:	b108      	cbz	r0, 8003242 <xQueueCreateMutex+0x16e>
 800323e:	f001 fbcb 	bl	80049d8 <vTaskMissedYield>
 8003242:	3d01      	subs	r5, #1
 8003244:	b2eb      	uxtb	r3, r5
 8003246:	b25d      	sxtb	r5, r3
 8003248:	2b00      	cmp	r3, #0
 800324a:	d1f2      	bne.n	8003232 <xQueueCreateMutex+0x15e>
 800324c:	23ff      	movs	r3, #255	; 0xff
 800324e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003252:	f001 fe8d 	bl	8004f70 <vPortExitCritical>
 8003256:	f001 fe65 	bl	8004f24 <vPortEnterCritical>
 800325a:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800325e:	b26d      	sxtb	r5, r5
 8003260:	2d00      	cmp	r5, #0
 8003262:	dd0c      	ble.n	800327e <xQueueCreateMutex+0x1aa>
 8003264:	6923      	ldr	r3, [r4, #16]
 8003266:	b153      	cbz	r3, 800327e <xQueueCreateMutex+0x1aa>
 8003268:	4638      	mov	r0, r7
 800326a:	f001 fb1f 	bl	80048ac <xTaskRemoveFromEventList>
 800326e:	b108      	cbz	r0, 8003274 <xQueueCreateMutex+0x1a0>
 8003270:	f001 fbb2 	bl	80049d8 <vTaskMissedYield>
 8003274:	3d01      	subs	r5, #1
 8003276:	b2eb      	uxtb	r3, r5
 8003278:	b25d      	sxtb	r5, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1f2      	bne.n	8003264 <xQueueCreateMutex+0x190>
 800327e:	23ff      	movs	r3, #255	; 0xff
 8003280:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003284:	f001 fe74 	bl	8004f70 <vPortExitCritical>
 8003288:	f001 f9c6 	bl	8004618 <xTaskResumeAll>
 800328c:	2501      	movs	r5, #1
 800328e:	e799      	b.n	80031c4 <xQueueCreateMutex+0xf0>
 8003290:	f001 fe6e 	bl	8004f70 <vPortExitCritical>
 8003294:	9901      	ldr	r1, [sp, #4]
 8003296:	4638      	mov	r0, r7
 8003298:	f001 fab6 	bl	8004808 <vTaskPlaceOnEventList>
 800329c:	f001 fe42 	bl	8004f24 <vPortEnterCritical>
 80032a0:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 80032a4:	b26d      	sxtb	r5, r5
 80032a6:	2d00      	cmp	r5, #0
 80032a8:	dc0a      	bgt.n	80032c0 <xQueueCreateMutex+0x1ec>
 80032aa:	e00c      	b.n	80032c6 <xQueueCreateMutex+0x1f2>
 80032ac:	4630      	mov	r0, r6
 80032ae:	f001 fafd 	bl	80048ac <xTaskRemoveFromEventList>
 80032b2:	b108      	cbz	r0, 80032b8 <xQueueCreateMutex+0x1e4>
 80032b4:	f001 fb90 	bl	80049d8 <vTaskMissedYield>
 80032b8:	3d01      	subs	r5, #1
 80032ba:	b2eb      	uxtb	r3, r5
 80032bc:	b25d      	sxtb	r5, r3
 80032be:	b113      	cbz	r3, 80032c6 <xQueueCreateMutex+0x1f2>
 80032c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1f2      	bne.n	80032ac <xQueueCreateMutex+0x1d8>
 80032c6:	23ff      	movs	r3, #255	; 0xff
 80032c8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80032cc:	f001 fe50 	bl	8004f70 <vPortExitCritical>
 80032d0:	f001 fe28 	bl	8004f24 <vPortEnterCritical>
 80032d4:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 80032d8:	b26d      	sxtb	r5, r5
 80032da:	2d00      	cmp	r5, #0
 80032dc:	dc0a      	bgt.n	80032f4 <xQueueCreateMutex+0x220>
 80032de:	e00c      	b.n	80032fa <xQueueCreateMutex+0x226>
 80032e0:	4638      	mov	r0, r7
 80032e2:	f001 fae3 	bl	80048ac <xTaskRemoveFromEventList>
 80032e6:	b108      	cbz	r0, 80032ec <xQueueCreateMutex+0x218>
 80032e8:	f001 fb76 	bl	80049d8 <vTaskMissedYield>
 80032ec:	3d01      	subs	r5, #1
 80032ee:	b2eb      	uxtb	r3, r5
 80032f0:	b25d      	sxtb	r5, r3
 80032f2:	b113      	cbz	r3, 80032fa <xQueueCreateMutex+0x226>
 80032f4:	6923      	ldr	r3, [r4, #16]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1f2      	bne.n	80032e0 <xQueueCreateMutex+0x20c>
 80032fa:	23ff      	movs	r3, #255	; 0xff
 80032fc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003300:	f001 fe36 	bl	8004f70 <vPortExitCritical>
 8003304:	f001 f988 	bl	8004618 <xTaskResumeAll>
 8003308:	2800      	cmp	r0, #0
 800330a:	d1bf      	bne.n	800328c <xQueueCreateMutex+0x1b8>
 800330c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003310:	f8c9 3000 	str.w	r3, [r9]
 8003314:	f3bf 8f4f 	dsb	sy
 8003318:	f3bf 8f6f 	isb	sy
 800331c:	e7b6      	b.n	800328c <xQueueCreateMutex+0x1b8>
 800331e:	4620      	mov	r0, r4
 8003320:	f7ff fe44 	bl	8002fac <prvUnlockQueue>
 8003324:	f001 f978 	bl	8004618 <xTaskResumeAll>
 8003328:	e734      	b.n	8003194 <xQueueCreateMutex+0xc0>
 800332a:	2100      	movs	r1, #0
 800332c:	68a0      	ldr	r0, [r4, #8]
 800332e:	f00c fb10 	bl	800f952 <memcpy>
 8003332:	68a3      	ldr	r3, [r4, #8]
 8003334:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003336:	6862      	ldr	r2, [r4, #4]
 8003338:	440b      	add	r3, r1
 800333a:	4293      	cmp	r3, r2
 800333c:	60a3      	str	r3, [r4, #8]
 800333e:	d20e      	bcs.n	800335e <xQueueCreateMutex+0x28a>
 8003340:	3501      	adds	r5, #1
 8003342:	e716      	b.n	8003172 <xQueueCreateMutex+0x9e>
 8003344:	6860      	ldr	r0, [r4, #4]
 8003346:	f001 fbd5 	bl	8004af4 <xTaskPriorityDisinherit>
 800334a:	63a5      	str	r5, [r4, #56]	; 0x38
 800334c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800334e:	6067      	str	r7, [r4, #4]
 8003350:	2b00      	cmp	r3, #0
 8003352:	f47f af11 	bne.w	8003178 <xQueueCreateMutex+0xa4>
 8003356:	2800      	cmp	r0, #0
 8003358:	f47f af12 	bne.w	8003180 <xQueueCreateMutex+0xac>
 800335c:	e718      	b.n	8003190 <xQueueCreateMutex+0xbc>
 800335e:	6823      	ldr	r3, [r4, #0]
 8003360:	3501      	adds	r5, #1
 8003362:	60a3      	str	r3, [r4, #8]
 8003364:	e705      	b.n	8003172 <xQueueCreateMutex+0x9e>
 8003366:	bf00      	nop
 8003368:	e000ed04 	.word	0xe000ed04

0800336c <xQueueGenericSend>:
 800336c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003370:	b085      	sub	sp, #20
 8003372:	9201      	str	r2, [sp, #4]
 8003374:	2800      	cmp	r0, #0
 8003376:	f000 811a 	beq.w	80035ae <xQueueGenericSend+0x242>
 800337a:	2900      	cmp	r1, #0
 800337c:	f000 8108 	beq.w	8003590 <xQueueGenericSend+0x224>
 8003380:	2b02      	cmp	r3, #2
 8003382:	d10d      	bne.n	80033a0 <xQueueGenericSend+0x34>
 8003384:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8003386:	2a01      	cmp	r2, #1
 8003388:	d00a      	beq.n	80033a0 <xQueueGenericSend+0x34>
 800338a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800338e:	b672      	cpsid	i
 8003390:	f383 8811 	msr	BASEPRI, r3
 8003394:	f3bf 8f6f 	isb	sy
 8003398:	f3bf 8f4f 	dsb	sy
 800339c:	b662      	cpsie	i
 800339e:	e7fe      	b.n	800339e <xQueueGenericSend+0x32>
 80033a0:	4604      	mov	r4, r0
 80033a2:	461f      	mov	r7, r3
 80033a4:	4688      	mov	r8, r1
 80033a6:	f001 fb39 	bl	8004a1c <xTaskGetSchedulerState>
 80033aa:	b960      	cbnz	r0, 80033c6 <xQueueGenericSend+0x5a>
 80033ac:	9b01      	ldr	r3, [sp, #4]
 80033ae:	b153      	cbz	r3, 80033c6 <xQueueGenericSend+0x5a>
 80033b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b4:	b672      	cpsid	i
 80033b6:	f383 8811 	msr	BASEPRI, r3
 80033ba:	f3bf 8f6f 	isb	sy
 80033be:	f3bf 8f4f 	dsb	sy
 80033c2:	b662      	cpsie	i
 80033c4:	e7fe      	b.n	80033c4 <xQueueGenericSend+0x58>
 80033c6:	f001 fdad 	bl	8004f24 <vPortEnterCritical>
 80033ca:	f1a7 0602 	sub.w	r6, r7, #2
 80033ce:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80033d0:	2500      	movs	r5, #0
 80033d2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80033d4:	fab6 f686 	clz	r6, r6
 80033d8:	46a9      	mov	r9, r5
 80033da:	429a      	cmp	r2, r3
 80033dc:	ea4f 1656 	mov.w	r6, r6, lsr #5
 80033e0:	d371      	bcc.n	80034c6 <xQueueGenericSend+0x15a>
 80033e2:	2e00      	cmp	r6, #0
 80033e4:	d16f      	bne.n	80034c6 <xQueueGenericSend+0x15a>
 80033e6:	9b01      	ldr	r3, [sp, #4]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f000 80f4 	beq.w	80035d6 <xQueueGenericSend+0x26a>
 80033ee:	b915      	cbnz	r5, 80033f6 <xQueueGenericSend+0x8a>
 80033f0:	a802      	add	r0, sp, #8
 80033f2:	f001 faa1 	bl	8004938 <vTaskInternalSetTimeOutState>
 80033f6:	f001 fdbb 	bl	8004f70 <vPortExitCritical>
 80033fa:	f001 f85b 	bl	80044b4 <vTaskSuspendAll>
 80033fe:	f001 fd91 	bl	8004f24 <vPortEnterCritical>
 8003402:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003406:	2bff      	cmp	r3, #255	; 0xff
 8003408:	d101      	bne.n	800340e <xQueueGenericSend+0xa2>
 800340a:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 800340e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8003412:	2bff      	cmp	r3, #255	; 0xff
 8003414:	d101      	bne.n	800341a <xQueueGenericSend+0xae>
 8003416:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 800341a:	f001 fda9 	bl	8004f70 <vPortExitCritical>
 800341e:	a901      	add	r1, sp, #4
 8003420:	a802      	add	r0, sp, #8
 8003422:	f001 fa93 	bl	800494c <xTaskCheckForTimeOut>
 8003426:	2800      	cmp	r0, #0
 8003428:	f040 8115 	bne.w	8003656 <xQueueGenericSend+0x2ea>
 800342c:	f001 fd7a 	bl	8004f24 <vPortEnterCritical>
 8003430:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003432:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003434:	429a      	cmp	r2, r3
 8003436:	d05a      	beq.n	80034ee <xQueueGenericSend+0x182>
 8003438:	f001 fd9a 	bl	8004f70 <vPortExitCritical>
 800343c:	f001 fd72 	bl	8004f24 <vPortEnterCritical>
 8003440:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8003444:	b26d      	sxtb	r5, r5
 8003446:	2d00      	cmp	r5, #0
 8003448:	dd11      	ble.n	800346e <xQueueGenericSend+0x102>
 800344a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800344c:	b17b      	cbz	r3, 800346e <xQueueGenericSend+0x102>
 800344e:	f104 0a24 	add.w	sl, r4, #36	; 0x24
 8003452:	e001      	b.n	8003458 <xQueueGenericSend+0xec>
 8003454:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003456:	b153      	cbz	r3, 800346e <xQueueGenericSend+0x102>
 8003458:	4650      	mov	r0, sl
 800345a:	f001 fa27 	bl	80048ac <xTaskRemoveFromEventList>
 800345e:	b108      	cbz	r0, 8003464 <xQueueGenericSend+0xf8>
 8003460:	f001 faba 	bl	80049d8 <vTaskMissedYield>
 8003464:	3d01      	subs	r5, #1
 8003466:	b2eb      	uxtb	r3, r5
 8003468:	b25d      	sxtb	r5, r3
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1f2      	bne.n	8003454 <xQueueGenericSend+0xe8>
 800346e:	23ff      	movs	r3, #255	; 0xff
 8003470:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003474:	f001 fd7c 	bl	8004f70 <vPortExitCritical>
 8003478:	f001 fd54 	bl	8004f24 <vPortEnterCritical>
 800347c:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8003480:	b26d      	sxtb	r5, r5
 8003482:	2d00      	cmp	r5, #0
 8003484:	dd11      	ble.n	80034aa <xQueueGenericSend+0x13e>
 8003486:	6923      	ldr	r3, [r4, #16]
 8003488:	b17b      	cbz	r3, 80034aa <xQueueGenericSend+0x13e>
 800348a:	f104 0a10 	add.w	sl, r4, #16
 800348e:	e001      	b.n	8003494 <xQueueGenericSend+0x128>
 8003490:	6923      	ldr	r3, [r4, #16]
 8003492:	b153      	cbz	r3, 80034aa <xQueueGenericSend+0x13e>
 8003494:	4650      	mov	r0, sl
 8003496:	f001 fa09 	bl	80048ac <xTaskRemoveFromEventList>
 800349a:	b108      	cbz	r0, 80034a0 <xQueueGenericSend+0x134>
 800349c:	f001 fa9c 	bl	80049d8 <vTaskMissedYield>
 80034a0:	3d01      	subs	r5, #1
 80034a2:	b2eb      	uxtb	r3, r5
 80034a4:	b25d      	sxtb	r5, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1f2      	bne.n	8003490 <xQueueGenericSend+0x124>
 80034aa:	23ff      	movs	r3, #255	; 0xff
 80034ac:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80034b0:	f001 fd5e 	bl	8004f70 <vPortExitCritical>
 80034b4:	f001 f8b0 	bl	8004618 <xTaskResumeAll>
 80034b8:	f001 fd34 	bl	8004f24 <vPortEnterCritical>
 80034bc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80034be:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80034c0:	2501      	movs	r5, #1
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d28d      	bcs.n	80033e2 <xQueueGenericSend+0x76>
 80034c6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80034c8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80034ca:	2a00      	cmp	r2, #0
 80034cc:	f040 8087 	bne.w	80035de <xQueueGenericSend+0x272>
 80034d0:	6826      	ldr	r6, [r4, #0]
 80034d2:	3501      	adds	r5, #1
 80034d4:	2e00      	cmp	r6, #0
 80034d6:	d075      	beq.n	80035c4 <xQueueGenericSend+0x258>
 80034d8:	63a5      	str	r5, [r4, #56]	; 0x38
 80034da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f040 8093 	bne.w	8003608 <xQueueGenericSend+0x29c>
 80034e2:	f001 fd45 	bl	8004f70 <vPortExitCritical>
 80034e6:	2001      	movs	r0, #1
 80034e8:	b005      	add	sp, #20
 80034ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034ee:	f104 0a10 	add.w	sl, r4, #16
 80034f2:	f001 fd3d 	bl	8004f70 <vPortExitCritical>
 80034f6:	9901      	ldr	r1, [sp, #4]
 80034f8:	4650      	mov	r0, sl
 80034fa:	f001 f985 	bl	8004808 <vTaskPlaceOnEventList>
 80034fe:	f001 fd11 	bl	8004f24 <vPortEnterCritical>
 8003502:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8003506:	fa4f fb83 	sxtb.w	fp, r3
 800350a:	f1bb 0f00 	cmp.w	fp, #0
 800350e:	dd13      	ble.n	8003538 <xQueueGenericSend+0x1cc>
 8003510:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003512:	b18a      	cbz	r2, 8003538 <xQueueGenericSend+0x1cc>
 8003514:	f104 0524 	add.w	r5, r4, #36	; 0x24
 8003518:	e001      	b.n	800351e <xQueueGenericSend+0x1b2>
 800351a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800351c:	b162      	cbz	r2, 8003538 <xQueueGenericSend+0x1cc>
 800351e:	4628      	mov	r0, r5
 8003520:	f001 f9c4 	bl	80048ac <xTaskRemoveFromEventList>
 8003524:	b108      	cbz	r0, 800352a <xQueueGenericSend+0x1be>
 8003526:	f001 fa57 	bl	80049d8 <vTaskMissedYield>
 800352a:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 800352e:	b2db      	uxtb	r3, r3
 8003530:	fa4f fb83 	sxtb.w	fp, r3
 8003534:	2b00      	cmp	r3, #0
 8003536:	d1f0      	bne.n	800351a <xQueueGenericSend+0x1ae>
 8003538:	23ff      	movs	r3, #255	; 0xff
 800353a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800353e:	f001 fd17 	bl	8004f70 <vPortExitCritical>
 8003542:	f001 fcef 	bl	8004f24 <vPortEnterCritical>
 8003546:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800354a:	b26d      	sxtb	r5, r5
 800354c:	2d00      	cmp	r5, #0
 800354e:	dc0a      	bgt.n	8003566 <xQueueGenericSend+0x1fa>
 8003550:	e00c      	b.n	800356c <xQueueGenericSend+0x200>
 8003552:	4650      	mov	r0, sl
 8003554:	f001 f9aa 	bl	80048ac <xTaskRemoveFromEventList>
 8003558:	b108      	cbz	r0, 800355e <xQueueGenericSend+0x1f2>
 800355a:	f001 fa3d 	bl	80049d8 <vTaskMissedYield>
 800355e:	3d01      	subs	r5, #1
 8003560:	b2eb      	uxtb	r3, r5
 8003562:	b25d      	sxtb	r5, r3
 8003564:	b113      	cbz	r3, 800356c <xQueueGenericSend+0x200>
 8003566:	6923      	ldr	r3, [r4, #16]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d1f2      	bne.n	8003552 <xQueueGenericSend+0x1e6>
 800356c:	23ff      	movs	r3, #255	; 0xff
 800356e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003572:	f001 fcfd 	bl	8004f70 <vPortExitCritical>
 8003576:	f001 f84f 	bl	8004618 <xTaskResumeAll>
 800357a:	2800      	cmp	r0, #0
 800357c:	d19c      	bne.n	80034b8 <xQueueGenericSend+0x14c>
 800357e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003582:	4a3d      	ldr	r2, [pc, #244]	; (8003678 <xQueueGenericSend+0x30c>)
 8003584:	6013      	str	r3, [r2, #0]
 8003586:	f3bf 8f4f 	dsb	sy
 800358a:	f3bf 8f6f 	isb	sy
 800358e:	e793      	b.n	80034b8 <xQueueGenericSend+0x14c>
 8003590:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003592:	2a00      	cmp	r2, #0
 8003594:	f43f aef4 	beq.w	8003380 <xQueueGenericSend+0x14>
 8003598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800359c:	b672      	cpsid	i
 800359e:	f383 8811 	msr	BASEPRI, r3
 80035a2:	f3bf 8f6f 	isb	sy
 80035a6:	f3bf 8f4f 	dsb	sy
 80035aa:	b662      	cpsie	i
 80035ac:	e7fe      	b.n	80035ac <xQueueGenericSend+0x240>
 80035ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b2:	b672      	cpsid	i
 80035b4:	f383 8811 	msr	BASEPRI, r3
 80035b8:	f3bf 8f6f 	isb	sy
 80035bc:	f3bf 8f4f 	dsb	sy
 80035c0:	b662      	cpsie	i
 80035c2:	e7fe      	b.n	80035c2 <xQueueGenericSend+0x256>
 80035c4:	6860      	ldr	r0, [r4, #4]
 80035c6:	f001 fa95 	bl	8004af4 <xTaskPriorityDisinherit>
 80035ca:	63a5      	str	r5, [r4, #56]	; 0x38
 80035cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80035ce:	6066      	str	r6, [r4, #4]
 80035d0:	b9d3      	cbnz	r3, 8003608 <xQueueGenericSend+0x29c>
 80035d2:	bb00      	cbnz	r0, 8003616 <xQueueGenericSend+0x2aa>
 80035d4:	e785      	b.n	80034e2 <xQueueGenericSend+0x176>
 80035d6:	f001 fccb 	bl	8004f70 <vPortExitCritical>
 80035da:	4630      	mov	r0, r6
 80035dc:	e784      	b.n	80034e8 <xQueueGenericSend+0x17c>
 80035de:	4641      	mov	r1, r8
 80035e0:	bb17      	cbnz	r7, 8003628 <xQueueGenericSend+0x2bc>
 80035e2:	68a0      	ldr	r0, [r4, #8]
 80035e4:	3501      	adds	r5, #1
 80035e6:	f00c f9b4 	bl	800f952 <memcpy>
 80035ea:	68a3      	ldr	r3, [r4, #8]
 80035ec:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80035ee:	6862      	ldr	r2, [r4, #4]
 80035f0:	440b      	add	r3, r1
 80035f2:	4293      	cmp	r3, r2
 80035f4:	60a3      	str	r3, [r4, #8]
 80035f6:	f4ff af6f 	bcc.w	80034d8 <xQueueGenericSend+0x16c>
 80035fa:	63a5      	str	r5, [r4, #56]	; 0x38
 80035fc:	6822      	ldr	r2, [r4, #0]
 80035fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003600:	60a2      	str	r2, [r4, #8]
 8003602:	2b00      	cmp	r3, #0
 8003604:	f43f af6d 	beq.w	80034e2 <xQueueGenericSend+0x176>
 8003608:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800360c:	f001 f94e 	bl	80048ac <xTaskRemoveFromEventList>
 8003610:	2800      	cmp	r0, #0
 8003612:	f43f af66 	beq.w	80034e2 <xQueueGenericSend+0x176>
 8003616:	4b18      	ldr	r3, [pc, #96]	; (8003678 <xQueueGenericSend+0x30c>)
 8003618:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800361c:	601a      	str	r2, [r3, #0]
 800361e:	f3bf 8f4f 	dsb	sy
 8003622:	f3bf 8f6f 	isb	sy
 8003626:	e75c      	b.n	80034e2 <xQueueGenericSend+0x176>
 8003628:	68e0      	ldr	r0, [r4, #12]
 800362a:	f00c f992 	bl	800f952 <memcpy>
 800362e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003630:	68e2      	ldr	r2, [r4, #12]
 8003632:	425b      	negs	r3, r3
 8003634:	6821      	ldr	r1, [r4, #0]
 8003636:	441a      	add	r2, r3
 8003638:	428a      	cmp	r2, r1
 800363a:	60e2      	str	r2, [r4, #12]
 800363c:	d202      	bcs.n	8003644 <xQueueGenericSend+0x2d8>
 800363e:	6862      	ldr	r2, [r4, #4]
 8003640:	4413      	add	r3, r2
 8003642:	60e3      	str	r3, [r4, #12]
 8003644:	2f02      	cmp	r7, #2
 8003646:	d00d      	beq.n	8003664 <xQueueGenericSend+0x2f8>
 8003648:	3501      	adds	r5, #1
 800364a:	63a5      	str	r5, [r4, #56]	; 0x38
 800364c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800364e:	2b00      	cmp	r3, #0
 8003650:	f43f af47 	beq.w	80034e2 <xQueueGenericSend+0x176>
 8003654:	e7d8      	b.n	8003608 <xQueueGenericSend+0x29c>
 8003656:	4620      	mov	r0, r4
 8003658:	f7ff fca8 	bl	8002fac <prvUnlockQueue>
 800365c:	f000 ffdc 	bl	8004618 <xTaskResumeAll>
 8003660:	2000      	movs	r0, #0
 8003662:	e741      	b.n	80034e8 <xQueueGenericSend+0x17c>
 8003664:	2d00      	cmp	r5, #0
 8003666:	f47f af37 	bne.w	80034d8 <xQueueGenericSend+0x16c>
 800366a:	2301      	movs	r3, #1
 800366c:	63a3      	str	r3, [r4, #56]	; 0x38
 800366e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003670:	2b00      	cmp	r3, #0
 8003672:	f43f af36 	beq.w	80034e2 <xQueueGenericSend+0x176>
 8003676:	e7c7      	b.n	8003608 <xQueueGenericSend+0x29c>
 8003678:	e000ed04 	.word	0xe000ed04

0800367c <xQueueGenericSendFromISR>:
 800367c:	2800      	cmp	r0, #0
 800367e:	d040      	beq.n	8003702 <xQueueGenericSendFromISR+0x86>
 8003680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003684:	b379      	cbz	r1, 80036e6 <xQueueGenericSendFromISR+0x6a>
 8003686:	2b02      	cmp	r3, #2
 8003688:	d10d      	bne.n	80036a6 <xQueueGenericSendFromISR+0x2a>
 800368a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800368c:	2c01      	cmp	r4, #1
 800368e:	d00a      	beq.n	80036a6 <xQueueGenericSendFromISR+0x2a>
 8003690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003694:	b672      	cpsid	i
 8003696:	f383 8811 	msr	BASEPRI, r3
 800369a:	f3bf 8f6f 	isb	sy
 800369e:	f3bf 8f4f 	dsb	sy
 80036a2:	b662      	cpsie	i
 80036a4:	e7fe      	b.n	80036a4 <xQueueGenericSendFromISR+0x28>
 80036a6:	4604      	mov	r4, r0
 80036a8:	4699      	mov	r9, r3
 80036aa:	4690      	mov	r8, r2
 80036ac:	468a      	mov	sl, r1
 80036ae:	f001 fd43 	bl	8005138 <vPortValidateInterruptPriority>
 80036b2:	f3ef 8611 	mrs	r6, BASEPRI
 80036b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ba:	b672      	cpsid	i
 80036bc:	f383 8811 	msr	BASEPRI, r3
 80036c0:	f3bf 8f6f 	isb	sy
 80036c4:	f3bf 8f4f 	dsb	sy
 80036c8:	b662      	cpsie	i
 80036ca:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80036cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d322      	bcc.n	8003718 <xQueueGenericSendFromISR+0x9c>
 80036d2:	f1a9 0002 	sub.w	r0, r9, #2
 80036d6:	fab0 f080 	clz	r0, r0
 80036da:	0940      	lsrs	r0, r0, #5
 80036dc:	b9e0      	cbnz	r0, 8003718 <xQueueGenericSendFromISR+0x9c>
 80036de:	f386 8811 	msr	BASEPRI, r6
 80036e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036e6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80036e8:	2c00      	cmp	r4, #0
 80036ea:	d0cc      	beq.n	8003686 <xQueueGenericSendFromISR+0xa>
 80036ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f0:	b672      	cpsid	i
 80036f2:	f383 8811 	msr	BASEPRI, r3
 80036f6:	f3bf 8f6f 	isb	sy
 80036fa:	f3bf 8f4f 	dsb	sy
 80036fe:	b662      	cpsie	i
 8003700:	e7fe      	b.n	8003700 <xQueueGenericSendFromISR+0x84>
 8003702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003706:	b672      	cpsid	i
 8003708:	f383 8811 	msr	BASEPRI, r3
 800370c:	f3bf 8f6f 	isb	sy
 8003710:	f3bf 8f4f 	dsb	sy
 8003714:	b662      	cpsie	i
 8003716:	e7fe      	b.n	8003716 <xQueueGenericSendFromISR+0x9a>
 8003718:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800371c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800371e:	b26d      	sxtb	r5, r5
 8003720:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 8003722:	b9ba      	cbnz	r2, 8003754 <xQueueGenericSendFromISR+0xd8>
 8003724:	f8d4 9000 	ldr.w	r9, [r4]
 8003728:	f1b9 0f00 	cmp.w	r9, #0
 800372c:	d00c      	beq.n	8003748 <xQueueGenericSendFromISR+0xcc>
 800372e:	3701      	adds	r7, #1
 8003730:	1c6b      	adds	r3, r5, #1
 8003732:	63a7      	str	r7, [r4, #56]	; 0x38
 8003734:	d01f      	beq.n	8003776 <xQueueGenericSendFromISR+0xfa>
 8003736:	1c6b      	adds	r3, r5, #1
 8003738:	2001      	movs	r0, #1
 800373a:	b25b      	sxtb	r3, r3
 800373c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003740:	f386 8811 	msr	BASEPRI, r6
 8003744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003748:	6860      	ldr	r0, [r4, #4]
 800374a:	f001 f9d3 	bl	8004af4 <xTaskPriorityDisinherit>
 800374e:	f8c4 9004 	str.w	r9, [r4, #4]
 8003752:	e7ec      	b.n	800372e <xQueueGenericSendFromISR+0xb2>
 8003754:	4651      	mov	r1, sl
 8003756:	f1b9 0f00 	cmp.w	r9, #0
 800375a:	d110      	bne.n	800377e <xQueueGenericSendFromISR+0x102>
 800375c:	68a0      	ldr	r0, [r4, #8]
 800375e:	f00c f8f8 	bl	800f952 <memcpy>
 8003762:	68a3      	ldr	r3, [r4, #8]
 8003764:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003766:	6862      	ldr	r2, [r4, #4]
 8003768:	440b      	add	r3, r1
 800376a:	4293      	cmp	r3, r2
 800376c:	60a3      	str	r3, [r4, #8]
 800376e:	d3de      	bcc.n	800372e <xQueueGenericSendFromISR+0xb2>
 8003770:	6823      	ldr	r3, [r4, #0]
 8003772:	60a3      	str	r3, [r4, #8]
 8003774:	e7db      	b.n	800372e <xQueueGenericSendFromISR+0xb2>
 8003776:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003778:	b9b3      	cbnz	r3, 80037a8 <xQueueGenericSendFromISR+0x12c>
 800377a:	2001      	movs	r0, #1
 800377c:	e7af      	b.n	80036de <xQueueGenericSendFromISR+0x62>
 800377e:	68e0      	ldr	r0, [r4, #12]
 8003780:	f00c f8e7 	bl	800f952 <memcpy>
 8003784:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003786:	68e2      	ldr	r2, [r4, #12]
 8003788:	425b      	negs	r3, r3
 800378a:	6821      	ldr	r1, [r4, #0]
 800378c:	441a      	add	r2, r3
 800378e:	428a      	cmp	r2, r1
 8003790:	60e2      	str	r2, [r4, #12]
 8003792:	d202      	bcs.n	800379a <xQueueGenericSendFromISR+0x11e>
 8003794:	6862      	ldr	r2, [r4, #4]
 8003796:	4413      	add	r3, r2
 8003798:	60e3      	str	r3, [r4, #12]
 800379a:	f1b9 0f02 	cmp.w	r9, #2
 800379e:	d1c6      	bne.n	800372e <xQueueGenericSendFromISR+0xb2>
 80037a0:	2f00      	cmp	r7, #0
 80037a2:	d0c4      	beq.n	800372e <xQueueGenericSendFromISR+0xb2>
 80037a4:	3f01      	subs	r7, #1
 80037a6:	e7c2      	b.n	800372e <xQueueGenericSendFromISR+0xb2>
 80037a8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80037ac:	f001 f87e 	bl	80048ac <xTaskRemoveFromEventList>
 80037b0:	f1b8 0f00 	cmp.w	r8, #0
 80037b4:	d0e1      	beq.n	800377a <xQueueGenericSendFromISR+0xfe>
 80037b6:	2800      	cmp	r0, #0
 80037b8:	d0df      	beq.n	800377a <xQueueGenericSendFromISR+0xfe>
 80037ba:	2001      	movs	r0, #1
 80037bc:	f8c8 0000 	str.w	r0, [r8]
 80037c0:	e78d      	b.n	80036de <xQueueGenericSendFromISR+0x62>
 80037c2:	bf00      	nop

080037c4 <xQueueGiveFromISR>:
 80037c4:	2800      	cmp	r0, #0
 80037c6:	d032      	beq.n	800382e <xQueueGiveFromISR+0x6a>
 80037c8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80037ca:	b153      	cbz	r3, 80037e2 <xQueueGiveFromISR+0x1e>
 80037cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d0:	b672      	cpsid	i
 80037d2:	f383 8811 	msr	BASEPRI, r3
 80037d6:	f3bf 8f6f 	isb	sy
 80037da:	f3bf 8f4f 	dsb	sy
 80037de:	b662      	cpsie	i
 80037e0:	e7fe      	b.n	80037e0 <xQueueGiveFromISR+0x1c>
 80037e2:	6803      	ldr	r3, [r0, #0]
 80037e4:	b373      	cbz	r3, 8003844 <xQueueGiveFromISR+0x80>
 80037e6:	b570      	push	{r4, r5, r6, lr}
 80037e8:	4604      	mov	r4, r0
 80037ea:	460d      	mov	r5, r1
 80037ec:	f001 fca4 	bl	8005138 <vPortValidateInterruptPriority>
 80037f0:	f3ef 8611 	mrs	r6, BASEPRI
 80037f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f8:	b672      	cpsid	i
 80037fa:	f383 8811 	msr	BASEPRI, r3
 80037fe:	f3bf 8f6f 	isb	sy
 8003802:	f3bf 8f4f 	dsb	sy
 8003806:	b662      	cpsie	i
 8003808:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800380a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800380c:	4293      	cmp	r3, r2
 800380e:	d92b      	bls.n	8003868 <xQueueGiveFromISR+0xa4>
 8003810:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8003814:	3201      	adds	r2, #1
 8003816:	b25b      	sxtb	r3, r3
 8003818:	63a2      	str	r2, [r4, #56]	; 0x38
 800381a:	1c5a      	adds	r2, r3, #1
 800381c:	d020      	beq.n	8003860 <xQueueGiveFromISR+0x9c>
 800381e:	3301      	adds	r3, #1
 8003820:	2001      	movs	r0, #1
 8003822:	b25b      	sxtb	r3, r3
 8003824:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003828:	f386 8811 	msr	BASEPRI, r6
 800382c:	bd70      	pop	{r4, r5, r6, pc}
 800382e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003832:	b672      	cpsid	i
 8003834:	f383 8811 	msr	BASEPRI, r3
 8003838:	f3bf 8f6f 	isb	sy
 800383c:	f3bf 8f4f 	dsb	sy
 8003840:	b662      	cpsie	i
 8003842:	e7fe      	b.n	8003842 <xQueueGiveFromISR+0x7e>
 8003844:	6843      	ldr	r3, [r0, #4]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d0cd      	beq.n	80037e6 <xQueueGiveFromISR+0x22>
 800384a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800384e:	b672      	cpsid	i
 8003850:	f383 8811 	msr	BASEPRI, r3
 8003854:	f3bf 8f6f 	isb	sy
 8003858:	f3bf 8f4f 	dsb	sy
 800385c:	b662      	cpsie	i
 800385e:	e7fe      	b.n	800385e <xQueueGiveFromISR+0x9a>
 8003860:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003862:	b91b      	cbnz	r3, 800386c <xQueueGiveFromISR+0xa8>
 8003864:	2001      	movs	r0, #1
 8003866:	e7df      	b.n	8003828 <xQueueGiveFromISR+0x64>
 8003868:	2000      	movs	r0, #0
 800386a:	e7dd      	b.n	8003828 <xQueueGiveFromISR+0x64>
 800386c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003870:	f001 f81c 	bl	80048ac <xTaskRemoveFromEventList>
 8003874:	2d00      	cmp	r5, #0
 8003876:	d0f5      	beq.n	8003864 <xQueueGiveFromISR+0xa0>
 8003878:	2800      	cmp	r0, #0
 800387a:	d0f3      	beq.n	8003864 <xQueueGiveFromISR+0xa0>
 800387c:	2001      	movs	r0, #1
 800387e:	6028      	str	r0, [r5, #0]
 8003880:	e7d2      	b.n	8003828 <xQueueGiveFromISR+0x64>
 8003882:	bf00      	nop

08003884 <xQueueReceive>:
 8003884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003888:	b084      	sub	sp, #16
 800388a:	9201      	str	r2, [sp, #4]
 800388c:	2800      	cmp	r0, #0
 800388e:	f000 814b 	beq.w	8003b28 <xQueueReceive+0x2a4>
 8003892:	2900      	cmp	r1, #0
 8003894:	f000 8139 	beq.w	8003b0a <xQueueReceive+0x286>
 8003898:	4604      	mov	r4, r0
 800389a:	460f      	mov	r7, r1
 800389c:	f001 f8be 	bl	8004a1c <xTaskGetSchedulerState>
 80038a0:	b960      	cbnz	r0, 80038bc <xQueueReceive+0x38>
 80038a2:	9b01      	ldr	r3, [sp, #4]
 80038a4:	b153      	cbz	r3, 80038bc <xQueueReceive+0x38>
 80038a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038aa:	b672      	cpsid	i
 80038ac:	f383 8811 	msr	BASEPRI, r3
 80038b0:	f3bf 8f6f 	isb	sy
 80038b4:	f3bf 8f4f 	dsb	sy
 80038b8:	b662      	cpsie	i
 80038ba:	e7fe      	b.n	80038ba <xQueueReceive+0x36>
 80038bc:	f001 fb32 	bl	8004f24 <vPortEnterCritical>
 80038c0:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80038c2:	2d00      	cmp	r5, #0
 80038c4:	f040 80b8 	bne.w	8003a38 <xQueueReceive+0x1b4>
 80038c8:	9b01      	ldr	r3, [sp, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d068      	beq.n	80039a0 <xQueueReceive+0x11c>
 80038ce:	a802      	add	r0, sp, #8
 80038d0:	46a8      	mov	r8, r5
 80038d2:	f104 0624 	add.w	r6, r4, #36	; 0x24
 80038d6:	f8df 9284 	ldr.w	r9, [pc, #644]	; 8003b5c <xQueueReceive+0x2d8>
 80038da:	f001 f82d 	bl	8004938 <vTaskInternalSetTimeOutState>
 80038de:	f001 fb47 	bl	8004f70 <vPortExitCritical>
 80038e2:	f000 fde7 	bl	80044b4 <vTaskSuspendAll>
 80038e6:	f001 fb1d 	bl	8004f24 <vPortEnterCritical>
 80038ea:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80038ee:	2bff      	cmp	r3, #255	; 0xff
 80038f0:	f000 8108 	beq.w	8003b04 <xQueueReceive+0x280>
 80038f4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80038f8:	2bff      	cmp	r3, #255	; 0xff
 80038fa:	f000 8100 	beq.w	8003afe <xQueueReceive+0x27a>
 80038fe:	f001 fb37 	bl	8004f70 <vPortExitCritical>
 8003902:	a901      	add	r1, sp, #4
 8003904:	a802      	add	r0, sp, #8
 8003906:	f001 f821 	bl	800494c <xTaskCheckForTimeOut>
 800390a:	2800      	cmp	r0, #0
 800390c:	d14e      	bne.n	80039ac <xQueueReceive+0x128>
 800390e:	f001 fb09 	bl	8004f24 <vPortEnterCritical>
 8003912:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003914:	2b00      	cmp	r3, #0
 8003916:	f000 80a8 	beq.w	8003a6a <xQueueReceive+0x1e6>
 800391a:	f001 fb29 	bl	8004f70 <vPortExitCritical>
 800391e:	f001 fb01 	bl	8004f24 <vPortEnterCritical>
 8003922:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8003926:	b26d      	sxtb	r5, r5
 8003928:	2d00      	cmp	r5, #0
 800392a:	dc0a      	bgt.n	8003942 <xQueueReceive+0xbe>
 800392c:	e00c      	b.n	8003948 <xQueueReceive+0xc4>
 800392e:	4630      	mov	r0, r6
 8003930:	f000 ffbc 	bl	80048ac <xTaskRemoveFromEventList>
 8003934:	b108      	cbz	r0, 800393a <xQueueReceive+0xb6>
 8003936:	f001 f84f 	bl	80049d8 <vTaskMissedYield>
 800393a:	3d01      	subs	r5, #1
 800393c:	b2eb      	uxtb	r3, r5
 800393e:	b25d      	sxtb	r5, r3
 8003940:	b113      	cbz	r3, 8003948 <xQueueReceive+0xc4>
 8003942:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003944:	2b00      	cmp	r3, #0
 8003946:	d1f2      	bne.n	800392e <xQueueReceive+0xaa>
 8003948:	23ff      	movs	r3, #255	; 0xff
 800394a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800394e:	f001 fb0f 	bl	8004f70 <vPortExitCritical>
 8003952:	f001 fae7 	bl	8004f24 <vPortEnterCritical>
 8003956:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800395a:	b26d      	sxtb	r5, r5
 800395c:	2d00      	cmp	r5, #0
 800395e:	dd10      	ble.n	8003982 <xQueueReceive+0xfe>
 8003960:	6923      	ldr	r3, [r4, #16]
 8003962:	b173      	cbz	r3, 8003982 <xQueueReceive+0xfe>
 8003964:	f104 0a10 	add.w	sl, r4, #16
 8003968:	4650      	mov	r0, sl
 800396a:	f000 ff9f 	bl	80048ac <xTaskRemoveFromEventList>
 800396e:	b108      	cbz	r0, 8003974 <xQueueReceive+0xf0>
 8003970:	f001 f832 	bl	80049d8 <vTaskMissedYield>
 8003974:	3d01      	subs	r5, #1
 8003976:	b2eb      	uxtb	r3, r5
 8003978:	b25d      	sxtb	r5, r3
 800397a:	b113      	cbz	r3, 8003982 <xQueueReceive+0xfe>
 800397c:	6923      	ldr	r3, [r4, #16]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d1f2      	bne.n	8003968 <xQueueReceive+0xe4>
 8003982:	23ff      	movs	r3, #255	; 0xff
 8003984:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003988:	f001 faf2 	bl	8004f70 <vPortExitCritical>
 800398c:	f000 fe44 	bl	8004618 <xTaskResumeAll>
 8003990:	f001 fac8 	bl	8004f24 <vPortEnterCritical>
 8003994:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8003996:	2d00      	cmp	r5, #0
 8003998:	d14e      	bne.n	8003a38 <xQueueReceive+0x1b4>
 800399a:	9b01      	ldr	r3, [sp, #4]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d19e      	bne.n	80038de <xQueueReceive+0x5a>
 80039a0:	f001 fae6 	bl	8004f70 <vPortExitCritical>
 80039a4:	2000      	movs	r0, #0
 80039a6:	b004      	add	sp, #16
 80039a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039ac:	f001 faba 	bl	8004f24 <vPortEnterCritical>
 80039b0:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 80039b4:	b26d      	sxtb	r5, r5
 80039b6:	2d00      	cmp	r5, #0
 80039b8:	dc0a      	bgt.n	80039d0 <xQueueReceive+0x14c>
 80039ba:	e00c      	b.n	80039d6 <xQueueReceive+0x152>
 80039bc:	4630      	mov	r0, r6
 80039be:	f000 ff75 	bl	80048ac <xTaskRemoveFromEventList>
 80039c2:	b108      	cbz	r0, 80039c8 <xQueueReceive+0x144>
 80039c4:	f001 f808 	bl	80049d8 <vTaskMissedYield>
 80039c8:	3d01      	subs	r5, #1
 80039ca:	b2eb      	uxtb	r3, r5
 80039cc:	b25d      	sxtb	r5, r3
 80039ce:	b113      	cbz	r3, 80039d6 <xQueueReceive+0x152>
 80039d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1f2      	bne.n	80039bc <xQueueReceive+0x138>
 80039d6:	23ff      	movs	r3, #255	; 0xff
 80039d8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80039dc:	f001 fac8 	bl	8004f70 <vPortExitCritical>
 80039e0:	f001 faa0 	bl	8004f24 <vPortEnterCritical>
 80039e4:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 80039e8:	b26d      	sxtb	r5, r5
 80039ea:	2d00      	cmp	r5, #0
 80039ec:	dd11      	ble.n	8003a12 <xQueueReceive+0x18e>
 80039ee:	6923      	ldr	r3, [r4, #16]
 80039f0:	b17b      	cbz	r3, 8003a12 <xQueueReceive+0x18e>
 80039f2:	f104 0a10 	add.w	sl, r4, #16
 80039f6:	e001      	b.n	80039fc <xQueueReceive+0x178>
 80039f8:	6923      	ldr	r3, [r4, #16]
 80039fa:	b153      	cbz	r3, 8003a12 <xQueueReceive+0x18e>
 80039fc:	4650      	mov	r0, sl
 80039fe:	f000 ff55 	bl	80048ac <xTaskRemoveFromEventList>
 8003a02:	b108      	cbz	r0, 8003a08 <xQueueReceive+0x184>
 8003a04:	f000 ffe8 	bl	80049d8 <vTaskMissedYield>
 8003a08:	3d01      	subs	r5, #1
 8003a0a:	b2eb      	uxtb	r3, r5
 8003a0c:	b25d      	sxtb	r5, r3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1f2      	bne.n	80039f8 <xQueueReceive+0x174>
 8003a12:	23ff      	movs	r3, #255	; 0xff
 8003a14:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003a18:	f001 faaa 	bl	8004f70 <vPortExitCritical>
 8003a1c:	f000 fdfc 	bl	8004618 <xTaskResumeAll>
 8003a20:	f001 fa80 	bl	8004f24 <vPortEnterCritical>
 8003a24:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d0ba      	beq.n	80039a0 <xQueueReceive+0x11c>
 8003a2a:	f001 faa1 	bl	8004f70 <vPortExitCritical>
 8003a2e:	f001 fa79 	bl	8004f24 <vPortEnterCritical>
 8003a32:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8003a34:	2d00      	cmp	r5, #0
 8003a36:	d0b0      	beq.n	800399a <xQueueReceive+0x116>
 8003a38:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003a3a:	b15a      	cbz	r2, 8003a54 <xQueueReceive+0x1d0>
 8003a3c:	68e1      	ldr	r1, [r4, #12]
 8003a3e:	6863      	ldr	r3, [r4, #4]
 8003a40:	4411      	add	r1, r2
 8003a42:	4299      	cmp	r1, r3
 8003a44:	60e1      	str	r1, [r4, #12]
 8003a46:	d302      	bcc.n	8003a4e <xQueueReceive+0x1ca>
 8003a48:	6823      	ldr	r3, [r4, #0]
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	60e3      	str	r3, [r4, #12]
 8003a4e:	4638      	mov	r0, r7
 8003a50:	f00b ff7f 	bl	800f952 <memcpy>
 8003a54:	3d01      	subs	r5, #1
 8003a56:	63a5      	str	r5, [r4, #56]	; 0x38
 8003a58:	6923      	ldr	r3, [r4, #16]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d16f      	bne.n	8003b3e <xQueueReceive+0x2ba>
 8003a5e:	f001 fa87 	bl	8004f70 <vPortExitCritical>
 8003a62:	2001      	movs	r0, #1
 8003a64:	b004      	add	sp, #16
 8003a66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a6a:	f001 fa81 	bl	8004f70 <vPortExitCritical>
 8003a6e:	9901      	ldr	r1, [sp, #4]
 8003a70:	4630      	mov	r0, r6
 8003a72:	f000 fec9 	bl	8004808 <vTaskPlaceOnEventList>
 8003a76:	f001 fa55 	bl	8004f24 <vPortEnterCritical>
 8003a7a:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8003a7e:	b26d      	sxtb	r5, r5
 8003a80:	2d00      	cmp	r5, #0
 8003a82:	dc0a      	bgt.n	8003a9a <xQueueReceive+0x216>
 8003a84:	e00c      	b.n	8003aa0 <xQueueReceive+0x21c>
 8003a86:	4630      	mov	r0, r6
 8003a88:	f000 ff10 	bl	80048ac <xTaskRemoveFromEventList>
 8003a8c:	b108      	cbz	r0, 8003a92 <xQueueReceive+0x20e>
 8003a8e:	f000 ffa3 	bl	80049d8 <vTaskMissedYield>
 8003a92:	3d01      	subs	r5, #1
 8003a94:	b2eb      	uxtb	r3, r5
 8003a96:	b25d      	sxtb	r5, r3
 8003a98:	b113      	cbz	r3, 8003aa0 <xQueueReceive+0x21c>
 8003a9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1f2      	bne.n	8003a86 <xQueueReceive+0x202>
 8003aa0:	23ff      	movs	r3, #255	; 0xff
 8003aa2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003aa6:	f001 fa63 	bl	8004f70 <vPortExitCritical>
 8003aaa:	f001 fa3b 	bl	8004f24 <vPortEnterCritical>
 8003aae:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8003ab2:	b26d      	sxtb	r5, r5
 8003ab4:	2d00      	cmp	r5, #0
 8003ab6:	dd10      	ble.n	8003ada <xQueueReceive+0x256>
 8003ab8:	6923      	ldr	r3, [r4, #16]
 8003aba:	b173      	cbz	r3, 8003ada <xQueueReceive+0x256>
 8003abc:	f104 0a10 	add.w	sl, r4, #16
 8003ac0:	4650      	mov	r0, sl
 8003ac2:	f000 fef3 	bl	80048ac <xTaskRemoveFromEventList>
 8003ac6:	b108      	cbz	r0, 8003acc <xQueueReceive+0x248>
 8003ac8:	f000 ff86 	bl	80049d8 <vTaskMissedYield>
 8003acc:	3d01      	subs	r5, #1
 8003ace:	b2eb      	uxtb	r3, r5
 8003ad0:	b25d      	sxtb	r5, r3
 8003ad2:	b113      	cbz	r3, 8003ada <xQueueReceive+0x256>
 8003ad4:	6923      	ldr	r3, [r4, #16]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1f2      	bne.n	8003ac0 <xQueueReceive+0x23c>
 8003ada:	23ff      	movs	r3, #255	; 0xff
 8003adc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003ae0:	f001 fa46 	bl	8004f70 <vPortExitCritical>
 8003ae4:	f000 fd98 	bl	8004618 <xTaskResumeAll>
 8003ae8:	2800      	cmp	r0, #0
 8003aea:	d1a0      	bne.n	8003a2e <xQueueReceive+0x1aa>
 8003aec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003af0:	f8c9 3000 	str.w	r3, [r9]
 8003af4:	f3bf 8f4f 	dsb	sy
 8003af8:	f3bf 8f6f 	isb	sy
 8003afc:	e797      	b.n	8003a2e <xQueueReceive+0x1aa>
 8003afe:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 8003b02:	e6fc      	b.n	80038fe <xQueueReceive+0x7a>
 8003b04:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 8003b08:	e6f4      	b.n	80038f4 <xQueueReceive+0x70>
 8003b0a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	f43f aec3 	beq.w	8003898 <xQueueReceive+0x14>
 8003b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b16:	b672      	cpsid	i
 8003b18:	f383 8811 	msr	BASEPRI, r3
 8003b1c:	f3bf 8f6f 	isb	sy
 8003b20:	f3bf 8f4f 	dsb	sy
 8003b24:	b662      	cpsie	i
 8003b26:	e7fe      	b.n	8003b26 <xQueueReceive+0x2a2>
 8003b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b2c:	b672      	cpsid	i
 8003b2e:	f383 8811 	msr	BASEPRI, r3
 8003b32:	f3bf 8f6f 	isb	sy
 8003b36:	f3bf 8f4f 	dsb	sy
 8003b3a:	b662      	cpsie	i
 8003b3c:	e7fe      	b.n	8003b3c <xQueueReceive+0x2b8>
 8003b3e:	f104 0010 	add.w	r0, r4, #16
 8003b42:	f000 feb3 	bl	80048ac <xTaskRemoveFromEventList>
 8003b46:	2800      	cmp	r0, #0
 8003b48:	d089      	beq.n	8003a5e <xQueueReceive+0x1da>
 8003b4a:	4b04      	ldr	r3, [pc, #16]	; (8003b5c <xQueueReceive+0x2d8>)
 8003b4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b50:	601a      	str	r2, [r3, #0]
 8003b52:	f3bf 8f4f 	dsb	sy
 8003b56:	f3bf 8f6f 	isb	sy
 8003b5a:	e780      	b.n	8003a5e <xQueueReceive+0x1da>
 8003b5c:	e000ed04 	.word	0xe000ed04

08003b60 <xQueueSemaphoreTake>:
 8003b60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003b64:	b085      	sub	sp, #20
 8003b66:	9101      	str	r1, [sp, #4]
 8003b68:	b160      	cbz	r0, 8003b84 <xQueueSemaphoreTake+0x24>
 8003b6a:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8003b6c:	b1ad      	cbz	r5, 8003b9a <xQueueSemaphoreTake+0x3a>
 8003b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b72:	b672      	cpsid	i
 8003b74:	f383 8811 	msr	BASEPRI, r3
 8003b78:	f3bf 8f6f 	isb	sy
 8003b7c:	f3bf 8f4f 	dsb	sy
 8003b80:	b662      	cpsie	i
 8003b82:	e7fe      	b.n	8003b82 <xQueueSemaphoreTake+0x22>
 8003b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b88:	b672      	cpsid	i
 8003b8a:	f383 8811 	msr	BASEPRI, r3
 8003b8e:	f3bf 8f6f 	isb	sy
 8003b92:	f3bf 8f4f 	dsb	sy
 8003b96:	b662      	cpsie	i
 8003b98:	e7fe      	b.n	8003b98 <xQueueSemaphoreTake+0x38>
 8003b9a:	4604      	mov	r4, r0
 8003b9c:	f000 ff3e 	bl	8004a1c <xTaskGetSchedulerState>
 8003ba0:	b960      	cbnz	r0, 8003bbc <xQueueSemaphoreTake+0x5c>
 8003ba2:	9d01      	ldr	r5, [sp, #4]
 8003ba4:	b155      	cbz	r5, 8003bbc <xQueueSemaphoreTake+0x5c>
 8003ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003baa:	b672      	cpsid	i
 8003bac:	f383 8811 	msr	BASEPRI, r3
 8003bb0:	f3bf 8f6f 	isb	sy
 8003bb4:	f3bf 8f4f 	dsb	sy
 8003bb8:	b662      	cpsie	i
 8003bba:	e7fe      	b.n	8003bba <xQueueSemaphoreTake+0x5a>
 8003bbc:	f001 f9b2 	bl	8004f24 <vPortEnterCritical>
 8003bc0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003bc2:	462e      	mov	r6, r5
 8003bc4:	2700      	movs	r7, #0
 8003bc6:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 8003e80 <xQueueSemaphoreTake+0x320>
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	f040 80b3 	bne.w	8003d36 <xQueueSemaphoreTake+0x1d6>
 8003bd0:	9b01      	ldr	r3, [sp, #4]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	f000 8129 	beq.w	8003e2a <xQueueSemaphoreTake+0x2ca>
 8003bd8:	b916      	cbnz	r6, 8003be0 <xQueueSemaphoreTake+0x80>
 8003bda:	a802      	add	r0, sp, #8
 8003bdc:	f000 feac 	bl	8004938 <vTaskInternalSetTimeOutState>
 8003be0:	f001 f9c6 	bl	8004f70 <vPortExitCritical>
 8003be4:	f000 fc66 	bl	80044b4 <vTaskSuspendAll>
 8003be8:	f001 f99c 	bl	8004f24 <vPortEnterCritical>
 8003bec:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003bf0:	2bff      	cmp	r3, #255	; 0xff
 8003bf2:	d101      	bne.n	8003bf8 <xQueueSemaphoreTake+0x98>
 8003bf4:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8003bf8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8003bfc:	2bff      	cmp	r3, #255	; 0xff
 8003bfe:	d101      	bne.n	8003c04 <xQueueSemaphoreTake+0xa4>
 8003c00:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003c04:	f001 f9b4 	bl	8004f70 <vPortExitCritical>
 8003c08:	a901      	add	r1, sp, #4
 8003c0a:	a802      	add	r0, sp, #8
 8003c0c:	f000 fe9e 	bl	800494c <xTaskCheckForTimeOut>
 8003c10:	2800      	cmp	r0, #0
 8003c12:	d144      	bne.n	8003c9e <xQueueSemaphoreTake+0x13e>
 8003c14:	f001 f986 	bl	8004f24 <vPortEnterCritical>
 8003c18:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f000 809d 	beq.w	8003d5a <xQueueSemaphoreTake+0x1fa>
 8003c20:	f001 f9a6 	bl	8004f70 <vPortExitCritical>
 8003c24:	f001 f97e 	bl	8004f24 <vPortEnterCritical>
 8003c28:	f894 6045 	ldrb.w	r6, [r4, #69]	; 0x45
 8003c2c:	b276      	sxtb	r6, r6
 8003c2e:	2e00      	cmp	r6, #0
 8003c30:	dd10      	ble.n	8003c54 <xQueueSemaphoreTake+0xf4>
 8003c32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c34:	b173      	cbz	r3, 8003c54 <xQueueSemaphoreTake+0xf4>
 8003c36:	f104 0924 	add.w	r9, r4, #36	; 0x24
 8003c3a:	4648      	mov	r0, r9
 8003c3c:	f000 fe36 	bl	80048ac <xTaskRemoveFromEventList>
 8003c40:	2800      	cmp	r0, #0
 8003c42:	f040 8087 	bne.w	8003d54 <xQueueSemaphoreTake+0x1f4>
 8003c46:	3e01      	subs	r6, #1
 8003c48:	b2f3      	uxtb	r3, r6
 8003c4a:	b25e      	sxtb	r6, r3
 8003c4c:	b113      	cbz	r3, 8003c54 <xQueueSemaphoreTake+0xf4>
 8003c4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d1f2      	bne.n	8003c3a <xQueueSemaphoreTake+0xda>
 8003c54:	23ff      	movs	r3, #255	; 0xff
 8003c56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003c5a:	f001 f989 	bl	8004f70 <vPortExitCritical>
 8003c5e:	f001 f961 	bl	8004f24 <vPortEnterCritical>
 8003c62:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 8003c66:	b276      	sxtb	r6, r6
 8003c68:	2e00      	cmp	r6, #0
 8003c6a:	dd10      	ble.n	8003c8e <xQueueSemaphoreTake+0x12e>
 8003c6c:	6923      	ldr	r3, [r4, #16]
 8003c6e:	b173      	cbz	r3, 8003c8e <xQueueSemaphoreTake+0x12e>
 8003c70:	f104 0910 	add.w	r9, r4, #16
 8003c74:	4648      	mov	r0, r9
 8003c76:	f000 fe19 	bl	80048ac <xTaskRemoveFromEventList>
 8003c7a:	2800      	cmp	r0, #0
 8003c7c:	f040 80bf 	bne.w	8003dfe <xQueueSemaphoreTake+0x29e>
 8003c80:	3e01      	subs	r6, #1
 8003c82:	b2f3      	uxtb	r3, r6
 8003c84:	b25e      	sxtb	r6, r3
 8003c86:	b113      	cbz	r3, 8003c8e <xQueueSemaphoreTake+0x12e>
 8003c88:	6923      	ldr	r3, [r4, #16]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1f2      	bne.n	8003c74 <xQueueSemaphoreTake+0x114>
 8003c8e:	23ff      	movs	r3, #255	; 0xff
 8003c90:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003c94:	f001 f96c 	bl	8004f70 <vPortExitCritical>
 8003c98:	f000 fcbe 	bl	8004618 <xTaskResumeAll>
 8003c9c:	e044      	b.n	8003d28 <xQueueSemaphoreTake+0x1c8>
 8003c9e:	f001 f941 	bl	8004f24 <vPortEnterCritical>
 8003ca2:	f894 6045 	ldrb.w	r6, [r4, #69]	; 0x45
 8003ca6:	b276      	sxtb	r6, r6
 8003ca8:	2e00      	cmp	r6, #0
 8003caa:	dd11      	ble.n	8003cd0 <xQueueSemaphoreTake+0x170>
 8003cac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003cae:	b17b      	cbz	r3, 8003cd0 <xQueueSemaphoreTake+0x170>
 8003cb0:	f104 0924 	add.w	r9, r4, #36	; 0x24
 8003cb4:	e001      	b.n	8003cba <xQueueSemaphoreTake+0x15a>
 8003cb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003cb8:	b153      	cbz	r3, 8003cd0 <xQueueSemaphoreTake+0x170>
 8003cba:	4648      	mov	r0, r9
 8003cbc:	f000 fdf6 	bl	80048ac <xTaskRemoveFromEventList>
 8003cc0:	b108      	cbz	r0, 8003cc6 <xQueueSemaphoreTake+0x166>
 8003cc2:	f000 fe89 	bl	80049d8 <vTaskMissedYield>
 8003cc6:	3e01      	subs	r6, #1
 8003cc8:	b2f3      	uxtb	r3, r6
 8003cca:	b25e      	sxtb	r6, r3
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d1f2      	bne.n	8003cb6 <xQueueSemaphoreTake+0x156>
 8003cd0:	23ff      	movs	r3, #255	; 0xff
 8003cd2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003cd6:	f001 f94b 	bl	8004f70 <vPortExitCritical>
 8003cda:	f001 f923 	bl	8004f24 <vPortEnterCritical>
 8003cde:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 8003ce2:	b276      	sxtb	r6, r6
 8003ce4:	2e00      	cmp	r6, #0
 8003ce6:	dd11      	ble.n	8003d0c <xQueueSemaphoreTake+0x1ac>
 8003ce8:	6923      	ldr	r3, [r4, #16]
 8003cea:	b17b      	cbz	r3, 8003d0c <xQueueSemaphoreTake+0x1ac>
 8003cec:	f104 0910 	add.w	r9, r4, #16
 8003cf0:	e001      	b.n	8003cf6 <xQueueSemaphoreTake+0x196>
 8003cf2:	6923      	ldr	r3, [r4, #16]
 8003cf4:	b153      	cbz	r3, 8003d0c <xQueueSemaphoreTake+0x1ac>
 8003cf6:	4648      	mov	r0, r9
 8003cf8:	f000 fdd8 	bl	80048ac <xTaskRemoveFromEventList>
 8003cfc:	b108      	cbz	r0, 8003d02 <xQueueSemaphoreTake+0x1a2>
 8003cfe:	f000 fe6b 	bl	80049d8 <vTaskMissedYield>
 8003d02:	3e01      	subs	r6, #1
 8003d04:	b2f3      	uxtb	r3, r6
 8003d06:	b25e      	sxtb	r6, r3
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d1f2      	bne.n	8003cf2 <xQueueSemaphoreTake+0x192>
 8003d0c:	23ff      	movs	r3, #255	; 0xff
 8003d0e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003d12:	f001 f92d 	bl	8004f70 <vPortExitCritical>
 8003d16:	f000 fc7f 	bl	8004618 <xTaskResumeAll>
 8003d1a:	f001 f903 	bl	8004f24 <vPortEnterCritical>
 8003d1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d07b      	beq.n	8003e1c <xQueueSemaphoreTake+0x2bc>
 8003d24:	f001 f924 	bl	8004f70 <vPortExitCritical>
 8003d28:	f001 f8fc 	bl	8004f24 <vPortEnterCritical>
 8003d2c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003d2e:	2601      	movs	r6, #1
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f43f af4d 	beq.w	8003bd0 <xQueueSemaphoreTake+0x70>
 8003d36:	3b01      	subs	r3, #1
 8003d38:	6822      	ldr	r2, [r4, #0]
 8003d3a:	63a3      	str	r3, [r4, #56]	; 0x38
 8003d3c:	b912      	cbnz	r2, 8003d44 <xQueueSemaphoreTake+0x1e4>
 8003d3e:	f000 ff95 	bl	8004c6c <pvTaskIncrementMutexHeldCount>
 8003d42:	6060      	str	r0, [r4, #4]
 8003d44:	6923      	ldr	r3, [r4, #16]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f040 808a 	bne.w	8003e60 <xQueueSemaphoreTake+0x300>
 8003d4c:	f001 f910 	bl	8004f70 <vPortExitCritical>
 8003d50:	2501      	movs	r5, #1
 8003d52:	e066      	b.n	8003e22 <xQueueSemaphoreTake+0x2c2>
 8003d54:	f000 fe40 	bl	80049d8 <vTaskMissedYield>
 8003d58:	e775      	b.n	8003c46 <xQueueSemaphoreTake+0xe6>
 8003d5a:	f001 f909 	bl	8004f70 <vPortExitCritical>
 8003d5e:	6823      	ldr	r3, [r4, #0]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d052      	beq.n	8003e0a <xQueueSemaphoreTake+0x2aa>
 8003d64:	f104 0924 	add.w	r9, r4, #36	; 0x24
 8003d68:	9901      	ldr	r1, [sp, #4]
 8003d6a:	4648      	mov	r0, r9
 8003d6c:	f000 fd4c 	bl	8004808 <vTaskPlaceOnEventList>
 8003d70:	f001 f8d8 	bl	8004f24 <vPortEnterCritical>
 8003d74:	f894 6045 	ldrb.w	r6, [r4, #69]	; 0x45
 8003d78:	b276      	sxtb	r6, r6
 8003d7a:	2e00      	cmp	r6, #0
 8003d7c:	dc04      	bgt.n	8003d88 <xQueueSemaphoreTake+0x228>
 8003d7e:	e011      	b.n	8003da4 <xQueueSemaphoreTake+0x244>
 8003d80:	3e01      	subs	r6, #1
 8003d82:	b2f3      	uxtb	r3, r6
 8003d84:	b25e      	sxtb	r6, r3
 8003d86:	b16b      	cbz	r3, 8003da4 <xQueueSemaphoreTake+0x244>
 8003d88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d8a:	b15b      	cbz	r3, 8003da4 <xQueueSemaphoreTake+0x244>
 8003d8c:	4648      	mov	r0, r9
 8003d8e:	f000 fd8d 	bl	80048ac <xTaskRemoveFromEventList>
 8003d92:	2800      	cmp	r0, #0
 8003d94:	d0f4      	beq.n	8003d80 <xQueueSemaphoreTake+0x220>
 8003d96:	3e01      	subs	r6, #1
 8003d98:	f000 fe1e 	bl	80049d8 <vTaskMissedYield>
 8003d9c:	b2f3      	uxtb	r3, r6
 8003d9e:	b25e      	sxtb	r6, r3
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d1f1      	bne.n	8003d88 <xQueueSemaphoreTake+0x228>
 8003da4:	23ff      	movs	r3, #255	; 0xff
 8003da6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003daa:	f001 f8e1 	bl	8004f70 <vPortExitCritical>
 8003dae:	f001 f8b9 	bl	8004f24 <vPortEnterCritical>
 8003db2:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 8003db6:	b276      	sxtb	r6, r6
 8003db8:	2e00      	cmp	r6, #0
 8003dba:	dd0e      	ble.n	8003dda <xQueueSemaphoreTake+0x27a>
 8003dbc:	6923      	ldr	r3, [r4, #16]
 8003dbe:	b163      	cbz	r3, 8003dda <xQueueSemaphoreTake+0x27a>
 8003dc0:	f104 0910 	add.w	r9, r4, #16
 8003dc4:	4648      	mov	r0, r9
 8003dc6:	f000 fd71 	bl	80048ac <xTaskRemoveFromEventList>
 8003dca:	b9d8      	cbnz	r0, 8003e04 <xQueueSemaphoreTake+0x2a4>
 8003dcc:	3e01      	subs	r6, #1
 8003dce:	b2f3      	uxtb	r3, r6
 8003dd0:	b25e      	sxtb	r6, r3
 8003dd2:	b113      	cbz	r3, 8003dda <xQueueSemaphoreTake+0x27a>
 8003dd4:	6923      	ldr	r3, [r4, #16]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d1f4      	bne.n	8003dc4 <xQueueSemaphoreTake+0x264>
 8003dda:	23ff      	movs	r3, #255	; 0xff
 8003ddc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003de0:	f001 f8c6 	bl	8004f70 <vPortExitCritical>
 8003de4:	f000 fc18 	bl	8004618 <xTaskResumeAll>
 8003de8:	2800      	cmp	r0, #0
 8003dea:	d19d      	bne.n	8003d28 <xQueueSemaphoreTake+0x1c8>
 8003dec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003df0:	f8c8 3000 	str.w	r3, [r8]
 8003df4:	f3bf 8f4f 	dsb	sy
 8003df8:	f3bf 8f6f 	isb	sy
 8003dfc:	e794      	b.n	8003d28 <xQueueSemaphoreTake+0x1c8>
 8003dfe:	f000 fdeb 	bl	80049d8 <vTaskMissedYield>
 8003e02:	e73d      	b.n	8003c80 <xQueueSemaphoreTake+0x120>
 8003e04:	f000 fde8 	bl	80049d8 <vTaskMissedYield>
 8003e08:	e7e0      	b.n	8003dcc <xQueueSemaphoreTake+0x26c>
 8003e0a:	f001 f88b 	bl	8004f24 <vPortEnterCritical>
 8003e0e:	6860      	ldr	r0, [r4, #4]
 8003e10:	f000 fe14 	bl	8004a3c <xTaskPriorityInherit>
 8003e14:	4605      	mov	r5, r0
 8003e16:	f001 f8ab 	bl	8004f70 <vPortExitCritical>
 8003e1a:	e7a3      	b.n	8003d64 <xQueueSemaphoreTake+0x204>
 8003e1c:	f001 f8a8 	bl	8004f70 <vPortExitCritical>
 8003e20:	b97d      	cbnz	r5, 8003e42 <xQueueSemaphoreTake+0x2e2>
 8003e22:	4628      	mov	r0, r5
 8003e24:	b005      	add	sp, #20
 8003e26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003e2a:	b1b5      	cbz	r5, 8003e5a <xQueueSemaphoreTake+0x2fa>
 8003e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e30:	b672      	cpsid	i
 8003e32:	f383 8811 	msr	BASEPRI, r3
 8003e36:	f3bf 8f6f 	isb	sy
 8003e3a:	f3bf 8f4f 	dsb	sy
 8003e3e:	b662      	cpsie	i
 8003e40:	e7fe      	b.n	8003e40 <xQueueSemaphoreTake+0x2e0>
 8003e42:	f001 f86f 	bl	8004f24 <vPortEnterCritical>
 8003e46:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003e48:	b119      	cbz	r1, 8003e52 <xQueueSemaphoreTake+0x2f2>
 8003e4a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003e4c:	6819      	ldr	r1, [r3, #0]
 8003e4e:	f1c1 0107 	rsb	r1, r1, #7
 8003e52:	6860      	ldr	r0, [r4, #4]
 8003e54:	2500      	movs	r5, #0
 8003e56:	f000 fea7 	bl	8004ba8 <vTaskPriorityDisinheritAfterTimeout>
 8003e5a:	f001 f889 	bl	8004f70 <vPortExitCritical>
 8003e5e:	e7e0      	b.n	8003e22 <xQueueSemaphoreTake+0x2c2>
 8003e60:	f104 0010 	add.w	r0, r4, #16
 8003e64:	f000 fd22 	bl	80048ac <xTaskRemoveFromEventList>
 8003e68:	2800      	cmp	r0, #0
 8003e6a:	f43f af6f 	beq.w	8003d4c <xQueueSemaphoreTake+0x1ec>
 8003e6e:	4b04      	ldr	r3, [pc, #16]	; (8003e80 <xQueueSemaphoreTake+0x320>)
 8003e70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e74:	601a      	str	r2, [r3, #0]
 8003e76:	f3bf 8f4f 	dsb	sy
 8003e7a:	f3bf 8f6f 	isb	sy
 8003e7e:	e765      	b.n	8003d4c <xQueueSemaphoreTake+0x1ec>
 8003e80:	e000ed04 	.word	0xe000ed04

08003e84 <xQueueReceiveFromISR>:
 8003e84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e88:	b1c8      	cbz	r0, 8003ebe <xQueueReceiveFromISR+0x3a>
 8003e8a:	2900      	cmp	r1, #0
 8003e8c:	d03d      	beq.n	8003f0a <xQueueReceiveFromISR+0x86>
 8003e8e:	4604      	mov	r4, r0
 8003e90:	4690      	mov	r8, r2
 8003e92:	4689      	mov	r9, r1
 8003e94:	f001 f950 	bl	8005138 <vPortValidateInterruptPriority>
 8003e98:	f3ef 8711 	mrs	r7, BASEPRI
 8003e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea0:	b672      	cpsid	i
 8003ea2:	f383 8811 	msr	BASEPRI, r3
 8003ea6:	f3bf 8f6f 	isb	sy
 8003eaa:	f3bf 8f4f 	dsb	sy
 8003eae:	b662      	cpsie	i
 8003eb0:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8003eb2:	b97d      	cbnz	r5, 8003ed4 <xQueueReceiveFromISR+0x50>
 8003eb4:	4628      	mov	r0, r5
 8003eb6:	f387 8811 	msr	BASEPRI, r7
 8003eba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec2:	b672      	cpsid	i
 8003ec4:	f383 8811 	msr	BASEPRI, r3
 8003ec8:	f3bf 8f6f 	isb	sy
 8003ecc:	f3bf 8f4f 	dsb	sy
 8003ed0:	b662      	cpsie	i
 8003ed2:	e7fe      	b.n	8003ed2 <xQueueReceiveFromISR+0x4e>
 8003ed4:	f894 6044 	ldrb.w	r6, [r4, #68]	; 0x44
 8003ed8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003eda:	b276      	sxtb	r6, r6
 8003edc:	b15a      	cbz	r2, 8003ef6 <xQueueReceiveFromISR+0x72>
 8003ede:	68e1      	ldr	r1, [r4, #12]
 8003ee0:	6863      	ldr	r3, [r4, #4]
 8003ee2:	4411      	add	r1, r2
 8003ee4:	4299      	cmp	r1, r3
 8003ee6:	60e1      	str	r1, [r4, #12]
 8003ee8:	d302      	bcc.n	8003ef0 <xQueueReceiveFromISR+0x6c>
 8003eea:	6823      	ldr	r3, [r4, #0]
 8003eec:	4619      	mov	r1, r3
 8003eee:	60e3      	str	r3, [r4, #12]
 8003ef0:	4648      	mov	r0, r9
 8003ef2:	f00b fd2e 	bl	800f952 <memcpy>
 8003ef6:	3d01      	subs	r5, #1
 8003ef8:	1c73      	adds	r3, r6, #1
 8003efa:	63a5      	str	r5, [r4, #56]	; 0x38
 8003efc:	d013      	beq.n	8003f26 <xQueueReceiveFromISR+0xa2>
 8003efe:	1c73      	adds	r3, r6, #1
 8003f00:	2001      	movs	r0, #1
 8003f02:	b25b      	sxtb	r3, r3
 8003f04:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003f08:	e7d5      	b.n	8003eb6 <xQueueReceiveFromISR+0x32>
 8003f0a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d0be      	beq.n	8003e8e <xQueueReceiveFromISR+0xa>
 8003f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f14:	b672      	cpsid	i
 8003f16:	f383 8811 	msr	BASEPRI, r3
 8003f1a:	f3bf 8f6f 	isb	sy
 8003f1e:	f3bf 8f4f 	dsb	sy
 8003f22:	b662      	cpsie	i
 8003f24:	e7fe      	b.n	8003f24 <xQueueReceiveFromISR+0xa0>
 8003f26:	6923      	ldr	r3, [r4, #16]
 8003f28:	b90b      	cbnz	r3, 8003f2e <xQueueReceiveFromISR+0xaa>
 8003f2a:	2001      	movs	r0, #1
 8003f2c:	e7c3      	b.n	8003eb6 <xQueueReceiveFromISR+0x32>
 8003f2e:	f104 0010 	add.w	r0, r4, #16
 8003f32:	f000 fcbb 	bl	80048ac <xTaskRemoveFromEventList>
 8003f36:	f1b8 0f00 	cmp.w	r8, #0
 8003f3a:	d0f6      	beq.n	8003f2a <xQueueReceiveFromISR+0xa6>
 8003f3c:	2800      	cmp	r0, #0
 8003f3e:	d0f4      	beq.n	8003f2a <xQueueReceiveFromISR+0xa6>
 8003f40:	2001      	movs	r0, #1
 8003f42:	f8c8 0000 	str.w	r0, [r8]
 8003f46:	e7b6      	b.n	8003eb6 <xQueueReceiveFromISR+0x32>

08003f48 <vQueueDelete>:
 8003f48:	b1d0      	cbz	r0, 8003f80 <vQueueDelete+0x38>
 8003f4a:	4b20      	ldr	r3, [pc, #128]	; (8003fcc <vQueueDelete+0x84>)
 8003f4c:	685a      	ldr	r2, [r3, #4]
 8003f4e:	4290      	cmp	r0, r2
 8003f50:	d021      	beq.n	8003f96 <vQueueDelete+0x4e>
 8003f52:	68da      	ldr	r2, [r3, #12]
 8003f54:	4290      	cmp	r0, r2
 8003f56:	d036      	beq.n	8003fc6 <vQueueDelete+0x7e>
 8003f58:	695a      	ldr	r2, [r3, #20]
 8003f5a:	4290      	cmp	r0, r2
 8003f5c:	d031      	beq.n	8003fc2 <vQueueDelete+0x7a>
 8003f5e:	69da      	ldr	r2, [r3, #28]
 8003f60:	4290      	cmp	r0, r2
 8003f62:	d02c      	beq.n	8003fbe <vQueueDelete+0x76>
 8003f64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f66:	4290      	cmp	r0, r2
 8003f68:	d027      	beq.n	8003fba <vQueueDelete+0x72>
 8003f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f6c:	4290      	cmp	r0, r2
 8003f6e:	d022      	beq.n	8003fb6 <vQueueDelete+0x6e>
 8003f70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f72:	4290      	cmp	r0, r2
 8003f74:	d01d      	beq.n	8003fb2 <vQueueDelete+0x6a>
 8003f76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f78:	4290      	cmp	r0, r2
 8003f7a:	d018      	beq.n	8003fae <vQueueDelete+0x66>
 8003f7c:	f001 b9b8 	b.w	80052f0 <vPortFree>
 8003f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f84:	b672      	cpsid	i
 8003f86:	f383 8811 	msr	BASEPRI, r3
 8003f8a:	f3bf 8f6f 	isb	sy
 8003f8e:	f3bf 8f4f 	dsb	sy
 8003f92:	b662      	cpsie	i
 8003f94:	e7fe      	b.n	8003f94 <vQueueDelete+0x4c>
 8003f96:	2200      	movs	r2, #0
 8003f98:	2100      	movs	r1, #0
 8003f9a:	b410      	push	{r4}
 8003f9c:	eb03 04c2 	add.w	r4, r3, r2, lsl #3
 8003fa0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
 8003fa4:	6061      	str	r1, [r4, #4]
 8003fa6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003faa:	f001 b9a1 	b.w	80052f0 <vPortFree>
 8003fae:	2207      	movs	r2, #7
 8003fb0:	e7f2      	b.n	8003f98 <vQueueDelete+0x50>
 8003fb2:	2206      	movs	r2, #6
 8003fb4:	e7f0      	b.n	8003f98 <vQueueDelete+0x50>
 8003fb6:	2205      	movs	r2, #5
 8003fb8:	e7ee      	b.n	8003f98 <vQueueDelete+0x50>
 8003fba:	2204      	movs	r2, #4
 8003fbc:	e7ec      	b.n	8003f98 <vQueueDelete+0x50>
 8003fbe:	2203      	movs	r2, #3
 8003fc0:	e7ea      	b.n	8003f98 <vQueueDelete+0x50>
 8003fc2:	2202      	movs	r2, #2
 8003fc4:	e7e8      	b.n	8003f98 <vQueueDelete+0x50>
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	e7e6      	b.n	8003f98 <vQueueDelete+0x50>
 8003fca:	bf00      	nop
 8003fcc:	200059d8 	.word	0x200059d8

08003fd0 <prvIdleTask>:
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	4c13      	ldr	r4, [pc, #76]	; (8004020 <prvIdleTask+0x50>)
 8003fd4:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
 8003fd8:	4e12      	ldr	r6, [pc, #72]	; (8004024 <prvIdleTask+0x54>)
 8003fda:	e014      	b.n	8004006 <prvIdleTask+0x36>
 8003fdc:	f000 ffa2 	bl	8004f24 <vPortEnterCritical>
 8003fe0:	6923      	ldr	r3, [r4, #16]
 8003fe2:	68dd      	ldr	r5, [r3, #12]
 8003fe4:	1d28      	adds	r0, r5, #4
 8003fe6:	f7fe ffcd 	bl	8002f84 <uxListRemove>
 8003fea:	69a3      	ldr	r3, [r4, #24]
 8003fec:	3b01      	subs	r3, #1
 8003fee:	61a3      	str	r3, [r4, #24]
 8003ff0:	6823      	ldr	r3, [r4, #0]
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	6023      	str	r3, [r4, #0]
 8003ff6:	f000 ffbb 	bl	8004f70 <vPortExitCritical>
 8003ffa:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8003ffc:	f001 f978 	bl	80052f0 <vPortFree>
 8004000:	4628      	mov	r0, r5
 8004002:	f001 f975 	bl	80052f0 <vPortFree>
 8004006:	6823      	ldr	r3, [r4, #0]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1e7      	bne.n	8003fdc <prvIdleTask+0xc>
 800400c:	69e3      	ldr	r3, [r4, #28]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d9f9      	bls.n	8004006 <prvIdleTask+0x36>
 8004012:	6037      	str	r7, [r6, #0]
 8004014:	f3bf 8f4f 	dsb	sy
 8004018:	f3bf 8f6f 	isb	sy
 800401c:	e7f3      	b.n	8004006 <prvIdleTask+0x36>
 800401e:	bf00      	nop
 8004020:	20000094 	.word	0x20000094
 8004024:	e000ed04 	.word	0xe000ed04

08004028 <prvAddCurrentTaskToDelayedList>:
 8004028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800402a:	4c1f      	ldr	r4, [pc, #124]	; (80040a8 <prvAddCurrentTaskToDelayedList+0x80>)
 800402c:	4606      	mov	r6, r0
 800402e:	460f      	mov	r7, r1
 8004030:	f8d4 50a8 	ldr.w	r5, [r4, #168]	; 0xa8
 8004034:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8004038:	3004      	adds	r0, #4
 800403a:	f7fe ffa3 	bl	8002f84 <uxListRemove>
 800403e:	b950      	cbnz	r0, 8004056 <prvAddCurrentTaskToDelayedList+0x2e>
 8004040:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8004044:	2201      	movs	r2, #1
 8004046:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 800404a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800404c:	408a      	lsls	r2, r1
 800404e:	ea23 0302 	bic.w	r3, r3, r2
 8004052:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
 8004056:	1c72      	adds	r2, r6, #1
 8004058:	d101      	bne.n	800405e <prvAddCurrentTaskToDelayedList+0x36>
 800405a:	07fb      	lsls	r3, r7, #31
 800405c:	d41b      	bmi.n	8004096 <prvAddCurrentTaskToDelayedList+0x6e>
 800405e:	19ad      	adds	r5, r5, r6
 8004060:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8004064:	605d      	str	r5, [r3, #4]
 8004066:	d20d      	bcs.n	8004084 <prvAddCurrentTaskToDelayedList+0x5c>
 8004068:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
 800406c:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8004070:	3104      	adds	r1, #4
 8004072:	f7fe ff6d 	bl	8002f50 <vListInsert>
 8004076:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
 800407a:	42ab      	cmp	r3, r5
 800407c:	d901      	bls.n	8004082 <prvAddCurrentTaskToDelayedList+0x5a>
 800407e:	f8c4 50d0 	str.w	r5, [r4, #208]	; 0xd0
 8004082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004084:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
 8004088:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 800408c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004090:	3104      	adds	r1, #4
 8004092:	f7fe bf5d 	b.w	8002f50 <vListInsert>
 8004096:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 800409a:	4804      	ldr	r0, [pc, #16]	; (80040ac <prvAddCurrentTaskToDelayedList+0x84>)
 800409c:	3104      	adds	r1, #4
 800409e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80040a2:	f7fe bf45 	b.w	8002f30 <vListInsertEnd>
 80040a6:	bf00      	nop
 80040a8:	20000094 	.word	0x20000094
 80040ac:	20000148 	.word	0x20000148

080040b0 <xTaskCreate>:
 80040b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040b4:	0096      	lsls	r6, r2, #2
 80040b6:	4680      	mov	r8, r0
 80040b8:	460d      	mov	r5, r1
 80040ba:	4699      	mov	r9, r3
 80040bc:	4630      	mov	r0, r6
 80040be:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80040c0:	f001 f890 	bl	80051e4 <pvPortMalloc>
 80040c4:	2800      	cmp	r0, #0
 80040c6:	f000 810b 	beq.w	80042e0 <xTaskCreate+0x230>
 80040ca:	4682      	mov	sl, r0
 80040cc:	205c      	movs	r0, #92	; 0x5c
 80040ce:	f001 f889 	bl	80051e4 <pvPortMalloc>
 80040d2:	4604      	mov	r4, r0
 80040d4:	2800      	cmp	r0, #0
 80040d6:	f000 80d6 	beq.w	8004286 <xTaskCreate+0x1d6>
 80040da:	f8c0 a030 	str.w	sl, [r0, #48]	; 0x30
 80040de:	4632      	mov	r2, r6
 80040e0:	4650      	mov	r0, sl
 80040e2:	21a5      	movs	r1, #165	; 0xa5
 80040e4:	f00b fc40 	bl	800f968 <memset>
 80040e8:	3e04      	subs	r6, #4
 80040ea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80040ec:	782a      	ldrb	r2, [r5, #0]
 80040ee:	441e      	add	r6, r3
 80040f0:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
 80040f4:	782b      	ldrb	r3, [r5, #0]
 80040f6:	f026 0a07 	bic.w	sl, r6, #7
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d04d      	beq.n	800419a <xTaskCreate+0xea>
 80040fe:	786b      	ldrb	r3, [r5, #1]
 8004100:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 8004104:	786b      	ldrb	r3, [r5, #1]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d047      	beq.n	800419a <xTaskCreate+0xea>
 800410a:	78ab      	ldrb	r3, [r5, #2]
 800410c:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
 8004110:	78ab      	ldrb	r3, [r5, #2]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d041      	beq.n	800419a <xTaskCreate+0xea>
 8004116:	78eb      	ldrb	r3, [r5, #3]
 8004118:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
 800411c:	78eb      	ldrb	r3, [r5, #3]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d03b      	beq.n	800419a <xTaskCreate+0xea>
 8004122:	792b      	ldrb	r3, [r5, #4]
 8004124:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8004128:	792b      	ldrb	r3, [r5, #4]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d035      	beq.n	800419a <xTaskCreate+0xea>
 800412e:	796b      	ldrb	r3, [r5, #5]
 8004130:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 8004134:	796b      	ldrb	r3, [r5, #5]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d02f      	beq.n	800419a <xTaskCreate+0xea>
 800413a:	79ab      	ldrb	r3, [r5, #6]
 800413c:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
 8004140:	79ab      	ldrb	r3, [r5, #6]
 8004142:	b353      	cbz	r3, 800419a <xTaskCreate+0xea>
 8004144:	79eb      	ldrb	r3, [r5, #7]
 8004146:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
 800414a:	79eb      	ldrb	r3, [r5, #7]
 800414c:	b32b      	cbz	r3, 800419a <xTaskCreate+0xea>
 800414e:	7a2b      	ldrb	r3, [r5, #8]
 8004150:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8004154:	7a2b      	ldrb	r3, [r5, #8]
 8004156:	b303      	cbz	r3, 800419a <xTaskCreate+0xea>
 8004158:	7a6b      	ldrb	r3, [r5, #9]
 800415a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 800415e:	7a6b      	ldrb	r3, [r5, #9]
 8004160:	b1db      	cbz	r3, 800419a <xTaskCreate+0xea>
 8004162:	7aab      	ldrb	r3, [r5, #10]
 8004164:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004168:	7aab      	ldrb	r3, [r5, #10]
 800416a:	b1b3      	cbz	r3, 800419a <xTaskCreate+0xea>
 800416c:	7aeb      	ldrb	r3, [r5, #11]
 800416e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004172:	7aeb      	ldrb	r3, [r5, #11]
 8004174:	b18b      	cbz	r3, 800419a <xTaskCreate+0xea>
 8004176:	7b2b      	ldrb	r3, [r5, #12]
 8004178:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800417c:	7b2b      	ldrb	r3, [r5, #12]
 800417e:	b163      	cbz	r3, 800419a <xTaskCreate+0xea>
 8004180:	7b6b      	ldrb	r3, [r5, #13]
 8004182:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8004186:	7b6b      	ldrb	r3, [r5, #13]
 8004188:	b13b      	cbz	r3, 800419a <xTaskCreate+0xea>
 800418a:	7bab      	ldrb	r3, [r5, #14]
 800418c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004190:	7bab      	ldrb	r3, [r5, #14]
 8004192:	b113      	cbz	r3, 800419a <xTaskCreate+0xea>
 8004194:	7beb      	ldrb	r3, [r5, #15]
 8004196:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800419a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800419c:	f04f 0b00 	mov.w	fp, #0
 80041a0:	1d26      	adds	r6, r4, #4
 80041a2:	2d06      	cmp	r5, #6
 80041a4:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
 80041a8:	4630      	mov	r0, r6
 80041aa:	f8c4 b050 	str.w	fp, [r4, #80]	; 0x50
 80041ae:	bf28      	it	cs
 80041b0:	2506      	movcs	r5, #6
 80041b2:	62e5      	str	r5, [r4, #44]	; 0x2c
 80041b4:	64e5      	str	r5, [r4, #76]	; 0x4c
 80041b6:	f1c5 0507 	rsb	r5, r5, #7
 80041ba:	f7fe feb5 	bl	8002f28 <vListInitialiseItem>
 80041be:	f104 0018 	add.w	r0, r4, #24
 80041c2:	f7fe feb1 	bl	8002f28 <vListInitialiseItem>
 80041c6:	f8c4 b054 	str.w	fp, [r4, #84]	; 0x54
 80041ca:	464a      	mov	r2, r9
 80041cc:	61a5      	str	r5, [r4, #24]
 80041ce:	4641      	mov	r1, r8
 80041d0:	f884 b058 	strb.w	fp, [r4, #88]	; 0x58
 80041d4:	4650      	mov	r0, sl
 80041d6:	6124      	str	r4, [r4, #16]
 80041d8:	6264      	str	r4, [r4, #36]	; 0x24
 80041da:	f000 fe75 	bl	8004ec8 <pxPortInitialiseStack>
 80041de:	6020      	str	r0, [r4, #0]
 80041e0:	b107      	cbz	r7, 80041e4 <xTaskCreate+0x134>
 80041e2:	603c      	str	r4, [r7, #0]
 80041e4:	4d40      	ldr	r5, [pc, #256]	; (80042e8 <xTaskCreate+0x238>)
 80041e6:	f000 fe9d 	bl	8004f24 <vPortEnterCritical>
 80041ea:	69ab      	ldr	r3, [r5, #24]
 80041ec:	3301      	adds	r3, #1
 80041ee:	61ab      	str	r3, [r5, #24]
 80041f0:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d03d      	beq.n	8004274 <xTaskCreate+0x1c4>
 80041f8:	f8d5 2110 	ldr.w	r2, [r5, #272]	; 0x110
 80041fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80041fe:	b362      	cbz	r2, 800425a <xTaskCreate+0x1aa>
 8004200:	f105 081c 	add.w	r8, r5, #28
 8004204:	2701      	movs	r7, #1
 8004206:	f8d5 2114 	ldr.w	r2, [r5, #276]	; 0x114
 800420a:	4631      	mov	r1, r6
 800420c:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8004210:	f8d5 60b0 	ldr.w	r6, [r5, #176]	; 0xb0
 8004214:	fa07 f303 	lsl.w	r3, r7, r3
 8004218:	443a      	add	r2, r7
 800421a:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 800421e:	4333      	orrs	r3, r6
 8004220:	6462      	str	r2, [r4, #68]	; 0x44
 8004222:	f8c5 30b0 	str.w	r3, [r5, #176]	; 0xb0
 8004226:	f8c5 2114 	str.w	r2, [r5, #276]	; 0x114
 800422a:	f7fe fe81 	bl	8002f30 <vListInsertEnd>
 800422e:	f000 fe9f 	bl	8004f70 <vPortExitCritical>
 8004232:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
 8004236:	b1d3      	cbz	r3, 800426e <xTaskCreate+0x1be>
 8004238:	f8d5 20ac 	ldr.w	r2, [r5, #172]	; 0xac
 800423c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800423e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004240:	429a      	cmp	r2, r3
 8004242:	d214      	bcs.n	800426e <xTaskCreate+0x1be>
 8004244:	4b29      	ldr	r3, [pc, #164]	; (80042ec <xTaskCreate+0x23c>)
 8004246:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800424a:	601a      	str	r2, [r3, #0]
 800424c:	f3bf 8f4f 	dsb	sy
 8004250:	f3bf 8f6f 	isb	sy
 8004254:	4638      	mov	r0, r7
 8004256:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800425a:	f8d5 20ac 	ldr.w	r2, [r5, #172]	; 0xac
 800425e:	f105 081c 	add.w	r8, r5, #28
 8004262:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004264:	429a      	cmp	r2, r3
 8004266:	d8cd      	bhi.n	8004204 <xTaskCreate+0x154>
 8004268:	f8c5 40ac 	str.w	r4, [r5, #172]	; 0xac
 800426c:	e7ca      	b.n	8004204 <xTaskCreate+0x154>
 800426e:	4638      	mov	r0, r7
 8004270:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004274:	f8c5 40ac 	str.w	r4, [r5, #172]	; 0xac
 8004278:	69ab      	ldr	r3, [r5, #24]
 800427a:	2b01      	cmp	r3, #1
 800427c:	d00a      	beq.n	8004294 <xTaskCreate+0x1e4>
 800427e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004280:	f105 081c 	add.w	r8, r5, #28
 8004284:	e7be      	b.n	8004204 <xTaskCreate+0x154>
 8004286:	4650      	mov	r0, sl
 8004288:	f001 f832 	bl	80052f0 <vPortFree>
 800428c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004290:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004294:	f105 081c 	add.w	r8, r5, #28
 8004298:	f105 09a8 	add.w	r9, r5, #168	; 0xa8
 800429c:	4647      	mov	r7, r8
 800429e:	4638      	mov	r0, r7
 80042a0:	3714      	adds	r7, #20
 80042a2:	f7fe fe35 	bl	8002f10 <vListInitialise>
 80042a6:	454f      	cmp	r7, r9
 80042a8:	d1f9      	bne.n	800429e <xTaskCreate+0x1ee>
 80042aa:	4f11      	ldr	r7, [pc, #68]	; (80042f0 <xTaskCreate+0x240>)
 80042ac:	f107 0914 	add.w	r9, r7, #20
 80042b0:	4638      	mov	r0, r7
 80042b2:	f7fe fe2d 	bl	8002f10 <vListInitialise>
 80042b6:	4648      	mov	r0, r9
 80042b8:	f7fe fe2a 	bl	8002f10 <vListInitialise>
 80042bc:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80042c0:	f7fe fe26 	bl	8002f10 <vListInitialise>
 80042c4:	f1a7 00d0 	sub.w	r0, r7, #208	; 0xd0
 80042c8:	f7fe fe22 	bl	8002f10 <vListInitialise>
 80042cc:	f1a7 0020 	sub.w	r0, r7, #32
 80042d0:	f7fe fe1e 	bl	8002f10 <vListInitialise>
 80042d4:	f8c5 70cc 	str.w	r7, [r5, #204]	; 0xcc
 80042d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80042da:	f8c5 90c8 	str.w	r9, [r5, #200]	; 0xc8
 80042de:	e791      	b.n	8004204 <xTaskCreate+0x154>
 80042e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80042e4:	e7b7      	b.n	8004256 <xTaskCreate+0x1a6>
 80042e6:	bf00      	nop
 80042e8:	20000094 	.word	0x20000094
 80042ec:	e000ed04 	.word	0xe000ed04
 80042f0:	20000168 	.word	0x20000168

080042f4 <vTaskStartScheduler>:
 80042f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042f8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80042fc:	f000 ff72 	bl	80051e4 <pvPortMalloc>
 8004300:	2800      	cmp	r0, #0
 8004302:	f000 809c 	beq.w	800443e <vTaskStartScheduler+0x14a>
 8004306:	4605      	mov	r5, r0
 8004308:	205c      	movs	r0, #92	; 0x5c
 800430a:	f000 ff6b 	bl	80051e4 <pvPortMalloc>
 800430e:	4604      	mov	r4, r0
 8004310:	2800      	cmp	r0, #0
 8004312:	f000 8091 	beq.w	8004438 <vTaskStartScheduler+0x144>
 8004316:	21a5      	movs	r1, #165	; 0xa5
 8004318:	6305      	str	r5, [r0, #48]	; 0x30
 800431a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800431e:	4628      	mov	r0, r5
 8004320:	f00b fb22 	bl	800f968 <memset>
 8004324:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004326:	2500      	movs	r5, #0
 8004328:	4a5d      	ldr	r2, [pc, #372]	; (80044a0 <vTaskStartScheduler+0x1ac>)
 800432a:	f104 0804 	add.w	r8, r4, #4
 800432e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004332:	6362      	str	r2, [r4, #52]	; 0x34
 8004334:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
 8004338:	4640      	mov	r0, r8
 800433a:	f884 5043 	strb.w	r5, [r4, #67]	; 0x43
 800433e:	f023 0607 	bic.w	r6, r3, #7
 8004342:	62e5      	str	r5, [r4, #44]	; 0x2c
 8004344:	e9c4 5513 	strd	r5, r5, [r4, #76]	; 0x4c
 8004348:	f7fe fdee 	bl	8002f28 <vListInitialiseItem>
 800434c:	f104 0018 	add.w	r0, r4, #24
 8004350:	f7fe fdea 	bl	8002f28 <vListInitialiseItem>
 8004354:	2307      	movs	r3, #7
 8004356:	6565      	str	r5, [r4, #84]	; 0x54
 8004358:	462a      	mov	r2, r5
 800435a:	61a3      	str	r3, [r4, #24]
 800435c:	4630      	mov	r0, r6
 800435e:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 8004362:	4950      	ldr	r1, [pc, #320]	; (80044a4 <vTaskStartScheduler+0x1b0>)
 8004364:	4d50      	ldr	r5, [pc, #320]	; (80044a8 <vTaskStartScheduler+0x1b4>)
 8004366:	6124      	str	r4, [r4, #16]
 8004368:	6264      	str	r4, [r4, #36]	; 0x24
 800436a:	f000 fdad 	bl	8004ec8 <pxPortInitialiseStack>
 800436e:	6020      	str	r0, [r4, #0]
 8004370:	f8c5 411c 	str.w	r4, [r5, #284]	; 0x11c
 8004374:	f000 fdd6 	bl	8004f24 <vPortEnterCritical>
 8004378:	69ab      	ldr	r3, [r5, #24]
 800437a:	3301      	adds	r3, #1
 800437c:	61ab      	str	r3, [r5, #24]
 800437e:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 8004382:	2b00      	cmp	r3, #0
 8004384:	d04f      	beq.n	8004426 <vTaskStartScheduler+0x132>
 8004386:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
 800438a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800438c:	2b00      	cmp	r3, #0
 800438e:	d040      	beq.n	8004412 <vTaskStartScheduler+0x11e>
 8004390:	f105 061c 	add.w	r6, r5, #28
 8004394:	2301      	movs	r3, #1
 8004396:	f8d5 2114 	ldr.w	r2, [r5, #276]	; 0x114
 800439a:	f8d5 70b0 	ldr.w	r7, [r5, #176]	; 0xb0
 800439e:	4641      	mov	r1, r8
 80043a0:	4083      	lsls	r3, r0
 80043a2:	3201      	adds	r2, #1
 80043a4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80043a8:	433b      	orrs	r3, r7
 80043aa:	6462      	str	r2, [r4, #68]	; 0x44
 80043ac:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 80043b0:	f8c5 2114 	str.w	r2, [r5, #276]	; 0x114
 80043b4:	f8c5 30b0 	str.w	r3, [r5, #176]	; 0xb0
 80043b8:	f7fe fdba 	bl	8002f30 <vListInsertEnd>
 80043bc:	f000 fdd8 	bl	8004f70 <vPortExitCritical>
 80043c0:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
 80043c4:	b16b      	cbz	r3, 80043e2 <vTaskStartScheduler+0xee>
 80043c6:	f8d5 20ac 	ldr.w	r2, [r5, #172]	; 0xac
 80043ca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80043cc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d207      	bcs.n	80043e2 <vTaskStartScheduler+0xee>
 80043d2:	4b36      	ldr	r3, [pc, #216]	; (80044ac <vTaskStartScheduler+0x1b8>)
 80043d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043d8:	601a      	str	r2, [r3, #0]
 80043da:	f3bf 8f4f 	dsb	sy
 80043de:	f3bf 8f6f 	isb	sy
 80043e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e6:	b672      	cpsid	i
 80043e8:	f383 8811 	msr	BASEPRI, r3
 80043ec:	f3bf 8f6f 	isb	sy
 80043f0:	f3bf 8f4f 	dsb	sy
 80043f4:	b662      	cpsie	i
 80043f6:	2300      	movs	r3, #0
 80043f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80043fc:	2201      	movs	r2, #1
 80043fe:	f8c5 10d0 	str.w	r1, [r5, #208]	; 0xd0
 8004402:	f8c5 2110 	str.w	r2, [r5, #272]	; 0x110
 8004406:	f8c5 30a8 	str.w	r3, [r5, #168]	; 0xa8
 800440a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800440e:	f000 be2f 	b.w	8005070 <xPortStartScheduler>
 8004412:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 8004416:	f105 061c 	add.w	r6, r5, #28
 800441a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441c:	4283      	cmp	r3, r0
 800441e:	d8b9      	bhi.n	8004394 <vTaskStartScheduler+0xa0>
 8004420:	f8c5 40ac 	str.w	r4, [r5, #172]	; 0xac
 8004424:	e7b6      	b.n	8004394 <vTaskStartScheduler+0xa0>
 8004426:	f8c5 40ac 	str.w	r4, [r5, #172]	; 0xac
 800442a:	69ab      	ldr	r3, [r5, #24]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d011      	beq.n	8004454 <vTaskStartScheduler+0x160>
 8004430:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004432:	f105 061c 	add.w	r6, r5, #28
 8004436:	e7ad      	b.n	8004394 <vTaskStartScheduler+0xa0>
 8004438:	4628      	mov	r0, r5
 800443a:	f000 ff59 	bl	80052f0 <vPortFree>
 800443e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004442:	b672      	cpsid	i
 8004444:	f383 8811 	msr	BASEPRI, r3
 8004448:	f3bf 8f6f 	isb	sy
 800444c:	f3bf 8f4f 	dsb	sy
 8004450:	b662      	cpsie	i
 8004452:	e7fe      	b.n	8004452 <vTaskStartScheduler+0x15e>
 8004454:	f105 061c 	add.w	r6, r5, #28
 8004458:	f105 09a8 	add.w	r9, r5, #168	; 0xa8
 800445c:	4637      	mov	r7, r6
 800445e:	4638      	mov	r0, r7
 8004460:	3714      	adds	r7, #20
 8004462:	f7fe fd55 	bl	8002f10 <vListInitialise>
 8004466:	45b9      	cmp	r9, r7
 8004468:	d1f9      	bne.n	800445e <vTaskStartScheduler+0x16a>
 800446a:	4f11      	ldr	r7, [pc, #68]	; (80044b0 <vTaskStartScheduler+0x1bc>)
 800446c:	f107 0914 	add.w	r9, r7, #20
 8004470:	4638      	mov	r0, r7
 8004472:	f7fe fd4d 	bl	8002f10 <vListInitialise>
 8004476:	4648      	mov	r0, r9
 8004478:	f7fe fd4a 	bl	8002f10 <vListInitialise>
 800447c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8004480:	f7fe fd46 	bl	8002f10 <vListInitialise>
 8004484:	f1a7 00d0 	sub.w	r0, r7, #208	; 0xd0
 8004488:	f7fe fd42 	bl	8002f10 <vListInitialise>
 800448c:	f1a7 0020 	sub.w	r0, r7, #32
 8004490:	f7fe fd3e 	bl	8002f10 <vListInitialise>
 8004494:	f8c5 70cc 	str.w	r7, [r5, #204]	; 0xcc
 8004498:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800449a:	f8c5 90c8 	str.w	r9, [r5, #200]	; 0xc8
 800449e:	e779      	b.n	8004394 <vTaskStartScheduler+0xa0>
 80044a0:	454c4449 	.word	0x454c4449
 80044a4:	08003fd1 	.word	0x08003fd1
 80044a8:	20000094 	.word	0x20000094
 80044ac:	e000ed04 	.word	0xe000ed04
 80044b0:	20000168 	.word	0x20000168

080044b4 <vTaskSuspendAll>:
 80044b4:	4a03      	ldr	r2, [pc, #12]	; (80044c4 <vTaskSuspendAll+0x10>)
 80044b6:	f8d2 3118 	ldr.w	r3, [r2, #280]	; 0x118
 80044ba:	3301      	adds	r3, #1
 80044bc:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
 80044c0:	4770      	bx	lr
 80044c2:	bf00      	nop
 80044c4:	20000094 	.word	0x20000094

080044c8 <xTaskGetTickCount>:
 80044c8:	4b01      	ldr	r3, [pc, #4]	; (80044d0 <xTaskGetTickCount+0x8>)
 80044ca:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
 80044ce:	4770      	bx	lr
 80044d0:	20000094 	.word	0x20000094

080044d4 <xTaskGetTickCountFromISR>:
 80044d4:	b508      	push	{r3, lr}
 80044d6:	f000 fe2f 	bl	8005138 <vPortValidateInterruptPriority>
 80044da:	4b02      	ldr	r3, [pc, #8]	; (80044e4 <xTaskGetTickCountFromISR+0x10>)
 80044dc:	f8d3 00a8 	ldr.w	r0, [r3, #168]	; 0xa8
 80044e0:	bd08      	pop	{r3, pc}
 80044e2:	bf00      	nop
 80044e4:	20000094 	.word	0x20000094

080044e8 <xTaskIncrementTick>:
 80044e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044ec:	4c48      	ldr	r4, [pc, #288]	; (8004610 <xTaskIncrementTick+0x128>)
 80044ee:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d14d      	bne.n	8004592 <xTaskIncrementTick+0xaa>
 80044f6:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 80044fa:	3601      	adds	r6, #1
 80044fc:	f8c4 60a8 	str.w	r6, [r4, #168]	; 0xa8
 8004500:	2e00      	cmp	r6, #0
 8004502:	d054      	beq.n	80045ae <xTaskIncrementTick+0xc6>
 8004504:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
 8004508:	2500      	movs	r5, #0
 800450a:	42b3      	cmp	r3, r6
 800450c:	d835      	bhi.n	800457a <xTaskIncrementTick+0x92>
 800450e:	f04f 0901 	mov.w	r9, #1
 8004512:	f8df 8100 	ldr.w	r8, [pc, #256]	; 8004614 <xTaskIncrementTick+0x12c>
 8004516:	e027      	b.n	8004568 <xTaskIncrementTick+0x80>
 8004518:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	68df      	ldr	r7, [r3, #12]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f107 0a04 	add.w	sl, r7, #4
 8004526:	429e      	cmp	r6, r3
 8004528:	4650      	mov	r0, sl
 800452a:	d365      	bcc.n	80045f8 <xTaskIncrementTick+0x110>
 800452c:	f7fe fd2a 	bl	8002f84 <uxListRemove>
 8004530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004532:	f107 0018 	add.w	r0, r7, #24
 8004536:	b10b      	cbz	r3, 800453c <xTaskIncrementTick+0x54>
 8004538:	f7fe fd24 	bl	8002f84 <uxListRemove>
 800453c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800453e:	4651      	mov	r1, sl
 8004540:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8004544:	fa09 f300 	lsl.w	r3, r9, r0
 8004548:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800454c:	4313      	orrs	r3, r2
 800454e:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8004552:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
 8004556:	f7fe fceb 	bl	8002f30 <vListInsertEnd>
 800455a:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 800455e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004562:	429a      	cmp	r2, r3
 8004564:	bf28      	it	cs
 8004566:	2501      	movcs	r5, #1
 8004568:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1d2      	bne.n	8004518 <xTaskIncrementTick+0x30>
 8004572:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004576:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
 800457a:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 800457e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004580:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004584:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004588:	69db      	ldr	r3, [r3, #28]
 800458a:	2b02      	cmp	r3, #2
 800458c:	bf28      	it	cs
 800458e:	2501      	movcs	r5, #1
 8004590:	e005      	b.n	800459e <xTaskIncrementTick+0xb6>
 8004592:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004596:	2500      	movs	r5, #0
 8004598:	3301      	adds	r3, #1
 800459a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800459e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	bf0c      	ite	eq
 80045a6:	4628      	moveq	r0, r5
 80045a8:	2001      	movne	r0, #1
 80045aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045ae:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	b153      	cbz	r3, 80045cc <xTaskIncrementTick+0xe4>
 80045b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ba:	b672      	cpsid	i
 80045bc:	f383 8811 	msr	BASEPRI, r3
 80045c0:	f3bf 8f6f 	isb	sy
 80045c4:	f3bf 8f4f 	dsb	sy
 80045c8:	b662      	cpsie	i
 80045ca:	e7fe      	b.n	80045ca <xTaskIncrementTick+0xe2>
 80045cc:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 80045d0:	f8d4 20c8 	ldr.w	r2, [r4, #200]	; 0xc8
 80045d4:	f8c4 20cc 	str.w	r2, [r4, #204]	; 0xcc
 80045d8:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
 80045dc:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 80045e0:	3301      	adds	r3, #1
 80045e2:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
 80045e6:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	b93b      	cbnz	r3, 80045fe <xTaskIncrementTick+0x116>
 80045ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80045f2:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
 80045f6:	e785      	b.n	8004504 <xTaskIncrementTick+0x1c>
 80045f8:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
 80045fc:	e7bd      	b.n	800457a <xTaskIncrementTick+0x92>
 80045fe:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
 800460c:	e77a      	b.n	8004504 <xTaskIncrementTick+0x1c>
 800460e:	bf00      	nop
 8004610:	20000094 	.word	0x20000094
 8004614:	200000b0 	.word	0x200000b0

08004618 <xTaskResumeAll>:
 8004618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800461c:	4c3b      	ldr	r4, [pc, #236]	; (800470c <xTaskResumeAll+0xf4>)
 800461e:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 8004622:	b953      	cbnz	r3, 800463a <xTaskResumeAll+0x22>
 8004624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004628:	b672      	cpsid	i
 800462a:	f383 8811 	msr	BASEPRI, r3
 800462e:	f3bf 8f6f 	isb	sy
 8004632:	f3bf 8f4f 	dsb	sy
 8004636:	b662      	cpsie	i
 8004638:	e7fe      	b.n	8004638 <xTaskResumeAll+0x20>
 800463a:	f000 fc73 	bl	8004f24 <vPortEnterCritical>
 800463e:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 8004642:	3b01      	subs	r3, #1
 8004644:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8004648:	f8d4 5118 	ldr.w	r5, [r4, #280]	; 0x118
 800464c:	bb5d      	cbnz	r5, 80046a6 <xTaskResumeAll+0x8e>
 800464e:	69a3      	ldr	r3, [r4, #24]
 8004650:	b34b      	cbz	r3, 80046a6 <xTaskResumeAll+0x8e>
 8004652:	2601      	movs	r6, #1
 8004654:	f104 071c 	add.w	r7, r4, #28
 8004658:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 800465c:	b34b      	cbz	r3, 80046b2 <xTaskResumeAll+0x9a>
 800465e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004662:	68dd      	ldr	r5, [r3, #12]
 8004664:	f105 0804 	add.w	r8, r5, #4
 8004668:	f105 0018 	add.w	r0, r5, #24
 800466c:	f7fe fc8a 	bl	8002f84 <uxListRemove>
 8004670:	4640      	mov	r0, r8
 8004672:	f7fe fc87 	bl	8002f84 <uxListRemove>
 8004676:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8004678:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 800467c:	4641      	mov	r1, r8
 800467e:	fa06 f300 	lsl.w	r3, r6, r0
 8004682:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004686:	4313      	orrs	r3, r2
 8004688:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 800468c:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
 8004690:	f7fe fc4e 	bl	8002f30 <vListInsertEnd>
 8004694:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8004698:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800469a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469c:	429a      	cmp	r2, r3
 800469e:	d3db      	bcc.n	8004658 <xTaskResumeAll+0x40>
 80046a0:	f8c4 6128 	str.w	r6, [r4, #296]	; 0x128
 80046a4:	e7d8      	b.n	8004658 <xTaskResumeAll+0x40>
 80046a6:	2400      	movs	r4, #0
 80046a8:	f000 fc62 	bl	8004f70 <vPortExitCritical>
 80046ac:	4620      	mov	r0, r4
 80046ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046b2:	b13d      	cbz	r5, 80046c4 <xTaskResumeAll+0xac>
 80046b4:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	b9f3      	cbnz	r3, 80046fa <xTaskResumeAll+0xe2>
 80046bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80046c0:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
 80046c4:	f8d4 5124 	ldr.w	r5, [r4, #292]	; 0x124
 80046c8:	b14d      	cbz	r5, 80046de <xTaskResumeAll+0xc6>
 80046ca:	2601      	movs	r6, #1
 80046cc:	f7ff ff0c 	bl	80044e8 <xTaskIncrementTick>
 80046d0:	b108      	cbz	r0, 80046d6 <xTaskResumeAll+0xbe>
 80046d2:	f8c4 6128 	str.w	r6, [r4, #296]	; 0x128
 80046d6:	3d01      	subs	r5, #1
 80046d8:	d1f8      	bne.n	80046cc <xTaskResumeAll+0xb4>
 80046da:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
 80046de:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d0df      	beq.n	80046a6 <xTaskResumeAll+0x8e>
 80046e6:	4b0a      	ldr	r3, [pc, #40]	; (8004710 <xTaskResumeAll+0xf8>)
 80046e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046ec:	601a      	str	r2, [r3, #0]
 80046ee:	f3bf 8f4f 	dsb	sy
 80046f2:	f3bf 8f6f 	isb	sy
 80046f6:	2401      	movs	r4, #1
 80046f8:	e7d6      	b.n	80046a8 <xTaskResumeAll+0x90>
 80046fa:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
 8004708:	e7dc      	b.n	80046c4 <xTaskResumeAll+0xac>
 800470a:	bf00      	nop
 800470c:	20000094 	.word	0x20000094
 8004710:	e000ed04 	.word	0xe000ed04

08004714 <vTaskDelay>:
 8004714:	b508      	push	{r3, lr}
 8004716:	b1c0      	cbz	r0, 800474a <vTaskDelay+0x36>
 8004718:	4b10      	ldr	r3, [pc, #64]	; (800475c <vTaskDelay+0x48>)
 800471a:	f8d3 1118 	ldr.w	r1, [r3, #280]	; 0x118
 800471e:	b151      	cbz	r1, 8004736 <vTaskDelay+0x22>
 8004720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004724:	b672      	cpsid	i
 8004726:	f383 8811 	msr	BASEPRI, r3
 800472a:	f3bf 8f6f 	isb	sy
 800472e:	f3bf 8f4f 	dsb	sy
 8004732:	b662      	cpsie	i
 8004734:	e7fe      	b.n	8004734 <vTaskDelay+0x20>
 8004736:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800473a:	3201      	adds	r2, #1
 800473c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
 8004740:	f7ff fc72 	bl	8004028 <prvAddCurrentTaskToDelayedList>
 8004744:	f7ff ff68 	bl	8004618 <xTaskResumeAll>
 8004748:	b938      	cbnz	r0, 800475a <vTaskDelay+0x46>
 800474a:	4b05      	ldr	r3, [pc, #20]	; (8004760 <vTaskDelay+0x4c>)
 800474c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004750:	601a      	str	r2, [r3, #0]
 8004752:	f3bf 8f4f 	dsb	sy
 8004756:	f3bf 8f6f 	isb	sy
 800475a:	bd08      	pop	{r3, pc}
 800475c:	20000094 	.word	0x20000094
 8004760:	e000ed04 	.word	0xe000ed04

08004764 <vTaskSwitchContext>:
 8004764:	b538      	push	{r3, r4, r5, lr}
 8004766:	4c26      	ldr	r4, [pc, #152]	; (8004800 <vTaskSwitchContext+0x9c>)
 8004768:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 800476c:	bb9b      	cbnz	r3, 80047d6 <vTaskSwitchContext+0x72>
 800476e:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8004772:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8004776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 800477e:	d10b      	bne.n	8004798 <vTaskSwitchContext+0x34>
 8004780:	685a      	ldr	r2, [r3, #4]
 8004782:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 8004786:	d107      	bne.n	8004798 <vTaskSwitchContext+0x34>
 8004788:	689a      	ldr	r2, [r3, #8]
 800478a:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 800478e:	d103      	bne.n	8004798 <vTaskSwitchContext+0x34>
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
 8004796:	d006      	beq.n	80047a6 <vTaskSwitchContext+0x42>
 8004798:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 800479c:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 80047a0:	3134      	adds	r1, #52	; 0x34
 80047a2:	f006 fa6f 	bl	800ac84 <vApplicationStackOverflowHook>
 80047a6:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80047aa:	fab3 f383 	clz	r3, r3
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	f1c3 031f 	rsb	r3, r3, #31
 80047b4:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80047b8:	0089      	lsls	r1, r1, #2
 80047ba:	1860      	adds	r0, r4, r1
 80047bc:	69c2      	ldr	r2, [r0, #28]
 80047be:	b172      	cbz	r2, 80047de <vTaskSwitchContext+0x7a>
 80047c0:	6a02      	ldr	r2, [r0, #32]
 80047c2:	4d10      	ldr	r5, [pc, #64]	; (8004804 <vTaskSwitchContext+0xa0>)
 80047c4:	6852      	ldr	r2, [r2, #4]
 80047c6:	4429      	add	r1, r5
 80047c8:	6202      	str	r2, [r0, #32]
 80047ca:	428a      	cmp	r2, r1
 80047cc:	d012      	beq.n	80047f4 <vTaskSwitchContext+0x90>
 80047ce:	68d3      	ldr	r3, [r2, #12]
 80047d0:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
 80047d4:	bd38      	pop	{r3, r4, r5, pc}
 80047d6:	2301      	movs	r3, #1
 80047d8:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80047dc:	bd38      	pop	{r3, r4, r5, pc}
 80047de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e2:	b672      	cpsid	i
 80047e4:	f383 8811 	msr	BASEPRI, r3
 80047e8:	f3bf 8f6f 	isb	sy
 80047ec:	f3bf 8f4f 	dsb	sy
 80047f0:	b662      	cpsie	i
 80047f2:	e7fe      	b.n	80047f2 <vTaskSwitchContext+0x8e>
 80047f4:	2114      	movs	r1, #20
 80047f6:	6852      	ldr	r2, [r2, #4]
 80047f8:	fb01 4303 	mla	r3, r1, r3, r4
 80047fc:	621a      	str	r2, [r3, #32]
 80047fe:	e7e6      	b.n	80047ce <vTaskSwitchContext+0x6a>
 8004800:	20000094 	.word	0x20000094
 8004804:	200000b8 	.word	0x200000b8

08004808 <vTaskPlaceOnEventList>:
 8004808:	b950      	cbnz	r0, 8004820 <vTaskPlaceOnEventList+0x18>
 800480a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800480e:	b672      	cpsid	i
 8004810:	f383 8811 	msr	BASEPRI, r3
 8004814:	f3bf 8f6f 	isb	sy
 8004818:	f3bf 8f4f 	dsb	sy
 800481c:	b662      	cpsie	i
 800481e:	e7fe      	b.n	800481e <vTaskPlaceOnEventList+0x16>
 8004820:	b570      	push	{r4, r5, r6, lr}
 8004822:	4c20      	ldr	r4, [pc, #128]	; (80048a4 <vTaskPlaceOnEventList+0x9c>)
 8004824:	460d      	mov	r5, r1
 8004826:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 800482a:	3118      	adds	r1, #24
 800482c:	f7fe fb90 	bl	8002f50 <vListInsert>
 8004830:	f8d4 60a8 	ldr.w	r6, [r4, #168]	; 0xa8
 8004834:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8004838:	3004      	adds	r0, #4
 800483a:	f7fe fba3 	bl	8002f84 <uxListRemove>
 800483e:	b950      	cbnz	r0, 8004856 <vTaskPlaceOnEventList+0x4e>
 8004840:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8004844:	2201      	movs	r2, #1
 8004846:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 800484a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800484c:	408a      	lsls	r2, r1
 800484e:	ea23 0302 	bic.w	r3, r3, r2
 8004852:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
 8004856:	1c6b      	adds	r3, r5, #1
 8004858:	d012      	beq.n	8004880 <vTaskPlaceOnEventList+0x78>
 800485a:	19ad      	adds	r5, r5, r6
 800485c:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8004860:	605d      	str	r5, [r3, #4]
 8004862:	d215      	bcs.n	8004890 <vTaskPlaceOnEventList+0x88>
 8004864:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
 8004868:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 800486c:	3104      	adds	r1, #4
 800486e:	f7fe fb6f 	bl	8002f50 <vListInsert>
 8004872:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
 8004876:	429d      	cmp	r5, r3
 8004878:	d201      	bcs.n	800487e <vTaskPlaceOnEventList+0x76>
 800487a:	f8c4 50d0 	str.w	r5, [r4, #208]	; 0xd0
 800487e:	bd70      	pop	{r4, r5, r6, pc}
 8004880:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8004884:	4808      	ldr	r0, [pc, #32]	; (80048a8 <vTaskPlaceOnEventList+0xa0>)
 8004886:	3104      	adds	r1, #4
 8004888:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800488c:	f7fe bb50 	b.w	8002f30 <vListInsertEnd>
 8004890:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
 8004894:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8004898:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800489c:	3104      	adds	r1, #4
 800489e:	f7fe bb57 	b.w	8002f50 <vListInsert>
 80048a2:	bf00      	nop
 80048a4:	20000094 	.word	0x20000094
 80048a8:	20000148 	.word	0x20000148

080048ac <xTaskRemoveFromEventList>:
 80048ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ae:	68c3      	ldr	r3, [r0, #12]
 80048b0:	68dd      	ldr	r5, [r3, #12]
 80048b2:	b3a5      	cbz	r5, 800491e <xTaskRemoveFromEventList+0x72>
 80048b4:	f105 0618 	add.w	r6, r5, #24
 80048b8:	4c1e      	ldr	r4, [pc, #120]	; (8004934 <xTaskRemoveFromEventList+0x88>)
 80048ba:	4630      	mov	r0, r6
 80048bc:	f7fe fb62 	bl	8002f84 <uxListRemove>
 80048c0:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
 80048c4:	b9f3      	cbnz	r3, 8004904 <xTaskRemoveFromEventList+0x58>
 80048c6:	1d2e      	adds	r6, r5, #4
 80048c8:	4630      	mov	r0, r6
 80048ca:	f7fe fb5b 	bl	8002f84 <uxListRemove>
 80048ce:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80048d0:	2301      	movs	r3, #1
 80048d2:	f8d4 70b0 	ldr.w	r7, [r4, #176]	; 0xb0
 80048d6:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 80048da:	4631      	mov	r1, r6
 80048dc:	4093      	lsls	r3, r2
 80048de:	f104 021c 	add.w	r2, r4, #28
 80048e2:	433b      	orrs	r3, r7
 80048e4:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 80048e8:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
 80048ec:	f7fe fb20 	bl	8002f30 <vListInsertEnd>
 80048f0:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 80048f4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80048f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d90e      	bls.n	800491a <xTaskRemoveFromEventList+0x6e>
 80048fc:	2001      	movs	r0, #1
 80048fe:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
 8004902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004904:	4631      	mov	r1, r6
 8004906:	f104 00fc 	add.w	r0, r4, #252	; 0xfc
 800490a:	f7fe fb11 	bl	8002f30 <vListInsertEnd>
 800490e:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8004912:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8004914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004916:	429a      	cmp	r2, r3
 8004918:	d8f0      	bhi.n	80048fc <xTaskRemoveFromEventList+0x50>
 800491a:	2000      	movs	r0, #0
 800491c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800491e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004922:	b672      	cpsid	i
 8004924:	f383 8811 	msr	BASEPRI, r3
 8004928:	f3bf 8f6f 	isb	sy
 800492c:	f3bf 8f4f 	dsb	sy
 8004930:	b662      	cpsie	i
 8004932:	e7fe      	b.n	8004932 <xTaskRemoveFromEventList+0x86>
 8004934:	20000094 	.word	0x20000094

08004938 <vTaskInternalSetTimeOutState>:
 8004938:	4b03      	ldr	r3, [pc, #12]	; (8004948 <vTaskInternalSetTimeOutState+0x10>)
 800493a:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
 800493e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004942:	e9c0 2300 	strd	r2, r3, [r0]
 8004946:	4770      	bx	lr
 8004948:	20000094 	.word	0x20000094

0800494c <xTaskCheckForTimeOut>:
 800494c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800494e:	b340      	cbz	r0, 80049a2 <xTaskCheckForTimeOut+0x56>
 8004950:	b1e1      	cbz	r1, 800498c <xTaskCheckForTimeOut+0x40>
 8004952:	460d      	mov	r5, r1
 8004954:	4604      	mov	r4, r0
 8004956:	f000 fae5 	bl	8004f24 <vPortEnterCritical>
 800495a:	4a1e      	ldr	r2, [pc, #120]	; (80049d4 <xTaskCheckForTimeOut+0x88>)
 800495c:	682b      	ldr	r3, [r5, #0]
 800495e:	6866      	ldr	r6, [r4, #4]
 8004960:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
 8004964:	1c5f      	adds	r7, r3, #1
 8004966:	eba0 0106 	sub.w	r1, r0, r6
 800496a:	d025      	beq.n	80049b8 <xTaskCheckForTimeOut+0x6c>
 800496c:	f8d2 c120 	ldr.w	ip, [r2, #288]	; 0x120
 8004970:	6827      	ldr	r7, [r4, #0]
 8004972:	4567      	cmp	r7, ip
 8004974:	d001      	beq.n	800497a <xTaskCheckForTimeOut+0x2e>
 8004976:	4286      	cmp	r6, r0
 8004978:	d92a      	bls.n	80049d0 <xTaskCheckForTimeOut+0x84>
 800497a:	428b      	cmp	r3, r1
 800497c:	d81e      	bhi.n	80049bc <xTaskCheckForTimeOut+0x70>
 800497e:	2300      	movs	r3, #0
 8004980:	2601      	movs	r6, #1
 8004982:	602b      	str	r3, [r5, #0]
 8004984:	f000 faf4 	bl	8004f70 <vPortExitCritical>
 8004988:	4630      	mov	r0, r6
 800498a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800498c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004990:	b672      	cpsid	i
 8004992:	f383 8811 	msr	BASEPRI, r3
 8004996:	f3bf 8f6f 	isb	sy
 800499a:	f3bf 8f4f 	dsb	sy
 800499e:	b662      	cpsie	i
 80049a0:	e7fe      	b.n	80049a0 <xTaskCheckForTimeOut+0x54>
 80049a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a6:	b672      	cpsid	i
 80049a8:	f383 8811 	msr	BASEPRI, r3
 80049ac:	f3bf 8f6f 	isb	sy
 80049b0:	f3bf 8f4f 	dsb	sy
 80049b4:	b662      	cpsie	i
 80049b6:	e7fe      	b.n	80049b6 <xTaskCheckForTimeOut+0x6a>
 80049b8:	2600      	movs	r6, #0
 80049ba:	e7e3      	b.n	8004984 <xTaskCheckForTimeOut+0x38>
 80049bc:	1a5b      	subs	r3, r3, r1
 80049be:	f8d2 1120 	ldr.w	r1, [r2, #288]	; 0x120
 80049c2:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
 80049c6:	2600      	movs	r6, #0
 80049c8:	602b      	str	r3, [r5, #0]
 80049ca:	e9c4 1200 	strd	r1, r2, [r4]
 80049ce:	e7d9      	b.n	8004984 <xTaskCheckForTimeOut+0x38>
 80049d0:	2601      	movs	r6, #1
 80049d2:	e7d7      	b.n	8004984 <xTaskCheckForTimeOut+0x38>
 80049d4:	20000094 	.word	0x20000094

080049d8 <vTaskMissedYield>:
 80049d8:	4b02      	ldr	r3, [pc, #8]	; (80049e4 <vTaskMissedYield+0xc>)
 80049da:	2201      	movs	r2, #1
 80049dc:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	20000094 	.word	0x20000094

080049e8 <uxTaskGetStackHighWaterMark>:
 80049e8:	b160      	cbz	r0, 8004a04 <uxTaskGetStackHighWaterMark+0x1c>
 80049ea:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80049ec:	780b      	ldrb	r3, [r1, #0]
 80049ee:	2ba5      	cmp	r3, #165	; 0xa5
 80049f0:	d10f      	bne.n	8004a12 <uxTaskGetStackHighWaterMark+0x2a>
 80049f2:	1c4b      	adds	r3, r1, #1
 80049f4:	1a58      	subs	r0, r3, r1
 80049f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80049fa:	2aa5      	cmp	r2, #165	; 0xa5
 80049fc:	d0fa      	beq.n	80049f4 <uxTaskGetStackHighWaterMark+0xc>
 80049fe:	f3c0 008f 	ubfx	r0, r0, #2, #16
 8004a02:	4770      	bx	lr
 8004a04:	4b04      	ldr	r3, [pc, #16]	; (8004a18 <uxTaskGetStackHighWaterMark+0x30>)
 8004a06:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 8004a0a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8004a0c:	780b      	ldrb	r3, [r1, #0]
 8004a0e:	2ba5      	cmp	r3, #165	; 0xa5
 8004a10:	d0ef      	beq.n	80049f2 <uxTaskGetStackHighWaterMark+0xa>
 8004a12:	2000      	movs	r0, #0
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	20000094 	.word	0x20000094

08004a1c <xTaskGetSchedulerState>:
 8004a1c:	4b06      	ldr	r3, [pc, #24]	; (8004a38 <xTaskGetSchedulerState+0x1c>)
 8004a1e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8004a22:	b132      	cbz	r2, 8004a32 <xTaskGetSchedulerState+0x16>
 8004a24:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	bf0c      	ite	eq
 8004a2c:	2002      	moveq	r0, #2
 8004a2e:	2000      	movne	r0, #0
 8004a30:	4770      	bx	lr
 8004a32:	2001      	movs	r0, #1
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	20000094 	.word	0x20000094

08004a3c <xTaskPriorityInherit>:
 8004a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a40:	4607      	mov	r7, r0
 8004a42:	b1e0      	cbz	r0, 8004a7e <xTaskPriorityInherit+0x42>
 8004a44:	4d29      	ldr	r5, [pc, #164]	; (8004aec <xTaskPriorityInherit+0xb0>)
 8004a46:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8004a48:	f8d5 10ac 	ldr.w	r1, [r5, #172]	; 0xac
 8004a4c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8004a4e:	428a      	cmp	r2, r1
 8004a50:	d217      	bcs.n	8004a82 <xTaskPriorityInherit+0x46>
 8004a52:	6981      	ldr	r1, [r0, #24]
 8004a54:	2900      	cmp	r1, #0
 8004a56:	db05      	blt.n	8004a64 <xTaskPriorityInherit+0x28>
 8004a58:	f8d5 10ac 	ldr.w	r1, [r5, #172]	; 0xac
 8004a5c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8004a5e:	f1c1 0107 	rsb	r1, r1, #7
 8004a62:	6181      	str	r1, [r0, #24]
 8004a64:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004a68:	4e21      	ldr	r6, [pc, #132]	; (8004af0 <xTaskPriorityInherit+0xb4>)
 8004a6a:	6979      	ldr	r1, [r7, #20]
 8004a6c:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8004a70:	4291      	cmp	r1, r2
 8004a72:	d010      	beq.n	8004a96 <xTaskPriorityInherit+0x5a>
 8004a74:	f8d5 20ac 	ldr.w	r2, [r5, #172]	; 0xac
 8004a78:	2001      	movs	r0, #1
 8004a7a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004a7c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a82:	f8d5 20ac 	ldr.w	r2, [r5, #172]	; 0xac
 8004a86:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8004a88:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004a8a:	4298      	cmp	r0, r3
 8004a8c:	bf2c      	ite	cs
 8004a8e:	2000      	movcs	r0, #0
 8004a90:	2001      	movcc	r0, #1
 8004a92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a96:	f107 0804 	add.w	r8, r7, #4
 8004a9a:	4640      	mov	r0, r8
 8004a9c:	f7fe fa72 	bl	8002f84 <uxListRemove>
 8004aa0:	b978      	cbnz	r0, 8004ac2 <xTaskPriorityInherit+0x86>
 8004aa2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004aa4:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8004aa8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8004aac:	69db      	ldr	r3, [r3, #28]
 8004aae:	b943      	cbnz	r3, 8004ac2 <xTaskPriorityInherit+0x86>
 8004ab0:	2101      	movs	r1, #1
 8004ab2:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
 8004ab6:	fa01 f202 	lsl.w	r2, r1, r2
 8004aba:	ea23 0202 	bic.w	r2, r3, r2
 8004abe:	f8c5 20b0 	str.w	r2, [r5, #176]	; 0xb0
 8004ac2:	f8d5 20ac 	ldr.w	r2, [r5, #172]	; 0xac
 8004ac6:	2401      	movs	r4, #1
 8004ac8:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
 8004acc:	4641      	mov	r1, r8
 8004ace:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8004ad0:	fa04 f200 	lsl.w	r2, r4, r0
 8004ad4:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004ad6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004ada:	4313      	orrs	r3, r2
 8004adc:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 8004ae0:	f8c5 30b0 	str.w	r3, [r5, #176]	; 0xb0
 8004ae4:	f7fe fa24 	bl	8002f30 <vListInsertEnd>
 8004ae8:	4620      	mov	r0, r4
 8004aea:	e7c8      	b.n	8004a7e <xTaskPriorityInherit+0x42>
 8004aec:	20000094 	.word	0x20000094
 8004af0:	200000b0 	.word	0x200000b0

08004af4 <xTaskPriorityDisinherit>:
 8004af4:	b180      	cbz	r0, 8004b18 <xTaskPriorityDisinherit+0x24>
 8004af6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004af8:	4d29      	ldr	r5, [pc, #164]	; (8004ba0 <xTaskPriorityDisinherit+0xac>)
 8004afa:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
 8004afe:	4283      	cmp	r3, r0
 8004b00:	d00c      	beq.n	8004b1c <xTaskPriorityDisinherit+0x28>
 8004b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b06:	b672      	cpsid	i
 8004b08:	f383 8811 	msr	BASEPRI, r3
 8004b0c:	f3bf 8f6f 	isb	sy
 8004b10:	f3bf 8f4f 	dsb	sy
 8004b14:	b662      	cpsie	i
 8004b16:	e7fe      	b.n	8004b16 <xTaskPriorityDisinherit+0x22>
 8004b18:	2000      	movs	r0, #0
 8004b1a:	4770      	bx	lr
 8004b1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b1e:	b953      	cbnz	r3, 8004b36 <xTaskPriorityDisinherit+0x42>
 8004b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b24:	b672      	cpsid	i
 8004b26:	f383 8811 	msr	BASEPRI, r3
 8004b2a:	f3bf 8f6f 	isb	sy
 8004b2e:	f3bf 8f4f 	dsb	sy
 8004b32:	b662      	cpsie	i
 8004b34:	e7fe      	b.n	8004b34 <xTaskPriorityDisinherit+0x40>
 8004b36:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8004b3c:	6503      	str	r3, [r0, #80]	; 0x50
 8004b3e:	4291      	cmp	r1, r2
 8004b40:	d000      	beq.n	8004b44 <xTaskPriorityDisinherit+0x50>
 8004b42:	b10b      	cbz	r3, 8004b48 <xTaskPriorityDisinherit+0x54>
 8004b44:	2000      	movs	r0, #0
 8004b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b48:	1d07      	adds	r7, r0, #4
 8004b4a:	4604      	mov	r4, r0
 8004b4c:	4638      	mov	r0, r7
 8004b4e:	f7fe fa19 	bl	8002f84 <uxListRemove>
 8004b52:	b968      	cbnz	r0, 8004b70 <xTaskPriorityDisinherit+0x7c>
 8004b54:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004b56:	2314      	movs	r3, #20
 8004b58:	fb03 5301 	mla	r3, r3, r1, r5
 8004b5c:	69db      	ldr	r3, [r3, #28]
 8004b5e:	b93b      	cbnz	r3, 8004b70 <xTaskPriorityDisinherit+0x7c>
 8004b60:	2201      	movs	r2, #1
 8004b62:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
 8004b66:	408a      	lsls	r2, r1
 8004b68:	ea23 0302 	bic.w	r3, r3, r2
 8004b6c:	f8c5 30b0 	str.w	r3, [r5, #176]	; 0xb0
 8004b70:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004b72:	2601      	movs	r6, #1
 8004b74:	f04f 0c14 	mov.w	ip, #20
 8004b78:	480a      	ldr	r0, [pc, #40]	; (8004ba4 <xTaskPriorityDisinherit+0xb0>)
 8004b7a:	f8d5 e0b0 	ldr.w	lr, [r5, #176]	; 0xb0
 8004b7e:	fa06 f203 	lsl.w	r2, r6, r3
 8004b82:	fb0c 0003 	mla	r0, ip, r3, r0
 8004b86:	4639      	mov	r1, r7
 8004b88:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004b8a:	f1c3 0307 	rsb	r3, r3, #7
 8004b8e:	ea42 020e 	orr.w	r2, r2, lr
 8004b92:	61a3      	str	r3, [r4, #24]
 8004b94:	f8c5 20b0 	str.w	r2, [r5, #176]	; 0xb0
 8004b98:	f7fe f9ca 	bl	8002f30 <vListInsertEnd>
 8004b9c:	4630      	mov	r0, r6
 8004b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ba0:	20000094 	.word	0x20000094
 8004ba4:	200000b0 	.word	0x200000b0

08004ba8 <vTaskPriorityDisinheritAfterTimeout>:
 8004ba8:	b1c8      	cbz	r0, 8004bde <vTaskPriorityDisinheritAfterTimeout+0x36>
 8004baa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bae:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8004bb0:	b954      	cbnz	r4, 8004bc8 <vTaskPriorityDisinheritAfterTimeout+0x20>
 8004bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb6:	b672      	cpsid	i
 8004bb8:	f383 8811 	msr	BASEPRI, r3
 8004bbc:	f3bf 8f6f 	isb	sy
 8004bc0:	f3bf 8f4f 	dsb	sy
 8004bc4:	b662      	cpsie	i
 8004bc6:	e7fe      	b.n	8004bc6 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8004bc8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004bca:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8004bcc:	428b      	cmp	r3, r1
 8004bce:	bf38      	it	cc
 8004bd0:	460b      	movcc	r3, r1
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d001      	beq.n	8004bda <vTaskPriorityDisinheritAfterTimeout+0x32>
 8004bd6:	2c01      	cmp	r4, #1
 8004bd8:	d002      	beq.n	8004be0 <vTaskPriorityDisinheritAfterTimeout+0x38>
 8004bda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bde:	4770      	bx	lr
 8004be0:	4d20      	ldr	r5, [pc, #128]	; (8004c64 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
 8004be2:	f8d5 10ac 	ldr.w	r1, [r5, #172]	; 0xac
 8004be6:	4281      	cmp	r1, r0
 8004be8:	d031      	beq.n	8004c4e <vTaskPriorityDisinheritAfterTimeout+0xa6>
 8004bea:	6981      	ldr	r1, [r0, #24]
 8004bec:	62c3      	str	r3, [r0, #44]	; 0x2c
 8004bee:	2900      	cmp	r1, #0
 8004bf0:	db02      	blt.n	8004bf8 <vTaskPriorityDisinheritAfterTimeout+0x50>
 8004bf2:	f1c3 0307 	rsb	r3, r3, #7
 8004bf6:	6183      	str	r3, [r0, #24]
 8004bf8:	4f1b      	ldr	r7, [pc, #108]	; (8004c68 <vTaskPriorityDisinheritAfterTimeout+0xc0>)
 8004bfa:	2614      	movs	r6, #20
 8004bfc:	6943      	ldr	r3, [r0, #20]
 8004bfe:	fb06 7202 	mla	r2, r6, r2, r7
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d1e9      	bne.n	8004bda <vTaskPriorityDisinheritAfterTimeout+0x32>
 8004c06:	f100 0804 	add.w	r8, r0, #4
 8004c0a:	4604      	mov	r4, r0
 8004c0c:	4640      	mov	r0, r8
 8004c0e:	f7fe f9b9 	bl	8002f84 <uxListRemove>
 8004c12:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004c14:	b960      	cbnz	r0, 8004c30 <vTaskPriorityDisinheritAfterTimeout+0x88>
 8004c16:	2301      	movs	r3, #1
 8004c18:	fb06 5602 	mla	r6, r6, r2, r5
 8004c1c:	fa03 f002 	lsl.w	r0, r3, r2
 8004c20:	69f3      	ldr	r3, [r6, #28]
 8004c22:	b92b      	cbnz	r3, 8004c30 <vTaskPriorityDisinheritAfterTimeout+0x88>
 8004c24:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
 8004c28:	ea23 0300 	bic.w	r3, r3, r0
 8004c2c:	f8c5 30b0 	str.w	r3, [r5, #176]	; 0xb0
 8004c30:	2301      	movs	r3, #1
 8004c32:	f8d5 40b0 	ldr.w	r4, [r5, #176]	; 0xb0
 8004c36:	2014      	movs	r0, #20
 8004c38:	4641      	mov	r1, r8
 8004c3a:	4093      	lsls	r3, r2
 8004c3c:	fb00 7002 	mla	r0, r0, r2, r7
 8004c40:	4323      	orrs	r3, r4
 8004c42:	f8c5 30b0 	str.w	r3, [r5, #176]	; 0xb0
 8004c46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c4a:	f7fe b971 	b.w	8002f30 <vListInsertEnd>
 8004c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c52:	b672      	cpsid	i
 8004c54:	f383 8811 	msr	BASEPRI, r3
 8004c58:	f3bf 8f6f 	isb	sy
 8004c5c:	f3bf 8f4f 	dsb	sy
 8004c60:	b662      	cpsie	i
 8004c62:	e7fe      	b.n	8004c62 <vTaskPriorityDisinheritAfterTimeout+0xba>
 8004c64:	20000094 	.word	0x20000094
 8004c68:	200000b0 	.word	0x200000b0

08004c6c <pvTaskIncrementMutexHeldCount>:
 8004c6c:	4b05      	ldr	r3, [pc, #20]	; (8004c84 <pvTaskIncrementMutexHeldCount+0x18>)
 8004c6e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8004c72:	b122      	cbz	r2, 8004c7e <pvTaskIncrementMutexHeldCount+0x12>
 8004c74:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
 8004c78:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8004c7a:	3201      	adds	r2, #1
 8004c7c:	650a      	str	r2, [r1, #80]	; 0x50
 8004c7e:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
 8004c82:	4770      	bx	lr
 8004c84:	20000094 	.word	0x20000094

08004c88 <ulTaskNotifyTake>:
 8004c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c8c:	4c33      	ldr	r4, [pc, #204]	; (8004d5c <ulTaskNotifyTake+0xd4>)
 8004c8e:	4606      	mov	r6, r0
 8004c90:	460d      	mov	r5, r1
 8004c92:	f000 f947 	bl	8004f24 <vPortEnterCritical>
 8004c96:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8004c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c9c:	b92b      	cbnz	r3, 8004caa <ulTaskNotifyTake+0x22>
 8004c9e:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8004ca2:	2701      	movs	r7, #1
 8004ca4:	f883 7058 	strb.w	r7, [r3, #88]	; 0x58
 8004ca8:	b9cd      	cbnz	r5, 8004cde <ulTaskNotifyTake+0x56>
 8004caa:	f000 f961 	bl	8004f70 <vPortExitCritical>
 8004cae:	f000 f939 	bl	8004f24 <vPortEnterCritical>
 8004cb2:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8004cb6:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8004cb8:	b125      	cbz	r5, 8004cc4 <ulTaskNotifyTake+0x3c>
 8004cba:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8004cbe:	b95e      	cbnz	r6, 8004cd8 <ulTaskNotifyTake+0x50>
 8004cc0:	1e6a      	subs	r2, r5, #1
 8004cc2:	655a      	str	r2, [r3, #84]	; 0x54
 8004cc4:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8004cce:	f000 f94f 	bl	8004f70 <vPortExitCritical>
 8004cd2:	4628      	mov	r0, r5
 8004cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cd8:	2200      	movs	r2, #0
 8004cda:	655a      	str	r2, [r3, #84]	; 0x54
 8004cdc:	e7f2      	b.n	8004cc4 <ulTaskNotifyTake+0x3c>
 8004cde:	f8d4 80a8 	ldr.w	r8, [r4, #168]	; 0xa8
 8004ce2:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8004ce6:	3004      	adds	r0, #4
 8004ce8:	f7fe f94c 	bl	8002f84 <uxListRemove>
 8004cec:	b948      	cbnz	r0, 8004d02 <ulTaskNotifyTake+0x7a>
 8004cee:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 8004cf2:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8004cf6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004cf8:	4097      	lsls	r7, r2
 8004cfa:	ea23 0707 	bic.w	r7, r3, r7
 8004cfe:	f8c4 70b0 	str.w	r7, [r4, #176]	; 0xb0
 8004d02:	1c6b      	adds	r3, r5, #1
 8004d04:	d023      	beq.n	8004d4e <ulTaskNotifyTake+0xc6>
 8004d06:	eb15 0508 	adds.w	r5, r5, r8
 8004d0a:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8004d0e:	605d      	str	r5, [r3, #4]
 8004d10:	d215      	bcs.n	8004d3e <ulTaskNotifyTake+0xb6>
 8004d12:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
 8004d16:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8004d1a:	3104      	adds	r1, #4
 8004d1c:	f7fe f918 	bl	8002f50 <vListInsert>
 8004d20:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
 8004d24:	429d      	cmp	r5, r3
 8004d26:	d201      	bcs.n	8004d2c <ulTaskNotifyTake+0xa4>
 8004d28:	f8c4 50d0 	str.w	r5, [r4, #208]	; 0xd0
 8004d2c:	4b0c      	ldr	r3, [pc, #48]	; (8004d60 <ulTaskNotifyTake+0xd8>)
 8004d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d32:	601a      	str	r2, [r3, #0]
 8004d34:	f3bf 8f4f 	dsb	sy
 8004d38:	f3bf 8f6f 	isb	sy
 8004d3c:	e7b5      	b.n	8004caa <ulTaskNotifyTake+0x22>
 8004d3e:	f8d4 00c8 	ldr.w	r0, [r4, #200]	; 0xc8
 8004d42:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8004d46:	3104      	adds	r1, #4
 8004d48:	f7fe f902 	bl	8002f50 <vListInsert>
 8004d4c:	e7ee      	b.n	8004d2c <ulTaskNotifyTake+0xa4>
 8004d4e:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8004d52:	4804      	ldr	r0, [pc, #16]	; (8004d64 <ulTaskNotifyTake+0xdc>)
 8004d54:	3104      	adds	r1, #4
 8004d56:	f7fe f8eb 	bl	8002f30 <vListInsertEnd>
 8004d5a:	e7e7      	b.n	8004d2c <ulTaskNotifyTake+0xa4>
 8004d5c:	20000094 	.word	0x20000094
 8004d60:	e000ed04 	.word	0xe000ed04
 8004d64:	20000148 	.word	0x20000148

08004d68 <xTaskGenericNotify>:
 8004d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d6a:	b1a8      	cbz	r0, 8004d98 <xTaskGenericNotify+0x30>
 8004d6c:	461f      	mov	r7, r3
 8004d6e:	4604      	mov	r4, r0
 8004d70:	4615      	mov	r5, r2
 8004d72:	460e      	mov	r6, r1
 8004d74:	f000 f8d6 	bl	8004f24 <vPortEnterCritical>
 8004d78:	b10f      	cbz	r7, 8004d7e <xTaskGenericNotify+0x16>
 8004d7a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004d7c:	603b      	str	r3, [r7, #0]
 8004d7e:	1e6b      	subs	r3, r5, #1
 8004d80:	2202      	movs	r2, #2
 8004d82:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
 8004d86:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
 8004d8a:	b2ed      	uxtb	r5, r5
 8004d8c:	2b03      	cmp	r3, #3
 8004d8e:	d811      	bhi.n	8004db4 <xTaskGenericNotify+0x4c>
 8004d90:	e8df f003 	tbb	[pc, r3]
 8004d94:	0d0f4c50 	.word	0x0d0f4c50
 8004d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d9c:	b672      	cpsid	i
 8004d9e:	f383 8811 	msr	BASEPRI, r3
 8004da2:	f3bf 8f6f 	isb	sy
 8004da6:	f3bf 8f4f 	dsb	sy
 8004daa:	b662      	cpsie	i
 8004dac:	e7fe      	b.n	8004dac <xTaskGenericNotify+0x44>
 8004dae:	2d02      	cmp	r5, #2
 8004db0:	d007      	beq.n	8004dc2 <xTaskGenericNotify+0x5a>
 8004db2:	6566      	str	r6, [r4, #84]	; 0x54
 8004db4:	2d01      	cmp	r5, #1
 8004db6:	d006      	beq.n	8004dc6 <xTaskGenericNotify+0x5e>
 8004db8:	2501      	movs	r5, #1
 8004dba:	f000 f8d9 	bl	8004f70 <vPortExitCritical>
 8004dbe:	4628      	mov	r0, r5
 8004dc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004dc2:	2500      	movs	r5, #0
 8004dc4:	e7f9      	b.n	8004dba <xTaskGenericNotify+0x52>
 8004dc6:	1d27      	adds	r7, r4, #4
 8004dc8:	4e1c      	ldr	r6, [pc, #112]	; (8004e3c <xTaskGenericNotify+0xd4>)
 8004dca:	4638      	mov	r0, r7
 8004dcc:	f7fe f8da 	bl	8002f84 <uxListRemove>
 8004dd0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004dd2:	f8d6 e0b0 	ldr.w	lr, [r6, #176]	; 0xb0
 8004dd6:	f04f 0c14 	mov.w	ip, #20
 8004dda:	fa05 f302 	lsl.w	r3, r5, r2
 8004dde:	f106 001c 	add.w	r0, r6, #28
 8004de2:	4639      	mov	r1, r7
 8004de4:	ea43 030e 	orr.w	r3, r3, lr
 8004de8:	fb0c 0002 	mla	r0, ip, r2, r0
 8004dec:	f8c6 30b0 	str.w	r3, [r6, #176]	; 0xb0
 8004df0:	f7fe f89e 	bl	8002f30 <vListInsertEnd>
 8004df4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004df6:	b153      	cbz	r3, 8004e0e <xTaskGenericNotify+0xa6>
 8004df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dfc:	b672      	cpsid	i
 8004dfe:	f383 8811 	msr	BASEPRI, r3
 8004e02:	f3bf 8f6f 	isb	sy
 8004e06:	f3bf 8f4f 	dsb	sy
 8004e0a:	b662      	cpsie	i
 8004e0c:	e7fe      	b.n	8004e0c <xTaskGenericNotify+0xa4>
 8004e0e:	f8d6 30ac 	ldr.w	r3, [r6, #172]	; 0xac
 8004e12:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d9ce      	bls.n	8004db8 <xTaskGenericNotify+0x50>
 8004e1a:	4b09      	ldr	r3, [pc, #36]	; (8004e40 <xTaskGenericNotify+0xd8>)
 8004e1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e20:	601a      	str	r2, [r3, #0]
 8004e22:	f3bf 8f4f 	dsb	sy
 8004e26:	f3bf 8f6f 	isb	sy
 8004e2a:	e7c6      	b.n	8004dba <xTaskGenericNotify+0x52>
 8004e2c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004e2e:	3301      	adds	r3, #1
 8004e30:	6563      	str	r3, [r4, #84]	; 0x54
 8004e32:	e7bf      	b.n	8004db4 <xTaskGenericNotify+0x4c>
 8004e34:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004e36:	431e      	orrs	r6, r3
 8004e38:	6566      	str	r6, [r4, #84]	; 0x54
 8004e3a:	e7bb      	b.n	8004db4 <xTaskGenericNotify+0x4c>
 8004e3c:	20000094 	.word	0x20000094
 8004e40:	e000ed04 	.word	0xe000ed04

08004e44 <prvTaskExitError>:
 8004e44:	4b10      	ldr	r3, [pc, #64]	; (8004e88 <prvTaskExitError+0x44>)
 8004e46:	b082      	sub	sp, #8
 8004e48:	2200      	movs	r2, #0
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	9201      	str	r2, [sp, #4]
 8004e4e:	3301      	adds	r3, #1
 8004e50:	d00a      	beq.n	8004e68 <prvTaskExitError+0x24>
 8004e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e56:	b672      	cpsid	i
 8004e58:	f383 8811 	msr	BASEPRI, r3
 8004e5c:	f3bf 8f6f 	isb	sy
 8004e60:	f3bf 8f4f 	dsb	sy
 8004e64:	b662      	cpsie	i
 8004e66:	e7fe      	b.n	8004e66 <prvTaskExitError+0x22>
 8004e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e6c:	b672      	cpsid	i
 8004e6e:	f383 8811 	msr	BASEPRI, r3
 8004e72:	f3bf 8f6f 	isb	sy
 8004e76:	f3bf 8f4f 	dsb	sy
 8004e7a:	b662      	cpsie	i
 8004e7c:	9b01      	ldr	r3, [sp, #4]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d0fc      	beq.n	8004e7c <prvTaskExitError+0x38>
 8004e82:	b002      	add	sp, #8
 8004e84:	4770      	bx	lr
 8004e86:	bf00      	nop
 8004e88:	20000008 	.word	0x20000008

08004e8c <prvPortStartFirstTask>:
 8004e8c:	4808      	ldr	r0, [pc, #32]	; (8004eb0 <prvPortStartFirstTask+0x24>)
 8004e8e:	6800      	ldr	r0, [r0, #0]
 8004e90:	6800      	ldr	r0, [r0, #0]
 8004e92:	f380 8808 	msr	MSP, r0
 8004e96:	f04f 0000 	mov.w	r0, #0
 8004e9a:	f380 8814 	msr	CONTROL, r0
 8004e9e:	b662      	cpsie	i
 8004ea0:	b661      	cpsie	f
 8004ea2:	f3bf 8f4f 	dsb	sy
 8004ea6:	f3bf 8f6f 	isb	sy
 8004eaa:	df00      	svc	0
 8004eac:	bf00      	nop
 8004eae:	0000      	.short	0x0000
 8004eb0:	e000ed08 	.word	0xe000ed08

08004eb4 <vPortEnableVFP>:
 8004eb4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004ec4 <vPortEnableVFP+0x10>
 8004eb8:	6801      	ldr	r1, [r0, #0]
 8004eba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004ebe:	6001      	str	r1, [r0, #0]
 8004ec0:	4770      	bx	lr
 8004ec2:	0000      	.short	0x0000
 8004ec4:	e000ed88 	.word	0xe000ed88

08004ec8 <pxPortInitialiseStack>:
 8004ec8:	b470      	push	{r4, r5, r6}
 8004eca:	4603      	mov	r3, r0
 8004ecc:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
 8004ed0:	4d08      	ldr	r5, [pc, #32]	; (8004ef4 <pxPortInitialiseStack+0x2c>)
 8004ed2:	f06f 0402 	mvn.w	r4, #2
 8004ed6:	f021 0101 	bic.w	r1, r1, #1
 8004eda:	f840 2c20 	str.w	r2, [r0, #-32]
 8004ede:	3844      	subs	r0, #68	; 0x44
 8004ee0:	63c1      	str	r1, [r0, #60]	; 0x3c
 8004ee2:	f843 6c04 	str.w	r6, [r3, #-4]
 8004ee6:	f843 5c0c 	str.w	r5, [r3, #-12]
 8004eea:	f843 4c24 	str.w	r4, [r3, #-36]
 8004eee:	bc70      	pop	{r4, r5, r6}
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop
 8004ef4:	08004e45 	.word	0x08004e45
	...

08004f00 <SVC_Handler>:
 8004f00:	4b07      	ldr	r3, [pc, #28]	; (8004f20 <pxCurrentTCBConst2>)
 8004f02:	6819      	ldr	r1, [r3, #0]
 8004f04:	6808      	ldr	r0, [r1, #0]
 8004f06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f0a:	f380 8809 	msr	PSP, r0
 8004f0e:	f3bf 8f6f 	isb	sy
 8004f12:	f04f 0000 	mov.w	r0, #0
 8004f16:	f380 8811 	msr	BASEPRI, r0
 8004f1a:	4770      	bx	lr
 8004f1c:	f3af 8000 	nop.w

08004f20 <pxCurrentTCBConst2>:
 8004f20:	20000140 	.word	0x20000140

08004f24 <vPortEnterCritical>:
 8004f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f28:	b672      	cpsid	i
 8004f2a:	f383 8811 	msr	BASEPRI, r3
 8004f2e:	f3bf 8f6f 	isb	sy
 8004f32:	f3bf 8f4f 	dsb	sy
 8004f36:	b662      	cpsie	i
 8004f38:	4a0b      	ldr	r2, [pc, #44]	; (8004f68 <vPortEnterCritical+0x44>)
 8004f3a:	6813      	ldr	r3, [r2, #0]
 8004f3c:	3301      	adds	r3, #1
 8004f3e:	2b01      	cmp	r3, #1
 8004f40:	6013      	str	r3, [r2, #0]
 8004f42:	d000      	beq.n	8004f46 <vPortEnterCritical+0x22>
 8004f44:	4770      	bx	lr
 8004f46:	4b09      	ldr	r3, [pc, #36]	; (8004f6c <vPortEnterCritical+0x48>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004f4e:	d0f9      	beq.n	8004f44 <vPortEnterCritical+0x20>
 8004f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f54:	b672      	cpsid	i
 8004f56:	f383 8811 	msr	BASEPRI, r3
 8004f5a:	f3bf 8f6f 	isb	sy
 8004f5e:	f3bf 8f4f 	dsb	sy
 8004f62:	b662      	cpsie	i
 8004f64:	e7fe      	b.n	8004f64 <vPortEnterCritical+0x40>
 8004f66:	bf00      	nop
 8004f68:	20000008 	.word	0x20000008
 8004f6c:	e000ed04 	.word	0xe000ed04

08004f70 <vPortExitCritical>:
 8004f70:	4a09      	ldr	r2, [pc, #36]	; (8004f98 <vPortExitCritical+0x28>)
 8004f72:	6813      	ldr	r3, [r2, #0]
 8004f74:	b953      	cbnz	r3, 8004f8c <vPortExitCritical+0x1c>
 8004f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f7a:	b672      	cpsid	i
 8004f7c:	f383 8811 	msr	BASEPRI, r3
 8004f80:	f3bf 8f6f 	isb	sy
 8004f84:	f3bf 8f4f 	dsb	sy
 8004f88:	b662      	cpsie	i
 8004f8a:	e7fe      	b.n	8004f8a <vPortExitCritical+0x1a>
 8004f8c:	3b01      	subs	r3, #1
 8004f8e:	6013      	str	r3, [r2, #0]
 8004f90:	b90b      	cbnz	r3, 8004f96 <vPortExitCritical+0x26>
 8004f92:	f383 8811 	msr	BASEPRI, r3
 8004f96:	4770      	bx	lr
 8004f98:	20000008 	.word	0x20000008
 8004f9c:	00000000 	.word	0x00000000

08004fa0 <PendSV_Handler>:
 8004fa0:	f3ef 8009 	mrs	r0, PSP
 8004fa4:	f3bf 8f6f 	isb	sy
 8004fa8:	4b15      	ldr	r3, [pc, #84]	; (8005000 <pxCurrentTCBConst>)
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	f01e 0f10 	tst.w	lr, #16
 8004fb0:	bf08      	it	eq
 8004fb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004fb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fba:	6010      	str	r0, [r2, #0]
 8004fbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004fc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004fc4:	b672      	cpsid	i
 8004fc6:	f380 8811 	msr	BASEPRI, r0
 8004fca:	f3bf 8f4f 	dsb	sy
 8004fce:	f3bf 8f6f 	isb	sy
 8004fd2:	b662      	cpsie	i
 8004fd4:	f7ff fbc6 	bl	8004764 <vTaskSwitchContext>
 8004fd8:	f04f 0000 	mov.w	r0, #0
 8004fdc:	f380 8811 	msr	BASEPRI, r0
 8004fe0:	bc09      	pop	{r0, r3}
 8004fe2:	6819      	ldr	r1, [r3, #0]
 8004fe4:	6808      	ldr	r0, [r1, #0]
 8004fe6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fea:	f01e 0f10 	tst.w	lr, #16
 8004fee:	bf08      	it	eq
 8004ff0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004ff4:	f380 8809 	msr	PSP, r0
 8004ff8:	f3bf 8f6f 	isb	sy
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop

08005000 <pxCurrentTCBConst>:
 8005000:	20000140 	.word	0x20000140

08005004 <SysTick_Handler>:
 8005004:	b508      	push	{r3, lr}
 8005006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800500a:	b672      	cpsid	i
 800500c:	f383 8811 	msr	BASEPRI, r3
 8005010:	f3bf 8f6f 	isb	sy
 8005014:	f3bf 8f4f 	dsb	sy
 8005018:	b662      	cpsie	i
 800501a:	f7ff fa65 	bl	80044e8 <xTaskIncrementTick>
 800501e:	b118      	cbz	r0, 8005028 <SysTick_Handler+0x24>
 8005020:	4b03      	ldr	r3, [pc, #12]	; (8005030 <SysTick_Handler+0x2c>)
 8005022:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005026:	601a      	str	r2, [r3, #0]
 8005028:	2300      	movs	r3, #0
 800502a:	f383 8811 	msr	BASEPRI, r3
 800502e:	bd08      	pop	{r3, pc}
 8005030:	e000ed04 	.word	0xe000ed04

08005034 <vPortSetupTimerInterrupt>:
 8005034:	b410      	push	{r4}
 8005036:	2300      	movs	r3, #0
 8005038:	4a08      	ldr	r2, [pc, #32]	; (800505c <vPortSetupTimerInterrupt+0x28>)
 800503a:	4c09      	ldr	r4, [pc, #36]	; (8005060 <vPortSetupTimerInterrupt+0x2c>)
 800503c:	2107      	movs	r1, #7
 800503e:	4809      	ldr	r0, [pc, #36]	; (8005064 <vPortSetupTimerInterrupt+0x30>)
 8005040:	6013      	str	r3, [r2, #0]
 8005042:	6023      	str	r3, [r4, #0]
 8005044:	4c08      	ldr	r4, [pc, #32]	; (8005068 <vPortSetupTimerInterrupt+0x34>)
 8005046:	6803      	ldr	r3, [r0, #0]
 8005048:	4808      	ldr	r0, [pc, #32]	; (800506c <vPortSetupTimerInterrupt+0x38>)
 800504a:	fba4 4303 	umull	r4, r3, r4, r3
 800504e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005052:	099b      	lsrs	r3, r3, #6
 8005054:	3b01      	subs	r3, #1
 8005056:	6003      	str	r3, [r0, #0]
 8005058:	6011      	str	r1, [r2, #0]
 800505a:	4770      	bx	lr
 800505c:	e000e010 	.word	0xe000e010
 8005060:	e000e018 	.word	0xe000e018
 8005064:	20000010 	.word	0x20000010
 8005068:	10624dd3 	.word	0x10624dd3
 800506c:	e000e014 	.word	0xe000e014

08005070 <xPortStartScheduler>:
 8005070:	4b2c      	ldr	r3, [pc, #176]	; (8005124 <xPortStartScheduler+0xb4>)
 8005072:	20ff      	movs	r0, #255	; 0xff
 8005074:	492c      	ldr	r1, [pc, #176]	; (8005128 <xPortStartScheduler+0xb8>)
 8005076:	b530      	push	{r4, r5, lr}
 8005078:	781a      	ldrb	r2, [r3, #0]
 800507a:	b083      	sub	sp, #12
 800507c:	2407      	movs	r4, #7
 800507e:	b2d2      	uxtb	r2, r2
 8005080:	604c      	str	r4, [r1, #4]
 8005082:	9201      	str	r2, [sp, #4]
 8005084:	7018      	strb	r0, [r3, #0]
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	b2db      	uxtb	r3, r3
 800508a:	f88d 3003 	strb.w	r3, [sp, #3]
 800508e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005092:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8005096:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800509a:	0610      	lsls	r0, r2, #24
 800509c:	700b      	strb	r3, [r1, #0]
 800509e:	d510      	bpl.n	80050c2 <xPortStartScheduler+0x52>
 80050a0:	2306      	movs	r3, #6
 80050a2:	e000      	b.n	80050a6 <xPortStartScheduler+0x36>
 80050a4:	4603      	mov	r3, r0
 80050a6:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80050aa:	1e58      	subs	r0, r3, #1
 80050ac:	0052      	lsls	r2, r2, #1
 80050ae:	b2d2      	uxtb	r2, r2
 80050b0:	f88d 2003 	strb.w	r2, [sp, #3]
 80050b4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80050b8:	0612      	lsls	r2, r2, #24
 80050ba:	d4f3      	bmi.n	80050a4 <xPortStartScheduler+0x34>
 80050bc:	2b03      	cmp	r3, #3
 80050be:	604b      	str	r3, [r1, #4]
 80050c0:	d00a      	beq.n	80050d8 <xPortStartScheduler+0x68>
 80050c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c6:	b672      	cpsid	i
 80050c8:	f383 8811 	msr	BASEPRI, r3
 80050cc:	f3bf 8f6f 	isb	sy
 80050d0:	f3bf 8f4f 	dsb	sy
 80050d4:	b662      	cpsie	i
 80050d6:	e7fe      	b.n	80050d6 <xPortStartScheduler+0x66>
 80050d8:	9801      	ldr	r0, [sp, #4]
 80050da:	021b      	lsls	r3, r3, #8
 80050dc:	4a13      	ldr	r2, [pc, #76]	; (800512c <xPortStartScheduler+0xbc>)
 80050de:	2400      	movs	r4, #0
 80050e0:	4d10      	ldr	r5, [pc, #64]	; (8005124 <xPortStartScheduler+0xb4>)
 80050e2:	b2c0      	uxtb	r0, r0
 80050e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80050e8:	7028      	strb	r0, [r5, #0]
 80050ea:	6810      	ldr	r0, [r2, #0]
 80050ec:	604b      	str	r3, [r1, #4]
 80050ee:	f440 0070 	orr.w	r0, r0, #15728640	; 0xf00000
 80050f2:	6010      	str	r0, [r2, #0]
 80050f4:	6813      	ldr	r3, [r2, #0]
 80050f6:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80050fa:	6013      	str	r3, [r2, #0]
 80050fc:	f7ff ff9a 	bl	8005034 <vPortSetupTimerInterrupt>
 8005100:	4b0b      	ldr	r3, [pc, #44]	; (8005130 <xPortStartScheduler+0xc0>)
 8005102:	601c      	str	r4, [r3, #0]
 8005104:	f7ff fed6 	bl	8004eb4 <vPortEnableVFP>
 8005108:	4a0a      	ldr	r2, [pc, #40]	; (8005134 <xPortStartScheduler+0xc4>)
 800510a:	6813      	ldr	r3, [r2, #0]
 800510c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005110:	6013      	str	r3, [r2, #0]
 8005112:	f7ff febb 	bl	8004e8c <prvPortStartFirstTask>
 8005116:	f7ff fb25 	bl	8004764 <vTaskSwitchContext>
 800511a:	f7ff fe93 	bl	8004e44 <prvTaskExitError>
 800511e:	4620      	mov	r0, r4
 8005120:	b003      	add	sp, #12
 8005122:	bd30      	pop	{r4, r5, pc}
 8005124:	e000e400 	.word	0xe000e400
 8005128:	200001c0 	.word	0x200001c0
 800512c:	e000ed20 	.word	0xe000ed20
 8005130:	20000008 	.word	0x20000008
 8005134:	e000ef34 	.word	0xe000ef34

08005138 <vPortValidateInterruptPriority>:
 8005138:	f3ef 8205 	mrs	r2, IPSR
 800513c:	2a0f      	cmp	r2, #15
 800513e:	d813      	bhi.n	8005168 <vPortValidateInterruptPriority+0x30>
 8005140:	4b12      	ldr	r3, [pc, #72]	; (800518c <vPortValidateInterruptPriority+0x54>)
 8005142:	4913      	ldr	r1, [pc, #76]	; (8005190 <vPortValidateInterruptPriority+0x58>)
 8005144:	685a      	ldr	r2, [r3, #4]
 8005146:	680b      	ldr	r3, [r1, #0]
 8005148:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800514c:	4293      	cmp	r3, r2
 800514e:	d90a      	bls.n	8005166 <vPortValidateInterruptPriority+0x2e>
 8005150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005154:	b672      	cpsid	i
 8005156:	f383 8811 	msr	BASEPRI, r3
 800515a:	f3bf 8f6f 	isb	sy
 800515e:	f3bf 8f4f 	dsb	sy
 8005162:	b662      	cpsie	i
 8005164:	e7fe      	b.n	8005164 <vPortValidateInterruptPriority+0x2c>
 8005166:	4770      	bx	lr
 8005168:	490a      	ldr	r1, [pc, #40]	; (8005194 <vPortValidateInterruptPriority+0x5c>)
 800516a:	4b08      	ldr	r3, [pc, #32]	; (800518c <vPortValidateInterruptPriority+0x54>)
 800516c:	5c52      	ldrb	r2, [r2, r1]
 800516e:	7819      	ldrb	r1, [r3, #0]
 8005170:	4291      	cmp	r1, r2
 8005172:	d9e6      	bls.n	8005142 <vPortValidateInterruptPriority+0xa>
 8005174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005178:	b672      	cpsid	i
 800517a:	f383 8811 	msr	BASEPRI, r3
 800517e:	f3bf 8f6f 	isb	sy
 8005182:	f3bf 8f4f 	dsb	sy
 8005186:	b662      	cpsie	i
 8005188:	e7fe      	b.n	8005188 <vPortValidateInterruptPriority+0x50>
 800518a:	bf00      	nop
 800518c:	200001c0 	.word	0x200001c0
 8005190:	e000ed0c 	.word	0xe000ed0c
 8005194:	e000e3f0 	.word	0xe000e3f0

08005198 <prvInsertBlockIntoFreeList>:
 8005198:	4b11      	ldr	r3, [pc, #68]	; (80051e0 <prvInsertBlockIntoFreeList+0x48>)
 800519a:	b430      	push	{r4, r5}
 800519c:	461d      	mov	r5, r3
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	4282      	cmp	r2, r0
 80051a2:	d201      	bcs.n	80051a8 <prvInsertBlockIntoFreeList+0x10>
 80051a4:	4613      	mov	r3, r2
 80051a6:	e7fa      	b.n	800519e <prvInsertBlockIntoFreeList+0x6>
 80051a8:	685c      	ldr	r4, [r3, #4]
 80051aa:	1919      	adds	r1, r3, r4
 80051ac:	4288      	cmp	r0, r1
 80051ae:	d103      	bne.n	80051b8 <prvInsertBlockIntoFreeList+0x20>
 80051b0:	6841      	ldr	r1, [r0, #4]
 80051b2:	4618      	mov	r0, r3
 80051b4:	4421      	add	r1, r4
 80051b6:	6059      	str	r1, [r3, #4]
 80051b8:	6844      	ldr	r4, [r0, #4]
 80051ba:	1901      	adds	r1, r0, r4
 80051bc:	428a      	cmp	r2, r1
 80051be:	d108      	bne.n	80051d2 <prvInsertBlockIntoFreeList+0x3a>
 80051c0:	68a9      	ldr	r1, [r5, #8]
 80051c2:	428a      	cmp	r2, r1
 80051c4:	d005      	beq.n	80051d2 <prvInsertBlockIntoFreeList+0x3a>
 80051c6:	e9d2 5100 	ldrd	r5, r1, [r2]
 80051ca:	4421      	add	r1, r4
 80051cc:	e9c0 5100 	strd	r5, r1, [r0]
 80051d0:	e000      	b.n	80051d4 <prvInsertBlockIntoFreeList+0x3c>
 80051d2:	6002      	str	r2, [r0, #0]
 80051d4:	4298      	cmp	r0, r3
 80051d6:	bc30      	pop	{r4, r5}
 80051d8:	bf18      	it	ne
 80051da:	6018      	strne	r0, [r3, #0]
 80051dc:	4770      	bx	lr
 80051de:	bf00      	nop
 80051e0:	200001c8 	.word	0x200001c8

080051e4 <pvPortMalloc>:
 80051e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051e6:	4d3f      	ldr	r5, [pc, #252]	; (80052e4 <pvPortMalloc+0x100>)
 80051e8:	4604      	mov	r4, r0
 80051ea:	f7ff f963 	bl	80044b4 <vTaskSuspendAll>
 80051ee:	68aa      	ldr	r2, [r5, #8]
 80051f0:	2a00      	cmp	r2, #0
 80051f2:	d031      	beq.n	8005258 <pvPortMalloc+0x74>
 80051f4:	68ee      	ldr	r6, [r5, #12]
 80051f6:	4234      	tst	r4, r6
 80051f8:	d14b      	bne.n	8005292 <pvPortMalloc+0xae>
 80051fa:	2c00      	cmp	r4, #0
 80051fc:	d049      	beq.n	8005292 <pvPortMalloc+0xae>
 80051fe:	f104 0308 	add.w	r3, r4, #8
 8005202:	0758      	lsls	r0, r3, #29
 8005204:	d002      	beq.n	800520c <pvPortMalloc+0x28>
 8005206:	f023 0307 	bic.w	r3, r3, #7
 800520a:	3308      	adds	r3, #8
 800520c:	2b00      	cmp	r3, #0
 800520e:	d040      	beq.n	8005292 <pvPortMalloc+0xae>
 8005210:	696f      	ldr	r7, [r5, #20]
 8005212:	429f      	cmp	r7, r3
 8005214:	d33d      	bcc.n	8005292 <pvPortMalloc+0xae>
 8005216:	682c      	ldr	r4, [r5, #0]
 8005218:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 80052e4 <pvPortMalloc+0x100>
 800521c:	e003      	b.n	8005226 <pvPortMalloc+0x42>
 800521e:	6820      	ldr	r0, [r4, #0]
 8005220:	b120      	cbz	r0, 800522c <pvPortMalloc+0x48>
 8005222:	46a4      	mov	ip, r4
 8005224:	4604      	mov	r4, r0
 8005226:	6861      	ldr	r1, [r4, #4]
 8005228:	4299      	cmp	r1, r3
 800522a:	d3f8      	bcc.n	800521e <pvPortMalloc+0x3a>
 800522c:	4294      	cmp	r4, r2
 800522e:	d030      	beq.n	8005292 <pvPortMalloc+0xae>
 8005230:	1aca      	subs	r2, r1, r3
 8005232:	6820      	ldr	r0, [r4, #0]
 8005234:	2a10      	cmp	r2, #16
 8005236:	f8cc 0000 	str.w	r0, [ip]
 800523a:	d936      	bls.n	80052aa <pvPortMalloc+0xc6>
 800523c:	18e0      	adds	r0, r4, r3
 800523e:	0741      	lsls	r1, r0, #29
 8005240:	d02e      	beq.n	80052a0 <pvPortMalloc+0xbc>
 8005242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005246:	b672      	cpsid	i
 8005248:	f383 8811 	msr	BASEPRI, r3
 800524c:	f3bf 8f6f 	isb	sy
 8005250:	f3bf 8f4f 	dsb	sy
 8005254:	b662      	cpsie	i
 8005256:	e7fe      	b.n	8005256 <pvPortMalloc+0x72>
 8005258:	4b23      	ldr	r3, [pc, #140]	; (80052e8 <pvPortMalloc+0x104>)
 800525a:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800525e:	4a23      	ldr	r2, [pc, #140]	; (80052ec <pvPortMalloc+0x108>)
 8005260:	2000      	movs	r0, #0
 8005262:	075e      	lsls	r6, r3, #29
 8005264:	463e      	mov	r6, r7
 8005266:	f022 0207 	bic.w	r2, r2, #7
 800526a:	6068      	str	r0, [r5, #4]
 800526c:	bf18      	it	ne
 800526e:	3307      	addne	r3, #7
 8005270:	60ef      	str	r7, [r5, #12]
 8005272:	6050      	str	r0, [r2, #4]
 8005274:	bf18      	it	ne
 8005276:	f023 0307 	bicne.w	r3, r3, #7
 800527a:	4234      	tst	r4, r6
 800527c:	60aa      	str	r2, [r5, #8]
 800527e:	602b      	str	r3, [r5, #0]
 8005280:	4619      	mov	r1, r3
 8005282:	eba2 0303 	sub.w	r3, r2, r3
 8005286:	6010      	str	r0, [r2, #0]
 8005288:	e9c5 3304 	strd	r3, r3, [r5, #16]
 800528c:	e9c1 2300 	strd	r2, r3, [r1]
 8005290:	d0b3      	beq.n	80051fa <pvPortMalloc+0x16>
 8005292:	f7ff f9c1 	bl	8004618 <xTaskResumeAll>
 8005296:	2500      	movs	r5, #0
 8005298:	f005 fcfc 	bl	800ac94 <vApplicationMallocFailedHook>
 800529c:	4628      	mov	r0, r5
 800529e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052a0:	6042      	str	r2, [r0, #4]
 80052a2:	6063      	str	r3, [r4, #4]
 80052a4:	f7ff ff78 	bl	8005198 <prvInsertBlockIntoFreeList>
 80052a8:	6861      	ldr	r1, [r4, #4]
 80052aa:	1a7f      	subs	r7, r7, r1
 80052ac:	692a      	ldr	r2, [r5, #16]
 80052ae:	4331      	orrs	r1, r6
 80052b0:	2300      	movs	r3, #0
 80052b2:	4297      	cmp	r7, r2
 80052b4:	616f      	str	r7, [r5, #20]
 80052b6:	bf38      	it	cc
 80052b8:	612f      	strcc	r7, [r5, #16]
 80052ba:	f104 0508 	add.w	r5, r4, #8
 80052be:	e9c4 3100 	strd	r3, r1, [r4]
 80052c2:	f7ff f9a9 	bl	8004618 <xTaskResumeAll>
 80052c6:	2d00      	cmp	r5, #0
 80052c8:	d0e5      	beq.n	8005296 <pvPortMalloc+0xb2>
 80052ca:	076b      	lsls	r3, r5, #29
 80052cc:	d0e6      	beq.n	800529c <pvPortMalloc+0xb8>
 80052ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d2:	b672      	cpsid	i
 80052d4:	f383 8811 	msr	BASEPRI, r3
 80052d8:	f3bf 8f6f 	isb	sy
 80052dc:	f3bf 8f4f 	dsb	sy
 80052e0:	b662      	cpsie	i
 80052e2:	e7fe      	b.n	80052e2 <pvPortMalloc+0xfe>
 80052e4:	200001c8 	.word	0x200001c8
 80052e8:	200001e0 	.word	0x200001e0
 80052ec:	20003286 	.word	0x20003286

080052f0 <vPortFree>:
 80052f0:	b1f8      	cbz	r0, 8005332 <vPortFree+0x42>
 80052f2:	b538      	push	{r3, r4, r5, lr}
 80052f4:	4d19      	ldr	r5, [pc, #100]	; (800535c <vPortFree+0x6c>)
 80052f6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80052fa:	68ea      	ldr	r2, [r5, #12]
 80052fc:	4213      	tst	r3, r2
 80052fe:	d10a      	bne.n	8005316 <vPortFree+0x26>
 8005300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005304:	b672      	cpsid	i
 8005306:	f383 8811 	msr	BASEPRI, r3
 800530a:	f3bf 8f6f 	isb	sy
 800530e:	f3bf 8f4f 	dsb	sy
 8005312:	b662      	cpsie	i
 8005314:	e7fe      	b.n	8005314 <vPortFree+0x24>
 8005316:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800531a:	b159      	cbz	r1, 8005334 <vPortFree+0x44>
 800531c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005320:	b672      	cpsid	i
 8005322:	f383 8811 	msr	BASEPRI, r3
 8005326:	f3bf 8f6f 	isb	sy
 800532a:	f3bf 8f4f 	dsb	sy
 800532e:	b662      	cpsie	i
 8005330:	e7fe      	b.n	8005330 <vPortFree+0x40>
 8005332:	4770      	bx	lr
 8005334:	ea23 0302 	bic.w	r3, r3, r2
 8005338:	4604      	mov	r4, r0
 800533a:	f840 3c04 	str.w	r3, [r0, #-4]
 800533e:	f7ff f8b9 	bl	80044b4 <vTaskSuspendAll>
 8005342:	696a      	ldr	r2, [r5, #20]
 8005344:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8005348:	f1a4 0008 	sub.w	r0, r4, #8
 800534c:	4413      	add	r3, r2
 800534e:	616b      	str	r3, [r5, #20]
 8005350:	f7ff ff22 	bl	8005198 <prvInsertBlockIntoFreeList>
 8005354:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005358:	f7ff b95e 	b.w	8004618 <xTaskResumeAll>
 800535c:	200001c8 	.word	0x200001c8

08005360 <tcpip_thread>:
 8005360:	4a22      	ldr	r2, [pc, #136]	; (80053ec <tcpip_thread+0x8c>)
 8005362:	6813      	ldr	r3, [r2, #0]
 8005364:	b580      	push	{r7, lr}
 8005366:	b082      	sub	sp, #8
 8005368:	b10b      	cbz	r3, 800536e <tcpip_thread+0xe>
 800536a:	6850      	ldr	r0, [r2, #4]
 800536c:	4798      	blx	r3
 800536e:	4e20      	ldr	r6, [pc, #128]	; (80053f0 <tcpip_thread+0x90>)
 8005370:	4f20      	ldr	r7, [pc, #128]	; (80053f4 <tcpip_thread+0x94>)
 8005372:	4630      	mov	r0, r6
 8005374:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8005400 <tcpip_thread+0xa0>
 8005378:	f004 fb76 	bl	8009a68 <sys_mutex_lock>
 800537c:	4630      	mov	r0, r6
 800537e:	f004 fb79 	bl	8009a74 <sys_mutex_unlock>
 8005382:	a901      	add	r1, sp, #4
 8005384:	4638      	mov	r0, r7
 8005386:	f001 fa59 	bl	800683c <sys_timeouts_mbox_fetch>
 800538a:	4630      	mov	r0, r6
 800538c:	f004 fb6c 	bl	8009a68 <sys_mutex_lock>
 8005390:	9c01      	ldr	r4, [sp, #4]
 8005392:	b31c      	cbz	r4, 80053dc <tcpip_thread+0x7c>
 8005394:	7825      	ldrb	r5, [r4, #0]
 8005396:	2d03      	cmp	r5, #3
 8005398:	d00b      	beq.n	80053b2 <tcpip_thread+0x52>
 800539a:	2d04      	cmp	r5, #4
 800539c:	4643      	mov	r3, r8
 800539e:	f04f 029b 	mov.w	r2, #155	; 0x9b
 80053a2:	4915      	ldr	r1, [pc, #84]	; (80053f8 <tcpip_thread+0x98>)
 80053a4:	4815      	ldr	r0, [pc, #84]	; (80053fc <tcpip_thread+0x9c>)
 80053a6:	d015      	beq.n	80053d4 <tcpip_thread+0x74>
 80053a8:	2d02      	cmp	r5, #2
 80053aa:	d00a      	beq.n	80053c2 <tcpip_thread+0x62>
 80053ac:	f00a fae4 	bl	800f978 <iprintf>
 80053b0:	e7e4      	b.n	800537c <tcpip_thread+0x1c>
 80053b2:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 80053b6:	4798      	blx	r3
 80053b8:	9901      	ldr	r1, [sp, #4]
 80053ba:	2005      	movs	r0, #5
 80053bc:	f000 fb74 	bl	8005aa8 <memp_free>
 80053c0:	e7dc      	b.n	800537c <tcpip_thread+0x1c>
 80053c2:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 80053c6:	6860      	ldr	r0, [r4, #4]
 80053c8:	4798      	blx	r3
 80053ca:	9901      	ldr	r1, [sp, #4]
 80053cc:	2006      	movs	r0, #6
 80053ce:	f000 fb6b 	bl	8005aa8 <memp_free>
 80053d2:	e7d3      	b.n	800537c <tcpip_thread+0x1c>
 80053d4:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 80053d8:	4798      	blx	r3
 80053da:	e7cf      	b.n	800537c <tcpip_thread+0x1c>
 80053dc:	4643      	mov	r3, r8
 80053de:	2269      	movs	r2, #105	; 0x69
 80053e0:	4905      	ldr	r1, [pc, #20]	; (80053f8 <tcpip_thread+0x98>)
 80053e2:	4806      	ldr	r0, [pc, #24]	; (80053fc <tcpip_thread+0x9c>)
 80053e4:	f00a fac8 	bl	800f978 <iprintf>
 80053e8:	e7c8      	b.n	800537c <tcpip_thread+0x1c>
 80053ea:	bf00      	nop
 80053ec:	20003290 	.word	0x20003290
 80053f0:	20005a18 	.word	0x20005a18
 80053f4:	20003298 	.word	0x20003298
 80053f8:	08010e14 	.word	0x08010e14
 80053fc:	08010e34 	.word	0x08010e34
 8005400:	08010de4 	.word	0x08010de4

08005404 <tcpip_input>:
 8005404:	b570      	push	{r4, r5, r6, lr}
 8005406:	f891 302f 	ldrb.w	r3, [r1, #47]	; 0x2f
 800540a:	4606      	mov	r6, r0
 800540c:	460d      	mov	r5, r1
 800540e:	481c      	ldr	r0, [pc, #112]	; (8005480 <tcpip_input+0x7c>)
 8005410:	f013 0f18 	tst.w	r3, #24
 8005414:	d114      	bne.n	8005440 <tcpip_input+0x3c>
 8005416:	f004 fab9 	bl	800998c <sys_mbox_valid>
 800541a:	b1e0      	cbz	r0, 8005456 <tcpip_input+0x52>
 800541c:	2006      	movs	r0, #6
 800541e:	f000 fb11 	bl	8005a44 <memp_malloc>
 8005422:	4604      	mov	r4, r0
 8005424:	b348      	cbz	r0, 800547a <tcpip_input+0x76>
 8005426:	2202      	movs	r2, #2
 8005428:	4b16      	ldr	r3, [pc, #88]	; (8005484 <tcpip_input+0x80>)
 800542a:	6066      	str	r6, [r4, #4]
 800542c:	4621      	mov	r1, r4
 800542e:	60a5      	str	r5, [r4, #8]
 8005430:	7022      	strb	r2, [r4, #0]
 8005432:	60e3      	str	r3, [r4, #12]
 8005434:	4812      	ldr	r0, [pc, #72]	; (8005480 <tcpip_input+0x7c>)
 8005436:	f004 fa7d 	bl	8009934 <sys_mbox_trypost>
 800543a:	b9d0      	cbnz	r0, 8005472 <tcpip_input+0x6e>
 800543c:	2000      	movs	r0, #0
 800543e:	bd70      	pop	{r4, r5, r6, pc}
 8005440:	f004 faa4 	bl	800998c <sys_mbox_valid>
 8005444:	b170      	cbz	r0, 8005464 <tcpip_input+0x60>
 8005446:	2006      	movs	r0, #6
 8005448:	f000 fafc 	bl	8005a44 <memp_malloc>
 800544c:	4604      	mov	r4, r0
 800544e:	b1a0      	cbz	r0, 800547a <tcpip_input+0x76>
 8005450:	2202      	movs	r2, #2
 8005452:	4b0d      	ldr	r3, [pc, #52]	; (8005488 <tcpip_input+0x84>)
 8005454:	e7e9      	b.n	800542a <tcpip_input+0x26>
 8005456:	4b0d      	ldr	r3, [pc, #52]	; (800548c <tcpip_input+0x88>)
 8005458:	22b5      	movs	r2, #181	; 0xb5
 800545a:	490d      	ldr	r1, [pc, #52]	; (8005490 <tcpip_input+0x8c>)
 800545c:	480d      	ldr	r0, [pc, #52]	; (8005494 <tcpip_input+0x90>)
 800545e:	f00a fa8b 	bl	800f978 <iprintf>
 8005462:	e7db      	b.n	800541c <tcpip_input+0x18>
 8005464:	4b09      	ldr	r3, [pc, #36]	; (800548c <tcpip_input+0x88>)
 8005466:	22b5      	movs	r2, #181	; 0xb5
 8005468:	4909      	ldr	r1, [pc, #36]	; (8005490 <tcpip_input+0x8c>)
 800546a:	480a      	ldr	r0, [pc, #40]	; (8005494 <tcpip_input+0x90>)
 800546c:	f00a fa84 	bl	800f978 <iprintf>
 8005470:	e7e9      	b.n	8005446 <tcpip_input+0x42>
 8005472:	4621      	mov	r1, r4
 8005474:	2006      	movs	r0, #6
 8005476:	f000 fb17 	bl	8005aa8 <memp_free>
 800547a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800547e:	bd70      	pop	{r4, r5, r6, pc}
 8005480:	20003298 	.word	0x20003298
 8005484:	08008949 	.word	0x08008949
 8005488:	080097f9 	.word	0x080097f9
 800548c:	08010de4 	.word	0x08010de4
 8005490:	08010e5c 	.word	0x08010e5c
 8005494:	08010e34 	.word	0x08010e34

08005498 <tcpip_init>:
 8005498:	b530      	push	{r4, r5, lr}
 800549a:	b083      	sub	sp, #12
 800549c:	4605      	mov	r5, r0
 800549e:	460c      	mov	r4, r1
 80054a0:	f000 f876 	bl	8005590 <lwip_init>
 80054a4:	4b13      	ldr	r3, [pc, #76]	; (80054f4 <tcpip_init+0x5c>)
 80054a6:	2106      	movs	r1, #6
 80054a8:	f103 0008 	add.w	r0, r3, #8
 80054ac:	e9c3 5400 	strd	r5, r4, [r3]
 80054b0:	f004 fa2e 	bl	8009910 <sys_mbox_new>
 80054b4:	b9a8      	cbnz	r0, 80054e2 <tcpip_init+0x4a>
 80054b6:	4810      	ldr	r0, [pc, #64]	; (80054f8 <tcpip_init+0x60>)
 80054b8:	f004 fac0 	bl	8009a3c <sys_mutex_new>
 80054bc:	b130      	cbz	r0, 80054cc <tcpip_init+0x34>
 80054be:	4b0f      	ldr	r3, [pc, #60]	; (80054fc <tcpip_init+0x64>)
 80054c0:	f240 12d9 	movw	r2, #473	; 0x1d9
 80054c4:	490e      	ldr	r1, [pc, #56]	; (8005500 <tcpip_init+0x68>)
 80054c6:	480f      	ldr	r0, [pc, #60]	; (8005504 <tcpip_init+0x6c>)
 80054c8:	f00a fa56 	bl	800f978 <iprintf>
 80054cc:	2003      	movs	r0, #3
 80054ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054d2:	2200      	movs	r2, #0
 80054d4:	490c      	ldr	r1, [pc, #48]	; (8005508 <tcpip_init+0x70>)
 80054d6:	9000      	str	r0, [sp, #0]
 80054d8:	480c      	ldr	r0, [pc, #48]	; (800550c <tcpip_init+0x74>)
 80054da:	f004 facf 	bl	8009a7c <sys_thread_new>
 80054de:	b003      	add	sp, #12
 80054e0:	bd30      	pop	{r4, r5, pc}
 80054e2:	4b06      	ldr	r3, [pc, #24]	; (80054fc <tcpip_init+0x64>)
 80054e4:	f240 12d5 	movw	r2, #469	; 0x1d5
 80054e8:	4909      	ldr	r1, [pc, #36]	; (8005510 <tcpip_init+0x78>)
 80054ea:	4806      	ldr	r0, [pc, #24]	; (8005504 <tcpip_init+0x6c>)
 80054ec:	f00a fa44 	bl	800f978 <iprintf>
 80054f0:	e7e1      	b.n	80054b6 <tcpip_init+0x1e>
 80054f2:	bf00      	nop
 80054f4:	20003290 	.word	0x20003290
 80054f8:	20005a18 	.word	0x20005a18
 80054fc:	08010de4 	.word	0x08010de4
 8005500:	08010e90 	.word	0x08010e90
 8005504:	08010e34 	.word	0x08010e34
 8005508:	08005361 	.word	0x08005361
 800550c:	08010eb4 	.word	0x08010eb4
 8005510:	08010e6c 	.word	0x08010e6c

08005514 <lwip_htons>:
 8005514:	ba40      	rev16	r0, r0
 8005516:	b280      	uxth	r0, r0
 8005518:	4770      	bx	lr
 800551a:	bf00      	nop

0800551c <inet_chksum>:
 800551c:	b470      	push	{r4, r5, r6}
 800551e:	2300      	movs	r3, #0
 8005520:	b083      	sub	sp, #12
 8005522:	f000 0601 	and.w	r6, r0, #1
 8005526:	f8ad 3006 	strh.w	r3, [sp, #6]
 800552a:	b129      	cbz	r1, 8005538 <inet_chksum+0x1c>
 800552c:	b126      	cbz	r6, 8005538 <inet_chksum+0x1c>
 800552e:	7803      	ldrb	r3, [r0, #0]
 8005530:	3901      	subs	r1, #1
 8005532:	3001      	adds	r0, #1
 8005534:	f88d 3007 	strb.w	r3, [sp, #7]
 8005538:	2901      	cmp	r1, #1
 800553a:	dd27      	ble.n	800558c <inet_chksum+0x70>
 800553c:	3902      	subs	r1, #2
 800553e:	2300      	movs	r3, #0
 8005540:	084d      	lsrs	r5, r1, #1
 8005542:	1c6c      	adds	r4, r5, #1
 8005544:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8005548:	f830 2b02 	ldrh.w	r2, [r0], #2
 800554c:	42a0      	cmp	r0, r4
 800554e:	4413      	add	r3, r2
 8005550:	d1fa      	bne.n	8005548 <inet_chksum+0x2c>
 8005552:	ebc5 75c5 	rsb	r5, r5, r5, lsl #31
 8005556:	eb01 0145 	add.w	r1, r1, r5, lsl #1
 800555a:	2901      	cmp	r1, #1
 800555c:	d102      	bne.n	8005564 <inet_chksum+0x48>
 800555e:	7802      	ldrb	r2, [r0, #0]
 8005560:	f88d 2006 	strb.w	r2, [sp, #6]
 8005564:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8005568:	4403      	add	r3, r0
 800556a:	b298      	uxth	r0, r3
 800556c:	eb00 4313 	add.w	r3, r0, r3, lsr #16
 8005570:	b298      	uxth	r0, r3
 8005572:	eb00 4013 	add.w	r0, r0, r3, lsr #16
 8005576:	b126      	cbz	r6, 8005582 <inet_chksum+0x66>
 8005578:	0203      	lsls	r3, r0, #8
 800557a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800557e:	b29b      	uxth	r3, r3
 8005580:	4318      	orrs	r0, r3
 8005582:	43c0      	mvns	r0, r0
 8005584:	b280      	uxth	r0, r0
 8005586:	b003      	add	sp, #12
 8005588:	bc70      	pop	{r4, r5, r6}
 800558a:	4770      	bx	lr
 800558c:	2300      	movs	r3, #0
 800558e:	e7e4      	b.n	800555a <inet_chksum+0x3e>

08005590 <lwip_init>:
 8005590:	b508      	push	{r3, lr}
 8005592:	f004 fa47 	bl	8009a24 <sys_init>
 8005596:	f000 f80d 	bl	80055b4 <mem_init>
 800559a:	f000 fa29 	bl	80059f0 <memp_init>
 800559e:	f000 fab1 	bl	8005b04 <netif_init>
 80055a2:	f001 f9a1 	bl	80068e8 <udp_init>
 80055a6:	f002 ff57 	bl	8008458 <igmp_init>
 80055aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80055ae:	f001 b8cd 	b.w	800674c <sys_timeouts_init>
 80055b2:	bf00      	nop

080055b4 <mem_init>:
 80055b4:	4b11      	ldr	r3, [pc, #68]	; (80055fc <mem_init+0x48>)
 80055b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80055ba:	4a11      	ldr	r2, [pc, #68]	; (8005600 <mem_init+0x4c>)
 80055bc:	f023 0303 	bic.w	r3, r3, #3
 80055c0:	f102 000c 	add.w	r0, r2, #12
 80055c4:	b570      	push	{r4, r5, r6, lr}
 80055c6:	2600      	movs	r6, #0
 80055c8:	2501      	movs	r5, #1
 80055ca:	f04f 2404 	mov.w	r4, #67109888	; 0x4000400
 80055ce:	6019      	str	r1, [r3, #0]
 80055d0:	1859      	adds	r1, r3, r1
 80055d2:	711e      	strb	r6, [r3, #4]
 80055d4:	f883 5404 	strb.w	r5, [r3, #1028]	; 0x404
 80055d8:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
 80055dc:	6093      	str	r3, [r2, #8]
 80055de:	e9c2 3100 	strd	r3, r1, [r2]
 80055e2:	f004 fa2b 	bl	8009a3c <sys_mutex_new>
 80055e6:	b900      	cbnz	r0, 80055ea <mem_init+0x36>
 80055e8:	bd70      	pop	{r4, r5, r6, pc}
 80055ea:	4b06      	ldr	r3, [pc, #24]	; (8005604 <mem_init+0x50>)
 80055ec:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80055f0:	4905      	ldr	r1, [pc, #20]	; (8005608 <mem_init+0x54>)
 80055f2:	4806      	ldr	r0, [pc, #24]	; (800560c <mem_init+0x58>)
 80055f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80055f8:	f00a b9be 	b.w	800f978 <iprintf>
 80055fc:	20005a37 	.word	0x20005a37
 8005600:	2000329c 	.word	0x2000329c
 8005604:	08010ec4 	.word	0x08010ec4
 8005608:	08010ef4 	.word	0x08010ef4
 800560c:	08010e34 	.word	0x08010e34

08005610 <mem_free>:
 8005610:	2800      	cmp	r0, #0
 8005612:	d06d      	beq.n	80056f0 <mem_free+0xe0>
 8005614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005616:	0783      	lsls	r3, r0, #30
 8005618:	4604      	mov	r4, r0
 800561a:	d15d      	bne.n	80056d8 <mem_free+0xc8>
 800561c:	4d4c      	ldr	r5, [pc, #304]	; (8005750 <mem_free+0x140>)
 800561e:	682b      	ldr	r3, [r5, #0]
 8005620:	42a3      	cmp	r3, r4
 8005622:	d846      	bhi.n	80056b2 <mem_free+0xa2>
 8005624:	686b      	ldr	r3, [r5, #4]
 8005626:	42a3      	cmp	r3, r4
 8005628:	d943      	bls.n	80056b2 <mem_free+0xa2>
 800562a:	484a      	ldr	r0, [pc, #296]	; (8005754 <mem_free+0x144>)
 800562c:	f1a4 0608 	sub.w	r6, r4, #8
 8005630:	f004 fa1a 	bl	8009a68 <sys_mutex_lock>
 8005634:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d05a      	beq.n	80056f2 <mem_free+0xe2>
 800563c:	68ab      	ldr	r3, [r5, #8]
 800563e:	2200      	movs	r2, #0
 8005640:	42b3      	cmp	r3, r6
 8005642:	682b      	ldr	r3, [r5, #0]
 8005644:	f804 2c04 	strb.w	r2, [r4, #-4]
 8005648:	bf88      	it	hi
 800564a:	60ae      	strhi	r6, [r5, #8]
 800564c:	429e      	cmp	r6, r3
 800564e:	d362      	bcc.n	8005716 <mem_free+0x106>
 8005650:	686b      	ldr	r3, [r5, #4]
 8005652:	429e      	cmp	r6, r3
 8005654:	d269      	bcs.n	800572a <mem_free+0x11a>
 8005656:	f834 2c08 	ldrh.w	r2, [r4, #-8]
 800565a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800565e:	d850      	bhi.n	8005702 <mem_free+0xf2>
 8005660:	682b      	ldr	r3, [r5, #0]
 8005662:	1899      	adds	r1, r3, r2
 8005664:	428e      	cmp	r6, r1
 8005666:	d00f      	beq.n	8005688 <mem_free+0x78>
 8005668:	7908      	ldrb	r0, [r1, #4]
 800566a:	b968      	cbnz	r0, 8005688 <mem_free+0x78>
 800566c:	6868      	ldr	r0, [r5, #4]
 800566e:	4281      	cmp	r1, r0
 8005670:	d00a      	beq.n	8005688 <mem_free+0x78>
 8005672:	68aa      	ldr	r2, [r5, #8]
 8005674:	1af0      	subs	r0, r6, r3
 8005676:	4291      	cmp	r1, r2
 8005678:	880a      	ldrh	r2, [r1, #0]
 800567a:	f824 2c08 	strh.w	r2, [r4, #-8]
 800567e:	8809      	ldrh	r1, [r1, #0]
 8005680:	bf08      	it	eq
 8005682:	60ae      	streq	r6, [r5, #8]
 8005684:	4419      	add	r1, r3
 8005686:	8048      	strh	r0, [r1, #2]
 8005688:	f834 0c06 	ldrh.w	r0, [r4, #-6]
 800568c:	1819      	adds	r1, r3, r0
 800568e:	428e      	cmp	r6, r1
 8005690:	d00a      	beq.n	80056a8 <mem_free+0x98>
 8005692:	790f      	ldrb	r7, [r1, #4]
 8005694:	b947      	cbnz	r7, 80056a8 <mem_free+0x98>
 8005696:	521a      	strh	r2, [r3, r0]
 8005698:	68af      	ldr	r7, [r5, #8]
 800569a:	f834 2c08 	ldrh.w	r2, [r4, #-8]
 800569e:	42be      	cmp	r6, r7
 80056a0:	4413      	add	r3, r2
 80056a2:	bf08      	it	eq
 80056a4:	60a9      	streq	r1, [r5, #8]
 80056a6:	8058      	strh	r0, [r3, #2]
 80056a8:	482a      	ldr	r0, [pc, #168]	; (8005754 <mem_free+0x144>)
 80056aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80056ae:	f004 b9e1 	b.w	8009a74 <sys_mutex_unlock>
 80056b2:	4b29      	ldr	r3, [pc, #164]	; (8005758 <mem_free+0x148>)
 80056b4:	f240 12af 	movw	r2, #431	; 0x1af
 80056b8:	4928      	ldr	r1, [pc, #160]	; (800575c <mem_free+0x14c>)
 80056ba:	4829      	ldr	r0, [pc, #164]	; (8005760 <mem_free+0x150>)
 80056bc:	f00a f95c 	bl	800f978 <iprintf>
 80056c0:	682b      	ldr	r3, [r5, #0]
 80056c2:	42a3      	cmp	r3, r4
 80056c4:	d802      	bhi.n	80056cc <mem_free+0xbc>
 80056c6:	686b      	ldr	r3, [r5, #4]
 80056c8:	429c      	cmp	r4, r3
 80056ca:	d3ae      	bcc.n	800562a <mem_free+0x1a>
 80056cc:	f004 f9ea 	bl	8009aa4 <sys_arch_protect>
 80056d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80056d4:	f004 b9f2 	b.w	8009abc <sys_arch_unprotect>
 80056d8:	4d1d      	ldr	r5, [pc, #116]	; (8005750 <mem_free+0x140>)
 80056da:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 80056de:	4b1e      	ldr	r3, [pc, #120]	; (8005758 <mem_free+0x148>)
 80056e0:	4920      	ldr	r1, [pc, #128]	; (8005764 <mem_free+0x154>)
 80056e2:	481f      	ldr	r0, [pc, #124]	; (8005760 <mem_free+0x150>)
 80056e4:	f00a f948 	bl	800f978 <iprintf>
 80056e8:	682b      	ldr	r3, [r5, #0]
 80056ea:	42a3      	cmp	r3, r4
 80056ec:	d99a      	bls.n	8005624 <mem_free+0x14>
 80056ee:	e7e0      	b.n	80056b2 <mem_free+0xa2>
 80056f0:	4770      	bx	lr
 80056f2:	4b19      	ldr	r3, [pc, #100]	; (8005758 <mem_free+0x148>)
 80056f4:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 80056f8:	491b      	ldr	r1, [pc, #108]	; (8005768 <mem_free+0x158>)
 80056fa:	4819      	ldr	r0, [pc, #100]	; (8005760 <mem_free+0x150>)
 80056fc:	f00a f93c 	bl	800f978 <iprintf>
 8005700:	e79c      	b.n	800563c <mem_free+0x2c>
 8005702:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8005706:	4b14      	ldr	r3, [pc, #80]	; (8005758 <mem_free+0x148>)
 8005708:	4918      	ldr	r1, [pc, #96]	; (800576c <mem_free+0x15c>)
 800570a:	4815      	ldr	r0, [pc, #84]	; (8005760 <mem_free+0x150>)
 800570c:	f00a f934 	bl	800f978 <iprintf>
 8005710:	f834 2c08 	ldrh.w	r2, [r4, #-8]
 8005714:	e7a4      	b.n	8005660 <mem_free+0x50>
 8005716:	4b10      	ldr	r3, [pc, #64]	; (8005758 <mem_free+0x148>)
 8005718:	f240 125d 	movw	r2, #349	; 0x15d
 800571c:	4914      	ldr	r1, [pc, #80]	; (8005770 <mem_free+0x160>)
 800571e:	4810      	ldr	r0, [pc, #64]	; (8005760 <mem_free+0x150>)
 8005720:	f00a f92a 	bl	800f978 <iprintf>
 8005724:	686b      	ldr	r3, [r5, #4]
 8005726:	429e      	cmp	r6, r3
 8005728:	d306      	bcc.n	8005738 <mem_free+0x128>
 800572a:	4b0b      	ldr	r3, [pc, #44]	; (8005758 <mem_free+0x148>)
 800572c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8005730:	4910      	ldr	r1, [pc, #64]	; (8005774 <mem_free+0x164>)
 8005732:	480b      	ldr	r0, [pc, #44]	; (8005760 <mem_free+0x150>)
 8005734:	f00a f920 	bl	800f978 <iprintf>
 8005738:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d08a      	beq.n	8005656 <mem_free+0x46>
 8005740:	4b05      	ldr	r3, [pc, #20]	; (8005758 <mem_free+0x148>)
 8005742:	f240 125f 	movw	r2, #351	; 0x15f
 8005746:	490c      	ldr	r1, [pc, #48]	; (8005778 <mem_free+0x168>)
 8005748:	4805      	ldr	r0, [pc, #20]	; (8005760 <mem_free+0x150>)
 800574a:	f00a f915 	bl	800f978 <iprintf>
 800574e:	e782      	b.n	8005656 <mem_free+0x46>
 8005750:	2000329c 	.word	0x2000329c
 8005754:	200032a8 	.word	0x200032a8
 8005758:	08010ec4 	.word	0x08010ec4
 800575c:	08010f34 	.word	0x08010f34
 8005760:	08010e34 	.word	0x08010e34
 8005764:	08010f10 	.word	0x08010f10
 8005768:	08010f4c 	.word	0x08010f4c
 800576c:	08010fb0 	.word	0x08010fb0
 8005770:	08010f60 	.word	0x08010f60
 8005774:	08010f78 	.word	0x08010f78
 8005778:	08010f94 	.word	0x08010f94

0800577c <mem_trim>:
 800577c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005780:	3103      	adds	r1, #3
 8005782:	f64f 74fc 	movw	r4, #65532	; 0xfffc
 8005786:	4605      	mov	r5, r0
 8005788:	400c      	ands	r4, r1
 800578a:	2c0b      	cmp	r4, #11
 800578c:	d955      	bls.n	800583a <mem_trim+0xbe>
 800578e:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8005792:	d87a      	bhi.n	800588a <mem_trim+0x10e>
 8005794:	4e3e      	ldr	r6, [pc, #248]	; (8005890 <mem_trim+0x114>)
 8005796:	6833      	ldr	r3, [r6, #0]
 8005798:	42ab      	cmp	r3, r5
 800579a:	d83a      	bhi.n	8005812 <mem_trim+0x96>
 800579c:	6872      	ldr	r2, [r6, #4]
 800579e:	42aa      	cmp	r2, r5
 80057a0:	d937      	bls.n	8005812 <mem_trim+0x96>
 80057a2:	f1a5 0708 	sub.w	r7, r5, #8
 80057a6:	f835 8c08 	ldrh.w	r8, [r5, #-8]
 80057aa:	1afb      	subs	r3, r7, r3
 80057ac:	f1a8 0808 	sub.w	r8, r8, #8
 80057b0:	b29f      	uxth	r7, r3
 80057b2:	eba8 0807 	sub.w	r8, r8, r7
 80057b6:	fa1f f888 	uxth.w	r8, r8
 80057ba:	45a0      	cmp	r8, r4
 80057bc:	d33f      	bcc.n	800583e <mem_trim+0xc2>
 80057be:	d039      	beq.n	8005834 <mem_trim+0xb8>
 80057c0:	4834      	ldr	r0, [pc, #208]	; (8005894 <mem_trim+0x118>)
 80057c2:	f004 f951 	bl	8009a68 <sys_mutex_lock>
 80057c6:	6833      	ldr	r3, [r6, #0]
 80057c8:	f835 1c08 	ldrh.w	r1, [r5, #-8]
 80057cc:	1858      	adds	r0, r3, r1
 80057ce:	7902      	ldrb	r2, [r0, #4]
 80057d0:	2a00      	cmp	r2, #0
 80057d2:	d13f      	bne.n	8005854 <mem_trim+0xd8>
 80057d4:	3408      	adds	r4, #8
 80057d6:	68b2      	ldr	r2, [r6, #8]
 80057d8:	f833 c001 	ldrh.w	ip, [r3, r1]
 80057dc:	443c      	add	r4, r7
 80057de:	4282      	cmp	r2, r0
 80057e0:	f04f 0200 	mov.w	r2, #0
 80057e4:	b2a4      	uxth	r4, r4
 80057e6:	eb03 0104 	add.w	r1, r3, r4
 80057ea:	710a      	strb	r2, [r1, #4]
 80057ec:	f823 c004 	strh.w	ip, [r3, r4]
 80057f0:	804f      	strh	r7, [r1, #2]
 80057f2:	f825 4c08 	strh.w	r4, [r5, #-8]
 80057f6:	5b1a      	ldrh	r2, [r3, r4]
 80057f8:	bf08      	it	eq
 80057fa:	60b1      	streq	r1, [r6, #8]
 80057fc:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8005800:	d001      	beq.n	8005806 <mem_trim+0x8a>
 8005802:	4413      	add	r3, r2
 8005804:	805c      	strh	r4, [r3, #2]
 8005806:	4823      	ldr	r0, [pc, #140]	; (8005894 <mem_trim+0x118>)
 8005808:	f004 f934 	bl	8009a74 <sys_mutex_unlock>
 800580c:	4628      	mov	r0, r5
 800580e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005812:	4b21      	ldr	r3, [pc, #132]	; (8005898 <mem_trim+0x11c>)
 8005814:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005818:	4920      	ldr	r1, [pc, #128]	; (800589c <mem_trim+0x120>)
 800581a:	4821      	ldr	r0, [pc, #132]	; (80058a0 <mem_trim+0x124>)
 800581c:	f00a f8ac 	bl	800f978 <iprintf>
 8005820:	6833      	ldr	r3, [r6, #0]
 8005822:	42ab      	cmp	r3, r5
 8005824:	d802      	bhi.n	800582c <mem_trim+0xb0>
 8005826:	6872      	ldr	r2, [r6, #4]
 8005828:	42aa      	cmp	r2, r5
 800582a:	d8ba      	bhi.n	80057a2 <mem_trim+0x26>
 800582c:	f004 f93a 	bl	8009aa4 <sys_arch_protect>
 8005830:	f004 f944 	bl	8009abc <sys_arch_unprotect>
 8005834:	4628      	mov	r0, r5
 8005836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800583a:	240c      	movs	r4, #12
 800583c:	e7aa      	b.n	8005794 <mem_trim+0x18>
 800583e:	2500      	movs	r5, #0
 8005840:	4b15      	ldr	r3, [pc, #84]	; (8005898 <mem_trim+0x11c>)
 8005842:	f240 2206 	movw	r2, #518	; 0x206
 8005846:	4917      	ldr	r1, [pc, #92]	; (80058a4 <mem_trim+0x128>)
 8005848:	4815      	ldr	r0, [pc, #84]	; (80058a0 <mem_trim+0x124>)
 800584a:	f00a f895 	bl	800f978 <iprintf>
 800584e:	4628      	mov	r0, r5
 8005850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005854:	f104 0214 	add.w	r2, r4, #20
 8005858:	4542      	cmp	r2, r8
 800585a:	d8d4      	bhi.n	8005806 <mem_trim+0x8a>
 800585c:	f104 0208 	add.w	r2, r4, #8
 8005860:	68b0      	ldr	r0, [r6, #8]
 8005862:	443a      	add	r2, r7
 8005864:	b292      	uxth	r2, r2
 8005866:	189c      	adds	r4, r3, r2
 8005868:	42a0      	cmp	r0, r4
 800586a:	f04f 0000 	mov.w	r0, #0
 800586e:	7120      	strb	r0, [r4, #4]
 8005870:	5299      	strh	r1, [r3, r2]
 8005872:	8067      	strh	r7, [r4, #2]
 8005874:	f825 2c08 	strh.w	r2, [r5, #-8]
 8005878:	5a99      	ldrh	r1, [r3, r2]
 800587a:	bf88      	it	hi
 800587c:	60b4      	strhi	r4, [r6, #8]
 800587e:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005882:	d0c0      	beq.n	8005806 <mem_trim+0x8a>
 8005884:	440b      	add	r3, r1
 8005886:	805a      	strh	r2, [r3, #2]
 8005888:	e7bd      	b.n	8005806 <mem_trim+0x8a>
 800588a:	2500      	movs	r5, #0
 800588c:	e7d2      	b.n	8005834 <mem_trim+0xb8>
 800588e:	bf00      	nop
 8005890:	2000329c 	.word	0x2000329c
 8005894:	200032a8 	.word	0x200032a8
 8005898:	08010ec4 	.word	0x08010ec4
 800589c:	08010fdc 	.word	0x08010fdc
 80058a0:	08010e34 	.word	0x08010e34
 80058a4:	08010ff4 	.word	0x08010ff4

080058a8 <mem_malloc>:
 80058a8:	2800      	cmp	r0, #0
 80058aa:	d073      	beq.n	8005994 <mem_malloc+0xec>
 80058ac:	3003      	adds	r0, #3
 80058ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058b2:	f64f 77fc 	movw	r7, #65532	; 0xfffc
 80058b6:	4007      	ands	r7, r0
 80058b8:	2f0b      	cmp	r7, #11
 80058ba:	d92c      	bls.n	8005916 <mem_malloc+0x6e>
 80058bc:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 80058c0:	f200 8081 	bhi.w	80059c6 <mem_malloc+0x11e>
 80058c4:	46b8      	mov	r8, r7
 80058c6:	f5c7 6680 	rsb	r6, r7, #1024	; 0x400
 80058ca:	f8df 9120 	ldr.w	r9, [pc, #288]	; 80059ec <mem_malloc+0x144>
 80058ce:	f109 000c 	add.w	r0, r9, #12
 80058d2:	f004 f8c9 	bl	8009a68 <sys_mutex_lock>
 80058d6:	f8d9 a008 	ldr.w	sl, [r9, #8]
 80058da:	f8d9 0000 	ldr.w	r0, [r9]
 80058de:	ebaa 0c00 	sub.w	ip, sl, r0
 80058e2:	fa1f f38c 	uxth.w	r3, ip
 80058e6:	42b3      	cmp	r3, r6
 80058e8:	469c      	mov	ip, r3
 80058ea:	d20e      	bcs.n	800590a <mem_malloc+0x62>
 80058ec:	f06f 0e07 	mvn.w	lr, #7
 80058f0:	18c4      	adds	r4, r0, r3
 80058f2:	ebae 0203 	sub.w	r2, lr, r3
 80058f6:	5ac1      	ldrh	r1, [r0, r3]
 80058f8:	7925      	ldrb	r5, [r4, #4]
 80058fa:	460b      	mov	r3, r1
 80058fc:	440a      	add	r2, r1
 80058fe:	b90d      	cbnz	r5, 8005904 <mem_malloc+0x5c>
 8005900:	4542      	cmp	r2, r8
 8005902:	d20e      	bcs.n	8005922 <mem_malloc+0x7a>
 8005904:	429e      	cmp	r6, r3
 8005906:	469c      	mov	ip, r3
 8005908:	d8f2      	bhi.n	80058f0 <mem_malloc+0x48>
 800590a:	4832      	ldr	r0, [pc, #200]	; (80059d4 <mem_malloc+0x12c>)
 800590c:	f004 f8b2 	bl	8009a74 <sys_mutex_unlock>
 8005910:	2000      	movs	r0, #0
 8005912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005916:	f04f 080c 	mov.w	r8, #12
 800591a:	f44f 767d 	mov.w	r6, #1012	; 0x3f4
 800591e:	4647      	mov	r7, r8
 8005920:	e7d3      	b.n	80058ca <mem_malloc+0x22>
 8005922:	f108 0314 	add.w	r3, r8, #20
 8005926:	429a      	cmp	r2, r3
 8005928:	d221      	bcs.n	800596e <mem_malloc+0xc6>
 800592a:	2301      	movs	r3, #1
 800592c:	7123      	strb	r3, [r4, #4]
 800592e:	45a2      	cmp	sl, r4
 8005930:	d039      	beq.n	80059a6 <mem_malloc+0xfe>
 8005932:	f108 0808 	add.w	r8, r8, #8
 8005936:	4827      	ldr	r0, [pc, #156]	; (80059d4 <mem_malloc+0x12c>)
 8005938:	f004 f89c 	bl	8009a74 <sys_mutex_unlock>
 800593c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8005940:	44a0      	add	r8, r4
 8005942:	4543      	cmp	r3, r8
 8005944:	d327      	bcc.n	8005996 <mem_malloc+0xee>
 8005946:	07a3      	lsls	r3, r4, #30
 8005948:	d00d      	beq.n	8005966 <mem_malloc+0xbe>
 800594a:	4b23      	ldr	r3, [pc, #140]	; (80059d8 <mem_malloc+0x130>)
 800594c:	f240 22d6 	movw	r2, #726	; 0x2d6
 8005950:	4922      	ldr	r1, [pc, #136]	; (80059dc <mem_malloc+0x134>)
 8005952:	4823      	ldr	r0, [pc, #140]	; (80059e0 <mem_malloc+0x138>)
 8005954:	f00a f810 	bl	800f978 <iprintf>
 8005958:	4b1f      	ldr	r3, [pc, #124]	; (80059d8 <mem_malloc+0x130>)
 800595a:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 800595e:	4921      	ldr	r1, [pc, #132]	; (80059e4 <mem_malloc+0x13c>)
 8005960:	481f      	ldr	r0, [pc, #124]	; (80059e0 <mem_malloc+0x138>)
 8005962:	f00a f809 	bl	800f978 <iprintf>
 8005966:	f104 0008 	add.w	r0, r4, #8
 800596a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800596e:	f107 0308 	add.w	r3, r7, #8
 8005972:	2601      	movs	r6, #1
 8005974:	4463      	add	r3, ip
 8005976:	b29b      	uxth	r3, r3
 8005978:	18c2      	adds	r2, r0, r3
 800597a:	7115      	strb	r5, [r2, #4]
 800597c:	52c1      	strh	r1, [r0, r3]
 800597e:	f8a2 c002 	strh.w	ip, [r2, #2]
 8005982:	8023      	strh	r3, [r4, #0]
 8005984:	7126      	strb	r6, [r4, #4]
 8005986:	5ac2      	ldrh	r2, [r0, r3]
 8005988:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800598c:	d0cf      	beq.n	800592e <mem_malloc+0x86>
 800598e:	4402      	add	r2, r0
 8005990:	8053      	strh	r3, [r2, #2]
 8005992:	e7cc      	b.n	800592e <mem_malloc+0x86>
 8005994:	4770      	bx	lr
 8005996:	4b10      	ldr	r3, [pc, #64]	; (80059d8 <mem_malloc+0x130>)
 8005998:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800599c:	4912      	ldr	r1, [pc, #72]	; (80059e8 <mem_malloc+0x140>)
 800599e:	4810      	ldr	r0, [pc, #64]	; (80059e0 <mem_malloc+0x138>)
 80059a0:	f009 ffea 	bl	800f978 <iprintf>
 80059a4:	e7cf      	b.n	8005946 <mem_malloc+0x9e>
 80059a6:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80059aa:	42a1      	cmp	r1, r4
 80059ac:	d00d      	beq.n	80059ca <mem_malloc+0x122>
 80059ae:	4623      	mov	r3, r4
 80059b0:	e001      	b.n	80059b6 <mem_malloc+0x10e>
 80059b2:	4299      	cmp	r1, r3
 80059b4:	d00a      	beq.n	80059cc <mem_malloc+0x124>
 80059b6:	881b      	ldrh	r3, [r3, #0]
 80059b8:	4403      	add	r3, r0
 80059ba:	791a      	ldrb	r2, [r3, #4]
 80059bc:	2a00      	cmp	r2, #0
 80059be:	d1f8      	bne.n	80059b2 <mem_malloc+0x10a>
 80059c0:	f8c9 3008 	str.w	r3, [r9, #8]
 80059c4:	e7b5      	b.n	8005932 <mem_malloc+0x8a>
 80059c6:	2000      	movs	r0, #0
 80059c8:	e7a3      	b.n	8005912 <mem_malloc+0x6a>
 80059ca:	4621      	mov	r1, r4
 80059cc:	f8c9 1008 	str.w	r1, [r9, #8]
 80059d0:	e7af      	b.n	8005932 <mem_malloc+0x8a>
 80059d2:	bf00      	nop
 80059d4:	200032a8 	.word	0x200032a8
 80059d8:	08010ec4 	.word	0x08010ec4
 80059dc:	08011044 	.word	0x08011044
 80059e0:	08010e34 	.word	0x08010e34
 80059e4:	08011074 	.word	0x08011074
 80059e8:	08011014 	.word	0x08011014
 80059ec:	2000329c 	.word	0x2000329c

080059f0 <memp_init>:
 80059f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059f2:	4f11      	ldr	r7, [pc, #68]	; (8005a38 <memp_init+0x48>)
 80059f4:	2508      	movs	r5, #8
 80059f6:	4b11      	ldr	r3, [pc, #68]	; (8005a3c <memp_init+0x4c>)
 80059f8:	f04f 0e00 	mov.w	lr, #0
 80059fc:	f107 0c2c 	add.w	ip, r7, #44	; 0x2c
 8005a00:	4c0f      	ldr	r4, [pc, #60]	; (8005a40 <memp_init+0x50>)
 8005a02:	3303      	adds	r3, #3
 8005a04:	f857 2b04 	ldr.w	r2, [r7], #4
 8005a08:	f8c4 e000 	str.w	lr, [r4]
 8005a0c:	f023 0303 	bic.w	r3, r3, #3
 8005a10:	b155      	cbz	r5, 8005a28 <memp_init+0x38>
 8005a12:	2100      	movs	r1, #0
 8005a14:	8816      	ldrh	r6, [r2, #0]
 8005a16:	460a      	mov	r2, r1
 8005a18:	3201      	adds	r2, #1
 8005a1a:	1998      	adds	r0, r3, r6
 8005a1c:	6019      	str	r1, [r3, #0]
 8005a1e:	4619      	mov	r1, r3
 8005a20:	42aa      	cmp	r2, r5
 8005a22:	6023      	str	r3, [r4, #0]
 8005a24:	4603      	mov	r3, r0
 8005a26:	d1f7      	bne.n	8005a18 <memp_init+0x28>
 8005a28:	45bc      	cmp	ip, r7
 8005a2a:	d004      	beq.n	8005a36 <memp_init+0x46>
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	885d      	ldrh	r5, [r3, #2]
 8005a30:	e9d3 3401 	ldrd	r3, r4, [r3, #4]
 8005a34:	e7e5      	b.n	8005a02 <memp_init+0x12>
 8005a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a38:	08010c48 	.word	0x08010c48
 8005a3c:	2000830c 	.word	0x2000830c
 8005a40:	200032ac 	.word	0x200032ac

08005a44 <memp_malloc>:
 8005a44:	280a      	cmp	r0, #10
 8005a46:	b538      	push	{r3, r4, r5, lr}
 8005a48:	d818      	bhi.n	8005a7c <memp_malloc+0x38>
 8005a4a:	4b12      	ldr	r3, [pc, #72]	; (8005a94 <memp_malloc+0x50>)
 8005a4c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8005a50:	f004 f828 	bl	8009aa4 <sys_arch_protect>
 8005a54:	4605      	mov	r5, r0
 8005a56:	68a3      	ldr	r3, [r4, #8]
 8005a58:	681c      	ldr	r4, [r3, #0]
 8005a5a:	b1c4      	cbz	r4, 8005a8e <memp_malloc+0x4a>
 8005a5c:	6822      	ldr	r2, [r4, #0]
 8005a5e:	601a      	str	r2, [r3, #0]
 8005a60:	07a3      	lsls	r3, r4, #30
 8005a62:	d006      	beq.n	8005a72 <memp_malloc+0x2e>
 8005a64:	4b0c      	ldr	r3, [pc, #48]	; (8005a98 <memp_malloc+0x54>)
 8005a66:	f240 1249 	movw	r2, #329	; 0x149
 8005a6a:	490c      	ldr	r1, [pc, #48]	; (8005a9c <memp_malloc+0x58>)
 8005a6c:	480c      	ldr	r0, [pc, #48]	; (8005aa0 <memp_malloc+0x5c>)
 8005a6e:	f009 ff83 	bl	800f978 <iprintf>
 8005a72:	4628      	mov	r0, r5
 8005a74:	f004 f822 	bl	8009abc <sys_arch_unprotect>
 8005a78:	4620      	mov	r0, r4
 8005a7a:	bd38      	pop	{r3, r4, r5, pc}
 8005a7c:	4b06      	ldr	r3, [pc, #24]	; (8005a98 <memp_malloc+0x54>)
 8005a7e:	f240 1287 	movw	r2, #391	; 0x187
 8005a82:	4908      	ldr	r1, [pc, #32]	; (8005aa4 <memp_malloc+0x60>)
 8005a84:	2400      	movs	r4, #0
 8005a86:	4806      	ldr	r0, [pc, #24]	; (8005aa0 <memp_malloc+0x5c>)
 8005a88:	f009 ff76 	bl	800f978 <iprintf>
 8005a8c:	e7f4      	b.n	8005a78 <memp_malloc+0x34>
 8005a8e:	f004 f815 	bl	8009abc <sys_arch_unprotect>
 8005a92:	e7f1      	b.n	8005a78 <memp_malloc+0x34>
 8005a94:	08010c48 	.word	0x08010c48
 8005a98:	08011098 	.word	0x08011098
 8005a9c:	080110dc 	.word	0x080110dc
 8005aa0:	08010e34 	.word	0x08010e34
 8005aa4:	08011100 	.word	0x08011100

08005aa8 <memp_free>:
 8005aa8:	280a      	cmp	r0, #10
 8005aaa:	d819      	bhi.n	8005ae0 <memp_free+0x38>
 8005aac:	b1b9      	cbz	r1, 8005ade <memp_free+0x36>
 8005aae:	4b10      	ldr	r3, [pc, #64]	; (8005af0 <memp_free+0x48>)
 8005ab0:	b570      	push	{r4, r5, r6, lr}
 8005ab2:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8005ab6:	078b      	lsls	r3, r1, #30
 8005ab8:	460c      	mov	r4, r1
 8005aba:	d006      	beq.n	8005aca <memp_free+0x22>
 8005abc:	4b0d      	ldr	r3, [pc, #52]	; (8005af4 <memp_free+0x4c>)
 8005abe:	f240 129d 	movw	r2, #413	; 0x19d
 8005ac2:	490d      	ldr	r1, [pc, #52]	; (8005af8 <memp_free+0x50>)
 8005ac4:	480d      	ldr	r0, [pc, #52]	; (8005afc <memp_free+0x54>)
 8005ac6:	f009 ff57 	bl	800f978 <iprintf>
 8005aca:	f003 ffeb 	bl	8009aa4 <sys_arch_protect>
 8005ace:	68ab      	ldr	r3, [r5, #8]
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	6022      	str	r2, [r4, #0]
 8005ad4:	601c      	str	r4, [r3, #0]
 8005ad6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005ada:	f003 bfef 	b.w	8009abc <sys_arch_unprotect>
 8005ade:	4770      	bx	lr
 8005ae0:	4b04      	ldr	r3, [pc, #16]	; (8005af4 <memp_free+0x4c>)
 8005ae2:	f240 12db 	movw	r2, #475	; 0x1db
 8005ae6:	4906      	ldr	r1, [pc, #24]	; (8005b00 <memp_free+0x58>)
 8005ae8:	4804      	ldr	r0, [pc, #16]	; (8005afc <memp_free+0x54>)
 8005aea:	f009 bf45 	b.w	800f978 <iprintf>
 8005aee:	bf00      	nop
 8005af0:	08010c48 	.word	0x08010c48
 8005af4:	08011098 	.word	0x08011098
 8005af8:	08011120 	.word	0x08011120
 8005afc:	08010e34 	.word	0x08010e34
 8005b00:	08011140 	.word	0x08011140

08005b04 <netif_init>:
 8005b04:	4770      	bx	lr
 8005b06:	bf00      	nop

08005b08 <netif_add>:
 8005b08:	e92d 44f0 	stmdb	sp!, {r4, r5, r6, r7, sl, lr}
 8005b0c:	b082      	sub	sp, #8
 8005b0e:	4604      	mov	r4, r0
 8005b10:	460e      	mov	r6, r1
 8005b12:	4617      	mov	r7, r2
 8005b14:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8005b18:	461d      	mov	r5, r3
 8005b1a:	f1ba 0f00 	cmp.w	sl, #0
 8005b1e:	d058      	beq.n	8005bd2 <netif_add+0xca>
 8005b20:	4934      	ldr	r1, [pc, #208]	; (8005bf4 <netif_add+0xec>)
 8005b22:	2300      	movs	r3, #0
 8005b24:	9a08      	ldr	r2, [sp, #32]
 8005b26:	f04f 0c03 	mov.w	ip, #3
 8005b2a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005b2c:	61e2      	str	r2, [r4, #28]
 8005b2e:	780a      	ldrb	r2, [r1, #0]
 8005b30:	6120      	str	r0, [r4, #16]
 8005b32:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
 8005b36:	3201      	adds	r2, #1
 8005b38:	6063      	str	r3, [r4, #4]
 8005b3a:	700a      	strb	r2, [r1, #0]
 8005b3c:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
 8005b40:	6223      	str	r3, [r4, #32]
 8005b42:	6363      	str	r3, [r4, #52]	; 0x34
 8005b44:	f884 c024 	strb.w	ip, [r4, #36]	; 0x24
 8005b48:	e9c4 3302 	strd	r3, r3, [r4, #8]
 8005b4c:	2e00      	cmp	r6, #0
 8005b4e:	d035      	beq.n	8005bbc <netif_add+0xb4>
 8005b50:	6833      	ldr	r3, [r6, #0]
 8005b52:	b1d3      	cbz	r3, 8005b8a <netif_add+0x82>
 8005b54:	b107      	cbz	r7, 8005b58 <netif_add+0x50>
 8005b56:	683f      	ldr	r7, [r7, #0]
 8005b58:	60a7      	str	r7, [r4, #8]
 8005b5a:	b105      	cbz	r5, 8005b5e <netif_add+0x56>
 8005b5c:	682d      	ldr	r5, [r5, #0]
 8005b5e:	60e5      	str	r5, [r4, #12]
 8005b60:	6833      	ldr	r3, [r6, #0]
 8005b62:	9301      	str	r3, [sp, #4]
 8005b64:	b1c3      	cbz	r3, 8005b98 <netif_add+0x90>
 8005b66:	1d25      	adds	r5, r4, #4
 8005b68:	a901      	add	r1, sp, #4
 8005b6a:	4628      	mov	r0, r5
 8005b6c:	f001 f940 	bl	8006df0 <udp_netif_ip_addr_changed>
 8005b70:	6833      	ldr	r3, [r6, #0]
 8005b72:	6063      	str	r3, [r4, #4]
 8005b74:	b183      	cbz	r3, 8005b98 <netif_add+0x90>
 8005b76:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8005b7a:	0719      	lsls	r1, r3, #28
 8005b7c:	d432      	bmi.n	8005be4 <netif_add+0xdc>
 8005b7e:	069a      	lsls	r2, r3, #26
 8005b80:	d50a      	bpl.n	8005b98 <netif_add+0x90>
 8005b82:	4620      	mov	r0, r4
 8005b84:	f002 fcc2 	bl	800850c <igmp_report_groups>
 8005b88:	e006      	b.n	8005b98 <netif_add+0x90>
 8005b8a:	9301      	str	r3, [sp, #4]
 8005b8c:	b107      	cbz	r7, 8005b90 <netif_add+0x88>
 8005b8e:	683f      	ldr	r7, [r7, #0]
 8005b90:	60a7      	str	r7, [r4, #8]
 8005b92:	b105      	cbz	r5, 8005b96 <netif_add+0x8e>
 8005b94:	682d      	ldr	r5, [r5, #0]
 8005b96:	60e5      	str	r5, [r4, #12]
 8005b98:	4620      	mov	r0, r4
 8005b9a:	47d0      	blx	sl
 8005b9c:	bb00      	cbnz	r0, 8005be0 <netif_add+0xd8>
 8005b9e:	4b16      	ldr	r3, [pc, #88]	; (8005bf8 <netif_add+0xf0>)
 8005ba0:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
 8005ba4:	6819      	ldr	r1, [r3, #0]
 8005ba6:	6021      	str	r1, [r4, #0]
 8005ba8:	601c      	str	r4, [r3, #0]
 8005baa:	0693      	lsls	r3, r2, #26
 8005bac:	d502      	bpl.n	8005bb4 <netif_add+0xac>
 8005bae:	4620      	mov	r0, r4
 8005bb0:	f002 fc5e 	bl	8008470 <igmp_start>
 8005bb4:	4620      	mov	r0, r4
 8005bb6:	b002      	add	sp, #8
 8005bb8:	e8bd 84f0 	ldmia.w	sp!, {r4, r5, r6, r7, sl, pc}
 8005bbc:	4b0f      	ldr	r3, [pc, #60]	; (8005bfc <netif_add+0xf4>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	9301      	str	r3, [sp, #4]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d0e2      	beq.n	8005b8c <netif_add+0x84>
 8005bc6:	a901      	add	r1, sp, #4
 8005bc8:	1d20      	adds	r0, r4, #4
 8005bca:	f001 f911 	bl	8006df0 <udp_netif_ip_addr_changed>
 8005bce:	6066      	str	r6, [r4, #4]
 8005bd0:	e7dc      	b.n	8005b8c <netif_add+0x84>
 8005bd2:	4b0b      	ldr	r3, [pc, #44]	; (8005c00 <netif_add+0xf8>)
 8005bd4:	22fb      	movs	r2, #251	; 0xfb
 8005bd6:	490b      	ldr	r1, [pc, #44]	; (8005c04 <netif_add+0xfc>)
 8005bd8:	480b      	ldr	r0, [pc, #44]	; (8005c08 <netif_add+0x100>)
 8005bda:	f009 fecd 	bl	800f978 <iprintf>
 8005bde:	e79f      	b.n	8005b20 <netif_add+0x18>
 8005be0:	2400      	movs	r4, #0
 8005be2:	e7e7      	b.n	8005bb4 <netif_add+0xac>
 8005be4:	4629      	mov	r1, r5
 8005be6:	4620      	mov	r0, r4
 8005be8:	f002 fa1e 	bl	8008028 <etharp_request>
 8005bec:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8005bf0:	e7c5      	b.n	8005b7e <netif_add+0x76>
 8005bf2:	bf00      	nop
 8005bf4:	200032d8 	.word	0x200032d8
 8005bf8:	200085fc 	.word	0x200085fc
 8005bfc:	08010d14 	.word	0x08010d14
 8005c00:	0801115c 	.word	0x0801115c
 8005c04:	08011190 	.word	0x08011190
 8005c08:	08010e34 	.word	0x08010e34

08005c0c <netif_set_default>:
 8005c0c:	4b01      	ldr	r3, [pc, #4]	; (8005c14 <netif_set_default+0x8>)
 8005c0e:	6018      	str	r0, [r3, #0]
 8005c10:	4770      	bx	lr
 8005c12:	bf00      	nop
 8005c14:	20008600 	.word	0x20008600

08005c18 <netif_set_up>:
 8005c18:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 8005c1c:	07d9      	lsls	r1, r3, #31
 8005c1e:	d40a      	bmi.n	8005c36 <netif_set_up+0x1e>
 8005c20:	f043 0101 	orr.w	r1, r3, #1
 8005c24:	075a      	lsls	r2, r3, #29
 8005c26:	b510      	push	{r4, lr}
 8005c28:	4604      	mov	r4, r0
 8005c2a:	f880 102f 	strb.w	r1, [r0, #47]	; 0x2f
 8005c2e:	d501      	bpl.n	8005c34 <netif_set_up+0x1c>
 8005c30:	6842      	ldr	r2, [r0, #4]
 8005c32:	b90a      	cbnz	r2, 8005c38 <netif_set_up+0x20>
 8005c34:	bd10      	pop	{r4, pc}
 8005c36:	4770      	bx	lr
 8005c38:	071a      	lsls	r2, r3, #28
 8005c3a:	d406      	bmi.n	8005c4a <netif_set_up+0x32>
 8005c3c:	068b      	lsls	r3, r1, #26
 8005c3e:	d5f9      	bpl.n	8005c34 <netif_set_up+0x1c>
 8005c40:	4620      	mov	r0, r4
 8005c42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c46:	f002 bc61 	b.w	800850c <igmp_report_groups>
 8005c4a:	1d01      	adds	r1, r0, #4
 8005c4c:	f002 f9ec 	bl	8008028 <etharp_request>
 8005c50:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 8005c54:	e7f2      	b.n	8005c3c <netif_set_up+0x24>
 8005c56:	bf00      	nop

08005c58 <netif_set_down>:
 8005c58:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 8005c5c:	07d9      	lsls	r1, r3, #31
 8005c5e:	d505      	bpl.n	8005c6c <netif_set_down+0x14>
 8005c60:	f023 0101 	bic.w	r1, r3, #1
 8005c64:	071b      	lsls	r3, r3, #28
 8005c66:	f880 102f 	strb.w	r1, [r0, #47]	; 0x2f
 8005c6a:	d400      	bmi.n	8005c6e <netif_set_down+0x16>
 8005c6c:	4770      	bx	lr
 8005c6e:	f001 ba11 	b.w	8007094 <etharp_cleanup_netif>
 8005c72:	bf00      	nop

08005c74 <pbuf_alloced_custom>:
 8005c74:	b570      	push	{r4, r5, r6, lr}
 8005c76:	9c04      	ldr	r4, [sp, #16]
 8005c78:	f8bd 5014 	ldrh.w	r5, [sp, #20]
 8005c7c:	2804      	cmp	r0, #4
 8005c7e:	d81c      	bhi.n	8005cba <pbuf_alloced_custom+0x46>
 8005c80:	e8df f000 	tbb	[pc, r0]
 8005c84:	03171519 	.word	0x03171519
 8005c88:	03          	.byte	0x03
 8005c89:	00          	.byte	0x00
 8005c8a:	2000      	movs	r0, #0
 8005c8c:	180e      	adds	r6, r1, r0
 8005c8e:	42ae      	cmp	r6, r5
 8005c90:	d81c      	bhi.n	8005ccc <pbuf_alloced_custom+0x58>
 8005c92:	2500      	movs	r5, #0
 8005c94:	601d      	str	r5, [r3, #0]
 8005c96:	b104      	cbz	r4, 8005c9a <pbuf_alloced_custom+0x26>
 8005c98:	4404      	add	r4, r0
 8005c9a:	2602      	movs	r6, #2
 8005c9c:	2501      	movs	r5, #1
 8005c9e:	605c      	str	r4, [r3, #4]
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	8119      	strh	r1, [r3, #8]
 8005ca4:	8159      	strh	r1, [r3, #10]
 8005ca6:	731a      	strb	r2, [r3, #12]
 8005ca8:	735e      	strb	r6, [r3, #13]
 8005caa:	81dd      	strh	r5, [r3, #14]
 8005cac:	bd70      	pop	{r4, r5, r6, pc}
 8005cae:	2024      	movs	r0, #36	; 0x24
 8005cb0:	e7ec      	b.n	8005c8c <pbuf_alloced_custom+0x18>
 8005cb2:	2010      	movs	r0, #16
 8005cb4:	e7ea      	b.n	8005c8c <pbuf_alloced_custom+0x18>
 8005cb6:	2038      	movs	r0, #56	; 0x38
 8005cb8:	e7e8      	b.n	8005c8c <pbuf_alloced_custom+0x18>
 8005cba:	4b05      	ldr	r3, [pc, #20]	; (8005cd0 <pbuf_alloced_custom+0x5c>)
 8005cbc:	f240 12c5 	movw	r2, #453	; 0x1c5
 8005cc0:	4904      	ldr	r1, [pc, #16]	; (8005cd4 <pbuf_alloced_custom+0x60>)
 8005cc2:	4805      	ldr	r0, [pc, #20]	; (8005cd8 <pbuf_alloced_custom+0x64>)
 8005cc4:	f009 fe58 	bl	800f978 <iprintf>
 8005cc8:	2000      	movs	r0, #0
 8005cca:	bd70      	pop	{r4, r5, r6, pc}
 8005ccc:	2000      	movs	r0, #0
 8005cce:	bd70      	pop	{r4, r5, r6, pc}
 8005cd0:	080111a8 	.word	0x080111a8
 8005cd4:	080111d8 	.word	0x080111d8
 8005cd8:	08010e34 	.word	0x08010e34

08005cdc <pbuf_header>:
 8005cdc:	b538      	push	{r3, r4, r5, lr}
 8005cde:	4604      	mov	r4, r0
 8005ce0:	2800      	cmp	r0, #0
 8005ce2:	d03a      	beq.n	8005d5a <pbuf_header+0x7e>
 8005ce4:	2900      	cmp	r1, #0
 8005ce6:	d00e      	beq.n	8005d06 <pbuf_header+0x2a>
 8005ce8:	b28a      	uxth	r2, r1
 8005cea:	db1c      	blt.n	8005d26 <pbuf_header+0x4a>
 8005cec:	4610      	mov	r0, r2
 8005cee:	7b23      	ldrb	r3, [r4, #12]
 8005cf0:	6865      	ldr	r5, [r4, #4]
 8005cf2:	b153      	cbz	r3, 8005d0a <pbuf_header+0x2e>
 8005cf4:	2b03      	cmp	r3, #3
 8005cf6:	d008      	beq.n	8005d0a <pbuf_header+0x2e>
 8005cf8:	3b01      	subs	r3, #1
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d824      	bhi.n	8005d48 <pbuf_header+0x6c>
 8005cfe:	2900      	cmp	r1, #0
 8005d00:	db34      	blt.n	8005d6c <pbuf_header+0x90>
 8005d02:	2001      	movs	r0, #1
 8005d04:	bd38      	pop	{r3, r4, r5, pc}
 8005d06:	4608      	mov	r0, r1
 8005d08:	bd38      	pop	{r3, r4, r5, pc}
 8005d0a:	1a69      	subs	r1, r5, r1
 8005d0c:	f104 0310 	add.w	r3, r4, #16
 8005d10:	4299      	cmp	r1, r3
 8005d12:	6061      	str	r1, [r4, #4]
 8005d14:	d315      	bcc.n	8005d42 <pbuf_header+0x66>
 8005d16:	8963      	ldrh	r3, [r4, #10]
 8005d18:	8921      	ldrh	r1, [r4, #8]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	2000      	movs	r0, #0
 8005d1e:	440a      	add	r2, r1
 8005d20:	8163      	strh	r3, [r4, #10]
 8005d22:	8122      	strh	r2, [r4, #8]
 8005d24:	bd38      	pop	{r3, r4, r5, pc}
 8005d26:	4250      	negs	r0, r2
 8005d28:	8963      	ldrh	r3, [r4, #10]
 8005d2a:	b280      	uxth	r0, r0
 8005d2c:	4283      	cmp	r3, r0
 8005d2e:	d2de      	bcs.n	8005cee <pbuf_header+0x12>
 8005d30:	4b11      	ldr	r3, [pc, #68]	; (8005d78 <pbuf_header+0x9c>)
 8005d32:	f240 2247 	movw	r2, #583	; 0x247
 8005d36:	4911      	ldr	r1, [pc, #68]	; (8005d7c <pbuf_header+0xa0>)
 8005d38:	4811      	ldr	r0, [pc, #68]	; (8005d80 <pbuf_header+0xa4>)
 8005d3a:	f009 fe1d 	bl	800f978 <iprintf>
 8005d3e:	2001      	movs	r0, #1
 8005d40:	bd38      	pop	{r3, r4, r5, pc}
 8005d42:	6065      	str	r5, [r4, #4]
 8005d44:	2001      	movs	r0, #1
 8005d46:	bd38      	pop	{r3, r4, r5, pc}
 8005d48:	4b0b      	ldr	r3, [pc, #44]	; (8005d78 <pbuf_header+0x9c>)
 8005d4a:	f240 2277 	movw	r2, #631	; 0x277
 8005d4e:	490d      	ldr	r1, [pc, #52]	; (8005d84 <pbuf_header+0xa8>)
 8005d50:	480b      	ldr	r0, [pc, #44]	; (8005d80 <pbuf_header+0xa4>)
 8005d52:	f009 fe11 	bl	800f978 <iprintf>
 8005d56:	2001      	movs	r0, #1
 8005d58:	bd38      	pop	{r3, r4, r5, pc}
 8005d5a:	4b07      	ldr	r3, [pc, #28]	; (8005d78 <pbuf_header+0x9c>)
 8005d5c:	f240 223f 	movw	r2, #575	; 0x23f
 8005d60:	4909      	ldr	r1, [pc, #36]	; (8005d88 <pbuf_header+0xac>)
 8005d62:	4807      	ldr	r0, [pc, #28]	; (8005d80 <pbuf_header+0xa4>)
 8005d64:	f009 fe08 	bl	800f978 <iprintf>
 8005d68:	4620      	mov	r0, r4
 8005d6a:	bd38      	pop	{r3, r4, r5, pc}
 8005d6c:	8963      	ldrh	r3, [r4, #10]
 8005d6e:	4283      	cmp	r3, r0
 8005d70:	d3c7      	bcc.n	8005d02 <pbuf_header+0x26>
 8005d72:	1a69      	subs	r1, r5, r1
 8005d74:	6061      	str	r1, [r4, #4]
 8005d76:	e7cf      	b.n	8005d18 <pbuf_header+0x3c>
 8005d78:	080111a8 	.word	0x080111a8
 8005d7c:	08011208 	.word	0x08011208
 8005d80:	08010e34 	.word	0x08010e34
 8005d84:	08011228 	.word	0x08011228
 8005d88:	080111fc 	.word	0x080111fc

08005d8c <pbuf_header_force>:
 8005d8c:	b538      	push	{r3, r4, r5, lr}
 8005d8e:	4604      	mov	r4, r0
 8005d90:	2800      	cmp	r0, #0
 8005d92:	d03c      	beq.n	8005e0e <pbuf_header_force+0x82>
 8005d94:	2900      	cmp	r1, #0
 8005d96:	d016      	beq.n	8005dc6 <pbuf_header_force+0x3a>
 8005d98:	b28a      	uxth	r2, r1
 8005d9a:	db1e      	blt.n	8005dda <pbuf_header_force+0x4e>
 8005d9c:	4610      	mov	r0, r2
 8005d9e:	7b23      	ldrb	r3, [r4, #12]
 8005da0:	6865      	ldr	r5, [r4, #4]
 8005da2:	b193      	cbz	r3, 8005dca <pbuf_header_force+0x3e>
 8005da4:	2b03      	cmp	r3, #3
 8005da6:	d010      	beq.n	8005dca <pbuf_header_force+0x3e>
 8005da8:	3b01      	subs	r3, #1
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d826      	bhi.n	8005dfc <pbuf_header_force+0x70>
 8005dae:	2900      	cmp	r1, #0
 8005db0:	8963      	ldrh	r3, [r4, #10]
 8005db2:	db35      	blt.n	8005e20 <pbuf_header_force+0x94>
 8005db4:	1a69      	subs	r1, r5, r1
 8005db6:	6061      	str	r1, [r4, #4]
 8005db8:	8921      	ldrh	r1, [r4, #8]
 8005dba:	4413      	add	r3, r2
 8005dbc:	2000      	movs	r0, #0
 8005dbe:	440a      	add	r2, r1
 8005dc0:	8163      	strh	r3, [r4, #10]
 8005dc2:	8122      	strh	r2, [r4, #8]
 8005dc4:	bd38      	pop	{r3, r4, r5, pc}
 8005dc6:	4608      	mov	r0, r1
 8005dc8:	bd38      	pop	{r3, r4, r5, pc}
 8005dca:	1a69      	subs	r1, r5, r1
 8005dcc:	f104 0310 	add.w	r3, r4, #16
 8005dd0:	4299      	cmp	r1, r3
 8005dd2:	6061      	str	r1, [r4, #4]
 8005dd4:	d30f      	bcc.n	8005df6 <pbuf_header_force+0x6a>
 8005dd6:	8963      	ldrh	r3, [r4, #10]
 8005dd8:	e7ee      	b.n	8005db8 <pbuf_header_force+0x2c>
 8005dda:	4250      	negs	r0, r2
 8005ddc:	8963      	ldrh	r3, [r4, #10]
 8005dde:	b280      	uxth	r0, r0
 8005de0:	4283      	cmp	r3, r0
 8005de2:	d2dc      	bcs.n	8005d9e <pbuf_header_force+0x12>
 8005de4:	4b10      	ldr	r3, [pc, #64]	; (8005e28 <pbuf_header_force+0x9c>)
 8005de6:	f240 2247 	movw	r2, #583	; 0x247
 8005dea:	4910      	ldr	r1, [pc, #64]	; (8005e2c <pbuf_header_force+0xa0>)
 8005dec:	4810      	ldr	r0, [pc, #64]	; (8005e30 <pbuf_header_force+0xa4>)
 8005dee:	f009 fdc3 	bl	800f978 <iprintf>
 8005df2:	2001      	movs	r0, #1
 8005df4:	bd38      	pop	{r3, r4, r5, pc}
 8005df6:	6065      	str	r5, [r4, #4]
 8005df8:	2001      	movs	r0, #1
 8005dfa:	bd38      	pop	{r3, r4, r5, pc}
 8005dfc:	4b0a      	ldr	r3, [pc, #40]	; (8005e28 <pbuf_header_force+0x9c>)
 8005dfe:	f240 2277 	movw	r2, #631	; 0x277
 8005e02:	490c      	ldr	r1, [pc, #48]	; (8005e34 <pbuf_header_force+0xa8>)
 8005e04:	480a      	ldr	r0, [pc, #40]	; (8005e30 <pbuf_header_force+0xa4>)
 8005e06:	f009 fdb7 	bl	800f978 <iprintf>
 8005e0a:	2001      	movs	r0, #1
 8005e0c:	bd38      	pop	{r3, r4, r5, pc}
 8005e0e:	4b06      	ldr	r3, [pc, #24]	; (8005e28 <pbuf_header_force+0x9c>)
 8005e10:	f240 223f 	movw	r2, #575	; 0x23f
 8005e14:	4908      	ldr	r1, [pc, #32]	; (8005e38 <pbuf_header_force+0xac>)
 8005e16:	4806      	ldr	r0, [pc, #24]	; (8005e30 <pbuf_header_force+0xa4>)
 8005e18:	f009 fdae 	bl	800f978 <iprintf>
 8005e1c:	4620      	mov	r0, r4
 8005e1e:	bd38      	pop	{r3, r4, r5, pc}
 8005e20:	4298      	cmp	r0, r3
 8005e22:	d9c7      	bls.n	8005db4 <pbuf_header_force+0x28>
 8005e24:	2001      	movs	r0, #1
 8005e26:	bd38      	pop	{r3, r4, r5, pc}
 8005e28:	080111a8 	.word	0x080111a8
 8005e2c:	08011208 	.word	0x08011208
 8005e30:	08010e34 	.word	0x08010e34
 8005e34:	08011228 	.word	0x08011228
 8005e38:	080111fc 	.word	0x080111fc

08005e3c <pbuf_free>:
 8005e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e40:	4604      	mov	r4, r0
 8005e42:	2800      	cmp	r0, #0
 8005e44:	d057      	beq.n	8005ef6 <pbuf_free+0xba>
 8005e46:	7b03      	ldrb	r3, [r0, #12]
 8005e48:	2b03      	cmp	r3, #3
 8005e4a:	d84c      	bhi.n	8005ee6 <pbuf_free+0xaa>
 8005e4c:	2600      	movs	r6, #0
 8005e4e:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 8005f14 <pbuf_free+0xd8>
 8005e52:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8005f20 <pbuf_free+0xe4>
 8005e56:	4f2d      	ldr	r7, [pc, #180]	; (8005f0c <pbuf_free+0xd0>)
 8005e58:	e008      	b.n	8005e6c <pbuf_free+0x30>
 8005e5a:	6923      	ldr	r3, [r4, #16]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d039      	beq.n	8005ed4 <pbuf_free+0x98>
 8005e60:	4620      	mov	r0, r4
 8005e62:	4798      	blx	r3
 8005e64:	3601      	adds	r6, #1
 8005e66:	462c      	mov	r4, r5
 8005e68:	b2f6      	uxtb	r6, r6
 8005e6a:	b1ed      	cbz	r5, 8005ea8 <pbuf_free+0x6c>
 8005e6c:	f003 fe1a 	bl	8009aa4 <sys_arch_protect>
 8005e70:	89e3      	ldrh	r3, [r4, #14]
 8005e72:	4605      	mov	r5, r0
 8005e74:	b1db      	cbz	r3, 8005eae <pbuf_free+0x72>
 8005e76:	3b01      	subs	r3, #1
 8005e78:	4628      	mov	r0, r5
 8005e7a:	b29d      	uxth	r5, r3
 8005e7c:	81e5      	strh	r5, [r4, #14]
 8005e7e:	f003 fe1d 	bl	8009abc <sys_arch_unprotect>
 8005e82:	b98d      	cbnz	r5, 8005ea8 <pbuf_free+0x6c>
 8005e84:	7b63      	ldrb	r3, [r4, #13]
 8005e86:	6825      	ldr	r5, [r4, #0]
 8005e88:	079b      	lsls	r3, r3, #30
 8005e8a:	d4e6      	bmi.n	8005e5a <pbuf_free+0x1e>
 8005e8c:	7b23      	ldrb	r3, [r4, #12]
 8005e8e:	2b03      	cmp	r3, #3
 8005e90:	d01b      	beq.n	8005eca <pbuf_free+0x8e>
 8005e92:	3b01      	subs	r3, #1
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d913      	bls.n	8005ec0 <pbuf_free+0x84>
 8005e98:	3601      	adds	r6, #1
 8005e9a:	4620      	mov	r0, r4
 8005e9c:	f7ff fbb8 	bl	8005610 <mem_free>
 8005ea0:	462c      	mov	r4, r5
 8005ea2:	b2f6      	uxtb	r6, r6
 8005ea4:	2d00      	cmp	r5, #0
 8005ea6:	d1e1      	bne.n	8005e6c <pbuf_free+0x30>
 8005ea8:	4630      	mov	r0, r6
 8005eaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005eae:	4643      	mov	r3, r8
 8005eb0:	f240 22eb 	movw	r2, #747	; 0x2eb
 8005eb4:	4649      	mov	r1, r9
 8005eb6:	4638      	mov	r0, r7
 8005eb8:	f009 fd5e 	bl	800f978 <iprintf>
 8005ebc:	89e3      	ldrh	r3, [r4, #14]
 8005ebe:	e7da      	b.n	8005e76 <pbuf_free+0x3a>
 8005ec0:	4621      	mov	r1, r4
 8005ec2:	2009      	movs	r0, #9
 8005ec4:	f7ff fdf0 	bl	8005aa8 <memp_free>
 8005ec8:	e7cc      	b.n	8005e64 <pbuf_free+0x28>
 8005eca:	4621      	mov	r1, r4
 8005ecc:	200a      	movs	r0, #10
 8005ece:	f7ff fdeb 	bl	8005aa8 <memp_free>
 8005ed2:	e7c7      	b.n	8005e64 <pbuf_free+0x28>
 8005ed4:	4643      	mov	r3, r8
 8005ed6:	f240 22f9 	movw	r2, #761	; 0x2f9
 8005eda:	490d      	ldr	r1, [pc, #52]	; (8005f10 <pbuf_free+0xd4>)
 8005edc:	4638      	mov	r0, r7
 8005ede:	f009 fd4b 	bl	800f978 <iprintf>
 8005ee2:	6923      	ldr	r3, [r4, #16]
 8005ee4:	e7bc      	b.n	8005e60 <pbuf_free+0x24>
 8005ee6:	4b0b      	ldr	r3, [pc, #44]	; (8005f14 <pbuf_free+0xd8>)
 8005ee8:	f240 22de 	movw	r2, #734	; 0x2de
 8005eec:	490a      	ldr	r1, [pc, #40]	; (8005f18 <pbuf_free+0xdc>)
 8005eee:	4807      	ldr	r0, [pc, #28]	; (8005f0c <pbuf_free+0xd0>)
 8005ef0:	f009 fd42 	bl	800f978 <iprintf>
 8005ef4:	e7aa      	b.n	8005e4c <pbuf_free+0x10>
 8005ef6:	4606      	mov	r6, r0
 8005ef8:	4b06      	ldr	r3, [pc, #24]	; (8005f14 <pbuf_free+0xd8>)
 8005efa:	f240 22d2 	movw	r2, #722	; 0x2d2
 8005efe:	4907      	ldr	r1, [pc, #28]	; (8005f1c <pbuf_free+0xe0>)
 8005f00:	4802      	ldr	r0, [pc, #8]	; (8005f0c <pbuf_free+0xd0>)
 8005f02:	f009 fd39 	bl	800f978 <iprintf>
 8005f06:	4630      	mov	r0, r6
 8005f08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f0c:	08010e34 	.word	0x08010e34
 8005f10:	08011268 	.word	0x08011268
 8005f14:	080111a8 	.word	0x080111a8
 8005f18:	08011238 	.word	0x08011238
 8005f1c:	080111fc 	.word	0x080111fc
 8005f20:	08011250 	.word	0x08011250

08005f24 <pbuf_alloc>:
 8005f24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f28:	460e      	mov	r6, r1
 8005f2a:	4617      	mov	r7, r2
 8005f2c:	2804      	cmp	r0, #4
 8005f2e:	f200 80d1 	bhi.w	80060d4 <pbuf_alloc+0x1b0>
 8005f32:	e8df f000 	tbb	[pc, r0]
 8005f36:	8ba0      	.short	0x8ba0
 8005f38:	039b      	.short	0x039b
 8005f3a:	03          	.byte	0x03
 8005f3b:	00          	.byte	0x00
 8005f3c:	2010      	movs	r0, #16
 8005f3e:	f44f 78c8 	mov.w	r8, #400	; 0x190
 8005f42:	4604      	mov	r4, r0
 8005f44:	2f03      	cmp	r7, #3
 8005f46:	f200 8086 	bhi.w	8006056 <pbuf_alloc+0x132>
 8005f4a:	e8df f007 	tbb	[pc, r7]
 8005f4e:	5669      	.short	0x5669
 8005f50:	0256      	.short	0x0256
 8005f52:	200a      	movs	r0, #10
 8005f54:	f7ff fd76 	bl	8005a44 <memp_malloc>
 8005f58:	4605      	mov	r5, r0
 8005f5a:	2800      	cmp	r0, #0
 8005f5c:	f000 8099 	beq.w	8006092 <pbuf_alloc+0x16e>
 8005f60:	2103      	movs	r1, #3
 8005f62:	4404      	add	r4, r0
 8005f64:	45b0      	cmp	r8, r6
 8005f66:	4643      	mov	r3, r8
 8005f68:	440c      	add	r4, r1
 8005f6a:	f500 78d0 	add.w	r8, r0, #416	; 0x1a0
 8005f6e:	bf28      	it	cs
 8005f70:	4633      	movcs	r3, r6
 8005f72:	7301      	strb	r1, [r0, #12]
 8005f74:	f024 0403 	bic.w	r4, r4, #3
 8005f78:	2100      	movs	r1, #0
 8005f7a:	b29a      	uxth	r2, r3
 8005f7c:	8106      	strh	r6, [r0, #8]
 8005f7e:	4423      	add	r3, r4
 8005f80:	8142      	strh	r2, [r0, #10]
 8005f82:	4598      	cmp	r8, r3
 8005f84:	e9c0 1400 	strd	r1, r4, [r0]
 8005f88:	d37a      	bcc.n	8006080 <pbuf_alloc+0x15c>
 8005f8a:	1ab6      	subs	r6, r6, r2
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	2e00      	cmp	r6, #0
 8005f90:	81eb      	strh	r3, [r5, #14]
 8005f92:	dd3e      	ble.n	8006012 <pbuf_alloc+0xee>
 8005f94:	462f      	mov	r7, r5
 8005f96:	f8df a15c 	ldr.w	sl, [pc, #348]	; 80060f4 <pbuf_alloc+0x1d0>
 8005f9a:	f8df b170 	ldr.w	fp, [pc, #368]	; 800610c <pbuf_alloc+0x1e8>
 8005f9e:	f8df 915c 	ldr.w	r9, [pc, #348]	; 80060fc <pbuf_alloc+0x1d8>
 8005fa2:	200a      	movs	r0, #10
 8005fa4:	f7ff fd4e 	bl	8005a44 <memp_malloc>
 8005fa8:	2300      	movs	r3, #0
 8005faa:	4604      	mov	r4, r0
 8005fac:	2103      	movs	r1, #3
 8005fae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005fb2:	2800      	cmp	r0, #0
 8005fb4:	f000 8099 	beq.w	80060ea <pbuf_alloc+0x1c6>
 8005fb8:	4296      	cmp	r6, r2
 8005fba:	7301      	strb	r1, [r0, #12]
 8005fbc:	7343      	strb	r3, [r0, #13]
 8005fbe:	6003      	str	r3, [r0, #0]
 8005fc0:	6038      	str	r0, [r7, #0]
 8005fc2:	4607      	mov	r7, r0
 8005fc4:	d07e      	beq.n	80060c4 <pbuf_alloc+0x1a0>
 8005fc6:	b2b2      	uxth	r2, r6
 8005fc8:	f104 0310 	add.w	r3, r4, #16
 8005fcc:	f5b2 7fc8 	cmp.w	r2, #400	; 0x190
 8005fd0:	4611      	mov	r1, r2
 8005fd2:	6063      	str	r3, [r4, #4]
 8005fd4:	bf28      	it	cs
 8005fd6:	f44f 71c8 	movcs.w	r1, #400	; 0x190
 8005fda:	079b      	lsls	r3, r3, #30
 8005fdc:	8122      	strh	r2, [r4, #8]
 8005fde:	8161      	strh	r1, [r4, #10]
 8005fe0:	d168      	bne.n	80060b4 <pbuf_alloc+0x190>
 8005fe2:	896a      	ldrh	r2, [r5, #10]
 8005fe4:	2101      	movs	r1, #1
 8005fe6:	686b      	ldr	r3, [r5, #4]
 8005fe8:	4413      	add	r3, r2
 8005fea:	4598      	cmp	r8, r3
 8005fec:	d353      	bcc.n	8006096 <pbuf_alloc+0x172>
 8005fee:	8963      	ldrh	r3, [r4, #10]
 8005ff0:	81e1      	strh	r1, [r4, #14]
 8005ff2:	1af6      	subs	r6, r6, r3
 8005ff4:	2e00      	cmp	r6, #0
 8005ff6:	dcd4      	bgt.n	8005fa2 <pbuf_alloc+0x7e>
 8005ff8:	e00b      	b.n	8006012 <pbuf_alloc+0xee>
 8005ffa:	2009      	movs	r0, #9
 8005ffc:	f7ff fd22 	bl	8005a44 <memp_malloc>
 8006000:	4605      	mov	r5, r0
 8006002:	2800      	cmp	r0, #0
 8006004:	d045      	beq.n	8006092 <pbuf_alloc+0x16e>
 8006006:	2300      	movs	r3, #0
 8006008:	8106      	strh	r6, [r0, #8]
 800600a:	8146      	strh	r6, [r0, #10]
 800600c:	7307      	strb	r7, [r0, #12]
 800600e:	e9c0 3300 	strd	r3, r3, [r0]
 8006012:	2201      	movs	r2, #1
 8006014:	2300      	movs	r3, #0
 8006016:	81ea      	strh	r2, [r5, #14]
 8006018:	736b      	strb	r3, [r5, #13]
 800601a:	4628      	mov	r0, r5
 800601c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006020:	1cf3      	adds	r3, r6, #3
 8006022:	f023 0303 	bic.w	r3, r3, #3
 8006026:	4418      	add	r0, r3
 8006028:	b280      	uxth	r0, r0
 800602a:	4298      	cmp	r0, r3
 800602c:	d331      	bcc.n	8006092 <pbuf_alloc+0x16e>
 800602e:	f7ff fc3b 	bl	80058a8 <mem_malloc>
 8006032:	4605      	mov	r5, r0
 8006034:	b368      	cbz	r0, 8006092 <pbuf_alloc+0x16e>
 8006036:	4404      	add	r4, r0
 8006038:	2300      	movs	r3, #0
 800603a:	8106      	strh	r6, [r0, #8]
 800603c:	3403      	adds	r4, #3
 800603e:	8146      	strh	r6, [r0, #10]
 8006040:	6003      	str	r3, [r0, #0]
 8006042:	f024 0403 	bic.w	r4, r4, #3
 8006046:	7303      	strb	r3, [r0, #12]
 8006048:	6044      	str	r4, [r0, #4]
 800604a:	e7e2      	b.n	8006012 <pbuf_alloc+0xee>
 800604c:	2034      	movs	r0, #52	; 0x34
 800604e:	f44f 78b6 	mov.w	r8, #364	; 0x16c
 8006052:	2432      	movs	r4, #50	; 0x32
 8006054:	e776      	b.n	8005f44 <pbuf_alloc+0x20>
 8006056:	2500      	movs	r5, #0
 8006058:	4b26      	ldr	r3, [pc, #152]	; (80060f4 <pbuf_alloc+0x1d0>)
 800605a:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 800605e:	4926      	ldr	r1, [pc, #152]	; (80060f8 <pbuf_alloc+0x1d4>)
 8006060:	4826      	ldr	r0, [pc, #152]	; (80060fc <pbuf_alloc+0x1d8>)
 8006062:	f009 fc89 	bl	800f978 <iprintf>
 8006066:	4628      	mov	r0, r5
 8006068:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800606c:	2020      	movs	r0, #32
 800606e:	f44f 78c0 	mov.w	r8, #384	; 0x180
 8006072:	241e      	movs	r4, #30
 8006074:	e766      	b.n	8005f44 <pbuf_alloc+0x20>
 8006076:	2048      	movs	r0, #72	; 0x48
 8006078:	f44f 78ac 	mov.w	r8, #344	; 0x158
 800607c:	2446      	movs	r4, #70	; 0x46
 800607e:	e761      	b.n	8005f44 <pbuf_alloc+0x20>
 8006080:	f44f 7298 	mov.w	r2, #304	; 0x130
 8006084:	4b1b      	ldr	r3, [pc, #108]	; (80060f4 <pbuf_alloc+0x1d0>)
 8006086:	491e      	ldr	r1, [pc, #120]	; (8006100 <pbuf_alloc+0x1dc>)
 8006088:	481c      	ldr	r0, [pc, #112]	; (80060fc <pbuf_alloc+0x1d8>)
 800608a:	f009 fc75 	bl	800f978 <iprintf>
 800608e:	896a      	ldrh	r2, [r5, #10]
 8006090:	e77b      	b.n	8005f8a <pbuf_alloc+0x66>
 8006092:	2500      	movs	r5, #0
 8006094:	e7c1      	b.n	800601a <pbuf_alloc+0xf6>
 8006096:	4653      	mov	r3, sl
 8006098:	f240 1255 	movw	r2, #341	; 0x155
 800609c:	4918      	ldr	r1, [pc, #96]	; (8006100 <pbuf_alloc+0x1dc>)
 800609e:	4648      	mov	r0, r9
 80060a0:	f009 fc6a 	bl	800f978 <iprintf>
 80060a4:	8962      	ldrh	r2, [r4, #10]
 80060a6:	2301      	movs	r3, #1
 80060a8:	1ab6      	subs	r6, r6, r2
 80060aa:	81e3      	strh	r3, [r4, #14]
 80060ac:	2e00      	cmp	r6, #0
 80060ae:	f73f af78 	bgt.w	8005fa2 <pbuf_alloc+0x7e>
 80060b2:	e7ae      	b.n	8006012 <pbuf_alloc+0xee>
 80060b4:	4653      	mov	r3, sl
 80060b6:	f44f 72a9 	mov.w	r2, #338	; 0x152
 80060ba:	4912      	ldr	r1, [pc, #72]	; (8006104 <pbuf_alloc+0x1e0>)
 80060bc:	4648      	mov	r0, r9
 80060be:	f009 fc5b 	bl	800f978 <iprintf>
 80060c2:	e78e      	b.n	8005fe2 <pbuf_alloc+0xbe>
 80060c4:	4653      	mov	r3, sl
 80060c6:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 80060ca:	4659      	mov	r1, fp
 80060cc:	4648      	mov	r0, r9
 80060ce:	f009 fc53 	bl	800f978 <iprintf>
 80060d2:	e778      	b.n	8005fc6 <pbuf_alloc+0xa2>
 80060d4:	2500      	movs	r5, #0
 80060d6:	4b07      	ldr	r3, [pc, #28]	; (80060f4 <pbuf_alloc+0x1d0>)
 80060d8:	f44f 728b 	mov.w	r2, #278	; 0x116
 80060dc:	490a      	ldr	r1, [pc, #40]	; (8006108 <pbuf_alloc+0x1e4>)
 80060de:	4807      	ldr	r0, [pc, #28]	; (80060fc <pbuf_alloc+0x1d8>)
 80060e0:	f009 fc4a 	bl	800f978 <iprintf>
 80060e4:	4628      	mov	r0, r5
 80060e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060ea:	4628      	mov	r0, r5
 80060ec:	4625      	mov	r5, r4
 80060ee:	f7ff fea5 	bl	8005e3c <pbuf_free>
 80060f2:	e792      	b.n	800601a <pbuf_alloc+0xf6>
 80060f4:	080111a8 	.word	0x080111a8
 80060f8:	08011320 	.word	0x08011320
 80060fc:	08010e34 	.word	0x08010e34
 8006100:	080112a8 	.word	0x080112a8
 8006104:	080112f0 	.word	0x080112f0
 8006108:	0801128c 	.word	0x0801128c
 800610c:	080112dc 	.word	0x080112dc

08006110 <pbuf_realloc>:
 8006110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006114:	460d      	mov	r5, r1
 8006116:	4604      	mov	r4, r0
 8006118:	2800      	cmp	r0, #0
 800611a:	d067      	beq.n	80061ec <pbuf_realloc+0xdc>
 800611c:	7b23      	ldrb	r3, [r4, #12]
 800611e:	2b03      	cmp	r3, #3
 8006120:	d86e      	bhi.n	8006200 <pbuf_realloc+0xf0>
 8006122:	8926      	ldrh	r6, [r4, #8]
 8006124:	42ae      	cmp	r6, r5
 8006126:	d92a      	bls.n	800617e <pbuf_realloc+0x6e>
 8006128:	1bae      	subs	r6, r5, r6
 800612a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800612e:	429e      	cmp	r6, r3
 8006130:	dc3d      	bgt.n	80061ae <pbuf_realloc+0x9e>
 8006132:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 8006214 <pbuf_realloc+0x104>
 8006136:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 800621c <pbuf_realloc+0x10c>
 800613a:	4f35      	ldr	r7, [pc, #212]	; (8006210 <pbuf_realloc+0x100>)
 800613c:	8963      	ldrh	r3, [r4, #10]
 800613e:	42ab      	cmp	r3, r5
 8006140:	d211      	bcs.n	8006166 <pbuf_realloc+0x56>
 8006142:	8922      	ldrh	r2, [r4, #8]
 8006144:	1aeb      	subs	r3, r5, r3
 8006146:	4432      	add	r2, r6
 8006148:	b29d      	uxth	r5, r3
 800614a:	8122      	strh	r2, [r4, #8]
 800614c:	6824      	ldr	r4, [r4, #0]
 800614e:	2c00      	cmp	r4, #0
 8006150:	d1f4      	bne.n	800613c <pbuf_realloc+0x2c>
 8006152:	464b      	mov	r3, r9
 8006154:	f240 220f 	movw	r2, #527	; 0x20f
 8006158:	4641      	mov	r1, r8
 800615a:	4638      	mov	r0, r7
 800615c:	f009 fc0c 	bl	800f978 <iprintf>
 8006160:	8963      	ldrh	r3, [r4, #10]
 8006162:	42ab      	cmp	r3, r5
 8006164:	d3ed      	bcc.n	8006142 <pbuf_realloc+0x32>
 8006166:	7b22      	ldrb	r2, [r4, #12]
 8006168:	b90a      	cbnz	r2, 800616e <pbuf_realloc+0x5e>
 800616a:	42ab      	cmp	r3, r5
 800616c:	d109      	bne.n	8006182 <pbuf_realloc+0x72>
 800616e:	6820      	ldr	r0, [r4, #0]
 8006170:	8165      	strh	r5, [r4, #10]
 8006172:	8125      	strh	r5, [r4, #8]
 8006174:	b108      	cbz	r0, 800617a <pbuf_realloc+0x6a>
 8006176:	f7ff fe61 	bl	8005e3c <pbuf_free>
 800617a:	2300      	movs	r3, #0
 800617c:	6023      	str	r3, [r4, #0]
 800617e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006182:	7b63      	ldrb	r3, [r4, #13]
 8006184:	079b      	lsls	r3, r3, #30
 8006186:	d4f2      	bmi.n	800616e <pbuf_realloc+0x5e>
 8006188:	6863      	ldr	r3, [r4, #4]
 800618a:	4620      	mov	r0, r4
 800618c:	1b1c      	subs	r4, r3, r4
 800618e:	1929      	adds	r1, r5, r4
 8006190:	b289      	uxth	r1, r1
 8006192:	f7ff faf3 	bl	800577c <mem_trim>
 8006196:	4604      	mov	r4, r0
 8006198:	2800      	cmp	r0, #0
 800619a:	d1e8      	bne.n	800616e <pbuf_realloc+0x5e>
 800619c:	4b1d      	ldr	r3, [pc, #116]	; (8006214 <pbuf_realloc+0x104>)
 800619e:	f240 221d 	movw	r2, #541	; 0x21d
 80061a2:	491d      	ldr	r1, [pc, #116]	; (8006218 <pbuf_realloc+0x108>)
 80061a4:	481a      	ldr	r0, [pc, #104]	; (8006210 <pbuf_realloc+0x100>)
 80061a6:	f009 fbe7 	bl	800f978 <iprintf>
 80061aa:	8164      	strh	r4, [r4, #10]
 80061ac:	deff      	udf	#255	; 0xff
 80061ae:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8006214 <pbuf_realloc+0x104>
 80061b2:	f8df 9074 	ldr.w	r9, [pc, #116]	; 8006228 <pbuf_realloc+0x118>
 80061b6:	4f16      	ldr	r7, [pc, #88]	; (8006210 <pbuf_realloc+0x100>)
 80061b8:	8963      	ldrh	r3, [r4, #10]
 80061ba:	42ab      	cmp	r3, r5
 80061bc:	d2d3      	bcs.n	8006166 <pbuf_realloc+0x56>
 80061be:	1aed      	subs	r5, r5, r3
 80061c0:	f240 220b 	movw	r2, #523	; 0x20b
 80061c4:	4643      	mov	r3, r8
 80061c6:	4649      	mov	r1, r9
 80061c8:	4638      	mov	r0, r7
 80061ca:	b2ad      	uxth	r5, r5
 80061cc:	f009 fbd4 	bl	800f978 <iprintf>
 80061d0:	8923      	ldrh	r3, [r4, #8]
 80061d2:	4433      	add	r3, r6
 80061d4:	8123      	strh	r3, [r4, #8]
 80061d6:	6824      	ldr	r4, [r4, #0]
 80061d8:	2c00      	cmp	r4, #0
 80061da:	d1ed      	bne.n	80061b8 <pbuf_realloc+0xa8>
 80061dc:	4643      	mov	r3, r8
 80061de:	f240 220f 	movw	r2, #527	; 0x20f
 80061e2:	490e      	ldr	r1, [pc, #56]	; (800621c <pbuf_realloc+0x10c>)
 80061e4:	4638      	mov	r0, r7
 80061e6:	f009 fbc7 	bl	800f978 <iprintf>
 80061ea:	e7e5      	b.n	80061b8 <pbuf_realloc+0xa8>
 80061ec:	4b09      	ldr	r3, [pc, #36]	; (8006214 <pbuf_realloc+0x104>)
 80061ee:	f240 12f3 	movw	r2, #499	; 0x1f3
 80061f2:	490b      	ldr	r1, [pc, #44]	; (8006220 <pbuf_realloc+0x110>)
 80061f4:	4806      	ldr	r0, [pc, #24]	; (8006210 <pbuf_realloc+0x100>)
 80061f6:	f009 fbbf 	bl	800f978 <iprintf>
 80061fa:	7b23      	ldrb	r3, [r4, #12]
 80061fc:	2b03      	cmp	r3, #3
 80061fe:	d990      	bls.n	8006122 <pbuf_realloc+0x12>
 8006200:	4b04      	ldr	r3, [pc, #16]	; (8006214 <pbuf_realloc+0x104>)
 8006202:	f240 12f7 	movw	r2, #503	; 0x1f7
 8006206:	4907      	ldr	r1, [pc, #28]	; (8006224 <pbuf_realloc+0x114>)
 8006208:	4801      	ldr	r0, [pc, #4]	; (8006210 <pbuf_realloc+0x100>)
 800620a:	f009 fbb5 	bl	800f978 <iprintf>
 800620e:	e788      	b.n	8006122 <pbuf_realloc+0x12>
 8006210:	08010e34 	.word	0x08010e34
 8006214:	080111a8 	.word	0x080111a8
 8006218:	0801139c 	.word	0x0801139c
 800621c:	08011370 	.word	0x08011370
 8006220:	0801133c 	.word	0x0801133c
 8006224:	08011354 	.word	0x08011354
 8006228:	08011388 	.word	0x08011388

0800622c <pbuf_clen>:
 800622c:	b138      	cbz	r0, 800623e <pbuf_clen+0x12>
 800622e:	2300      	movs	r3, #0
 8006230:	3301      	adds	r3, #1
 8006232:	6800      	ldr	r0, [r0, #0]
 8006234:	b29b      	uxth	r3, r3
 8006236:	2800      	cmp	r0, #0
 8006238:	d1fa      	bne.n	8006230 <pbuf_clen+0x4>
 800623a:	4618      	mov	r0, r3
 800623c:	4770      	bx	lr
 800623e:	4603      	mov	r3, r0
 8006240:	4618      	mov	r0, r3
 8006242:	4770      	bx	lr

08006244 <pbuf_ref>:
 8006244:	b1a0      	cbz	r0, 8006270 <pbuf_ref+0x2c>
 8006246:	b510      	push	{r4, lr}
 8006248:	4604      	mov	r4, r0
 800624a:	f003 fc2b 	bl	8009aa4 <sys_arch_protect>
 800624e:	89e3      	ldrh	r3, [r4, #14]
 8006250:	3301      	adds	r3, #1
 8006252:	81e3      	strh	r3, [r4, #14]
 8006254:	f003 fc32 	bl	8009abc <sys_arch_unprotect>
 8006258:	89e3      	ldrh	r3, [r4, #14]
 800625a:	b103      	cbz	r3, 800625e <pbuf_ref+0x1a>
 800625c:	bd10      	pop	{r4, pc}
 800625e:	4b05      	ldr	r3, [pc, #20]	; (8006274 <pbuf_ref+0x30>)
 8006260:	f240 3239 	movw	r2, #825	; 0x339
 8006264:	4904      	ldr	r1, [pc, #16]	; (8006278 <pbuf_ref+0x34>)
 8006266:	4805      	ldr	r0, [pc, #20]	; (800627c <pbuf_ref+0x38>)
 8006268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800626c:	f009 bb84 	b.w	800f978 <iprintf>
 8006270:	4770      	bx	lr
 8006272:	bf00      	nop
 8006274:	080111a8 	.word	0x080111a8
 8006278:	080113b8 	.word	0x080113b8
 800627c:	08010e34 	.word	0x08010e34

08006280 <pbuf_cat>:
 8006280:	b570      	push	{r4, r5, r6, lr}
 8006282:	b338      	cbz	r0, 80062d4 <pbuf_cat+0x54>
 8006284:	460d      	mov	r5, r1
 8006286:	b329      	cbz	r1, 80062d4 <pbuf_cat+0x54>
 8006288:	6804      	ldr	r4, [r0, #0]
 800628a:	b90c      	cbnz	r4, 8006290 <pbuf_cat+0x10>
 800628c:	e02b      	b.n	80062e6 <pbuf_cat+0x66>
 800628e:	4614      	mov	r4, r2
 8006290:	8903      	ldrh	r3, [r0, #8]
 8006292:	8929      	ldrh	r1, [r5, #8]
 8006294:	6822      	ldr	r2, [r4, #0]
 8006296:	440b      	add	r3, r1
 8006298:	8103      	strh	r3, [r0, #8]
 800629a:	4620      	mov	r0, r4
 800629c:	2a00      	cmp	r2, #0
 800629e:	d1f6      	bne.n	800628e <pbuf_cat+0xe>
 80062a0:	8963      	ldrh	r3, [r4, #10]
 80062a2:	8922      	ldrh	r2, [r4, #8]
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d010      	beq.n	80062ca <pbuf_cat+0x4a>
 80062a8:	4b12      	ldr	r3, [pc, #72]	; (80062f4 <pbuf_cat+0x74>)
 80062aa:	f240 3255 	movw	r2, #853	; 0x355
 80062ae:	4912      	ldr	r1, [pc, #72]	; (80062f8 <pbuf_cat+0x78>)
 80062b0:	4812      	ldr	r0, [pc, #72]	; (80062fc <pbuf_cat+0x7c>)
 80062b2:	f009 fb61 	bl	800f978 <iprintf>
 80062b6:	6823      	ldr	r3, [r4, #0]
 80062b8:	b133      	cbz	r3, 80062c8 <pbuf_cat+0x48>
 80062ba:	4b0e      	ldr	r3, [pc, #56]	; (80062f4 <pbuf_cat+0x74>)
 80062bc:	f240 3256 	movw	r2, #854	; 0x356
 80062c0:	490f      	ldr	r1, [pc, #60]	; (8006300 <pbuf_cat+0x80>)
 80062c2:	480e      	ldr	r0, [pc, #56]	; (80062fc <pbuf_cat+0x7c>)
 80062c4:	f009 fb58 	bl	800f978 <iprintf>
 80062c8:	8923      	ldrh	r3, [r4, #8]
 80062ca:	892a      	ldrh	r2, [r5, #8]
 80062cc:	6025      	str	r5, [r4, #0]
 80062ce:	4413      	add	r3, r2
 80062d0:	8123      	strh	r3, [r4, #8]
 80062d2:	bd70      	pop	{r4, r5, r6, pc}
 80062d4:	4b07      	ldr	r3, [pc, #28]	; (80062f4 <pbuf_cat+0x74>)
 80062d6:	f240 324d 	movw	r2, #845	; 0x34d
 80062da:	490a      	ldr	r1, [pc, #40]	; (8006304 <pbuf_cat+0x84>)
 80062dc:	4807      	ldr	r0, [pc, #28]	; (80062fc <pbuf_cat+0x7c>)
 80062de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80062e2:	f009 bb49 	b.w	800f978 <iprintf>
 80062e6:	4604      	mov	r4, r0
 80062e8:	8963      	ldrh	r3, [r4, #10]
 80062ea:	8922      	ldrh	r2, [r4, #8]
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d1db      	bne.n	80062a8 <pbuf_cat+0x28>
 80062f0:	e7eb      	b.n	80062ca <pbuf_cat+0x4a>
 80062f2:	bf00      	nop
 80062f4:	080111a8 	.word	0x080111a8
 80062f8:	08011404 	.word	0x08011404
 80062fc:	08010e34 	.word	0x08010e34
 8006300:	08011434 	.word	0x08011434
 8006304:	080113cc 	.word	0x080113cc

08006308 <pbuf_chain>:
 8006308:	b570      	push	{r4, r5, r6, lr}
 800630a:	460d      	mov	r5, r1
 800630c:	2800      	cmp	r0, #0
 800630e:	d039      	beq.n	8006384 <pbuf_chain+0x7c>
 8006310:	2900      	cmp	r1, #0
 8006312:	d037      	beq.n	8006384 <pbuf_chain+0x7c>
 8006314:	6804      	ldr	r4, [r0, #0]
 8006316:	b90c      	cbnz	r4, 800631c <pbuf_chain+0x14>
 8006318:	e03e      	b.n	8006398 <pbuf_chain+0x90>
 800631a:	4614      	mov	r4, r2
 800631c:	8903      	ldrh	r3, [r0, #8]
 800631e:	8929      	ldrh	r1, [r5, #8]
 8006320:	6822      	ldr	r2, [r4, #0]
 8006322:	440b      	add	r3, r1
 8006324:	8103      	strh	r3, [r0, #8]
 8006326:	4620      	mov	r0, r4
 8006328:	2a00      	cmp	r2, #0
 800632a:	d1f6      	bne.n	800631a <pbuf_chain+0x12>
 800632c:	8963      	ldrh	r3, [r4, #10]
 800632e:	8922      	ldrh	r2, [r4, #8]
 8006330:	429a      	cmp	r2, r3
 8006332:	d010      	beq.n	8006356 <pbuf_chain+0x4e>
 8006334:	4b1b      	ldr	r3, [pc, #108]	; (80063a4 <pbuf_chain+0x9c>)
 8006336:	f240 3255 	movw	r2, #853	; 0x355
 800633a:	491b      	ldr	r1, [pc, #108]	; (80063a8 <pbuf_chain+0xa0>)
 800633c:	481b      	ldr	r0, [pc, #108]	; (80063ac <pbuf_chain+0xa4>)
 800633e:	f009 fb1b 	bl	800f978 <iprintf>
 8006342:	6823      	ldr	r3, [r4, #0]
 8006344:	b133      	cbz	r3, 8006354 <pbuf_chain+0x4c>
 8006346:	4b17      	ldr	r3, [pc, #92]	; (80063a4 <pbuf_chain+0x9c>)
 8006348:	f240 3256 	movw	r2, #854	; 0x356
 800634c:	4918      	ldr	r1, [pc, #96]	; (80063b0 <pbuf_chain+0xa8>)
 800634e:	4817      	ldr	r0, [pc, #92]	; (80063ac <pbuf_chain+0xa4>)
 8006350:	f009 fb12 	bl	800f978 <iprintf>
 8006354:	8923      	ldrh	r3, [r4, #8]
 8006356:	892a      	ldrh	r2, [r5, #8]
 8006358:	6025      	str	r5, [r4, #0]
 800635a:	4413      	add	r3, r2
 800635c:	8123      	strh	r3, [r4, #8]
 800635e:	f003 fba1 	bl	8009aa4 <sys_arch_protect>
 8006362:	89eb      	ldrh	r3, [r5, #14]
 8006364:	3301      	adds	r3, #1
 8006366:	81eb      	strh	r3, [r5, #14]
 8006368:	f003 fba8 	bl	8009abc <sys_arch_unprotect>
 800636c:	89eb      	ldrh	r3, [r5, #14]
 800636e:	b103      	cbz	r3, 8006372 <pbuf_chain+0x6a>
 8006370:	bd70      	pop	{r4, r5, r6, pc}
 8006372:	4b0c      	ldr	r3, [pc, #48]	; (80063a4 <pbuf_chain+0x9c>)
 8006374:	f240 3239 	movw	r2, #825	; 0x339
 8006378:	490e      	ldr	r1, [pc, #56]	; (80063b4 <pbuf_chain+0xac>)
 800637a:	480c      	ldr	r0, [pc, #48]	; (80063ac <pbuf_chain+0xa4>)
 800637c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006380:	f009 bafa 	b.w	800f978 <iprintf>
 8006384:	4b07      	ldr	r3, [pc, #28]	; (80063a4 <pbuf_chain+0x9c>)
 8006386:	f240 324d 	movw	r2, #845	; 0x34d
 800638a:	490b      	ldr	r1, [pc, #44]	; (80063b8 <pbuf_chain+0xb0>)
 800638c:	4807      	ldr	r0, [pc, #28]	; (80063ac <pbuf_chain+0xa4>)
 800638e:	f009 faf3 	bl	800f978 <iprintf>
 8006392:	2d00      	cmp	r5, #0
 8006394:	d1e3      	bne.n	800635e <pbuf_chain+0x56>
 8006396:	bd70      	pop	{r4, r5, r6, pc}
 8006398:	4604      	mov	r4, r0
 800639a:	8963      	ldrh	r3, [r4, #10]
 800639c:	8922      	ldrh	r2, [r4, #8]
 800639e:	429a      	cmp	r2, r3
 80063a0:	d1c8      	bne.n	8006334 <pbuf_chain+0x2c>
 80063a2:	e7d8      	b.n	8006356 <pbuf_chain+0x4e>
 80063a4:	080111a8 	.word	0x080111a8
 80063a8:	08011404 	.word	0x08011404
 80063ac:	08010e34 	.word	0x08010e34
 80063b0:	08011434 	.word	0x08011434
 80063b4:	080113b8 	.word	0x080113b8
 80063b8:	080113cc 	.word	0x080113cc

080063bc <pbuf_copy>:
 80063bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063c0:	2800      	cmp	r0, #0
 80063c2:	f000 809d 	beq.w	8006500 <pbuf_copy+0x144>
 80063c6:	fab1 f781 	clz	r7, r1
 80063ca:	4688      	mov	r8, r1
 80063cc:	097f      	lsrs	r7, r7, #5
 80063ce:	2f00      	cmp	r7, #0
 80063d0:	f040 8096 	bne.w	8006500 <pbuf_copy+0x144>
 80063d4:	8902      	ldrh	r2, [r0, #8]
 80063d6:	4606      	mov	r6, r0
 80063d8:	890b      	ldrh	r3, [r1, #8]
 80063da:	429a      	cmp	r2, r3
 80063dc:	f0c0 8090 	bcc.w	8006500 <pbuf_copy+0x144>
 80063e0:	8942      	ldrh	r2, [r0, #10]
 80063e2:	463d      	mov	r5, r7
 80063e4:	894c      	ldrh	r4, [r1, #10]
 80063e6:	f8df a12c 	ldr.w	sl, [pc, #300]	; 8006514 <pbuf_copy+0x158>
 80063ea:	f8df b140 	ldr.w	fp, [pc, #320]	; 800652c <pbuf_copy+0x170>
 80063ee:	f8df 912c 	ldr.w	r9, [pc, #300]	; 800651c <pbuf_copy+0x160>
 80063f2:	1be3      	subs	r3, r4, r7
 80063f4:	1b52      	subs	r2, r2, r5
 80063f6:	6870      	ldr	r0, [r6, #4]
 80063f8:	429a      	cmp	r2, r3
 80063fa:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80063fe:	4428      	add	r0, r5
 8006400:	bfa8      	it	ge
 8006402:	b29c      	uxthge	r4, r3
 8006404:	4439      	add	r1, r7
 8006406:	bfb8      	it	lt
 8006408:	b294      	uxthlt	r4, r2
 800640a:	4425      	add	r5, r4
 800640c:	4622      	mov	r2, r4
 800640e:	f009 faa0 	bl	800f952 <memcpy>
 8006412:	8973      	ldrh	r3, [r6, #10]
 8006414:	b2ad      	uxth	r5, r5
 8006416:	4427      	add	r7, r4
 8006418:	42ab      	cmp	r3, r5
 800641a:	b2bf      	uxth	r7, r7
 800641c:	d349      	bcc.n	80064b2 <pbuf_copy+0xf6>
 800641e:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8006422:	429f      	cmp	r7, r3
 8006424:	d83b      	bhi.n	800649e <pbuf_copy+0xe2>
 8006426:	429f      	cmp	r7, r3
 8006428:	d302      	bcc.n	8006430 <pbuf_copy+0x74>
 800642a:	f8d8 8000 	ldr.w	r8, [r8]
 800642e:	2700      	movs	r7, #0
 8006430:	8973      	ldrh	r3, [r6, #10]
 8006432:	42ab      	cmp	r3, r5
 8006434:	d015      	beq.n	8006462 <pbuf_copy+0xa6>
 8006436:	f1b8 0f00 	cmp.w	r8, #0
 800643a:	d044      	beq.n	80064c6 <pbuf_copy+0x10a>
 800643c:	f8b8 400a 	ldrh.w	r4, [r8, #10]
 8006440:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8006444:	429c      	cmp	r4, r3
 8006446:	d01b      	beq.n	8006480 <pbuf_copy+0xc4>
 8006448:	8972      	ldrh	r2, [r6, #10]
 800644a:	8933      	ldrh	r3, [r6, #8]
 800644c:	4293      	cmp	r3, r2
 800644e:	d1d0      	bne.n	80063f2 <pbuf_copy+0x36>
 8006450:	6833      	ldr	r3, [r6, #0]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d13e      	bne.n	80064d4 <pbuf_copy+0x118>
 8006456:	f1b8 0f00 	cmp.w	r8, #0
 800645a:	d1ca      	bne.n	80063f2 <pbuf_copy+0x36>
 800645c:	2000      	movs	r0, #0
 800645e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006462:	6836      	ldr	r6, [r6, #0]
 8006464:	b916      	cbnz	r6, 800646c <pbuf_copy+0xb0>
 8006466:	f1b8 0f00 	cmp.w	r8, #0
 800646a:	d13e      	bne.n	80064ea <pbuf_copy+0x12e>
 800646c:	f1b8 0f00 	cmp.w	r8, #0
 8006470:	d027      	beq.n	80064c2 <pbuf_copy+0x106>
 8006472:	f8b8 400a 	ldrh.w	r4, [r8, #10]
 8006476:	2500      	movs	r5, #0
 8006478:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800647c:	429c      	cmp	r4, r3
 800647e:	d1e3      	bne.n	8006448 <pbuf_copy+0x8c>
 8006480:	f8d8 3000 	ldr.w	r3, [r8]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d0df      	beq.n	8006448 <pbuf_copy+0x8c>
 8006488:	4b22      	ldr	r3, [pc, #136]	; (8006514 <pbuf_copy+0x158>)
 800648a:	f240 32de 	movw	r2, #990	; 0x3de
 800648e:	4922      	ldr	r1, [pc, #136]	; (8006518 <pbuf_copy+0x15c>)
 8006490:	4822      	ldr	r0, [pc, #136]	; (800651c <pbuf_copy+0x160>)
 8006492:	f009 fa71 	bl	800f978 <iprintf>
 8006496:	f06f 0005 	mvn.w	r0, #5
 800649a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800649e:	4653      	mov	r3, sl
 80064a0:	f240 32ce 	movw	r2, #974	; 0x3ce
 80064a4:	491e      	ldr	r1, [pc, #120]	; (8006520 <pbuf_copy+0x164>)
 80064a6:	4648      	mov	r0, r9
 80064a8:	f009 fa66 	bl	800f978 <iprintf>
 80064ac:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 80064b0:	e7b9      	b.n	8006426 <pbuf_copy+0x6a>
 80064b2:	4653      	mov	r3, sl
 80064b4:	f240 32cd 	movw	r2, #973	; 0x3cd
 80064b8:	4659      	mov	r1, fp
 80064ba:	4648      	mov	r0, r9
 80064bc:	f009 fa5c 	bl	800f978 <iprintf>
 80064c0:	e7ad      	b.n	800641e <pbuf_copy+0x62>
 80064c2:	2e00      	cmp	r6, #0
 80064c4:	d0ca      	beq.n	800645c <pbuf_copy+0xa0>
 80064c6:	8932      	ldrh	r2, [r6, #8]
 80064c8:	8973      	ldrh	r3, [r6, #10]
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d1c6      	bne.n	800645c <pbuf_copy+0xa0>
 80064ce:	6830      	ldr	r0, [r6, #0]
 80064d0:	2800      	cmp	r0, #0
 80064d2:	d0c4      	beq.n	800645e <pbuf_copy+0xa2>
 80064d4:	4b0f      	ldr	r3, [pc, #60]	; (8006514 <pbuf_copy+0x158>)
 80064d6:	f240 32e3 	movw	r2, #995	; 0x3e3
 80064da:	490f      	ldr	r1, [pc, #60]	; (8006518 <pbuf_copy+0x15c>)
 80064dc:	480f      	ldr	r0, [pc, #60]	; (800651c <pbuf_copy+0x160>)
 80064de:	f009 fa4b 	bl	800f978 <iprintf>
 80064e2:	f06f 0005 	mvn.w	r0, #5
 80064e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064ea:	4b0a      	ldr	r3, [pc, #40]	; (8006514 <pbuf_copy+0x158>)
 80064ec:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80064f0:	490c      	ldr	r1, [pc, #48]	; (8006524 <pbuf_copy+0x168>)
 80064f2:	480a      	ldr	r0, [pc, #40]	; (800651c <pbuf_copy+0x160>)
 80064f4:	f009 fa40 	bl	800f978 <iprintf>
 80064f8:	f06f 000f 	mvn.w	r0, #15
 80064fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006500:	4b04      	ldr	r3, [pc, #16]	; (8006514 <pbuf_copy+0x158>)
 8006502:	f240 32bd 	movw	r2, #957	; 0x3bd
 8006506:	4908      	ldr	r1, [pc, #32]	; (8006528 <pbuf_copy+0x16c>)
 8006508:	4804      	ldr	r0, [pc, #16]	; (800651c <pbuf_copy+0x160>)
 800650a:	f009 fa35 	bl	800f978 <iprintf>
 800650e:	f06f 000f 	mvn.w	r0, #15
 8006512:	e7a4      	b.n	800645e <pbuf_copy+0xa2>
 8006514:	080111a8 	.word	0x080111a8
 8006518:	080114f4 	.word	0x080114f4
 800651c:	08010e34 	.word	0x08010e34
 8006520:	080114c8 	.word	0x080114c8
 8006524:	080114e4 	.word	0x080114e4
 8006528:	08011480 	.word	0x08011480
 800652c:	080114b0 	.word	0x080114b0

08006530 <pbuf_take>:
 8006530:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006534:	2800      	cmp	r0, #0
 8006536:	d04c      	beq.n	80065d2 <pbuf_take+0xa2>
 8006538:	460f      	mov	r7, r1
 800653a:	2900      	cmp	r1, #0
 800653c:	d03f      	beq.n	80065be <pbuf_take+0x8e>
 800653e:	8903      	ldrh	r3, [r0, #8]
 8006540:	4690      	mov	r8, r2
 8006542:	4605      	mov	r5, r0
 8006544:	4293      	cmp	r3, r2
 8006546:	d330      	bcc.n	80065aa <pbuf_take+0x7a>
 8006548:	b312      	cbz	r2, 8006590 <pbuf_take+0x60>
 800654a:	4614      	mov	r4, r2
 800654c:	2600      	movs	r6, #0
 800654e:	f8df b09c 	ldr.w	fp, [pc, #156]	; 80065ec <pbuf_take+0xbc>
 8006552:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8006600 <pbuf_take+0xd0>
 8006556:	896b      	ldrh	r3, [r5, #10]
 8006558:	19b9      	adds	r1, r7, r6
 800655a:	6868      	ldr	r0, [r5, #4]
 800655c:	42a3      	cmp	r3, r4
 800655e:	bf28      	it	cs
 8006560:	4623      	movcs	r3, r4
 8006562:	4699      	mov	r9, r3
 8006564:	461a      	mov	r2, r3
 8006566:	f009 f9f4 	bl	800f952 <memcpy>
 800656a:	682d      	ldr	r5, [r5, #0]
 800656c:	eba4 0409 	sub.w	r4, r4, r9
 8006570:	444e      	add	r6, r9
 8006572:	b2a4      	uxth	r4, r4
 8006574:	b2b6      	uxth	r6, r6
 8006576:	b14c      	cbz	r4, 800658c <pbuf_take+0x5c>
 8006578:	2d00      	cmp	r5, #0
 800657a:	d1ec      	bne.n	8006556 <pbuf_take+0x26>
 800657c:	465b      	mov	r3, fp
 800657e:	f240 428e 	movw	r2, #1166	; 0x48e
 8006582:	4651      	mov	r1, sl
 8006584:	4818      	ldr	r0, [pc, #96]	; (80065e8 <pbuf_take+0xb8>)
 8006586:	f009 f9f7 	bl	800f978 <iprintf>
 800658a:	e7e4      	b.n	8006556 <pbuf_take+0x26>
 800658c:	45b0      	cmp	r8, r6
 800658e:	d102      	bne.n	8006596 <pbuf_take+0x66>
 8006590:	2000      	movs	r0, #0
 8006592:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006596:	4b15      	ldr	r3, [pc, #84]	; (80065ec <pbuf_take+0xbc>)
 8006598:	f240 4299 	movw	r2, #1177	; 0x499
 800659c:	4914      	ldr	r1, [pc, #80]	; (80065f0 <pbuf_take+0xc0>)
 800659e:	4812      	ldr	r0, [pc, #72]	; (80065e8 <pbuf_take+0xb8>)
 80065a0:	f009 f9ea 	bl	800f978 <iprintf>
 80065a4:	4620      	mov	r0, r4
 80065a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065aa:	4b10      	ldr	r3, [pc, #64]	; (80065ec <pbuf_take+0xbc>)
 80065ac:	f240 4286 	movw	r2, #1158	; 0x486
 80065b0:	4910      	ldr	r1, [pc, #64]	; (80065f4 <pbuf_take+0xc4>)
 80065b2:	480d      	ldr	r0, [pc, #52]	; (80065e8 <pbuf_take+0xb8>)
 80065b4:	f009 f9e0 	bl	800f978 <iprintf>
 80065b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80065bc:	e7e9      	b.n	8006592 <pbuf_take+0x62>
 80065be:	4b0b      	ldr	r3, [pc, #44]	; (80065ec <pbuf_take+0xbc>)
 80065c0:	f240 4285 	movw	r2, #1157	; 0x485
 80065c4:	490c      	ldr	r1, [pc, #48]	; (80065f8 <pbuf_take+0xc8>)
 80065c6:	4808      	ldr	r0, [pc, #32]	; (80065e8 <pbuf_take+0xb8>)
 80065c8:	f009 f9d6 	bl	800f978 <iprintf>
 80065cc:	f06f 000f 	mvn.w	r0, #15
 80065d0:	e7df      	b.n	8006592 <pbuf_take+0x62>
 80065d2:	4b06      	ldr	r3, [pc, #24]	; (80065ec <pbuf_take+0xbc>)
 80065d4:	f240 4284 	movw	r2, #1156	; 0x484
 80065d8:	4908      	ldr	r1, [pc, #32]	; (80065fc <pbuf_take+0xcc>)
 80065da:	4803      	ldr	r0, [pc, #12]	; (80065e8 <pbuf_take+0xb8>)
 80065dc:	f009 f9cc 	bl	800f978 <iprintf>
 80065e0:	f06f 000f 	mvn.w	r0, #15
 80065e4:	e7d5      	b.n	8006592 <pbuf_take+0x62>
 80065e6:	bf00      	nop
 80065e8:	08010e34 	.word	0x08010e34
 80065ec:	080111a8 	.word	0x080111a8
 80065f0:	080115d0 	.word	0x080115d0
 80065f4:	08011598 	.word	0x08011598
 80065f8:	0801157c 	.word	0x0801157c
 80065fc:	08011564 	.word	0x08011564
 8006600:	080115b8 	.word	0x080115b8

08006604 <pbuf_take_at>:
 8006604:	b388      	cbz	r0, 800666a <pbuf_take_at+0x66>
 8006606:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800660a:	4617      	mov	r7, r2
 800660c:	8942      	ldrh	r2, [r0, #10]
 800660e:	460d      	mov	r5, r1
 8006610:	4606      	mov	r6, r0
 8006612:	4293      	cmp	r3, r2
 8006614:	d203      	bcs.n	800661e <pbuf_take_at+0x1a>
 8006616:	e00b      	b.n	8006630 <pbuf_take_at+0x2c>
 8006618:	8972      	ldrh	r2, [r6, #10]
 800661a:	429a      	cmp	r2, r3
 800661c:	d808      	bhi.n	8006630 <pbuf_take_at+0x2c>
 800661e:	1a9b      	subs	r3, r3, r2
 8006620:	6836      	ldr	r6, [r6, #0]
 8006622:	b29b      	uxth	r3, r3
 8006624:	2e00      	cmp	r6, #0
 8006626:	d1f7      	bne.n	8006618 <pbuf_take_at+0x14>
 8006628:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800662c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006630:	8930      	ldrh	r0, [r6, #8]
 8006632:	19d9      	adds	r1, r3, r7
 8006634:	4288      	cmp	r0, r1
 8006636:	dbf7      	blt.n	8006628 <pbuf_take_at+0x24>
 8006638:	1ad4      	subs	r4, r2, r3
 800663a:	6870      	ldr	r0, [r6, #4]
 800663c:	4629      	mov	r1, r5
 800663e:	42bc      	cmp	r4, r7
 8006640:	4418      	add	r0, r3
 8006642:	bfa8      	it	ge
 8006644:	463c      	movge	r4, r7
 8006646:	fa1f f884 	uxth.w	r8, r4
 800664a:	4642      	mov	r2, r8
 800664c:	f009 f981 	bl	800f952 <memcpy>
 8006650:	1b3a      	subs	r2, r7, r4
 8006652:	b292      	uxth	r2, r2
 8006654:	b912      	cbnz	r2, 800665c <pbuf_take_at+0x58>
 8006656:	4610      	mov	r0, r2
 8006658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800665c:	eb05 0108 	add.w	r1, r5, r8
 8006660:	6830      	ldr	r0, [r6, #0]
 8006662:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006666:	f7ff bf63 	b.w	8006530 <pbuf_take>
 800666a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800666e:	4770      	bx	lr

08006670 <sys_msleep>:
 8006670:	b900      	cbnz	r0, 8006674 <sys_msleep+0x4>
 8006672:	4770      	bx	lr
 8006674:	b510      	push	{r4, lr}
 8006676:	b082      	sub	sp, #8
 8006678:	4604      	mov	r4, r0
 800667a:	2100      	movs	r1, #0
 800667c:	a801      	add	r0, sp, #4
 800667e:	f003 f98b 	bl	8009998 <sys_sem_new>
 8006682:	b108      	cbz	r0, 8006688 <sys_msleep+0x18>
 8006684:	b002      	add	sp, #8
 8006686:	bd10      	pop	{r4, pc}
 8006688:	4621      	mov	r1, r4
 800668a:	a801      	add	r0, sp, #4
 800668c:	f003 f9a0 	bl	80099d0 <sys_arch_sem_wait>
 8006690:	a801      	add	r0, sp, #4
 8006692:	f003 f9bd 	bl	8009a10 <sys_sem_free>
 8006696:	b002      	add	sp, #8
 8006698:	bd10      	pop	{r4, pc}
 800669a:	bf00      	nop

0800669c <cyclic_timer>:
 800669c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066a0:	6843      	ldr	r3, [r0, #4]
 80066a2:	4605      	mov	r5, r0
 80066a4:	4798      	blx	r3
 80066a6:	2008      	movs	r0, #8
 80066a8:	682e      	ldr	r6, [r5, #0]
 80066aa:	f7ff f9cb 	bl	8005a44 <memp_malloc>
 80066ae:	2800      	cmp	r0, #0
 80066b0:	d02c      	beq.n	800670c <cyclic_timer+0x70>
 80066b2:	4604      	mov	r4, r0
 80066b4:	f003 fc1e 	bl	8009ef4 <sys_now>
 80066b8:	4a1f      	ldr	r2, [pc, #124]	; (8006738 <cyclic_timer+0x9c>)
 80066ba:	6817      	ldr	r7, [r2, #0]
 80066bc:	2f00      	cmp	r7, #0
 80066be:	d02d      	beq.n	800671c <cyclic_timer+0x80>
 80066c0:	6853      	ldr	r3, [r2, #4]
 80066c2:	2100      	movs	r1, #0
 80066c4:	60e5      	str	r5, [r4, #12]
 80066c6:	1af3      	subs	r3, r6, r3
 80066c8:	6021      	str	r1, [r4, #0]
 80066ca:	491c      	ldr	r1, [pc, #112]	; (800673c <cyclic_timer+0xa0>)
 80066cc:	4418      	add	r0, r3
 80066ce:	e9c4 0101 	strd	r0, r1, [r4, #4]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	429e      	cmp	r6, r3
 80066d6:	d313      	bcc.n	8006700 <cyclic_timer+0x64>
 80066d8:	4639      	mov	r1, r7
 80066da:	e003      	b.n	80066e4 <cyclic_timer+0x48>
 80066dc:	6853      	ldr	r3, [r2, #4]
 80066de:	4298      	cmp	r0, r3
 80066e0:	d325      	bcc.n	800672e <cyclic_timer+0x92>
 80066e2:	4611      	mov	r1, r2
 80066e4:	1ac0      	subs	r0, r0, r3
 80066e6:	680a      	ldr	r2, [r1, #0]
 80066e8:	6060      	str	r0, [r4, #4]
 80066ea:	2a00      	cmp	r2, #0
 80066ec:	d1f6      	bne.n	80066dc <cyclic_timer+0x40>
 80066ee:	4286      	cmp	r6, r0
 80066f0:	d202      	bcs.n	80066f8 <cyclic_timer+0x5c>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	4433      	add	r3, r6
 80066f6:	6063      	str	r3, [r4, #4]
 80066f8:	6022      	str	r2, [r4, #0]
 80066fa:	600c      	str	r4, [r1, #0]
 80066fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006700:	1b9b      	subs	r3, r3, r6
 8006702:	6014      	str	r4, [r2, #0]
 8006704:	607b      	str	r3, [r7, #4]
 8006706:	6027      	str	r7, [r4, #0]
 8006708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800670c:	4b0c      	ldr	r3, [pc, #48]	; (8006740 <cyclic_timer+0xa4>)
 800670e:	22d4      	movs	r2, #212	; 0xd4
 8006710:	490c      	ldr	r1, [pc, #48]	; (8006744 <cyclic_timer+0xa8>)
 8006712:	480d      	ldr	r0, [pc, #52]	; (8006748 <cyclic_timer+0xac>)
 8006714:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006718:	f009 b92e 	b.w	800f978 <iprintf>
 800671c:	4b07      	ldr	r3, [pc, #28]	; (800673c <cyclic_timer+0xa0>)
 800671e:	6050      	str	r0, [r2, #4]
 8006720:	6027      	str	r7, [r4, #0]
 8006722:	60e5      	str	r5, [r4, #12]
 8006724:	6066      	str	r6, [r4, #4]
 8006726:	6014      	str	r4, [r2, #0]
 8006728:	60a3      	str	r3, [r4, #8]
 800672a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800672e:	1a18      	subs	r0, r3, r0
 8006730:	6050      	str	r0, [r2, #4]
 8006732:	6022      	str	r2, [r4, #0]
 8006734:	600c      	str	r4, [r1, #0]
 8006736:	e7e1      	b.n	80066fc <cyclic_timer+0x60>
 8006738:	200032dc 	.word	0x200032dc
 800673c:	0800669d 	.word	0x0800669d
 8006740:	080115fc 	.word	0x080115fc
 8006744:	08011630 	.word	0x08011630
 8006748:	08010e34 	.word	0x08010e34

0800674c <sys_timeouts_init>:
 800674c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006750:	2400      	movs	r4, #0
 8006752:	4f34      	ldr	r7, [pc, #208]	; (8006824 <sys_timeouts_init+0xd8>)
 8006754:	4e34      	ldr	r6, [pc, #208]	; (8006828 <sys_timeouts_init+0xdc>)
 8006756:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8006830 <sys_timeouts_init+0xe4>
 800675a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006834 <sys_timeouts_init+0xe8>
 800675e:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 8006838 <sys_timeouts_init+0xec>
 8006762:	2008      	movs	r0, #8
 8006764:	593d      	ldr	r5, [r7, r4]
 8006766:	f7ff f96d 	bl	8005a44 <memp_malloc>
 800676a:	4683      	mov	fp, r0
 800676c:	b3a0      	cbz	r0, 80067d8 <sys_timeouts_init+0x8c>
 800676e:	f003 fbc1 	bl	8009ef4 <sys_now>
 8006772:	6831      	ldr	r1, [r6, #0]
 8006774:	193a      	adds	r2, r7, r4
 8006776:	2900      	cmp	r1, #0
 8006778:	d043      	beq.n	8006802 <sys_timeouts_init+0xb6>
 800677a:	6873      	ldr	r3, [r6, #4]
 800677c:	f04f 0c00 	mov.w	ip, #0
 8006780:	f8cb 8008 	str.w	r8, [fp, #8]
 8006784:	1aeb      	subs	r3, r5, r3
 8006786:	f8cb 200c 	str.w	r2, [fp, #12]
 800678a:	f8cb c000 	str.w	ip, [fp]
 800678e:	4418      	add	r0, r3
 8006790:	f8cb 0004 	str.w	r0, [fp, #4]
 8006794:	684b      	ldr	r3, [r1, #4]
 8006796:	429d      	cmp	r5, r3
 8006798:	d32c      	bcc.n	80067f4 <sys_timeouts_init+0xa8>
 800679a:	468c      	mov	ip, r1
 800679c:	e003      	b.n	80067a6 <sys_timeouts_init+0x5a>
 800679e:	6853      	ldr	r3, [r2, #4]
 80067a0:	4298      	cmp	r0, r3
 80067a2:	d338      	bcc.n	8006816 <sys_timeouts_init+0xca>
 80067a4:	4694      	mov	ip, r2
 80067a6:	1ac0      	subs	r0, r0, r3
 80067a8:	f8dc 2000 	ldr.w	r2, [ip]
 80067ac:	f8cb 0004 	str.w	r0, [fp, #4]
 80067b0:	2a00      	cmp	r2, #0
 80067b2:	d1f4      	bne.n	800679e <sys_timeouts_init+0x52>
 80067b4:	4285      	cmp	r5, r0
 80067b6:	d203      	bcs.n	80067c0 <sys_timeouts_init+0x74>
 80067b8:	684b      	ldr	r3, [r1, #4]
 80067ba:	441d      	add	r5, r3
 80067bc:	f8cb 5004 	str.w	r5, [fp, #4]
 80067c0:	f8cb 2000 	str.w	r2, [fp]
 80067c4:	f8cc b000 	str.w	fp, [ip]
 80067c8:	3408      	adds	r4, #8
 80067ca:	2c18      	cmp	r4, #24
 80067cc:	d1c9      	bne.n	8006762 <sys_timeouts_init+0x16>
 80067ce:	f003 fb91 	bl	8009ef4 <sys_now>
 80067d2:	6070      	str	r0, [r6, #4]
 80067d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067d8:	4653      	mov	r3, sl
 80067da:	22d4      	movs	r2, #212	; 0xd4
 80067dc:	4649      	mov	r1, r9
 80067de:	4813      	ldr	r0, [pc, #76]	; (800682c <sys_timeouts_init+0xe0>)
 80067e0:	f009 f8ca 	bl	800f978 <iprintf>
 80067e4:	3408      	adds	r4, #8
 80067e6:	2c18      	cmp	r4, #24
 80067e8:	d1bb      	bne.n	8006762 <sys_timeouts_init+0x16>
 80067ea:	f003 fb83 	bl	8009ef4 <sys_now>
 80067ee:	6070      	str	r0, [r6, #4]
 80067f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067f4:	1b5d      	subs	r5, r3, r5
 80067f6:	f8c6 b000 	str.w	fp, [r6]
 80067fa:	604d      	str	r5, [r1, #4]
 80067fc:	f8cb 1000 	str.w	r1, [fp]
 8006800:	e7f0      	b.n	80067e4 <sys_timeouts_init+0x98>
 8006802:	6070      	str	r0, [r6, #4]
 8006804:	f8cb 1000 	str.w	r1, [fp]
 8006808:	f8cb 5004 	str.w	r5, [fp, #4]
 800680c:	f8c6 b000 	str.w	fp, [r6]
 8006810:	e9cb 8202 	strd	r8, r2, [fp, #8]
 8006814:	e7e6      	b.n	80067e4 <sys_timeouts_init+0x98>
 8006816:	1a18      	subs	r0, r3, r0
 8006818:	6050      	str	r0, [r2, #4]
 800681a:	f8cb 2000 	str.w	r2, [fp]
 800681e:	f8cc b000 	str.w	fp, [ip]
 8006822:	e7d1      	b.n	80067c8 <sys_timeouts_init+0x7c>
 8006824:	08010cf8 	.word	0x08010cf8
 8006828:	200032dc 	.word	0x200032dc
 800682c:	08010e34 	.word	0x08010e34
 8006830:	0800669d 	.word	0x0800669d
 8006834:	080115fc 	.word	0x080115fc
 8006838:	08011630 	.word	0x08011630

0800683c <sys_timeouts_mbox_fetch>:
 800683c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006840:	4c27      	ldr	r4, [pc, #156]	; (80068e0 <sys_timeouts_mbox_fetch+0xa4>)
 8006842:	4680      	mov	r8, r0
 8006844:	4689      	mov	r9, r1
 8006846:	4f27      	ldr	r7, [pc, #156]	; (80068e4 <sys_timeouts_mbox_fetch+0xa8>)
 8006848:	6823      	ldr	r3, [r4, #0]
 800684a:	b18b      	cbz	r3, 8006870 <sys_timeouts_mbox_fetch+0x34>
 800684c:	f003 fb52 	bl	8009ef4 <sys_now>
 8006850:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006854:	1a80      	subs	r0, r0, r2
 8006856:	685a      	ldr	r2, [r3, #4]
 8006858:	4290      	cmp	r0, r2
 800685a:	d810      	bhi.n	800687e <sys_timeouts_mbox_fetch+0x42>
 800685c:	1a12      	subs	r2, r2, r0
 800685e:	d00e      	beq.n	800687e <sys_timeouts_mbox_fetch+0x42>
 8006860:	4649      	mov	r1, r9
 8006862:	4640      	mov	r0, r8
 8006864:	f003 f870 	bl	8009948 <sys_arch_mbox_fetch>
 8006868:	3001      	adds	r0, #1
 800686a:	d136      	bne.n	80068da <sys_timeouts_mbox_fetch+0x9e>
 800686c:	6823      	ldr	r3, [r4, #0]
 800686e:	b933      	cbnz	r3, 800687e <sys_timeouts_mbox_fetch+0x42>
 8006870:	4649      	mov	r1, r9
 8006872:	4640      	mov	r0, r8
 8006874:	2200      	movs	r2, #0
 8006876:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800687a:	f003 b865 	b.w	8009948 <sys_arch_mbox_fetch>
 800687e:	f003 fb39 	bl	8009ef4 <sys_now>
 8006882:	6863      	ldr	r3, [r4, #4]
 8006884:	eba0 0a03 	sub.w	sl, r0, r3
 8006888:	6823      	ldr	r3, [r4, #0]
 800688a:	2008      	movs	r0, #8
 800688c:	4619      	mov	r1, r3
 800688e:	2b00      	cmp	r3, #0
 8006890:	d0ee      	beq.n	8006870 <sys_timeouts_mbox_fetch+0x34>
 8006892:	685a      	ldr	r2, [r3, #4]
 8006894:	4552      	cmp	r2, sl
 8006896:	ebaa 0a02 	sub.w	sl, sl, r2
 800689a:	d8d6      	bhi.n	800684a <sys_timeouts_mbox_fetch+0xe>
 800689c:	6865      	ldr	r5, [r4, #4]
 800689e:	681e      	ldr	r6, [r3, #0]
 80068a0:	442a      	add	r2, r5
 80068a2:	689d      	ldr	r5, [r3, #8]
 80068a4:	e9c4 6200 	strd	r6, r2, [r4]
 80068a8:	68de      	ldr	r6, [r3, #12]
 80068aa:	f7ff f8fd 	bl	8005aa8 <memp_free>
 80068ae:	4638      	mov	r0, r7
 80068b0:	2d00      	cmp	r5, #0
 80068b2:	d0e9      	beq.n	8006888 <sys_timeouts_mbox_fetch+0x4c>
 80068b4:	f003 f8d8 	bl	8009a68 <sys_mutex_lock>
 80068b8:	4630      	mov	r0, r6
 80068ba:	47a8      	blx	r5
 80068bc:	4638      	mov	r0, r7
 80068be:	f003 f8d9 	bl	8009a74 <sys_mutex_unlock>
 80068c2:	6823      	ldr	r3, [r4, #0]
 80068c4:	2008      	movs	r0, #8
 80068c6:	4619      	mov	r1, r3
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d1e2      	bne.n	8006892 <sys_timeouts_mbox_fetch+0x56>
 80068cc:	4649      	mov	r1, r9
 80068ce:	4640      	mov	r0, r8
 80068d0:	2200      	movs	r2, #0
 80068d2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068d6:	f003 b837 	b.w	8009948 <sys_arch_mbox_fetch>
 80068da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068de:	bf00      	nop
 80068e0:	200032dc 	.word	0x200032dc
 80068e4:	20005a18 	.word	0x20005a18

080068e8 <udp_init>:
 80068e8:	4770      	bx	lr
 80068ea:	bf00      	nop

080068ec <udp_input>:
 80068ec:	8943      	ldrh	r3, [r0, #10]
 80068ee:	2b07      	cmp	r3, #7
 80068f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068f4:	4605      	mov	r5, r0
 80068f6:	b085      	sub	sp, #20
 80068f8:	d95b      	bls.n	80069b2 <udp_input+0xc6>
 80068fa:	4e66      	ldr	r6, [pc, #408]	; (8006a94 <udp_input+0x1a8>)
 80068fc:	4689      	mov	r9, r1
 80068fe:	6844      	ldr	r4, [r0, #4]
 8006900:	6831      	ldr	r1, [r6, #0]
 8006902:	6970      	ldr	r0, [r6, #20]
 8006904:	f002 fae6 	bl	8008ed4 <ip4_addr_isbroadcast_u32>
 8006908:	f8df b19c 	ldr.w	fp, [pc, #412]	; 8006aa8 <udp_input+0x1bc>
 800690c:	4680      	mov	r8, r0
 800690e:	8820      	ldrh	r0, [r4, #0]
 8006910:	f7fe fe00 	bl	8005514 <lwip_htons>
 8006914:	4607      	mov	r7, r0
 8006916:	8860      	ldrh	r0, [r4, #2]
 8006918:	f7fe fdfc 	bl	8005514 <lwip_htons>
 800691c:	f8db e000 	ldr.w	lr, [fp]
 8006920:	f8d6 c014 	ldr.w	ip, [r6, #20]
 8006924:	f1be 0f00 	cmp.w	lr, #0
 8006928:	d075      	beq.n	8006a16 <udp_input+0x12a>
 800692a:	6933      	ldr	r3, [r6, #16]
 800692c:	9302      	str	r3, [sp, #8]
 800692e:	f1b8 0f00 	cmp.w	r8, #0
 8006932:	d144      	bne.n	80069be <udp_input+0xd2>
 8006934:	4674      	mov	r4, lr
 8006936:	4642      	mov	r2, r8
 8006938:	4643      	mov	r3, r8
 800693a:	46aa      	mov	sl, r5
 800693c:	e004      	b.n	8006948 <udp_input+0x5c>
 800693e:	68e1      	ldr	r1, [r4, #12]
 8006940:	4623      	mov	r3, r4
 8006942:	460c      	mov	r4, r1
 8006944:	2900      	cmp	r1, #0
 8006946:	d063      	beq.n	8006a10 <udp_input+0x124>
 8006948:	8a61      	ldrh	r1, [r4, #18]
 800694a:	4281      	cmp	r1, r0
 800694c:	d1f7      	bne.n	800693e <udp_input+0x52>
 800694e:	6821      	ldr	r1, [r4, #0]
 8006950:	b109      	cbz	r1, 8006956 <udp_input+0x6a>
 8006952:	4561      	cmp	r1, ip
 8006954:	d1f3      	bne.n	800693e <udp_input+0x52>
 8006956:	7c21      	ldrb	r1, [r4, #16]
 8006958:	0749      	lsls	r1, r1, #29
 800695a:	d402      	bmi.n	8006962 <udp_input+0x76>
 800695c:	2a00      	cmp	r2, #0
 800695e:	bf08      	it	eq
 8006960:	4622      	moveq	r2, r4
 8006962:	8aa1      	ldrh	r1, [r4, #20]
 8006964:	42b9      	cmp	r1, r7
 8006966:	d1ea      	bne.n	800693e <udp_input+0x52>
 8006968:	6861      	ldr	r1, [r4, #4]
 800696a:	b111      	cbz	r1, 8006972 <udp_input+0x86>
 800696c:	9d02      	ldr	r5, [sp, #8]
 800696e:	428d      	cmp	r5, r1
 8006970:	d1e5      	bne.n	800693e <udp_input+0x52>
 8006972:	4655      	mov	r5, sl
 8006974:	b12b      	cbz	r3, 8006982 <udp_input+0x96>
 8006976:	68e2      	ldr	r2, [r4, #12]
 8006978:	f8cb 4000 	str.w	r4, [fp]
 800697c:	60da      	str	r2, [r3, #12]
 800697e:	f8c4 e00c 	str.w	lr, [r4, #12]
 8006982:	f06f 0107 	mvn.w	r1, #7
 8006986:	4628      	mov	r0, r5
 8006988:	f7ff f9a8 	bl	8005cdc <pbuf_header>
 800698c:	b950      	cbnz	r0, 80069a4 <udp_input+0xb8>
 800698e:	6a26      	ldr	r6, [r4, #32]
 8006990:	b17e      	cbz	r6, 80069b2 <udp_input+0xc6>
 8006992:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006994:	462a      	mov	r2, r5
 8006996:	4621      	mov	r1, r4
 8006998:	4b3f      	ldr	r3, [pc, #252]	; (8006a98 <udp_input+0x1ac>)
 800699a:	9700      	str	r7, [sp, #0]
 800699c:	47b0      	blx	r6
 800699e:	b005      	add	sp, #20
 80069a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069a4:	4b3d      	ldr	r3, [pc, #244]	; (8006a9c <udp_input+0x1b0>)
 80069a6:	f240 1255 	movw	r2, #341	; 0x155
 80069aa:	493d      	ldr	r1, [pc, #244]	; (8006aa0 <udp_input+0x1b4>)
 80069ac:	483d      	ldr	r0, [pc, #244]	; (8006aa4 <udp_input+0x1b8>)
 80069ae:	f008 ffe3 	bl	800f978 <iprintf>
 80069b2:	4628      	mov	r0, r5
 80069b4:	b005      	add	sp, #20
 80069b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069ba:	f7ff ba3f 	b.w	8005e3c <pbuf_free>
 80069be:	2200      	movs	r2, #0
 80069c0:	f1bc 3fff 	cmp.w	ip, #4294967295	; 0xffffffff
 80069c4:	4674      	mov	r4, lr
 80069c6:	4613      	mov	r3, r2
 80069c8:	d043      	beq.n	8006a52 <udp_input+0x166>
 80069ca:	9503      	str	r5, [sp, #12]
 80069cc:	e004      	b.n	80069d8 <udp_input+0xec>
 80069ce:	68e1      	ldr	r1, [r4, #12]
 80069d0:	4623      	mov	r3, r4
 80069d2:	460c      	mov	r4, r1
 80069d4:	2900      	cmp	r1, #0
 80069d6:	d058      	beq.n	8006a8a <udp_input+0x19e>
 80069d8:	8a61      	ldrh	r1, [r4, #18]
 80069da:	4281      	cmp	r1, r0
 80069dc:	d1f7      	bne.n	80069ce <udp_input+0xe2>
 80069de:	6821      	ldr	r1, [r4, #0]
 80069e0:	ea8c 0a01 	eor.w	sl, ip, r1
 80069e4:	b121      	cbz	r1, 80069f0 <udp_input+0x104>
 80069e6:	f8d9 1008 	ldr.w	r1, [r9, #8]
 80069ea:	ea1a 0f01 	tst.w	sl, r1
 80069ee:	d1ee      	bne.n	80069ce <udp_input+0xe2>
 80069f0:	7c21      	ldrb	r1, [r4, #16]
 80069f2:	074d      	lsls	r5, r1, #29
 80069f4:	d402      	bmi.n	80069fc <udp_input+0x110>
 80069f6:	2a00      	cmp	r2, #0
 80069f8:	bf08      	it	eq
 80069fa:	4622      	moveq	r2, r4
 80069fc:	8aa1      	ldrh	r1, [r4, #20]
 80069fe:	42b9      	cmp	r1, r7
 8006a00:	d1e5      	bne.n	80069ce <udp_input+0xe2>
 8006a02:	6861      	ldr	r1, [r4, #4]
 8006a04:	b111      	cbz	r1, 8006a0c <udp_input+0x120>
 8006a06:	9d02      	ldr	r5, [sp, #8]
 8006a08:	428d      	cmp	r5, r1
 8006a0a:	d1e0      	bne.n	80069ce <udp_input+0xe2>
 8006a0c:	9d03      	ldr	r5, [sp, #12]
 8006a0e:	e7b1      	b.n	8006974 <udp_input+0x88>
 8006a10:	4655      	mov	r5, sl
 8006a12:	2a00      	cmp	r2, #0
 8006a14:	d13b      	bne.n	8006a8e <udp_input+0x1a2>
 8006a16:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8006a1a:	4563      	cmp	r3, ip
 8006a1c:	d1c9      	bne.n	80069b2 <udp_input+0xc6>
 8006a1e:	f06f 0107 	mvn.w	r1, #7
 8006a22:	4628      	mov	r0, r5
 8006a24:	f7ff f95a 	bl	8005cdc <pbuf_header>
 8006a28:	2800      	cmp	r0, #0
 8006a2a:	d1bb      	bne.n	80069a4 <udp_input+0xb8>
 8006a2c:	f1b8 0f00 	cmp.w	r8, #0
 8006a30:	d1bf      	bne.n	80069b2 <udp_input+0xc6>
 8006a32:	6973      	ldr	r3, [r6, #20]
 8006a34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a38:	2be0      	cmp	r3, #224	; 0xe0
 8006a3a:	d0ba      	beq.n	80069b2 <udp_input+0xc6>
 8006a3c:	89b1      	ldrh	r1, [r6, #12]
 8006a3e:	4628      	mov	r0, r5
 8006a40:	3108      	adds	r1, #8
 8006a42:	b209      	sxth	r1, r1
 8006a44:	f7ff f9a2 	bl	8005d8c <pbuf_header_force>
 8006a48:	2103      	movs	r1, #3
 8006a4a:	4628      	mov	r0, r5
 8006a4c:	f001 fbfc 	bl	8008248 <icmp_dest_unreach>
 8006a50:	e7af      	b.n	80069b2 <udp_input+0xc6>
 8006a52:	46aa      	mov	sl, r5
 8006a54:	e004      	b.n	8006a60 <udp_input+0x174>
 8006a56:	68e1      	ldr	r1, [r4, #12]
 8006a58:	4623      	mov	r3, r4
 8006a5a:	460c      	mov	r4, r1
 8006a5c:	2900      	cmp	r1, #0
 8006a5e:	d0d7      	beq.n	8006a10 <udp_input+0x124>
 8006a60:	8a61      	ldrh	r1, [r4, #18]
 8006a62:	4281      	cmp	r1, r0
 8006a64:	d1f7      	bne.n	8006a56 <udp_input+0x16a>
 8006a66:	7c21      	ldrb	r1, [r4, #16]
 8006a68:	0749      	lsls	r1, r1, #29
 8006a6a:	d402      	bmi.n	8006a72 <udp_input+0x186>
 8006a6c:	2a00      	cmp	r2, #0
 8006a6e:	bf08      	it	eq
 8006a70:	4622      	moveq	r2, r4
 8006a72:	8aa1      	ldrh	r1, [r4, #20]
 8006a74:	42b9      	cmp	r1, r7
 8006a76:	d1ee      	bne.n	8006a56 <udp_input+0x16a>
 8006a78:	6861      	ldr	r1, [r4, #4]
 8006a7a:	2900      	cmp	r1, #0
 8006a7c:	f43f af79 	beq.w	8006972 <udp_input+0x86>
 8006a80:	9d02      	ldr	r5, [sp, #8]
 8006a82:	42a9      	cmp	r1, r5
 8006a84:	d1e7      	bne.n	8006a56 <udp_input+0x16a>
 8006a86:	4655      	mov	r5, sl
 8006a88:	e774      	b.n	8006974 <udp_input+0x88>
 8006a8a:	9d03      	ldr	r5, [sp, #12]
 8006a8c:	e7c1      	b.n	8006a12 <udp_input+0x126>
 8006a8e:	4614      	mov	r4, r2
 8006a90:	e777      	b.n	8006982 <udp_input+0x96>
 8006a92:	bf00      	nop
 8006a94:	20005a1c 	.word	0x20005a1c
 8006a98:	20005a2c 	.word	0x20005a2c
 8006a9c:	08011670 	.word	0x08011670
 8006aa0:	080116a0 	.word	0x080116a0
 8006aa4:	08010e34 	.word	0x08010e34
 8006aa8:	20008604 	.word	0x20008604

08006aac <udp_sendto>:
 8006aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ab0:	b087      	sub	sp, #28
 8006ab2:	2800      	cmp	r0, #0
 8006ab4:	f000 80ea 	beq.w	8006c8c <udp_sendto+0x1e0>
 8006ab8:	2a00      	cmp	r2, #0
 8006aba:	f000 80e7 	beq.w	8006c8c <udp_sendto+0x1e0>
 8006abe:	6814      	ldr	r4, [r2, #0]
 8006ac0:	4605      	mov	r5, r0
 8006ac2:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
 8006ac6:	2ce0      	cmp	r4, #224	; 0xe0
 8006ac8:	d05a      	beq.n	8006b80 <udp_sendto+0xd4>
 8006aca:	4610      	mov	r0, r2
 8006acc:	4698      	mov	r8, r3
 8006ace:	4616      	mov	r6, r2
 8006ad0:	460f      	mov	r7, r1
 8006ad2:	f001 fefb 	bl	80088cc <ip4_route>
 8006ad6:	4681      	mov	r9, r0
 8006ad8:	2800      	cmp	r0, #0
 8006ada:	d062      	beq.n	8006ba2 <udp_sendto+0xf6>
 8006adc:	682b      	ldr	r3, [r5, #0]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d165      	bne.n	8006bae <udp_sendto+0x102>
 8006ae2:	8a6b      	ldrh	r3, [r5, #18]
 8006ae4:	f109 0a04 	add.w	sl, r9, #4
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d06c      	beq.n	8006bc6 <udp_sendto+0x11a>
 8006aec:	2108      	movs	r1, #8
 8006aee:	4638      	mov	r0, r7
 8006af0:	f7ff f8f4 	bl	8005cdc <pbuf_header>
 8006af4:	2800      	cmp	r0, #0
 8006af6:	f040 809f 	bne.w	8006c38 <udp_sendto+0x18c>
 8006afa:	463c      	mov	r4, r7
 8006afc:	8963      	ldrh	r3, [r4, #10]
 8006afe:	2b07      	cmp	r3, #7
 8006b00:	f240 80b8 	bls.w	8006c74 <udp_sendto+0x1c8>
 8006b04:	f8d4 b004 	ldr.w	fp, [r4, #4]
 8006b08:	8a68      	ldrh	r0, [r5, #18]
 8006b0a:	f7fe fd03 	bl	8005514 <lwip_htons>
 8006b0e:	f8ab 0000 	strh.w	r0, [fp]
 8006b12:	4640      	mov	r0, r8
 8006b14:	f7fe fcfe 	bl	8005514 <lwip_htons>
 8006b18:	2300      	movs	r3, #0
 8006b1a:	f8ab 0002 	strh.w	r0, [fp, #2]
 8006b1e:	f88b 3006 	strb.w	r3, [fp, #6]
 8006b22:	f88b 3007 	strb.w	r3, [fp, #7]
 8006b26:	7c2b      	ldrb	r3, [r5, #16]
 8006b28:	071b      	lsls	r3, r3, #28
 8006b2a:	d508      	bpl.n	8006b3e <udp_sendto+0x92>
 8006b2c:	6833      	ldr	r3, [r6, #0]
 8006b2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b32:	2be0      	cmp	r3, #224	; 0xe0
 8006b34:	d103      	bne.n	8006b3e <udp_sendto+0x92>
 8006b36:	7b63      	ldrb	r3, [r4, #13]
 8006b38:	f043 0304 	orr.w	r3, r3, #4
 8006b3c:	7363      	strb	r3, [r4, #13]
 8006b3e:	8920      	ldrh	r0, [r4, #8]
 8006b40:	f7fe fce8 	bl	8005514 <lwip_htons>
 8006b44:	6833      	ldr	r3, [r6, #0]
 8006b46:	2111      	movs	r1, #17
 8006b48:	f8ab 0004 	strh.w	r0, [fp, #4]
 8006b4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b50:	4632      	mov	r2, r6
 8006b52:	4620      	mov	r0, r4
 8006b54:	2be0      	cmp	r3, #224	; 0xe0
 8006b56:	bf0c      	ite	eq
 8006b58:	7f2b      	ldrbeq	r3, [r5, #28]
 8006b5a:	7aab      	ldrbne	r3, [r5, #10]
 8006b5c:	9101      	str	r1, [sp, #4]
 8006b5e:	4651      	mov	r1, sl
 8006b60:	f8cd 9008 	str.w	r9, [sp, #8]
 8006b64:	7a6d      	ldrb	r5, [r5, #9]
 8006b66:	9500      	str	r5, [sp, #0]
 8006b68:	f002 f934 	bl	8008dd4 <ip4_output_if_src>
 8006b6c:	42a7      	cmp	r7, r4
 8006b6e:	4605      	mov	r5, r0
 8006b70:	d002      	beq.n	8006b78 <udp_sendto+0xcc>
 8006b72:	4620      	mov	r0, r4
 8006b74:	f7ff f962 	bl	8005e3c <pbuf_free>
 8006b78:	4628      	mov	r0, r5
 8006b7a:	b007      	add	sp, #28
 8006b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b80:	6980      	ldr	r0, [r0, #24]
 8006b82:	2800      	cmp	r0, #0
 8006b84:	d0a1      	beq.n	8006aca <udp_sendto+0x1e>
 8006b86:	4c44      	ldr	r4, [pc, #272]	; (8006c98 <udp_sendto+0x1ec>)
 8006b88:	6824      	ldr	r4, [r4, #0]
 8006b8a:	42a0      	cmp	r0, r4
 8006b8c:	d09d      	beq.n	8006aca <udp_sendto+0x1e>
 8006b8e:	f105 0018 	add.w	r0, r5, #24
 8006b92:	4698      	mov	r8, r3
 8006b94:	4616      	mov	r6, r2
 8006b96:	460f      	mov	r7, r1
 8006b98:	f001 fe98 	bl	80088cc <ip4_route>
 8006b9c:	4681      	mov	r9, r0
 8006b9e:	2800      	cmp	r0, #0
 8006ba0:	d19c      	bne.n	8006adc <udp_sendto+0x30>
 8006ba2:	f06f 0503 	mvn.w	r5, #3
 8006ba6:	4628      	mov	r0, r5
 8006ba8:	b007      	add	sp, #28
 8006baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bae:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006bb2:	2ae0      	cmp	r2, #224	; 0xe0
 8006bb4:	d095      	beq.n	8006ae2 <udp_sendto+0x36>
 8006bb6:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d1f1      	bne.n	8006ba2 <udp_sendto+0xf6>
 8006bbe:	8a6b      	ldrh	r3, [r5, #18]
 8006bc0:	46aa      	mov	sl, r5
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d192      	bne.n	8006aec <udp_sendto+0x40>
 8006bc6:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 8006ca8 <udp_sendto+0x1fc>
 8006bca:	f8de 2000 	ldr.w	r2, [lr]
 8006bce:	2a00      	cmp	r2, #0
 8006bd0:	d05a      	beq.n	8006c88 <udp_sendto+0x1dc>
 8006bd2:	4295      	cmp	r5, r2
 8006bd4:	d056      	beq.n	8006c84 <udp_sendto+0x1d8>
 8006bd6:	4613      	mov	r3, r2
 8006bd8:	e001      	b.n	8006bde <udp_sendto+0x132>
 8006bda:	429d      	cmp	r5, r3
 8006bdc:	d052      	beq.n	8006c84 <udp_sendto+0x1d8>
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d1fa      	bne.n	8006bda <udp_sendto+0x12e>
 8006be4:	9305      	str	r3, [sp, #20]
 8006be6:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 8006cac <udp_sendto+0x200>
 8006bea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006bee:	f64f 7cff 	movw	ip, #65535	; 0xffff
 8006bf2:	f8bb 0000 	ldrh.w	r0, [fp]
 8006bf6:	4560      	cmp	r0, ip
 8006bf8:	d039      	beq.n	8006c6e <udp_sendto+0x1c2>
 8006bfa:	3001      	adds	r0, #1
 8006bfc:	b280      	uxth	r0, r0
 8006bfe:	b152      	cbz	r2, 8006c16 <udp_sendto+0x16a>
 8006c00:	8a53      	ldrh	r3, [r2, #18]
 8006c02:	4283      	cmp	r3, r0
 8006c04:	d027      	beq.n	8006c56 <udp_sendto+0x1aa>
 8006c06:	4613      	mov	r3, r2
 8006c08:	e002      	b.n	8006c10 <udp_sendto+0x164>
 8006c0a:	8a5c      	ldrh	r4, [r3, #18]
 8006c0c:	4284      	cmp	r4, r0
 8006c0e:	d022      	beq.n	8006c56 <udp_sendto+0x1aa>
 8006c10:	68db      	ldr	r3, [r3, #12]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d1f9      	bne.n	8006c0a <udp_sendto+0x15e>
 8006c16:	9b05      	ldr	r3, [sp, #20]
 8006c18:	f8ab 0000 	strh.w	r0, [fp]
 8006c1c:	8268      	strh	r0, [r5, #18]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	f47f af64 	bne.w	8006aec <udp_sendto+0x40>
 8006c24:	60ea      	str	r2, [r5, #12]
 8006c26:	2108      	movs	r1, #8
 8006c28:	4638      	mov	r0, r7
 8006c2a:	f8ce 5000 	str.w	r5, [lr]
 8006c2e:	f7ff f855 	bl	8005cdc <pbuf_header>
 8006c32:	2800      	cmp	r0, #0
 8006c34:	f43f af61 	beq.w	8006afa <udp_sendto+0x4e>
 8006c38:	2200      	movs	r2, #0
 8006c3a:	2108      	movs	r1, #8
 8006c3c:	2001      	movs	r0, #1
 8006c3e:	f7ff f971 	bl	8005f24 <pbuf_alloc>
 8006c42:	4604      	mov	r4, r0
 8006c44:	b328      	cbz	r0, 8006c92 <udp_sendto+0x1e6>
 8006c46:	893b      	ldrh	r3, [r7, #8]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	f43f af57 	beq.w	8006afc <udp_sendto+0x50>
 8006c4e:	4639      	mov	r1, r7
 8006c50:	f7ff fb5a 	bl	8006308 <pbuf_chain>
 8006c54:	e752      	b.n	8006afc <udp_sendto+0x50>
 8006c56:	3901      	subs	r1, #1
 8006c58:	b289      	uxth	r1, r1
 8006c5a:	2900      	cmp	r1, #0
 8006c5c:	d1cb      	bne.n	8006bf6 <udp_sendto+0x14a>
 8006c5e:	f06f 0507 	mvn.w	r5, #7
 8006c62:	f8ab 0000 	strh.w	r0, [fp]
 8006c66:	4628      	mov	r0, r5
 8006c68:	b007      	add	sp, #28
 8006c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c6e:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 8006c72:	e7c4      	b.n	8006bfe <udp_sendto+0x152>
 8006c74:	4b09      	ldr	r3, [pc, #36]	; (8006c9c <udp_sendto+0x1f0>)
 8006c76:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8006c7a:	4909      	ldr	r1, [pc, #36]	; (8006ca0 <udp_sendto+0x1f4>)
 8006c7c:	4809      	ldr	r0, [pc, #36]	; (8006ca4 <udp_sendto+0x1f8>)
 8006c7e:	f008 fe7b 	bl	800f978 <iprintf>
 8006c82:	e73f      	b.n	8006b04 <udp_sendto+0x58>
 8006c84:	2301      	movs	r3, #1
 8006c86:	e7ad      	b.n	8006be4 <udp_sendto+0x138>
 8006c88:	9205      	str	r2, [sp, #20]
 8006c8a:	e7ac      	b.n	8006be6 <udp_sendto+0x13a>
 8006c8c:	f06f 0505 	mvn.w	r5, #5
 8006c90:	e772      	b.n	8006b78 <udp_sendto+0xcc>
 8006c92:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006c96:	e76f      	b.n	8006b78 <udp_sendto+0xcc>
 8006c98:	08010d10 	.word	0x08010d10
 8006c9c:	08011670 	.word	0x08011670
 8006ca0:	080116b4 	.word	0x080116b4
 8006ca4:	08010e34 	.word	0x08010e34
 8006ca8:	20008604 	.word	0x20008604
 8006cac:	2000000c 	.word	0x2000000c

08006cb0 <udp_bind>:
 8006cb0:	4b34      	ldr	r3, [pc, #208]	; (8006d84 <udp_bind+0xd4>)
 8006cb2:	2900      	cmp	r1, #0
 8006cb4:	bf08      	it	eq
 8006cb6:	4619      	moveq	r1, r3
 8006cb8:	2800      	cmp	r0, #0
 8006cba:	d05e      	beq.n	8006d7a <udp_bind+0xca>
 8006cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cc0:	4f31      	ldr	r7, [pc, #196]	; (8006d88 <udp_bind+0xd8>)
 8006cc2:	683e      	ldr	r6, [r7, #0]
 8006cc4:	b1de      	cbz	r6, 8006cfe <udp_bind+0x4e>
 8006cc6:	42b0      	cmp	r0, r6
 8006cc8:	d044      	beq.n	8006d54 <udp_bind+0xa4>
 8006cca:	4634      	mov	r4, r6
 8006ccc:	e001      	b.n	8006cd2 <udp_bind+0x22>
 8006cce:	42a0      	cmp	r0, r4
 8006cd0:	d040      	beq.n	8006d54 <udp_bind+0xa4>
 8006cd2:	68e4      	ldr	r4, [r4, #12]
 8006cd4:	2c00      	cmp	r4, #0
 8006cd6:	d1fa      	bne.n	8006cce <udp_bind+0x1e>
 8006cd8:	b1a2      	cbz	r2, 8006d04 <udp_bind+0x54>
 8006cda:	680d      	ldr	r5, [r1, #0]
 8006cdc:	4633      	mov	r3, r6
 8006cde:	e001      	b.n	8006ce4 <udp_bind+0x34>
 8006ce0:	68db      	ldr	r3, [r3, #12]
 8006ce2:	b353      	cbz	r3, 8006d3a <udp_bind+0x8a>
 8006ce4:	4298      	cmp	r0, r3
 8006ce6:	d0fb      	beq.n	8006ce0 <udp_bind+0x30>
 8006ce8:	8a59      	ldrh	r1, [r3, #18]
 8006cea:	4291      	cmp	r1, r2
 8006cec:	d1f8      	bne.n	8006ce0 <udp_bind+0x30>
 8006cee:	6819      	ldr	r1, [r3, #0]
 8006cf0:	42a9      	cmp	r1, r5
 8006cf2:	d1f5      	bne.n	8006ce0 <udp_bind+0x30>
 8006cf4:	f06f 0307 	mvn.w	r3, #7
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cfe:	2a00      	cmp	r2, #0
 8006d00:	d137      	bne.n	8006d72 <udp_bind+0xc2>
 8006d02:	4634      	mov	r4, r6
 8006d04:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8006d8c <udp_bind+0xdc>
 8006d08:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
 8006d0c:	f64f 7eff 	movw	lr, #65535	; 0xffff
 8006d10:	f8b8 2000 	ldrh.w	r2, [r8]
 8006d14:	4572      	cmp	r2, lr
 8006d16:	d029      	beq.n	8006d6c <udp_bind+0xbc>
 8006d18:	3201      	adds	r2, #1
 8006d1a:	b292      	uxth	r2, r2
 8006d1c:	b156      	cbz	r6, 8006d34 <udp_bind+0x84>
 8006d1e:	8a73      	ldrh	r3, [r6, #18]
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d019      	beq.n	8006d58 <udp_bind+0xa8>
 8006d24:	4633      	mov	r3, r6
 8006d26:	e002      	b.n	8006d2e <udp_bind+0x7e>
 8006d28:	8a5d      	ldrh	r5, [r3, #18]
 8006d2a:	4295      	cmp	r5, r2
 8006d2c:	d014      	beq.n	8006d58 <udp_bind+0xa8>
 8006d2e:	68db      	ldr	r3, [r3, #12]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d1f9      	bne.n	8006d28 <udp_bind+0x78>
 8006d34:	680d      	ldr	r5, [r1, #0]
 8006d36:	f8a8 2000 	strh.w	r2, [r8]
 8006d3a:	6005      	str	r5, [r0, #0]
 8006d3c:	8242      	strh	r2, [r0, #18]
 8006d3e:	b92c      	cbnz	r4, 8006d4c <udp_bind+0x9c>
 8006d40:	2300      	movs	r3, #0
 8006d42:	60c6      	str	r6, [r0, #12]
 8006d44:	6038      	str	r0, [r7, #0]
 8006d46:	4618      	mov	r0, r3
 8006d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	4618      	mov	r0, r3
 8006d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d54:	2401      	movs	r4, #1
 8006d56:	e7bf      	b.n	8006cd8 <udp_bind+0x28>
 8006d58:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8006d5c:	fa1f fc8c 	uxth.w	ip, ip
 8006d60:	f1bc 0f00 	cmp.w	ip, #0
 8006d64:	d1d6      	bne.n	8006d14 <udp_bind+0x64>
 8006d66:	f8a8 2000 	strh.w	r2, [r8]
 8006d6a:	e7c3      	b.n	8006cf4 <udp_bind+0x44>
 8006d6c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8006d70:	e7d4      	b.n	8006d1c <udp_bind+0x6c>
 8006d72:	680b      	ldr	r3, [r1, #0]
 8006d74:	8242      	strh	r2, [r0, #18]
 8006d76:	6003      	str	r3, [r0, #0]
 8006d78:	e7e2      	b.n	8006d40 <udp_bind+0x90>
 8006d7a:	f06f 0305 	mvn.w	r3, #5
 8006d7e:	4618      	mov	r0, r3
 8006d80:	4770      	bx	lr
 8006d82:	bf00      	nop
 8006d84:	08010d14 	.word	0x08010d14
 8006d88:	20008604 	.word	0x20008604
 8006d8c:	2000000c 	.word	0x2000000c

08006d90 <udp_recv>:
 8006d90:	e9c0 1208 	strd	r1, r2, [r0, #32]
 8006d94:	4770      	bx	lr
 8006d96:	bf00      	nop

08006d98 <udp_remove>:
 8006d98:	4b0c      	ldr	r3, [pc, #48]	; (8006dcc <udp_remove+0x34>)
 8006d9a:	4601      	mov	r1, r0
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	4282      	cmp	r2, r0
 8006da0:	d00a      	beq.n	8006db8 <udp_remove+0x20>
 8006da2:	b132      	cbz	r2, 8006db2 <udp_remove+0x1a>
 8006da4:	68d3      	ldr	r3, [r2, #12]
 8006da6:	b123      	cbz	r3, 8006db2 <udp_remove+0x1a>
 8006da8:	4299      	cmp	r1, r3
 8006daa:	d00a      	beq.n	8006dc2 <udp_remove+0x2a>
 8006dac:	461a      	mov	r2, r3
 8006dae:	2a00      	cmp	r2, #0
 8006db0:	d1f8      	bne.n	8006da4 <udp_remove+0xc>
 8006db2:	2000      	movs	r0, #0
 8006db4:	f7fe be78 	b.w	8005aa8 <memp_free>
 8006db8:	68c2      	ldr	r2, [r0, #12]
 8006dba:	2000      	movs	r0, #0
 8006dbc:	601a      	str	r2, [r3, #0]
 8006dbe:	f7fe be73 	b.w	8005aa8 <memp_free>
 8006dc2:	68cb      	ldr	r3, [r1, #12]
 8006dc4:	2000      	movs	r0, #0
 8006dc6:	60d3      	str	r3, [r2, #12]
 8006dc8:	f7fe be6e 	b.w	8005aa8 <memp_free>
 8006dcc:	20008604 	.word	0x20008604

08006dd0 <udp_new>:
 8006dd0:	b510      	push	{r4, lr}
 8006dd2:	2000      	movs	r0, #0
 8006dd4:	f7fe fe36 	bl	8005a44 <memp_malloc>
 8006dd8:	4604      	mov	r4, r0
 8006dda:	b130      	cbz	r0, 8006dea <udp_new+0x1a>
 8006ddc:	2228      	movs	r2, #40	; 0x28
 8006dde:	2100      	movs	r1, #0
 8006de0:	f008 fdc2 	bl	800f968 <memset>
 8006de4:	23ff      	movs	r3, #255	; 0xff
 8006de6:	72a3      	strb	r3, [r4, #10]
 8006de8:	7723      	strb	r3, [r4, #28]
 8006dea:	4620      	mov	r0, r4
 8006dec:	bd10      	pop	{r4, pc}
 8006dee:	bf00      	nop

08006df0 <udp_netif_ip_addr_changed>:
 8006df0:	b188      	cbz	r0, 8006e16 <udp_netif_ip_addr_changed+0x26>
 8006df2:	6802      	ldr	r2, [r0, #0]
 8006df4:	b179      	cbz	r1, 8006e16 <udp_netif_ip_addr_changed+0x26>
 8006df6:	b172      	cbz	r2, 8006e16 <udp_netif_ip_addr_changed+0x26>
 8006df8:	680b      	ldr	r3, [r1, #0]
 8006dfa:	b163      	cbz	r3, 8006e16 <udp_netif_ip_addr_changed+0x26>
 8006dfc:	4b0a      	ldr	r3, [pc, #40]	; (8006e28 <udp_netif_ip_addr_changed+0x38>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	b14b      	cbz	r3, 8006e16 <udp_netif_ip_addr_changed+0x26>
 8006e02:	b410      	push	{r4}
 8006e04:	681c      	ldr	r4, [r3, #0]
 8006e06:	4294      	cmp	r4, r2
 8006e08:	d006      	beq.n	8006e18 <udp_netif_ip_addr_changed+0x28>
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d1f9      	bne.n	8006e04 <udp_netif_ip_addr_changed+0x14>
 8006e10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e14:	4770      	bx	lr
 8006e16:	4770      	bx	lr
 8006e18:	680a      	ldr	r2, [r1, #0]
 8006e1a:	601a      	str	r2, [r3, #0]
 8006e1c:	68db      	ldr	r3, [r3, #12]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d0f6      	beq.n	8006e10 <udp_netif_ip_addr_changed+0x20>
 8006e22:	6802      	ldr	r2, [r0, #0]
 8006e24:	e7ee      	b.n	8006e04 <udp_netif_ip_addr_changed+0x14>
 8006e26:	bf00      	nop
 8006e28:	20008604 	.word	0x20008604

08006e2c <etharp_raw>:
 8006e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e30:	b083      	sub	sp, #12
 8006e32:	4689      	mov	r9, r1
 8006e34:	4692      	mov	sl, r2
 8006e36:	4698      	mov	r8, r3
 8006e38:	4606      	mov	r6, r0
 8006e3a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8006e3c:	f8bd b03c 	ldrh.w	fp, [sp, #60]	; 0x3c
 8006e40:	2800      	cmp	r0, #0
 8006e42:	d04e      	beq.n	8006ee2 <etharp_raw+0xb6>
 8006e44:	2200      	movs	r2, #0
 8006e46:	211c      	movs	r1, #28
 8006e48:	2002      	movs	r0, #2
 8006e4a:	f7ff f86b 	bl	8005f24 <pbuf_alloc>
 8006e4e:	4605      	mov	r5, r0
 8006e50:	2800      	cmp	r0, #0
 8006e52:	d04e      	beq.n	8006ef2 <etharp_raw+0xc6>
 8006e54:	8943      	ldrh	r3, [r0, #10]
 8006e56:	2b1b      	cmp	r3, #27
 8006e58:	d93b      	bls.n	8006ed2 <etharp_raw+0xa6>
 8006e5a:	686c      	ldr	r4, [r5, #4]
 8006e5c:	4658      	mov	r0, fp
 8006e5e:	f7fe fb59 	bl	8005514 <lwip_htons>
 8006e62:	80e0      	strh	r0, [r4, #6]
 8006e64:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 8006e68:	2b06      	cmp	r3, #6
 8006e6a:	d006      	beq.n	8006e7a <etharp_raw+0x4e>
 8006e6c:	4b22      	ldr	r3, [pc, #136]	; (8006ef8 <etharp_raw+0xcc>)
 8006e6e:	f240 426b 	movw	r2, #1131	; 0x46b
 8006e72:	4922      	ldr	r1, [pc, #136]	; (8006efc <etharp_raw+0xd0>)
 8006e74:	4822      	ldr	r0, [pc, #136]	; (8006f00 <etharp_raw+0xd4>)
 8006e76:	f008 fd7f 	bl	800f978 <iprintf>
 8006e7a:	f8d8 1000 	ldr.w	r1, [r8]
 8006e7e:	f04f 0e06 	mov.w	lr, #6
 8006e82:	f04f 0c04 	mov.w	ip, #4
 8006e86:	4630      	mov	r0, r6
 8006e88:	60a1      	str	r1, [r4, #8]
 8006e8a:	f640 0606 	movw	r6, #2054	; 0x806
 8006e8e:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8006e92:	4653      	mov	r3, sl
 8006e94:	464a      	mov	r2, r9
 8006e96:	81a1      	strh	r1, [r4, #12]
 8006e98:	6839      	ldr	r1, [r7, #0]
 8006e9a:	f8c4 1012 	str.w	r1, [r4, #18]
 8006e9e:	4629      	mov	r1, r5
 8006ea0:	88bf      	ldrh	r7, [r7, #4]
 8006ea2:	82e7      	strh	r7, [r4, #22]
 8006ea4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8006ea6:	683f      	ldr	r7, [r7, #0]
 8006ea8:	f8c4 700e 	str.w	r7, [r4, #14]
 8006eac:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8006eae:	683f      	ldr	r7, [r7, #0]
 8006eb0:	f884 e004 	strb.w	lr, [r4, #4]
 8006eb4:	61a7      	str	r7, [r4, #24]
 8006eb6:	4f13      	ldr	r7, [pc, #76]	; (8006f04 <etharp_raw+0xd8>)
 8006eb8:	f884 c005 	strb.w	ip, [r4, #5]
 8006ebc:	6027      	str	r7, [r4, #0]
 8006ebe:	9600      	str	r6, [sp, #0]
 8006ec0:	f002 fce8 	bl	8009894 <ethernet_output>
 8006ec4:	4628      	mov	r0, r5
 8006ec6:	f7fe ffb9 	bl	8005e3c <pbuf_free>
 8006eca:	2000      	movs	r0, #0
 8006ecc:	b003      	add	sp, #12
 8006ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ed2:	4b09      	ldr	r3, [pc, #36]	; (8006ef8 <etharp_raw+0xcc>)
 8006ed4:	f240 4264 	movw	r2, #1124	; 0x464
 8006ed8:	490b      	ldr	r1, [pc, #44]	; (8006f08 <etharp_raw+0xdc>)
 8006eda:	4809      	ldr	r0, [pc, #36]	; (8006f00 <etharp_raw+0xd4>)
 8006edc:	f008 fd4c 	bl	800f978 <iprintf>
 8006ee0:	e7bb      	b.n	8006e5a <etharp_raw+0x2e>
 8006ee2:	4b05      	ldr	r3, [pc, #20]	; (8006ef8 <etharp_raw+0xcc>)
 8006ee4:	f44f 628b 	mov.w	r2, #1112	; 0x458
 8006ee8:	4908      	ldr	r1, [pc, #32]	; (8006f0c <etharp_raw+0xe0>)
 8006eea:	4805      	ldr	r0, [pc, #20]	; (8006f00 <etharp_raw+0xd4>)
 8006eec:	f008 fd44 	bl	800f978 <iprintf>
 8006ef0:	e7a8      	b.n	8006e44 <etharp_raw+0x18>
 8006ef2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ef6:	e7e9      	b.n	8006ecc <etharp_raw+0xa0>
 8006ef8:	080116e4 	.word	0x080116e4
 8006efc:	08011760 	.word	0x08011760
 8006f00:	08010e34 	.word	0x08010e34
 8006f04:	00080100 	.word	0x00080100
 8006f08:	0801172c 	.word	0x0801172c
 8006f0c:	0801171c 	.word	0x0801171c

08006f10 <etharp_output_to_arp_index>:
 8006f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f14:	0055      	lsls	r5, r2, #1
 8006f16:	4e2f      	ldr	r6, [pc, #188]	; (8006fd4 <etharp_output_to_arp_index+0xc4>)
 8006f18:	b084      	sub	sp, #16
 8006f1a:	4614      	mov	r4, r2
 8006f1c:	eb05 0802 	add.w	r8, r5, r2
 8006f20:	4607      	mov	r7, r0
 8006f22:	4689      	mov	r9, r1
 8006f24:	eb06 08c8 	add.w	r8, r6, r8, lsl #3
 8006f28:	f898 3014 	ldrb.w	r3, [r8, #20]
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d934      	bls.n	8006f9a <etharp_output_to_arp_index+0x8a>
 8006f30:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8006f34:	2b02      	cmp	r3, #2
 8006f36:	f107 0829 	add.w	r8, r7, #41	; 0x29
 8006f3a:	ea4f 01c1 	mov.w	r1, r1, lsl #3
 8006f3e:	f101 0a0c 	add.w	sl, r1, #12
 8006f42:	44b2      	add	sl, r6
 8006f44:	d00b      	beq.n	8006f5e <etharp_output_to_arp_index+0x4e>
 8006f46:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8006f4a:	4653      	mov	r3, sl
 8006f4c:	4642      	mov	r2, r8
 8006f4e:	4649      	mov	r1, r9
 8006f50:	4638      	mov	r0, r7
 8006f52:	9400      	str	r4, [sp, #0]
 8006f54:	f002 fc9e 	bl	8009894 <ethernet_output>
 8006f58:	b004      	add	sp, #16
 8006f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f5e:	442c      	add	r4, r5
 8006f60:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
 8006f64:	8a63      	ldrh	r3, [r4, #18]
 8006f66:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8006f6a:	d820      	bhi.n	8006fae <etharp_output_to_arp_index+0x9e>
 8006f6c:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8006f70:	d3e9      	bcc.n	8006f46 <etharp_output_to_arp_index+0x36>
 8006f72:	3104      	adds	r1, #4
 8006f74:	2201      	movs	r2, #1
 8006f76:	4b18      	ldr	r3, [pc, #96]	; (8006fd8 <etharp_output_to_arp_index+0xc8>)
 8006f78:	1d38      	adds	r0, r7, #4
 8006f7a:	4431      	add	r1, r6
 8006f7c:	9203      	str	r2, [sp, #12]
 8006f7e:	9301      	str	r3, [sp, #4]
 8006f80:	4652      	mov	r2, sl
 8006f82:	9102      	str	r1, [sp, #8]
 8006f84:	4643      	mov	r3, r8
 8006f86:	9000      	str	r0, [sp, #0]
 8006f88:	4641      	mov	r1, r8
 8006f8a:	4638      	mov	r0, r7
 8006f8c:	f7ff ff4e 	bl	8006e2c <etharp_raw>
 8006f90:	2800      	cmp	r0, #0
 8006f92:	d1d8      	bne.n	8006f46 <etharp_output_to_arp_index+0x36>
 8006f94:	2303      	movs	r3, #3
 8006f96:	7523      	strb	r3, [r4, #20]
 8006f98:	e7d5      	b.n	8006f46 <etharp_output_to_arp_index+0x36>
 8006f9a:	4b10      	ldr	r3, [pc, #64]	; (8006fdc <etharp_output_to_arp_index+0xcc>)
 8006f9c:	f240 22ed 	movw	r2, #749	; 0x2ed
 8006fa0:	490f      	ldr	r1, [pc, #60]	; (8006fe0 <etharp_output_to_arp_index+0xd0>)
 8006fa2:	4810      	ldr	r0, [pc, #64]	; (8006fe4 <etharp_output_to_arp_index+0xd4>)
 8006fa4:	f008 fce8 	bl	800f978 <iprintf>
 8006fa8:	f898 3014 	ldrb.w	r3, [r8, #20]
 8006fac:	e7c0      	b.n	8006f30 <etharp_output_to_arp_index+0x20>
 8006fae:	3104      	adds	r1, #4
 8006fb0:	2001      	movs	r0, #1
 8006fb2:	4b09      	ldr	r3, [pc, #36]	; (8006fd8 <etharp_output_to_arp_index+0xc8>)
 8006fb4:	1d3a      	adds	r2, r7, #4
 8006fb6:	440e      	add	r6, r1
 8006fb8:	9003      	str	r0, [sp, #12]
 8006fba:	9301      	str	r3, [sp, #4]
 8006fbc:	4641      	mov	r1, r8
 8006fbe:	9200      	str	r2, [sp, #0]
 8006fc0:	4643      	mov	r3, r8
 8006fc2:	9602      	str	r6, [sp, #8]
 8006fc4:	4638      	mov	r0, r7
 8006fc6:	4a08      	ldr	r2, [pc, #32]	; (8006fe8 <etharp_output_to_arp_index+0xd8>)
 8006fc8:	f7ff ff30 	bl	8006e2c <etharp_raw>
 8006fcc:	2800      	cmp	r0, #0
 8006fce:	d1ba      	bne.n	8006f46 <etharp_output_to_arp_index+0x36>
 8006fd0:	e7e0      	b.n	8006f94 <etharp_output_to_arp_index+0x84>
 8006fd2:	bf00      	nop
 8006fd4:	200032e4 	.word	0x200032e4
 8006fd8:	08010d20 	.word	0x08010d20
 8006fdc:	080116e4 	.word	0x080116e4
 8006fe0:	080117a4 	.word	0x080117a4
 8006fe4:	08010e34 	.word	0x08010e34
 8006fe8:	08010d18 	.word	0x08010d18

08006fec <etharp_tmr>:
 8006fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ff0:	4c25      	ldr	r4, [pc, #148]	; (8007088 <etharp_tmr+0x9c>)
 8006ff2:	b084      	sub	sp, #16
 8006ff4:	2600      	movs	r6, #0
 8006ff6:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8007090 <etharp_tmr+0xa4>
 8006ffa:	f104 05f0 	add.w	r5, r4, #240	; 0xf0
 8006ffe:	4f23      	ldr	r7, [pc, #140]	; (800708c <etharp_tmr+0xa0>)
 8007000:	7d22      	ldrb	r2, [r4, #20]
 8007002:	b162      	cbz	r2, 800701e <etharp_tmr+0x32>
 8007004:	8a63      	ldrh	r3, [r4, #18]
 8007006:	3301      	adds	r3, #1
 8007008:	b29b      	uxth	r3, r3
 800700a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800700e:	8263      	strh	r3, [r4, #18]
 8007010:	d20d      	bcs.n	800702e <etharp_tmr+0x42>
 8007012:	2a01      	cmp	r2, #1
 8007014:	d009      	beq.n	800702a <etharp_tmr+0x3e>
 8007016:	2a03      	cmp	r2, #3
 8007018:	d013      	beq.n	8007042 <etharp_tmr+0x56>
 800701a:	2a04      	cmp	r2, #4
 800701c:	d018      	beq.n	8007050 <etharp_tmr+0x64>
 800701e:	3418      	adds	r4, #24
 8007020:	42ac      	cmp	r4, r5
 8007022:	d1ed      	bne.n	8007000 <etharp_tmr+0x14>
 8007024:	b004      	add	sp, #16
 8007026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800702a:	2b04      	cmp	r3, #4
 800702c:	d917      	bls.n	800705e <etharp_tmr+0x72>
 800702e:	6820      	ldr	r0, [r4, #0]
 8007030:	b110      	cbz	r0, 8007038 <etharp_tmr+0x4c>
 8007032:	f7fe ff03 	bl	8005e3c <pbuf_free>
 8007036:	6026      	str	r6, [r4, #0]
 8007038:	7526      	strb	r6, [r4, #20]
 800703a:	3418      	adds	r4, #24
 800703c:	42ac      	cmp	r4, r5
 800703e:	d1df      	bne.n	8007000 <etharp_tmr+0x14>
 8007040:	e7f0      	b.n	8007024 <etharp_tmr+0x38>
 8007042:	2304      	movs	r3, #4
 8007044:	3418      	adds	r4, #24
 8007046:	f804 3c04 	strb.w	r3, [r4, #-4]
 800704a:	42ac      	cmp	r4, r5
 800704c:	d1d8      	bne.n	8007000 <etharp_tmr+0x14>
 800704e:	e7e9      	b.n	8007024 <etharp_tmr+0x38>
 8007050:	2302      	movs	r3, #2
 8007052:	3418      	adds	r4, #24
 8007054:	f804 3c04 	strb.w	r3, [r4, #-4]
 8007058:	42ac      	cmp	r4, r5
 800705a:	d1d1      	bne.n	8007000 <etharp_tmr+0x14>
 800705c:	e7e2      	b.n	8007024 <etharp_tmr+0x38>
 800705e:	68a0      	ldr	r0, [r4, #8]
 8007060:	f104 0c04 	add.w	ip, r4, #4
 8007064:	9203      	str	r2, [sp, #12]
 8007066:	3418      	adds	r4, #24
 8007068:	1d02      	adds	r2, r0, #4
 800706a:	f100 0329 	add.w	r3, r0, #41	; 0x29
 800706e:	f8cd 8004 	str.w	r8, [sp, #4]
 8007072:	9200      	str	r2, [sp, #0]
 8007074:	4619      	mov	r1, r3
 8007076:	463a      	mov	r2, r7
 8007078:	f8cd c008 	str.w	ip, [sp, #8]
 800707c:	f7ff fed6 	bl	8006e2c <etharp_raw>
 8007080:	42ac      	cmp	r4, r5
 8007082:	d1bd      	bne.n	8007000 <etharp_tmr+0x14>
 8007084:	e7ce      	b.n	8007024 <etharp_tmr+0x38>
 8007086:	bf00      	nop
 8007088:	200032e4 	.word	0x200032e4
 800708c:	08010d18 	.word	0x08010d18
 8007090:	08010d20 	.word	0x08010d20

08007094 <etharp_cleanup_netif>:
 8007094:	b538      	push	{r3, r4, r5, lr}
 8007096:	4c57      	ldr	r4, [pc, #348]	; (80071f4 <etharp_cleanup_netif+0x160>)
 8007098:	4605      	mov	r5, r0
 800709a:	7d23      	ldrb	r3, [r4, #20]
 800709c:	b113      	cbz	r3, 80070a4 <etharp_cleanup_netif+0x10>
 800709e:	68a3      	ldr	r3, [r4, #8]
 80070a0:	4298      	cmp	r0, r3
 80070a2:	d047      	beq.n	8007134 <etharp_cleanup_netif+0xa0>
 80070a4:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80070a8:	b113      	cbz	r3, 80070b0 <etharp_cleanup_netif+0x1c>
 80070aa:	6a23      	ldr	r3, [r4, #32]
 80070ac:	429d      	cmp	r5, r3
 80070ae:	d04a      	beq.n	8007146 <etharp_cleanup_netif+0xb2>
 80070b0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80070b4:	b113      	cbz	r3, 80070bc <etharp_cleanup_netif+0x28>
 80070b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80070b8:	429d      	cmp	r5, r3
 80070ba:	d04e      	beq.n	800715a <etharp_cleanup_netif+0xc6>
 80070bc:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 80070c0:	b113      	cbz	r3, 80070c8 <etharp_cleanup_netif+0x34>
 80070c2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80070c4:	429d      	cmp	r5, r3
 80070c6:	d052      	beq.n	800716e <etharp_cleanup_netif+0xda>
 80070c8:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 80070cc:	b113      	cbz	r3, 80070d4 <etharp_cleanup_netif+0x40>
 80070ce:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80070d0:	429d      	cmp	r5, r3
 80070d2:	d056      	beq.n	8007182 <etharp_cleanup_netif+0xee>
 80070d4:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
 80070d8:	b11b      	cbz	r3, 80070e2 <etharp_cleanup_netif+0x4e>
 80070da:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80070de:	429d      	cmp	r5, r3
 80070e0:	d059      	beq.n	8007196 <etharp_cleanup_netif+0x102>
 80070e2:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
 80070e6:	b11b      	cbz	r3, 80070f0 <etharp_cleanup_netif+0x5c>
 80070e8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80070ec:	429d      	cmp	r5, r3
 80070ee:	d05c      	beq.n	80071aa <etharp_cleanup_netif+0x116>
 80070f0:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
 80070f4:	b11b      	cbz	r3, 80070fe <etharp_cleanup_netif+0x6a>
 80070f6:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80070fa:	429d      	cmp	r5, r3
 80070fc:	d061      	beq.n	80071c2 <etharp_cleanup_netif+0x12e>
 80070fe:	f894 30d4 	ldrb.w	r3, [r4, #212]	; 0xd4
 8007102:	b11b      	cbz	r3, 800710c <etharp_cleanup_netif+0x78>
 8007104:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 8007108:	429d      	cmp	r5, r3
 800710a:	d066      	beq.n	80071da <etharp_cleanup_netif+0x146>
 800710c:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
 8007110:	b11b      	cbz	r3, 800711a <etharp_cleanup_netif+0x86>
 8007112:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8007116:	42ab      	cmp	r3, r5
 8007118:	d000      	beq.n	800711c <etharp_cleanup_netif+0x88>
 800711a:	bd38      	pop	{r3, r4, r5, pc}
 800711c:	f8d4 00d8 	ldr.w	r0, [r4, #216]	; 0xd8
 8007120:	b120      	cbz	r0, 800712c <etharp_cleanup_netif+0x98>
 8007122:	f7fe fe8b 	bl	8005e3c <pbuf_free>
 8007126:	2300      	movs	r3, #0
 8007128:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 800712c:	2300      	movs	r3, #0
 800712e:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
 8007132:	bd38      	pop	{r3, r4, r5, pc}
 8007134:	6820      	ldr	r0, [r4, #0]
 8007136:	b118      	cbz	r0, 8007140 <etharp_cleanup_netif+0xac>
 8007138:	f7fe fe80 	bl	8005e3c <pbuf_free>
 800713c:	2300      	movs	r3, #0
 800713e:	6023      	str	r3, [r4, #0]
 8007140:	2300      	movs	r3, #0
 8007142:	7523      	strb	r3, [r4, #20]
 8007144:	e7ae      	b.n	80070a4 <etharp_cleanup_netif+0x10>
 8007146:	69a0      	ldr	r0, [r4, #24]
 8007148:	b118      	cbz	r0, 8007152 <etharp_cleanup_netif+0xbe>
 800714a:	f7fe fe77 	bl	8005e3c <pbuf_free>
 800714e:	2300      	movs	r3, #0
 8007150:	61a3      	str	r3, [r4, #24]
 8007152:	2300      	movs	r3, #0
 8007154:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8007158:	e7aa      	b.n	80070b0 <etharp_cleanup_netif+0x1c>
 800715a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800715c:	b118      	cbz	r0, 8007166 <etharp_cleanup_netif+0xd2>
 800715e:	f7fe fe6d 	bl	8005e3c <pbuf_free>
 8007162:	2300      	movs	r3, #0
 8007164:	6323      	str	r3, [r4, #48]	; 0x30
 8007166:	2300      	movs	r3, #0
 8007168:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800716c:	e7a6      	b.n	80070bc <etharp_cleanup_netif+0x28>
 800716e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8007170:	b118      	cbz	r0, 800717a <etharp_cleanup_netif+0xe6>
 8007172:	f7fe fe63 	bl	8005e3c <pbuf_free>
 8007176:	2300      	movs	r3, #0
 8007178:	64a3      	str	r3, [r4, #72]	; 0x48
 800717a:	2300      	movs	r3, #0
 800717c:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 8007180:	e7a2      	b.n	80070c8 <etharp_cleanup_netif+0x34>
 8007182:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8007184:	b118      	cbz	r0, 800718e <etharp_cleanup_netif+0xfa>
 8007186:	f7fe fe59 	bl	8005e3c <pbuf_free>
 800718a:	2300      	movs	r3, #0
 800718c:	6623      	str	r3, [r4, #96]	; 0x60
 800718e:	2300      	movs	r3, #0
 8007190:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
 8007194:	e79e      	b.n	80070d4 <etharp_cleanup_netif+0x40>
 8007196:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8007198:	b118      	cbz	r0, 80071a2 <etharp_cleanup_netif+0x10e>
 800719a:	f7fe fe4f 	bl	8005e3c <pbuf_free>
 800719e:	2300      	movs	r3, #0
 80071a0:	67a3      	str	r3, [r4, #120]	; 0x78
 80071a2:	2300      	movs	r3, #0
 80071a4:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c
 80071a8:	e79b      	b.n	80070e2 <etharp_cleanup_netif+0x4e>
 80071aa:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 80071ae:	b120      	cbz	r0, 80071ba <etharp_cleanup_netif+0x126>
 80071b0:	f7fe fe44 	bl	8005e3c <pbuf_free>
 80071b4:	2300      	movs	r3, #0
 80071b6:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 80071ba:	2300      	movs	r3, #0
 80071bc:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
 80071c0:	e796      	b.n	80070f0 <etharp_cleanup_netif+0x5c>
 80071c2:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 80071c6:	b120      	cbz	r0, 80071d2 <etharp_cleanup_netif+0x13e>
 80071c8:	f7fe fe38 	bl	8005e3c <pbuf_free>
 80071cc:	2300      	movs	r3, #0
 80071ce:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
 80071d2:	2300      	movs	r3, #0
 80071d4:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
 80071d8:	e791      	b.n	80070fe <etharp_cleanup_netif+0x6a>
 80071da:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
 80071de:	b120      	cbz	r0, 80071ea <etharp_cleanup_netif+0x156>
 80071e0:	f7fe fe2c 	bl	8005e3c <pbuf_free>
 80071e4:	2300      	movs	r3, #0
 80071e6:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
 80071ea:	2300      	movs	r3, #0
 80071ec:	f884 30d4 	strb.w	r3, [r4, #212]	; 0xd4
 80071f0:	e78c      	b.n	800710c <etharp_cleanup_netif+0x78>
 80071f2:	bf00      	nop
 80071f4:	200032e4 	.word	0x200032e4

080071f8 <etharp_input>:
 80071f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071fc:	b08b      	sub	sp, #44	; 0x2c
 80071fe:	2900      	cmp	r1, #0
 8007200:	f000 8139 	beq.w	8007476 <etharp_input+0x27e>
 8007204:	6845      	ldr	r5, [r0, #4]
 8007206:	4604      	mov	r4, r0
 8007208:	882b      	ldrh	r3, [r5, #0]
 800720a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800720e:	d102      	bne.n	8007216 <etharp_input+0x1e>
 8007210:	792b      	ldrb	r3, [r5, #4]
 8007212:	2b06      	cmp	r3, #6
 8007214:	d005      	beq.n	8007222 <etharp_input+0x2a>
 8007216:	4620      	mov	r0, r4
 8007218:	f7fe fe10 	bl	8005e3c <pbuf_free>
 800721c:	b00b      	add	sp, #44	; 0x2c
 800721e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007222:	796b      	ldrb	r3, [r5, #5]
 8007224:	2b04      	cmp	r3, #4
 8007226:	d1f6      	bne.n	8007216 <etharp_input+0x1e>
 8007228:	886b      	ldrh	r3, [r5, #2]
 800722a:	2b08      	cmp	r3, #8
 800722c:	d1f3      	bne.n	8007216 <etharp_input+0x1e>
 800722e:	f8d5 000e 	ldr.w	r0, [r5, #14]
 8007232:	460e      	mov	r6, r1
 8007234:	684b      	ldr	r3, [r1, #4]
 8007236:	f105 0808 	add.w	r8, r5, #8
 800723a:	9009      	str	r0, [sp, #36]	; 0x24
 800723c:	69aa      	ldr	r2, [r5, #24]
 800723e:	2b00      	cmp	r3, #0
 8007240:	f000 8123 	beq.w	800748a <etharp_input+0x292>
 8007244:	4293      	cmp	r3, r2
 8007246:	f000 81f4 	beq.w	8007632 <etharp_input+0x43a>
 800724a:	2300      	movs	r3, #0
 800724c:	9306      	str	r3, [sp, #24]
 800724e:	2302      	movs	r3, #2
 8007250:	9304      	str	r3, [sp, #16]
 8007252:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 8007256:	2b06      	cmp	r3, #6
 8007258:	d007      	beq.n	800726a <etharp_input+0x72>
 800725a:	4b8e      	ldr	r3, [pc, #568]	; (8007494 <etharp_input+0x29c>)
 800725c:	f240 12ab 	movw	r2, #427	; 0x1ab
 8007260:	498d      	ldr	r1, [pc, #564]	; (8007498 <etharp_input+0x2a0>)
 8007262:	488e      	ldr	r0, [pc, #568]	; (800749c <etharp_input+0x2a4>)
 8007264:	f008 fb88 	bl	800f978 <iprintf>
 8007268:	9809      	ldr	r0, [sp, #36]	; 0x24
 800726a:	2800      	cmp	r0, #0
 800726c:	f000 80ea 	beq.w	8007444 <etharp_input+0x24c>
 8007270:	4631      	mov	r1, r6
 8007272:	f001 fe2f 	bl	8008ed4 <ip4_addr_isbroadcast_u32>
 8007276:	2800      	cmp	r0, #0
 8007278:	f040 80e4 	bne.w	8007444 <etharp_input+0x24c>
 800727c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800727e:	f002 03f0 	and.w	r3, r2, #240	; 0xf0
 8007282:	2be0      	cmp	r3, #224	; 0xe0
 8007284:	f000 80de 	beq.w	8007444 <etharp_input+0x24c>
 8007288:	4f85      	ldr	r7, [pc, #532]	; (80074a0 <etharp_input+0x2a8>)
 800728a:	7d3b      	ldrb	r3, [r7, #20]
 800728c:	2b00      	cmp	r3, #0
 800728e:	f000 810d 	beq.w	80074ac <etharp_input+0x2b4>
 8007292:	6879      	ldr	r1, [r7, #4]
 8007294:	428a      	cmp	r2, r1
 8007296:	f000 81d7 	beq.w	8007648 <etharp_input+0x450>
 800729a:	2b01      	cmp	r3, #1
 800729c:	8a79      	ldrh	r1, [r7, #18]
 800729e:	f000 81dc 	beq.w	800765a <etharp_input+0x462>
 80072a2:	230a      	movs	r3, #10
 80072a4:	4681      	mov	r9, r0
 80072a6:	4686      	mov	lr, r0
 80072a8:	9005      	str	r0, [sp, #20]
 80072aa:	469c      	mov	ip, r3
 80072ac:	9307      	str	r3, [sp, #28]
 80072ae:	f897 a02c 	ldrb.w	sl, [r7, #44]	; 0x2c
 80072b2:	f1ba 0f00 	cmp.w	sl, #0
 80072b6:	f040 829e 	bne.w	80077f6 <etharp_input+0x5fe>
 80072ba:	f897 a044 	ldrb.w	sl, [r7, #68]	; 0x44
 80072be:	2301      	movs	r3, #1
 80072c0:	f1ba 0f00 	cmp.w	sl, #0
 80072c4:	d00e      	beq.n	80072e4 <etharp_input+0xec>
 80072c6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80072c8:	4282      	cmp	r2, r0
 80072ca:	f000 824e 	beq.w	800776a <etharp_input+0x572>
 80072ce:	f1ba 0f01 	cmp.w	sl, #1
 80072d2:	f8b7 b042 	ldrh.w	fp, [r7, #66]	; 0x42
 80072d6:	f000 81cb 	beq.w	8007670 <etharp_input+0x478>
 80072da:	458b      	cmp	fp, r1
 80072dc:	d302      	bcc.n	80072e4 <etharp_input+0xec>
 80072de:	4659      	mov	r1, fp
 80072e0:	f04f 0e02 	mov.w	lr, #2
 80072e4:	2b0a      	cmp	r3, #10
 80072e6:	f897 a05c 	ldrb.w	sl, [r7, #92]	; 0x5c
 80072ea:	f040 8107 	bne.w	80074fc <etharp_input+0x304>
 80072ee:	f1ba 0f00 	cmp.w	sl, #0
 80072f2:	f040 8103 	bne.w	80074fc <etharp_input+0x304>
 80072f6:	f897 a074 	ldrb.w	sl, [r7, #116]	; 0x74
 80072fa:	2303      	movs	r3, #3
 80072fc:	f1ba 0f00 	cmp.w	sl, #0
 8007300:	d00e      	beq.n	8007320 <etharp_input+0x128>
 8007302:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8007304:	4282      	cmp	r2, r0
 8007306:	f000 8257 	beq.w	80077b8 <etharp_input+0x5c0>
 800730a:	f1ba 0f01 	cmp.w	sl, #1
 800730e:	f8b7 b072 	ldrh.w	fp, [r7, #114]	; 0x72
 8007312:	f000 81ed 	beq.w	80076f0 <etharp_input+0x4f8>
 8007316:	458b      	cmp	fp, r1
 8007318:	d302      	bcc.n	8007320 <etharp_input+0x128>
 800731a:	4659      	mov	r1, fp
 800731c:	f04f 0e04 	mov.w	lr, #4
 8007320:	2b0a      	cmp	r3, #10
 8007322:	f897 a08c 	ldrb.w	sl, [r7, #140]	; 0x8c
 8007326:	f040 8107 	bne.w	8007538 <etharp_input+0x340>
 800732a:	f1ba 0f00 	cmp.w	sl, #0
 800732e:	f040 8103 	bne.w	8007538 <etharp_input+0x340>
 8007332:	f897 a0a4 	ldrb.w	sl, [r7, #164]	; 0xa4
 8007336:	2305      	movs	r3, #5
 8007338:	f1ba 0f00 	cmp.w	sl, #0
 800733c:	d00f      	beq.n	800735e <etharp_input+0x166>
 800733e:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8007342:	4282      	cmp	r2, r0
 8007344:	f000 821a 	beq.w	800777c <etharp_input+0x584>
 8007348:	f1ba 0f01 	cmp.w	sl, #1
 800734c:	f8b7 b0a2 	ldrh.w	fp, [r7, #162]	; 0xa2
 8007350:	f000 81a7 	beq.w	80076a2 <etharp_input+0x4aa>
 8007354:	458b      	cmp	fp, r1
 8007356:	d302      	bcc.n	800735e <etharp_input+0x166>
 8007358:	4659      	mov	r1, fp
 800735a:	f04f 0e06 	mov.w	lr, #6
 800735e:	2b0a      	cmp	r3, #10
 8007360:	f897 a0bc 	ldrb.w	sl, [r7, #188]	; 0xbc
 8007364:	f040 8106 	bne.w	8007574 <etharp_input+0x37c>
 8007368:	f1ba 0f00 	cmp.w	sl, #0
 800736c:	f040 8102 	bne.w	8007574 <etharp_input+0x37c>
 8007370:	f897 a0d4 	ldrb.w	sl, [r7, #212]	; 0xd4
 8007374:	2307      	movs	r3, #7
 8007376:	f1ba 0f00 	cmp.w	sl, #0
 800737a:	d00f      	beq.n	800739c <etharp_input+0x1a4>
 800737c:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8007380:	4282      	cmp	r2, r0
 8007382:	f000 8160 	beq.w	8007646 <etharp_input+0x44e>
 8007386:	f1ba 0f01 	cmp.w	sl, #1
 800738a:	f8b7 b0d2 	ldrh.w	fp, [r7, #210]	; 0xd2
 800738e:	f000 81d2 	beq.w	8007736 <etharp_input+0x53e>
 8007392:	458b      	cmp	fp, r1
 8007394:	d302      	bcc.n	800739c <etharp_input+0x1a4>
 8007396:	4659      	mov	r1, fp
 8007398:	f04f 0e08 	mov.w	lr, #8
 800739c:	2b0a      	cmp	r3, #10
 800739e:	f897 a0ec 	ldrb.w	sl, [r7, #236]	; 0xec
 80073a2:	f040 8106 	bne.w	80075b2 <etharp_input+0x3ba>
 80073a6:	f1ba 0f00 	cmp.w	sl, #0
 80073aa:	f040 8102 	bne.w	80075b2 <etharp_input+0x3ba>
 80073ae:	9b04      	ldr	r3, [sp, #16]
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d147      	bne.n	8007444 <etharp_input+0x24c>
 80073b4:	2309      	movs	r3, #9
 80073b6:	4699      	mov	r9, r3
 80073b8:	fa5f fa83 	uxtb.w	sl, r3
 80073bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80073c0:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
 80073c4:	7d1b      	ldrb	r3, [r3, #20]
 80073c6:	b13b      	cbz	r3, 80073d8 <etharp_input+0x1e0>
 80073c8:	f240 1287 	movw	r2, #391	; 0x187
 80073cc:	4b31      	ldr	r3, [pc, #196]	; (8007494 <etharp_input+0x29c>)
 80073ce:	4935      	ldr	r1, [pc, #212]	; (80074a4 <etharp_input+0x2ac>)
 80073d0:	4832      	ldr	r0, [pc, #200]	; (800749c <etharp_input+0x2a4>)
 80073d2:	f008 fad1 	bl	800f978 <iprintf>
 80073d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80073d8:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80073dc:	2000      	movs	r0, #0
 80073de:	fa4f f38a 	sxtb.w	r3, sl
 80073e2:	eb07 01c9 	add.w	r1, r7, r9, lsl #3
 80073e6:	604a      	str	r2, [r1, #4]
 80073e8:	8248      	strh	r0, [r1, #18]
 80073ea:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80073ee:	2218      	movs	r2, #24
 80073f0:	f04f 0e0c 	mov.w	lr, #12
 80073f4:	2002      	movs	r0, #2
 80073f6:	00c9      	lsls	r1, r1, #3
 80073f8:	f04f 0c00 	mov.w	ip, #0
 80073fc:	fb12 e303 	smlabb	r3, r2, r3, lr
 8007400:	187a      	adds	r2, r7, r1
 8007402:	eb07 0e03 	add.w	lr, r7, r3
 8007406:	6096      	str	r6, [r2, #8]
 8007408:	7510      	strb	r0, [r2, #20]
 800740a:	f8d8 0000 	ldr.w	r0, [r8]
 800740e:	50f8      	str	r0, [r7, r3]
 8007410:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8007414:	f8ae 3004 	strh.w	r3, [lr, #4]
 8007418:	f857 9001 	ldr.w	r9, [r7, r1]
 800741c:	f8a2 c012 	strh.w	ip, [r2, #18]
 8007420:	f1b9 0f00 	cmp.w	r9, #0
 8007424:	d00e      	beq.n	8007444 <etharp_input+0x24c>
 8007426:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800742a:	f847 c001 	str.w	ip, [r7, r1]
 800742e:	4643      	mov	r3, r8
 8007430:	f106 0229 	add.w	r2, r6, #41	; 0x29
 8007434:	9000      	str	r0, [sp, #0]
 8007436:	4649      	mov	r1, r9
 8007438:	4630      	mov	r0, r6
 800743a:	f002 fa2b 	bl	8009894 <ethernet_output>
 800743e:	4648      	mov	r0, r9
 8007440:	f7fe fcfc 	bl	8005e3c <pbuf_free>
 8007444:	88eb      	ldrh	r3, [r5, #6]
 8007446:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800744a:	f47f aee4 	bne.w	8007216 <etharp_input+0x1e>
 800744e:	9b06      	ldr	r3, [sp, #24]
 8007450:	2b00      	cmp	r3, #0
 8007452:	f43f aee0 	beq.w	8007216 <etharp_input+0x1e>
 8007456:	f106 0329 	add.w	r3, r6, #41	; 0x29
 800745a:	2002      	movs	r0, #2
 800745c:	af09      	add	r7, sp, #36	; 0x24
 800745e:	1d35      	adds	r5, r6, #4
 8007460:	9003      	str	r0, [sp, #12]
 8007462:	4642      	mov	r2, r8
 8007464:	f8cd 8004 	str.w	r8, [sp, #4]
 8007468:	4619      	mov	r1, r3
 800746a:	4630      	mov	r0, r6
 800746c:	9702      	str	r7, [sp, #8]
 800746e:	9500      	str	r5, [sp, #0]
 8007470:	f7ff fcdc 	bl	8006e2c <etharp_raw>
 8007474:	e6cf      	b.n	8007216 <etharp_input+0x1e>
 8007476:	4b07      	ldr	r3, [pc, #28]	; (8007494 <etharp_input+0x29c>)
 8007478:	f44f 7222 	mov.w	r2, #648	; 0x288
 800747c:	490a      	ldr	r1, [pc, #40]	; (80074a8 <etharp_input+0x2b0>)
 800747e:	4807      	ldr	r0, [pc, #28]	; (800749c <etharp_input+0x2a4>)
 8007480:	f008 fa7a 	bl	800f978 <iprintf>
 8007484:	b00b      	add	sp, #44	; 0x2c
 8007486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800748a:	9306      	str	r3, [sp, #24]
 800748c:	2302      	movs	r3, #2
 800748e:	9304      	str	r3, [sp, #16]
 8007490:	e6df      	b.n	8007252 <etharp_input+0x5a>
 8007492:	bf00      	nop
 8007494:	080116e4 	.word	0x080116e4
 8007498:	08011818 	.word	0x08011818
 800749c:	08010e34 	.word	0x08010e34
 80074a0:	200032e4 	.word	0x200032e4
 80074a4:	08011854 	.word	0x08011854
 80074a8:	0801171c 	.word	0x0801171c
 80074ac:	f04f 0c0a 	mov.w	ip, #10
 80074b0:	f897 a02c 	ldrb.w	sl, [r7, #44]	; 0x2c
 80074b4:	4699      	mov	r9, r3
 80074b6:	4619      	mov	r1, r3
 80074b8:	46e6      	mov	lr, ip
 80074ba:	9305      	str	r3, [sp, #20]
 80074bc:	f8cd c01c 	str.w	ip, [sp, #28]
 80074c0:	f1ba 0f00 	cmp.w	sl, #0
 80074c4:	d00e      	beq.n	80074e4 <etharp_input+0x2ec>
 80074c6:	69f8      	ldr	r0, [r7, #28]
 80074c8:	4282      	cmp	r2, r0
 80074ca:	f000 816c 	beq.w	80077a6 <etharp_input+0x5ae>
 80074ce:	f1ba 0f01 	cmp.w	sl, #1
 80074d2:	f8b7 b02a 	ldrh.w	fp, [r7, #42]	; 0x2a
 80074d6:	f000 80d8 	beq.w	800768a <etharp_input+0x492>
 80074da:	458b      	cmp	fp, r1
 80074dc:	d302      	bcc.n	80074e4 <etharp_input+0x2ec>
 80074de:	4659      	mov	r1, fp
 80074e0:	f04f 0e01 	mov.w	lr, #1
 80074e4:	f897 a044 	ldrb.w	sl, [r7, #68]	; 0x44
 80074e8:	f1ba 0f00 	cmp.w	sl, #0
 80074ec:	f47f aee8 	bne.w	80072c0 <etharp_input+0xc8>
 80074f0:	2b0a      	cmp	r3, #10
 80074f2:	f47f aee5 	bne.w	80072c0 <etharp_input+0xc8>
 80074f6:	f897 a05c 	ldrb.w	sl, [r7, #92]	; 0x5c
 80074fa:	2302      	movs	r3, #2
 80074fc:	f1ba 0f00 	cmp.w	sl, #0
 8007500:	d00e      	beq.n	8007520 <etharp_input+0x328>
 8007502:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8007504:	4282      	cmp	r2, r0
 8007506:	f000 8160 	beq.w	80077ca <etharp_input+0x5d2>
 800750a:	f1ba 0f01 	cmp.w	sl, #1
 800750e:	f8b7 b05a 	ldrh.w	fp, [r7, #90]	; 0x5a
 8007512:	f000 80d4 	beq.w	80076be <etharp_input+0x4c6>
 8007516:	458b      	cmp	fp, r1
 8007518:	d302      	bcc.n	8007520 <etharp_input+0x328>
 800751a:	4659      	mov	r1, fp
 800751c:	f04f 0e03 	mov.w	lr, #3
 8007520:	2b0a      	cmp	r3, #10
 8007522:	f897 a074 	ldrb.w	sl, [r7, #116]	; 0x74
 8007526:	f47f aee9 	bne.w	80072fc <etharp_input+0x104>
 800752a:	f1ba 0f00 	cmp.w	sl, #0
 800752e:	f47f aee5 	bne.w	80072fc <etharp_input+0x104>
 8007532:	f897 a08c 	ldrb.w	sl, [r7, #140]	; 0x8c
 8007536:	2304      	movs	r3, #4
 8007538:	f1ba 0f00 	cmp.w	sl, #0
 800753c:	d00e      	beq.n	800755c <etharp_input+0x364>
 800753e:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8007540:	4282      	cmp	r2, r0
 8007542:	f000 814b 	beq.w	80077dc <etharp_input+0x5e4>
 8007546:	f1ba 0f01 	cmp.w	sl, #1
 800754a:	f8b7 b08a 	ldrh.w	fp, [r7, #138]	; 0x8a
 800754e:	f000 80db 	beq.w	8007708 <etharp_input+0x510>
 8007552:	458b      	cmp	fp, r1
 8007554:	d302      	bcc.n	800755c <etharp_input+0x364>
 8007556:	4659      	mov	r1, fp
 8007558:	f04f 0e05 	mov.w	lr, #5
 800755c:	2b0a      	cmp	r3, #10
 800755e:	f897 a0a4 	ldrb.w	sl, [r7, #164]	; 0xa4
 8007562:	f47f aee9 	bne.w	8007338 <etharp_input+0x140>
 8007566:	f1ba 0f00 	cmp.w	sl, #0
 800756a:	f47f aee5 	bne.w	8007338 <etharp_input+0x140>
 800756e:	f897 a0bc 	ldrb.w	sl, [r7, #188]	; 0xbc
 8007572:	2306      	movs	r3, #6
 8007574:	f1ba 0f00 	cmp.w	sl, #0
 8007578:	d00f      	beq.n	800759a <etharp_input+0x3a2>
 800757a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800757e:	4282      	cmp	r2, r0
 8007580:	f000 8137 	beq.w	80077f2 <etharp_input+0x5fa>
 8007584:	f1ba 0f01 	cmp.w	sl, #1
 8007588:	f8b7 b0ba 	ldrh.w	fp, [r7, #186]	; 0xba
 800758c:	f000 80a3 	beq.w	80076d6 <etharp_input+0x4de>
 8007590:	458b      	cmp	fp, r1
 8007592:	d302      	bcc.n	800759a <etharp_input+0x3a2>
 8007594:	4659      	mov	r1, fp
 8007596:	f04f 0e07 	mov.w	lr, #7
 800759a:	2b0a      	cmp	r3, #10
 800759c:	f897 a0d4 	ldrb.w	sl, [r7, #212]	; 0xd4
 80075a0:	f47f aee9 	bne.w	8007376 <etharp_input+0x17e>
 80075a4:	f1ba 0f00 	cmp.w	sl, #0
 80075a8:	f47f aee5 	bne.w	8007376 <etharp_input+0x17e>
 80075ac:	f897 a0ec 	ldrb.w	sl, [r7, #236]	; 0xec
 80075b0:	2308      	movs	r3, #8
 80075b2:	f1ba 0f00 	cmp.w	sl, #0
 80075b6:	d00e      	beq.n	80075d6 <etharp_input+0x3de>
 80075b8:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80075bc:	4282      	cmp	r2, r0
 80075be:	f000 8116 	beq.w	80077ee <etharp_input+0x5f6>
 80075c2:	f1ba 0f01 	cmp.w	sl, #1
 80075c6:	f8b7 b0ea 	ldrh.w	fp, [r7, #234]	; 0xea
 80075ca:	f000 80a9 	beq.w	8007720 <etharp_input+0x528>
 80075ce:	458b      	cmp	fp, r1
 80075d0:	bf28      	it	cs
 80075d2:	f04f 0e09 	movcs.w	lr, #9
 80075d6:	9904      	ldr	r1, [sp, #16]
 80075d8:	2901      	cmp	r1, #1
 80075da:	f47f af33 	bne.w	8007444 <etharp_input+0x24c>
 80075de:	2b0a      	cmp	r3, #10
 80075e0:	f47f aee9 	bne.w	80073b6 <etharp_input+0x1be>
 80075e4:	f1be 0f0a 	cmp.w	lr, #10
 80075e8:	d027      	beq.n	800763a <etharp_input+0x442>
 80075ea:	eb0e 034e 	add.w	r3, lr, lr, lsl #1
 80075ee:	fa5f fa8e 	uxtb.w	sl, lr
 80075f2:	f857 3033 	ldr.w	r3, [r7, r3, lsl #3]
 80075f6:	b133      	cbz	r3, 8007606 <etharp_input+0x40e>
 80075f8:	4b80      	ldr	r3, [pc, #512]	; (80077fc <etharp_input+0x604>)
 80075fa:	f240 126f 	movw	r2, #367	; 0x16f
 80075fe:	4980      	ldr	r1, [pc, #512]	; (8007800 <etharp_input+0x608>)
 8007600:	4880      	ldr	r0, [pc, #512]	; (8007804 <etharp_input+0x60c>)
 8007602:	f008 f9b9 	bl	800f978 <iprintf>
 8007606:	ea4f 0b4a 	mov.w	fp, sl, lsl #1
 800760a:	46d1      	mov	r9, sl
 800760c:	eb0b 030a 	add.w	r3, fp, sl
 8007610:	00db      	lsls	r3, r3, #3
 8007612:	58f8      	ldr	r0, [r7, r3]
 8007614:	b128      	cbz	r0, 8007622 <etharp_input+0x42a>
 8007616:	9304      	str	r3, [sp, #16]
 8007618:	f7fe fc10 	bl	8005e3c <pbuf_free>
 800761c:	2200      	movs	r2, #0
 800761e:	9b04      	ldr	r3, [sp, #16]
 8007620:	50fa      	str	r2, [r7, r3]
 8007622:	eb0b 030a 	add.w	r3, fp, sl
 8007626:	2100      	movs	r1, #0
 8007628:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800762a:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
 800762e:	7519      	strb	r1, [r3, #20]
 8007630:	e6d2      	b.n	80073d8 <etharp_input+0x1e0>
 8007632:	2301      	movs	r3, #1
 8007634:	9306      	str	r3, [sp, #24]
 8007636:	9304      	str	r3, [sp, #16]
 8007638:	e60b      	b.n	8007252 <etharp_input+0x5a>
 800763a:	f1bc 0f0a 	cmp.w	ip, #10
 800763e:	d005      	beq.n	800764c <etharp_input+0x454>
 8007640:	fa5f fa8c 	uxtb.w	sl, ip
 8007644:	e7df      	b.n	8007606 <etharp_input+0x40e>
 8007646:	2008      	movs	r0, #8
 8007648:	b243      	sxtb	r3, r0
 800764a:	e6ce      	b.n	80073ea <etharp_input+0x1f2>
 800764c:	9b07      	ldr	r3, [sp, #28]
 800764e:	2b0a      	cmp	r3, #10
 8007650:	f43f aef8 	beq.w	8007444 <etharp_input+0x24c>
 8007654:	fa5f fa83 	uxtb.w	sl, r3
 8007658:	e7d5      	b.n	8007606 <etharp_input+0x40e>
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d076      	beq.n	800774e <etharp_input+0x556>
 8007660:	f04f 0e0a 	mov.w	lr, #10
 8007664:	9105      	str	r1, [sp, #20]
 8007666:	4681      	mov	r9, r0
 8007668:	4601      	mov	r1, r0
 800766a:	46f4      	mov	ip, lr
 800766c:	9007      	str	r0, [sp, #28]
 800766e:	e61e      	b.n	80072ae <etharp_input+0xb6>
 8007670:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007672:	2800      	cmp	r0, #0
 8007674:	f000 8099 	beq.w	80077aa <etharp_input+0x5b2>
 8007678:	9805      	ldr	r0, [sp, #20]
 800767a:	4583      	cmp	fp, r0
 800767c:	f4ff ae32 	bcc.w	80072e4 <etharp_input+0xec>
 8007680:	2002      	movs	r0, #2
 8007682:	f8cd b014 	str.w	fp, [sp, #20]
 8007686:	9007      	str	r0, [sp, #28]
 8007688:	e62c      	b.n	80072e4 <etharp_input+0xec>
 800768a:	69b8      	ldr	r0, [r7, #24]
 800768c:	2800      	cmp	r0, #0
 800768e:	d066      	beq.n	800775e <etharp_input+0x566>
 8007690:	9805      	ldr	r0, [sp, #20]
 8007692:	4583      	cmp	fp, r0
 8007694:	f4ff af26 	bcc.w	80074e4 <etharp_input+0x2ec>
 8007698:	f8cd b014 	str.w	fp, [sp, #20]
 800769c:	f8cd a01c 	str.w	sl, [sp, #28]
 80076a0:	e720      	b.n	80074e4 <etharp_input+0x2ec>
 80076a2:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80076a6:	2800      	cmp	r0, #0
 80076a8:	f000 8091 	beq.w	80077ce <etharp_input+0x5d6>
 80076ac:	9805      	ldr	r0, [sp, #20]
 80076ae:	4583      	cmp	fp, r0
 80076b0:	f4ff ae55 	bcc.w	800735e <etharp_input+0x166>
 80076b4:	2006      	movs	r0, #6
 80076b6:	f8cd b014 	str.w	fp, [sp, #20]
 80076ba:	9007      	str	r0, [sp, #28]
 80076bc:	e64f      	b.n	800735e <etharp_input+0x166>
 80076be:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80076c0:	2800      	cmp	r0, #0
 80076c2:	d05d      	beq.n	8007780 <etharp_input+0x588>
 80076c4:	9805      	ldr	r0, [sp, #20]
 80076c6:	4583      	cmp	fp, r0
 80076c8:	f4ff af2a 	bcc.w	8007520 <etharp_input+0x328>
 80076cc:	2003      	movs	r0, #3
 80076ce:	f8cd b014 	str.w	fp, [sp, #20]
 80076d2:	9007      	str	r0, [sp, #28]
 80076d4:	e724      	b.n	8007520 <etharp_input+0x328>
 80076d6:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80076da:	2800      	cmp	r0, #0
 80076dc:	d06e      	beq.n	80077bc <etharp_input+0x5c4>
 80076de:	9805      	ldr	r0, [sp, #20]
 80076e0:	4583      	cmp	fp, r0
 80076e2:	f4ff af5a 	bcc.w	800759a <etharp_input+0x3a2>
 80076e6:	2007      	movs	r0, #7
 80076e8:	f8cd b014 	str.w	fp, [sp, #20]
 80076ec:	9007      	str	r0, [sp, #28]
 80076ee:	e754      	b.n	800759a <etharp_input+0x3a2>
 80076f0:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80076f2:	2800      	cmp	r0, #0
 80076f4:	d074      	beq.n	80077e0 <etharp_input+0x5e8>
 80076f6:	9805      	ldr	r0, [sp, #20]
 80076f8:	4583      	cmp	fp, r0
 80076fa:	f4ff ae11 	bcc.w	8007320 <etharp_input+0x128>
 80076fe:	2004      	movs	r0, #4
 8007700:	f8cd b014 	str.w	fp, [sp, #20]
 8007704:	9007      	str	r0, [sp, #28]
 8007706:	e60b      	b.n	8007320 <etharp_input+0x128>
 8007708:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800770a:	2800      	cmp	r0, #0
 800770c:	d03f      	beq.n	800778e <etharp_input+0x596>
 800770e:	9805      	ldr	r0, [sp, #20]
 8007710:	4583      	cmp	fp, r0
 8007712:	f4ff af23 	bcc.w	800755c <etharp_input+0x364>
 8007716:	2005      	movs	r0, #5
 8007718:	f8cd b014 	str.w	fp, [sp, #20]
 800771c:	9007      	str	r0, [sp, #28]
 800771e:	e71d      	b.n	800755c <etharp_input+0x364>
 8007720:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8007724:	2900      	cmp	r1, #0
 8007726:	d039      	beq.n	800779c <etharp_input+0x5a4>
 8007728:	9807      	ldr	r0, [sp, #28]
 800772a:	9905      	ldr	r1, [sp, #20]
 800772c:	458b      	cmp	fp, r1
 800772e:	bf28      	it	cs
 8007730:	2009      	movcs	r0, #9
 8007732:	9007      	str	r0, [sp, #28]
 8007734:	e74f      	b.n	80075d6 <etharp_input+0x3de>
 8007736:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800773a:	b1c0      	cbz	r0, 800776e <etharp_input+0x576>
 800773c:	9805      	ldr	r0, [sp, #20]
 800773e:	4583      	cmp	fp, r0
 8007740:	f4ff ae2c 	bcc.w	800739c <etharp_input+0x1a4>
 8007744:	2008      	movs	r0, #8
 8007746:	f8cd b014 	str.w	fp, [sp, #20]
 800774a:	9007      	str	r0, [sp, #28]
 800774c:	e626      	b.n	800739c <etharp_input+0x1a4>
 800774e:	200a      	movs	r0, #10
 8007750:	4689      	mov	r9, r1
 8007752:	9305      	str	r3, [sp, #20]
 8007754:	4619      	mov	r1, r3
 8007756:	9007      	str	r0, [sp, #28]
 8007758:	4686      	mov	lr, r0
 800775a:	469c      	mov	ip, r3
 800775c:	e5a7      	b.n	80072ae <etharp_input+0xb6>
 800775e:	45cb      	cmp	fp, r9
 8007760:	f4ff aec0 	bcc.w	80074e4 <etharp_input+0x2ec>
 8007764:	46d9      	mov	r9, fp
 8007766:	46d4      	mov	ip, sl
 8007768:	e6bc      	b.n	80074e4 <etharp_input+0x2ec>
 800776a:	2002      	movs	r0, #2
 800776c:	e76c      	b.n	8007648 <etharp_input+0x450>
 800776e:	45cb      	cmp	fp, r9
 8007770:	f4ff ae14 	bcc.w	800739c <etharp_input+0x1a4>
 8007774:	46d9      	mov	r9, fp
 8007776:	f04f 0c08 	mov.w	ip, #8
 800777a:	e60f      	b.n	800739c <etharp_input+0x1a4>
 800777c:	2006      	movs	r0, #6
 800777e:	e763      	b.n	8007648 <etharp_input+0x450>
 8007780:	45cb      	cmp	fp, r9
 8007782:	f4ff aecd 	bcc.w	8007520 <etharp_input+0x328>
 8007786:	46d9      	mov	r9, fp
 8007788:	f04f 0c03 	mov.w	ip, #3
 800778c:	e6c8      	b.n	8007520 <etharp_input+0x328>
 800778e:	45cb      	cmp	fp, r9
 8007790:	f4ff aee4 	bcc.w	800755c <etharp_input+0x364>
 8007794:	46d9      	mov	r9, fp
 8007796:	f04f 0c05 	mov.w	ip, #5
 800779a:	e6df      	b.n	800755c <etharp_input+0x364>
 800779c:	45cb      	cmp	fp, r9
 800779e:	bf28      	it	cs
 80077a0:	f04f 0c09 	movcs.w	ip, #9
 80077a4:	e717      	b.n	80075d6 <etharp_input+0x3de>
 80077a6:	2001      	movs	r0, #1
 80077a8:	e74e      	b.n	8007648 <etharp_input+0x450>
 80077aa:	45cb      	cmp	fp, r9
 80077ac:	f4ff ad9a 	bcc.w	80072e4 <etharp_input+0xec>
 80077b0:	46d9      	mov	r9, fp
 80077b2:	f04f 0c02 	mov.w	ip, #2
 80077b6:	e595      	b.n	80072e4 <etharp_input+0xec>
 80077b8:	2004      	movs	r0, #4
 80077ba:	e745      	b.n	8007648 <etharp_input+0x450>
 80077bc:	45cb      	cmp	fp, r9
 80077be:	f4ff aeec 	bcc.w	800759a <etharp_input+0x3a2>
 80077c2:	46d9      	mov	r9, fp
 80077c4:	f04f 0c07 	mov.w	ip, #7
 80077c8:	e6e7      	b.n	800759a <etharp_input+0x3a2>
 80077ca:	2003      	movs	r0, #3
 80077cc:	e73c      	b.n	8007648 <etharp_input+0x450>
 80077ce:	45cb      	cmp	fp, r9
 80077d0:	f4ff adc5 	bcc.w	800735e <etharp_input+0x166>
 80077d4:	46d9      	mov	r9, fp
 80077d6:	f04f 0c06 	mov.w	ip, #6
 80077da:	e5c0      	b.n	800735e <etharp_input+0x166>
 80077dc:	2005      	movs	r0, #5
 80077de:	e733      	b.n	8007648 <etharp_input+0x450>
 80077e0:	45cb      	cmp	fp, r9
 80077e2:	f4ff ad9d 	bcc.w	8007320 <etharp_input+0x128>
 80077e6:	46d9      	mov	r9, fp
 80077e8:	f04f 0c04 	mov.w	ip, #4
 80077ec:	e598      	b.n	8007320 <etharp_input+0x128>
 80077ee:	2009      	movs	r0, #9
 80077f0:	e72a      	b.n	8007648 <etharp_input+0x450>
 80077f2:	2007      	movs	r0, #7
 80077f4:	e728      	b.n	8007648 <etharp_input+0x450>
 80077f6:	230a      	movs	r3, #10
 80077f8:	e662      	b.n	80074c0 <etharp_input+0x2c8>
 80077fa:	bf00      	nop
 80077fc:	080116e4 	.word	0x080116e4
 8007800:	0801183c 	.word	0x0801183c
 8007804:	08010e34 	.word	0x08010e34

08007808 <etharp_query>:
 8007808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800780c:	460f      	mov	r7, r1
 800780e:	b087      	sub	sp, #28
 8007810:	4606      	mov	r6, r0
 8007812:	4601      	mov	r1, r0
 8007814:	6838      	ldr	r0, [r7, #0]
 8007816:	9204      	str	r2, [sp, #16]
 8007818:	f001 fb5c 	bl	8008ed4 <ip4_addr_isbroadcast_u32>
 800781c:	2800      	cmp	r0, #0
 800781e:	f040 8270 	bne.w	8007d02 <etharp_query+0x4fa>
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007828:	2ae0      	cmp	r2, #224	; 0xe0
 800782a:	f000 826a 	beq.w	8007d02 <etharp_query+0x4fa>
 800782e:	fab3 f183 	clz	r1, r3
 8007832:	0949      	lsrs	r1, r1, #5
 8007834:	2900      	cmp	r1, #0
 8007836:	f040 8264 	bne.w	8007d02 <etharp_query+0x4fa>
 800783a:	4dd2      	ldr	r5, [pc, #840]	; (8007b84 <etharp_query+0x37c>)
 800783c:	f106 0929 	add.w	r9, r6, #41	; 0x29
 8007840:	7d2c      	ldrb	r4, [r5, #20]
 8007842:	2c00      	cmp	r4, #0
 8007844:	f000 80ce 	beq.w	80079e4 <etharp_query+0x1dc>
 8007848:	686a      	ldr	r2, [r5, #4]
 800784a:	4293      	cmp	r3, r2
 800784c:	f000 824d 	beq.w	8007cea <etharp_query+0x4e2>
 8007850:	2c01      	cmp	r4, #1
 8007852:	8a6a      	ldrh	r2, [r5, #18]
 8007854:	f000 824b 	beq.w	8007cee <etharp_query+0x4e6>
 8007858:	f04f 0e0a 	mov.w	lr, #10
 800785c:	4608      	mov	r0, r1
 800785e:	468b      	mov	fp, r1
 8007860:	9105      	str	r1, [sp, #20]
 8007862:	46f4      	mov	ip, lr
 8007864:	f895 802c 	ldrb.w	r8, [r5, #44]	; 0x2c
 8007868:	f1b8 0f00 	cmp.w	r8, #0
 800786c:	f040 82c8 	bne.w	8007e00 <etharp_query+0x5f8>
 8007870:	f895 8044 	ldrb.w	r8, [r5, #68]	; 0x44
 8007874:	2401      	movs	r4, #1
 8007876:	f1b8 0f00 	cmp.w	r8, #0
 800787a:	d00d      	beq.n	8007898 <etharp_query+0x90>
 800787c:	6b69      	ldr	r1, [r5, #52]	; 0x34
 800787e:	428b      	cmp	r3, r1
 8007880:	f000 8280 	beq.w	8007d84 <etharp_query+0x57c>
 8007884:	f1b8 0f01 	cmp.w	r8, #1
 8007888:	f8b5 a042 	ldrh.w	sl, [r5, #66]	; 0x42
 800788c:	f000 81ad 	beq.w	8007bea <etharp_query+0x3e2>
 8007890:	4592      	cmp	sl, r2
 8007892:	d301      	bcc.n	8007898 <etharp_query+0x90>
 8007894:	4652      	mov	r2, sl
 8007896:	2002      	movs	r0, #2
 8007898:	2c0a      	cmp	r4, #10
 800789a:	f895 805c 	ldrb.w	r8, [r5, #92]	; 0x5c
 800789e:	f040 80c7 	bne.w	8007a30 <etharp_query+0x228>
 80078a2:	f1b8 0f00 	cmp.w	r8, #0
 80078a6:	f040 80c3 	bne.w	8007a30 <etharp_query+0x228>
 80078aa:	f895 8074 	ldrb.w	r8, [r5, #116]	; 0x74
 80078ae:	2403      	movs	r4, #3
 80078b0:	f1b8 0f00 	cmp.w	r8, #0
 80078b4:	d00d      	beq.n	80078d2 <etharp_query+0xca>
 80078b6:	6e69      	ldr	r1, [r5, #100]	; 0x64
 80078b8:	428b      	cmp	r3, r1
 80078ba:	f000 825b 	beq.w	8007d74 <etharp_query+0x56c>
 80078be:	f1b8 0f01 	cmp.w	r8, #1
 80078c2:	f8b5 a072 	ldrh.w	sl, [r5, #114]	; 0x72
 80078c6:	f000 81b1 	beq.w	8007c2c <etharp_query+0x424>
 80078ca:	4592      	cmp	sl, r2
 80078cc:	d301      	bcc.n	80078d2 <etharp_query+0xca>
 80078ce:	4652      	mov	r2, sl
 80078d0:	2004      	movs	r0, #4
 80078d2:	2c0a      	cmp	r4, #10
 80078d4:	f895 808c 	ldrb.w	r8, [r5, #140]	; 0x8c
 80078d8:	f040 80c7 	bne.w	8007a6a <etharp_query+0x262>
 80078dc:	f1b8 0f00 	cmp.w	r8, #0
 80078e0:	f040 80c3 	bne.w	8007a6a <etharp_query+0x262>
 80078e4:	f895 80a4 	ldrb.w	r8, [r5, #164]	; 0xa4
 80078e8:	2405      	movs	r4, #5
 80078ea:	f1b8 0f00 	cmp.w	r8, #0
 80078ee:	d00e      	beq.n	800790e <etharp_query+0x106>
 80078f0:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
 80078f4:	428b      	cmp	r3, r1
 80078f6:	f000 823b 	beq.w	8007d70 <etharp_query+0x568>
 80078fa:	f1b8 0f01 	cmp.w	r8, #1
 80078fe:	f8b5 a0a2 	ldrh.w	sl, [r5, #162]	; 0xa2
 8007902:	f000 819e 	beq.w	8007c42 <etharp_query+0x43a>
 8007906:	4592      	cmp	sl, r2
 8007908:	d301      	bcc.n	800790e <etharp_query+0x106>
 800790a:	4652      	mov	r2, sl
 800790c:	2006      	movs	r0, #6
 800790e:	2c0a      	cmp	r4, #10
 8007910:	f895 80bc 	ldrb.w	r8, [r5, #188]	; 0xbc
 8007914:	f040 80c6 	bne.w	8007aa4 <etharp_query+0x29c>
 8007918:	f1b8 0f00 	cmp.w	r8, #0
 800791c:	f040 80c2 	bne.w	8007aa4 <etharp_query+0x29c>
 8007920:	f895 80d4 	ldrb.w	r8, [r5, #212]	; 0xd4
 8007924:	2407      	movs	r4, #7
 8007926:	f1b8 0f00 	cmp.w	r8, #0
 800792a:	d00e      	beq.n	800794a <etharp_query+0x142>
 800792c:	f8d5 10c4 	ldr.w	r1, [r5, #196]	; 0xc4
 8007930:	428b      	cmp	r3, r1
 8007932:	f000 81d9 	beq.w	8007ce8 <etharp_query+0x4e0>
 8007936:	f1b8 0f01 	cmp.w	r8, #1
 800793a:	f8b5 a0d2 	ldrh.w	sl, [r5, #210]	; 0xd2
 800793e:	f000 8196 	beq.w	8007c6e <etharp_query+0x466>
 8007942:	4592      	cmp	sl, r2
 8007944:	d301      	bcc.n	800794a <etharp_query+0x142>
 8007946:	4652      	mov	r2, sl
 8007948:	2008      	movs	r0, #8
 800794a:	2c0a      	cmp	r4, #10
 800794c:	f895 80ec 	ldrb.w	r8, [r5, #236]	; 0xec
 8007950:	f040 80c6 	bne.w	8007ae0 <etharp_query+0x2d8>
 8007954:	f1b8 0f00 	cmp.w	r8, #0
 8007958:	f040 80c2 	bne.w	8007ae0 <etharp_query+0x2d8>
 800795c:	2409      	movs	r4, #9
 800795e:	46a0      	mov	r8, r4
 8007960:	b2e4      	uxtb	r4, r4
 8007962:	eb08 0248 	add.w	r2, r8, r8, lsl #1
 8007966:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800796a:	7d12      	ldrb	r2, [r2, #20]
 800796c:	b13a      	cbz	r2, 800797e <etharp_query+0x176>
 800796e:	4b86      	ldr	r3, [pc, #536]	; (8007b88 <etharp_query+0x380>)
 8007970:	f240 1287 	movw	r2, #391	; 0x187
 8007974:	4985      	ldr	r1, [pc, #532]	; (8007b8c <etharp_query+0x384>)
 8007976:	4886      	ldr	r0, [pc, #536]	; (8007b90 <etharp_query+0x388>)
 8007978:	f007 fffe 	bl	800f978 <iprintf>
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8007982:	2200      	movs	r2, #0
 8007984:	b264      	sxtb	r4, r4
 8007986:	eb05 08c8 	add.w	r8, r5, r8, lsl #3
 800798a:	f8c8 3004 	str.w	r3, [r8, #4]
 800798e:	f8a8 2012 	strh.w	r2, [r8, #18]
 8007992:	ea4f 0844 	mov.w	r8, r4, lsl #1
 8007996:	eb08 0a04 	add.w	sl, r8, r4
 800799a:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 800799e:	f89a 3014 	ldrb.w	r3, [sl, #20]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	f040 80d3 	bne.w	8007b4e <etharp_query+0x346>
 80079a8:	f04f 0c01 	mov.w	ip, #1
 80079ac:	4979      	ldr	r1, [pc, #484]	; (8007b94 <etharp_query+0x38c>)
 80079ae:	1d32      	adds	r2, r6, #4
 80079b0:	464b      	mov	r3, r9
 80079b2:	9101      	str	r1, [sp, #4]
 80079b4:	4630      	mov	r0, r6
 80079b6:	9200      	str	r2, [sp, #0]
 80079b8:	4649      	mov	r1, r9
 80079ba:	4a77      	ldr	r2, [pc, #476]	; (8007b98 <etharp_query+0x390>)
 80079bc:	e9cd 7c02 	strd	r7, ip, [sp, #8]
 80079c0:	f8ca 6008 	str.w	r6, [sl, #8]
 80079c4:	f88a c014 	strb.w	ip, [sl, #20]
 80079c8:	f7ff fa30 	bl	8006e2c <etharp_raw>
 80079cc:	9b04      	ldr	r3, [sp, #16]
 80079ce:	b133      	cbz	r3, 80079de <etharp_query+0x1d6>
 80079d0:	f89a 3014 	ldrb.w	r3, [sl, #20]
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	f200 80c3 	bhi.w	8007b60 <etharp_query+0x358>
 80079da:	f000 8153 	beq.w	8007c84 <etharp_query+0x47c>
 80079de:	b007      	add	sp, #28
 80079e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079e4:	f04f 0c0a 	mov.w	ip, #10
 80079e8:	f895 802c 	ldrb.w	r8, [r5, #44]	; 0x2c
 80079ec:	46a3      	mov	fp, r4
 80079ee:	4622      	mov	r2, r4
 80079f0:	4660      	mov	r0, ip
 80079f2:	46e6      	mov	lr, ip
 80079f4:	9405      	str	r4, [sp, #20]
 80079f6:	f1b8 0f00 	cmp.w	r8, #0
 80079fa:	d00d      	beq.n	8007a18 <etharp_query+0x210>
 80079fc:	69e9      	ldr	r1, [r5, #28]
 80079fe:	428b      	cmp	r3, r1
 8007a00:	f000 81bc 	beq.w	8007d7c <etharp_query+0x574>
 8007a04:	f1b8 0f01 	cmp.w	r8, #1
 8007a08:	f8b5 a02a 	ldrh.w	sl, [r5, #42]	; 0x2a
 8007a0c:	f000 80e3 	beq.w	8007bd6 <etharp_query+0x3ce>
 8007a10:	4592      	cmp	sl, r2
 8007a12:	d301      	bcc.n	8007a18 <etharp_query+0x210>
 8007a14:	4652      	mov	r2, sl
 8007a16:	2001      	movs	r0, #1
 8007a18:	f895 8044 	ldrb.w	r8, [r5, #68]	; 0x44
 8007a1c:	f1b8 0f00 	cmp.w	r8, #0
 8007a20:	f47f af29 	bne.w	8007876 <etharp_query+0x6e>
 8007a24:	2c0a      	cmp	r4, #10
 8007a26:	f47f af26 	bne.w	8007876 <etharp_query+0x6e>
 8007a2a:	f895 805c 	ldrb.w	r8, [r5, #92]	; 0x5c
 8007a2e:	2402      	movs	r4, #2
 8007a30:	f1b8 0f00 	cmp.w	r8, #0
 8007a34:	d00d      	beq.n	8007a52 <etharp_query+0x24a>
 8007a36:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 8007a38:	428b      	cmp	r3, r1
 8007a3a:	f000 819d 	beq.w	8007d78 <etharp_query+0x570>
 8007a3e:	f1b8 0f01 	cmp.w	r8, #1
 8007a42:	f8b5 a05a 	ldrh.w	sl, [r5, #90]	; 0x5a
 8007a46:	f000 80db 	beq.w	8007c00 <etharp_query+0x3f8>
 8007a4a:	4592      	cmp	sl, r2
 8007a4c:	d301      	bcc.n	8007a52 <etharp_query+0x24a>
 8007a4e:	4652      	mov	r2, sl
 8007a50:	2003      	movs	r0, #3
 8007a52:	2c0a      	cmp	r4, #10
 8007a54:	f895 8074 	ldrb.w	r8, [r5, #116]	; 0x74
 8007a58:	f47f af2a 	bne.w	80078b0 <etharp_query+0xa8>
 8007a5c:	f1b8 0f00 	cmp.w	r8, #0
 8007a60:	f47f af26 	bne.w	80078b0 <etharp_query+0xa8>
 8007a64:	f895 808c 	ldrb.w	r8, [r5, #140]	; 0x8c
 8007a68:	2404      	movs	r4, #4
 8007a6a:	f1b8 0f00 	cmp.w	r8, #0
 8007a6e:	d00d      	beq.n	8007a8c <etharp_query+0x284>
 8007a70:	6fe9      	ldr	r1, [r5, #124]	; 0x7c
 8007a72:	428b      	cmp	r3, r1
 8007a74:	f000 8184 	beq.w	8007d80 <etharp_query+0x578>
 8007a78:	f1b8 0f01 	cmp.w	r8, #1
 8007a7c:	f8b5 a08a 	ldrh.w	sl, [r5, #138]	; 0x8a
 8007a80:	f000 80c9 	beq.w	8007c16 <etharp_query+0x40e>
 8007a84:	4592      	cmp	sl, r2
 8007a86:	d301      	bcc.n	8007a8c <etharp_query+0x284>
 8007a88:	4652      	mov	r2, sl
 8007a8a:	2005      	movs	r0, #5
 8007a8c:	2c0a      	cmp	r4, #10
 8007a8e:	f895 80a4 	ldrb.w	r8, [r5, #164]	; 0xa4
 8007a92:	f47f af2a 	bne.w	80078ea <etharp_query+0xe2>
 8007a96:	f1b8 0f00 	cmp.w	r8, #0
 8007a9a:	f47f af26 	bne.w	80078ea <etharp_query+0xe2>
 8007a9e:	f895 80bc 	ldrb.w	r8, [r5, #188]	; 0xbc
 8007aa2:	2406      	movs	r4, #6
 8007aa4:	f1b8 0f00 	cmp.w	r8, #0
 8007aa8:	d00e      	beq.n	8007ac8 <etharp_query+0x2c0>
 8007aaa:	f8d5 10ac 	ldr.w	r1, [r5, #172]	; 0xac
 8007aae:	428b      	cmp	r3, r1
 8007ab0:	f000 816a 	beq.w	8007d88 <etharp_query+0x580>
 8007ab4:	f1b8 0f01 	cmp.w	r8, #1
 8007ab8:	f8b5 a0ba 	ldrh.w	sl, [r5, #186]	; 0xba
 8007abc:	f000 80cc 	beq.w	8007c58 <etharp_query+0x450>
 8007ac0:	4592      	cmp	sl, r2
 8007ac2:	d301      	bcc.n	8007ac8 <etharp_query+0x2c0>
 8007ac4:	4652      	mov	r2, sl
 8007ac6:	2007      	movs	r0, #7
 8007ac8:	2c0a      	cmp	r4, #10
 8007aca:	f895 80d4 	ldrb.w	r8, [r5, #212]	; 0xd4
 8007ace:	f47f af2a 	bne.w	8007926 <etharp_query+0x11e>
 8007ad2:	f1b8 0f00 	cmp.w	r8, #0
 8007ad6:	f47f af26 	bne.w	8007926 <etharp_query+0x11e>
 8007ada:	f895 80ec 	ldrb.w	r8, [r5, #236]	; 0xec
 8007ade:	2408      	movs	r4, #8
 8007ae0:	f1b8 0f00 	cmp.w	r8, #0
 8007ae4:	d065      	beq.n	8007bb2 <etharp_query+0x3aa>
 8007ae6:	f8d5 10dc 	ldr.w	r1, [r5, #220]	; 0xdc
 8007aea:	428b      	cmp	r3, r1
 8007aec:	f000 814e 	beq.w	8007d8c <etharp_query+0x584>
 8007af0:	f1b8 0f01 	cmp.w	r8, #1
 8007af4:	f8b5 a0ea 	ldrh.w	sl, [r5, #234]	; 0xea
 8007af8:	d052      	beq.n	8007ba0 <etharp_query+0x398>
 8007afa:	4592      	cmp	sl, r2
 8007afc:	d359      	bcc.n	8007bb2 <etharp_query+0x3aa>
 8007afe:	2c0a      	cmp	r4, #10
 8007b00:	f47f af2d 	bne.w	800795e <etharp_query+0x156>
 8007b04:	2009      	movs	r0, #9
 8007b06:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8007b0a:	b2c4      	uxtb	r4, r0
 8007b0c:	f855 3033 	ldr.w	r3, [r5, r3, lsl #3]
 8007b10:	b133      	cbz	r3, 8007b20 <etharp_query+0x318>
 8007b12:	4b1d      	ldr	r3, [pc, #116]	; (8007b88 <etharp_query+0x380>)
 8007b14:	f240 126f 	movw	r2, #367	; 0x16f
 8007b18:	4920      	ldr	r1, [pc, #128]	; (8007b9c <etharp_query+0x394>)
 8007b1a:	481d      	ldr	r0, [pc, #116]	; (8007b90 <etharp_query+0x388>)
 8007b1c:	f007 ff2c 	bl	800f978 <iprintf>
 8007b20:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 8007b24:	46a0      	mov	r8, r4
 8007b26:	eb0a 0b04 	add.w	fp, sl, r4
 8007b2a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8007b2e:	f855 000b 	ldr.w	r0, [r5, fp]
 8007b32:	b120      	cbz	r0, 8007b3e <etharp_query+0x336>
 8007b34:	f7fe f982 	bl	8005e3c <pbuf_free>
 8007b38:	2300      	movs	r3, #0
 8007b3a:	f845 300b 	str.w	r3, [r5, fp]
 8007b3e:	44a2      	add	sl, r4
 8007b40:	2300      	movs	r3, #0
 8007b42:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 8007b46:	f88a 3014 	strb.w	r3, [sl, #20]
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	e717      	b.n	800797e <etharp_query+0x176>
 8007b4e:	9a04      	ldr	r2, [sp, #16]
 8007b50:	2a00      	cmp	r2, #0
 8007b52:	f000 8157 	beq.w	8007e04 <etharp_query+0x5fc>
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b5c:	f67f af3d 	bls.w	80079da <etharp_query+0x1d2>
 8007b60:	2318      	movs	r3, #24
 8007b62:	f44f 6700 	mov.w	r7, #2048	; 0x800
 8007b66:	464a      	mov	r2, r9
 8007b68:	9904      	ldr	r1, [sp, #16]
 8007b6a:	fb03 5304 	mla	r3, r3, r4, r5
 8007b6e:	4630      	mov	r0, r6
 8007b70:	9700      	str	r7, [sp, #0]
 8007b72:	330c      	adds	r3, #12
 8007b74:	f885 40f0 	strb.w	r4, [r5, #240]	; 0xf0
 8007b78:	f001 fe8c 	bl	8009894 <ethernet_output>
 8007b7c:	b007      	add	sp, #28
 8007b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b82:	bf00      	nop
 8007b84:	200032e4 	.word	0x200032e4
 8007b88:	080116e4 	.word	0x080116e4
 8007b8c:	08011854 	.word	0x08011854
 8007b90:	08010e34 	.word	0x08010e34
 8007b94:	08010d20 	.word	0x08010d20
 8007b98:	08010d18 	.word	0x08010d18
 8007b9c:	0801183c 	.word	0x0801183c
 8007ba0:	f8d5 20d8 	ldr.w	r2, [r5, #216]	; 0xd8
 8007ba4:	2a00      	cmp	r2, #0
 8007ba6:	f000 80dd 	beq.w	8007d64 <etharp_query+0x55c>
 8007baa:	45da      	cmp	sl, fp
 8007bac:	bf28      	it	cs
 8007bae:	f04f 0e09 	movcs.w	lr, #9
 8007bb2:	2c0a      	cmp	r4, #10
 8007bb4:	f47f aed3 	bne.w	800795e <etharp_query+0x156>
 8007bb8:	280a      	cmp	r0, #10
 8007bba:	d1a4      	bne.n	8007b06 <etharp_query+0x2fe>
 8007bbc:	f1bc 0f0a 	cmp.w	ip, #10
 8007bc0:	d106      	bne.n	8007bd0 <etharp_query+0x3c8>
 8007bc2:	f1be 0f0a 	cmp.w	lr, #10
 8007bc6:	f000 808c 	beq.w	8007ce2 <etharp_query+0x4da>
 8007bca:	fa5f f48e 	uxtb.w	r4, lr
 8007bce:	e7a7      	b.n	8007b20 <etharp_query+0x318>
 8007bd0:	fa5f f48c 	uxtb.w	r4, ip
 8007bd4:	e7a4      	b.n	8007b20 <etharp_query+0x318>
 8007bd6:	69a9      	ldr	r1, [r5, #24]
 8007bd8:	2900      	cmp	r1, #0
 8007bda:	f000 80e1 	beq.w	8007da0 <etharp_query+0x598>
 8007bde:	45da      	cmp	sl, fp
 8007be0:	f4ff af1a 	bcc.w	8007a18 <etharp_query+0x210>
 8007be4:	46d3      	mov	fp, sl
 8007be6:	46c6      	mov	lr, r8
 8007be8:	e716      	b.n	8007a18 <etharp_query+0x210>
 8007bea:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8007bec:	2900      	cmp	r1, #0
 8007bee:	f000 80df 	beq.w	8007db0 <etharp_query+0x5a8>
 8007bf2:	45da      	cmp	sl, fp
 8007bf4:	f4ff ae50 	bcc.w	8007898 <etharp_query+0x90>
 8007bf8:	46d3      	mov	fp, sl
 8007bfa:	f04f 0e02 	mov.w	lr, #2
 8007bfe:	e64b      	b.n	8007898 <etharp_query+0x90>
 8007c00:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8007c02:	2900      	cmp	r1, #0
 8007c04:	f000 80dd 	beq.w	8007dc2 <etharp_query+0x5ba>
 8007c08:	45da      	cmp	sl, fp
 8007c0a:	f4ff af22 	bcc.w	8007a52 <etharp_query+0x24a>
 8007c0e:	46d3      	mov	fp, sl
 8007c10:	f04f 0e03 	mov.w	lr, #3
 8007c14:	e71d      	b.n	8007a52 <etharp_query+0x24a>
 8007c16:	6fa9      	ldr	r1, [r5, #120]	; 0x78
 8007c18:	2900      	cmp	r1, #0
 8007c1a:	f000 80e4 	beq.w	8007de6 <etharp_query+0x5de>
 8007c1e:	45da      	cmp	sl, fp
 8007c20:	f4ff af34 	bcc.w	8007a8c <etharp_query+0x284>
 8007c24:	46d3      	mov	fp, sl
 8007c26:	f04f 0e05 	mov.w	lr, #5
 8007c2a:	e72f      	b.n	8007a8c <etharp_query+0x284>
 8007c2c:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8007c2e:	2900      	cmp	r1, #0
 8007c30:	f000 80d0 	beq.w	8007dd4 <etharp_query+0x5cc>
 8007c34:	45da      	cmp	sl, fp
 8007c36:	f4ff ae4c 	bcc.w	80078d2 <etharp_query+0xca>
 8007c3a:	46d3      	mov	fp, sl
 8007c3c:	f04f 0e04 	mov.w	lr, #4
 8007c40:	e647      	b.n	80078d2 <etharp_query+0xca>
 8007c42:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
 8007c46:	2900      	cmp	r1, #0
 8007c48:	d071      	beq.n	8007d2e <etharp_query+0x526>
 8007c4a:	45da      	cmp	sl, fp
 8007c4c:	f4ff ae5f 	bcc.w	800790e <etharp_query+0x106>
 8007c50:	46d3      	mov	fp, sl
 8007c52:	f04f 0e06 	mov.w	lr, #6
 8007c56:	e65a      	b.n	800790e <etharp_query+0x106>
 8007c58:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 8007c5c:	2900      	cmp	r1, #0
 8007c5e:	d06f      	beq.n	8007d40 <etharp_query+0x538>
 8007c60:	45da      	cmp	sl, fp
 8007c62:	f4ff af31 	bcc.w	8007ac8 <etharp_query+0x2c0>
 8007c66:	46d3      	mov	fp, sl
 8007c68:	f04f 0e07 	mov.w	lr, #7
 8007c6c:	e72c      	b.n	8007ac8 <etharp_query+0x2c0>
 8007c6e:	f8d5 10c0 	ldr.w	r1, [r5, #192]	; 0xc0
 8007c72:	2900      	cmp	r1, #0
 8007c74:	d06d      	beq.n	8007d52 <etharp_query+0x54a>
 8007c76:	45da      	cmp	sl, fp
 8007c78:	f4ff ae67 	bcc.w	800794a <etharp_query+0x142>
 8007c7c:	46d3      	mov	fp, sl
 8007c7e:	f04f 0e08 	mov.w	lr, #8
 8007c82:	e662      	b.n	800794a <etharp_query+0x142>
 8007c84:	9e04      	ldr	r6, [sp, #16]
 8007c86:	46a1      	mov	r9, r4
 8007c88:	f8df b1a0 	ldr.w	fp, [pc, #416]	; 8007e2c <etharp_query+0x624>
 8007c8c:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 8007e30 <etharp_query+0x628>
 8007c90:	4f63      	ldr	r7, [pc, #396]	; (8007e20 <etharp_query+0x618>)
 8007c92:	e005      	b.n	8007ca0 <etharp_query+0x498>
 8007c94:	7b33      	ldrb	r3, [r6, #12]
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	f040 80ae 	bne.w	8007df8 <etharp_query+0x5f0>
 8007c9c:	6836      	ldr	r6, [r6, #0]
 8007c9e:	b39e      	cbz	r6, 8007d08 <etharp_query+0x500>
 8007ca0:	f8b6 c008 	ldrh.w	ip, [r6, #8]
 8007ca4:	8973      	ldrh	r3, [r6, #10]
 8007ca6:	4563      	cmp	r3, ip
 8007ca8:	d1f4      	bne.n	8007c94 <etharp_query+0x48c>
 8007caa:	6834      	ldr	r4, [r6, #0]
 8007cac:	465b      	mov	r3, fp
 8007cae:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 8007cb2:	4651      	mov	r1, sl
 8007cb4:	4638      	mov	r0, r7
 8007cb6:	b114      	cbz	r4, 8007cbe <etharp_query+0x4b6>
 8007cb8:	f007 fe5e 	bl	800f978 <iprintf>
 8007cbc:	e7ea      	b.n	8007c94 <etharp_query+0x48c>
 8007cbe:	7b33      	ldrb	r3, [r6, #12]
 8007cc0:	464c      	mov	r4, r9
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d021      	beq.n	8007d0a <etharp_query+0x502>
 8007cc6:	4661      	mov	r1, ip
 8007cc8:	2200      	movs	r2, #0
 8007cca:	2002      	movs	r0, #2
 8007ccc:	f7fe f92a 	bl	8005f24 <pbuf_alloc>
 8007cd0:	4606      	mov	r6, r0
 8007cd2:	b130      	cbz	r0, 8007ce2 <etharp_query+0x4da>
 8007cd4:	9904      	ldr	r1, [sp, #16]
 8007cd6:	f7fe fb71 	bl	80063bc <pbuf_copy>
 8007cda:	b1d0      	cbz	r0, 8007d12 <etharp_query+0x50a>
 8007cdc:	4630      	mov	r0, r6
 8007cde:	f7fe f8ad 	bl	8005e3c <pbuf_free>
 8007ce2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ce6:	e67a      	b.n	80079de <etharp_query+0x1d6>
 8007ce8:	2008      	movs	r0, #8
 8007cea:	b244      	sxtb	r4, r0
 8007cec:	e651      	b.n	8007992 <etharp_query+0x18a>
 8007cee:	6828      	ldr	r0, [r5, #0]
 8007cf0:	2800      	cmp	r0, #0
 8007cf2:	d04d      	beq.n	8007d90 <etharp_query+0x588>
 8007cf4:	200a      	movs	r0, #10
 8007cf6:	4693      	mov	fp, r2
 8007cf8:	9105      	str	r1, [sp, #20]
 8007cfa:	460a      	mov	r2, r1
 8007cfc:	4684      	mov	ip, r0
 8007cfe:	468e      	mov	lr, r1
 8007d00:	e5b0      	b.n	8007864 <etharp_query+0x5c>
 8007d02:	f06f 000f 	mvn.w	r0, #15
 8007d06:	e66a      	b.n	80079de <etharp_query+0x1d6>
 8007d08:	464c      	mov	r4, r9
 8007d0a:	9804      	ldr	r0, [sp, #16]
 8007d0c:	4606      	mov	r6, r0
 8007d0e:	f7fe fa99 	bl	8006244 <pbuf_ref>
 8007d12:	eb08 0304 	add.w	r3, r8, r4
 8007d16:	f855 0033 	ldr.w	r0, [r5, r3, lsl #3]
 8007d1a:	b108      	cbz	r0, 8007d20 <etharp_query+0x518>
 8007d1c:	f7fe f88e 	bl	8005e3c <pbuf_free>
 8007d20:	4444      	add	r4, r8
 8007d22:	2000      	movs	r0, #0
 8007d24:	f845 6034 	str.w	r6, [r5, r4, lsl #3]
 8007d28:	b007      	add	sp, #28
 8007d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d2e:	9905      	ldr	r1, [sp, #20]
 8007d30:	458a      	cmp	sl, r1
 8007d32:	f4ff adec 	bcc.w	800790e <etharp_query+0x106>
 8007d36:	f8cd a014 	str.w	sl, [sp, #20]
 8007d3a:	f04f 0c06 	mov.w	ip, #6
 8007d3e:	e5e6      	b.n	800790e <etharp_query+0x106>
 8007d40:	9905      	ldr	r1, [sp, #20]
 8007d42:	458a      	cmp	sl, r1
 8007d44:	f4ff aec0 	bcc.w	8007ac8 <etharp_query+0x2c0>
 8007d48:	f8cd a014 	str.w	sl, [sp, #20]
 8007d4c:	f04f 0c07 	mov.w	ip, #7
 8007d50:	e6ba      	b.n	8007ac8 <etharp_query+0x2c0>
 8007d52:	9905      	ldr	r1, [sp, #20]
 8007d54:	458a      	cmp	sl, r1
 8007d56:	f4ff adf8 	bcc.w	800794a <etharp_query+0x142>
 8007d5a:	f8cd a014 	str.w	sl, [sp, #20]
 8007d5e:	f04f 0c08 	mov.w	ip, #8
 8007d62:	e5f2      	b.n	800794a <etharp_query+0x142>
 8007d64:	9a05      	ldr	r2, [sp, #20]
 8007d66:	4592      	cmp	sl, r2
 8007d68:	bf28      	it	cs
 8007d6a:	f04f 0c09 	movcs.w	ip, #9
 8007d6e:	e720      	b.n	8007bb2 <etharp_query+0x3aa>
 8007d70:	2006      	movs	r0, #6
 8007d72:	e7ba      	b.n	8007cea <etharp_query+0x4e2>
 8007d74:	2004      	movs	r0, #4
 8007d76:	e7b8      	b.n	8007cea <etharp_query+0x4e2>
 8007d78:	2003      	movs	r0, #3
 8007d7a:	e7b6      	b.n	8007cea <etharp_query+0x4e2>
 8007d7c:	2001      	movs	r0, #1
 8007d7e:	e7b4      	b.n	8007cea <etharp_query+0x4e2>
 8007d80:	2005      	movs	r0, #5
 8007d82:	e7b2      	b.n	8007cea <etharp_query+0x4e2>
 8007d84:	2002      	movs	r0, #2
 8007d86:	e7b0      	b.n	8007cea <etharp_query+0x4e2>
 8007d88:	2007      	movs	r0, #7
 8007d8a:	e7ae      	b.n	8007cea <etharp_query+0x4e2>
 8007d8c:	2009      	movs	r0, #9
 8007d8e:	e7ac      	b.n	8007cea <etharp_query+0x4e2>
 8007d90:	9205      	str	r2, [sp, #20]
 8007d92:	f04f 0e0a 	mov.w	lr, #10
 8007d96:	4602      	mov	r2, r0
 8007d98:	4670      	mov	r0, lr
 8007d9a:	4693      	mov	fp, r2
 8007d9c:	4694      	mov	ip, r2
 8007d9e:	e561      	b.n	8007864 <etharp_query+0x5c>
 8007da0:	9905      	ldr	r1, [sp, #20]
 8007da2:	458a      	cmp	sl, r1
 8007da4:	f4ff ae38 	bcc.w	8007a18 <etharp_query+0x210>
 8007da8:	f8cd a014 	str.w	sl, [sp, #20]
 8007dac:	46c4      	mov	ip, r8
 8007dae:	e633      	b.n	8007a18 <etharp_query+0x210>
 8007db0:	9905      	ldr	r1, [sp, #20]
 8007db2:	458a      	cmp	sl, r1
 8007db4:	f4ff ad70 	bcc.w	8007898 <etharp_query+0x90>
 8007db8:	f8cd a014 	str.w	sl, [sp, #20]
 8007dbc:	f04f 0c02 	mov.w	ip, #2
 8007dc0:	e56a      	b.n	8007898 <etharp_query+0x90>
 8007dc2:	9905      	ldr	r1, [sp, #20]
 8007dc4:	458a      	cmp	sl, r1
 8007dc6:	f4ff ae44 	bcc.w	8007a52 <etharp_query+0x24a>
 8007dca:	f8cd a014 	str.w	sl, [sp, #20]
 8007dce:	f04f 0c03 	mov.w	ip, #3
 8007dd2:	e63e      	b.n	8007a52 <etharp_query+0x24a>
 8007dd4:	9905      	ldr	r1, [sp, #20]
 8007dd6:	458a      	cmp	sl, r1
 8007dd8:	f4ff ad7b 	bcc.w	80078d2 <etharp_query+0xca>
 8007ddc:	f8cd a014 	str.w	sl, [sp, #20]
 8007de0:	f04f 0c04 	mov.w	ip, #4
 8007de4:	e575      	b.n	80078d2 <etharp_query+0xca>
 8007de6:	9905      	ldr	r1, [sp, #20]
 8007de8:	458a      	cmp	sl, r1
 8007dea:	f4ff ae4f 	bcc.w	8007a8c <etharp_query+0x284>
 8007dee:	f8cd a014 	str.w	sl, [sp, #20]
 8007df2:	f04f 0c05 	mov.w	ip, #5
 8007df6:	e649      	b.n	8007a8c <etharp_query+0x284>
 8007df8:	464c      	mov	r4, r9
 8007dfa:	f8b6 c008 	ldrh.w	ip, [r6, #8]
 8007dfe:	e762      	b.n	8007cc6 <etharp_query+0x4be>
 8007e00:	240a      	movs	r4, #10
 8007e02:	e5f8      	b.n	80079f6 <etharp_query+0x1ee>
 8007e04:	1d32      	adds	r2, r6, #4
 8007e06:	2101      	movs	r1, #1
 8007e08:	4b06      	ldr	r3, [pc, #24]	; (8007e24 <etharp_query+0x61c>)
 8007e0a:	4630      	mov	r0, r6
 8007e0c:	9200      	str	r2, [sp, #0]
 8007e0e:	9301      	str	r3, [sp, #4]
 8007e10:	464b      	mov	r3, r9
 8007e12:	4a05      	ldr	r2, [pc, #20]	; (8007e28 <etharp_query+0x620>)
 8007e14:	e9cd 7102 	strd	r7, r1, [sp, #8]
 8007e18:	4649      	mov	r1, r9
 8007e1a:	f7ff f807 	bl	8006e2c <etharp_raw>
 8007e1e:	e5de      	b.n	80079de <etharp_query+0x1d6>
 8007e20:	08010e34 	.word	0x08010e34
 8007e24:	08010d20 	.word	0x08010d20
 8007e28:	08010d18 	.word	0x08010d18
 8007e2c:	080116e4 	.word	0x080116e4
 8007e30:	08011880 	.word	0x08011880

08007e34 <etharp_output>:
 8007e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e36:	460e      	mov	r6, r1
 8007e38:	b085      	sub	sp, #20
 8007e3a:	4615      	mov	r5, r2
 8007e3c:	4604      	mov	r4, r0
 8007e3e:	2800      	cmp	r0, #0
 8007e40:	f000 80a2 	beq.w	8007f88 <etharp_output+0x154>
 8007e44:	2e00      	cmp	r6, #0
 8007e46:	f000 80a9 	beq.w	8007f9c <etharp_output+0x168>
 8007e4a:	2d00      	cmp	r5, #0
 8007e4c:	f000 80b0 	beq.w	8007fb0 <etharp_output+0x17c>
 8007e50:	4621      	mov	r1, r4
 8007e52:	6828      	ldr	r0, [r5, #0]
 8007e54:	f001 f83e 	bl	8008ed4 <ip4_addr_isbroadcast_u32>
 8007e58:	2800      	cmp	r0, #0
 8007e5a:	f040 8093 	bne.w	8007f84 <etharp_output+0x150>
 8007e5e:	6829      	ldr	r1, [r5, #0]
 8007e60:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
 8007e64:	2be0      	cmp	r3, #224	; 0xe0
 8007e66:	d070      	beq.n	8007f4a <etharp_output+0x116>
 8007e68:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8007e6c:	404b      	eors	r3, r1
 8007e6e:	4213      	tst	r3, r2
 8007e70:	d00a      	beq.n	8007e88 <etharp_output+0x54>
 8007e72:	b28a      	uxth	r2, r1
 8007e74:	f64f 63a9 	movw	r3, #65193	; 0xfea9
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	d005      	beq.n	8007e88 <etharp_output+0x54>
 8007e7c:	68e1      	ldr	r1, [r4, #12]
 8007e7e:	2900      	cmp	r1, #0
 8007e80:	f000 80c0 	beq.w	8008004 <etharp_output+0x1d0>
 8007e84:	f104 050c 	add.w	r5, r4, #12
 8007e88:	4b60      	ldr	r3, [pc, #384]	; (800800c <etharp_output+0x1d8>)
 8007e8a:	f893 20f0 	ldrb.w	r2, [r3, #240]	; 0xf0
 8007e8e:	eb02 0042 	add.w	r0, r2, r2, lsl #1
 8007e92:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8007e96:	7d07      	ldrb	r7, [r0, #20]
 8007e98:	2f01      	cmp	r7, #1
 8007e9a:	d903      	bls.n	8007ea4 <etharp_output+0x70>
 8007e9c:	6840      	ldr	r0, [r0, #4]
 8007e9e:	4288      	cmp	r0, r1
 8007ea0:	f000 808e 	beq.w	8007fc0 <etharp_output+0x18c>
 8007ea4:	7d1a      	ldrb	r2, [r3, #20]
 8007ea6:	2a01      	cmp	r2, #1
 8007ea8:	d903      	bls.n	8007eb2 <etharp_output+0x7e>
 8007eaa:	685a      	ldr	r2, [r3, #4]
 8007eac:	428a      	cmp	r2, r1
 8007eae:	f000 80a3 	beq.w	8007ff8 <etharp_output+0x1c4>
 8007eb2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8007eb6:	2a01      	cmp	r2, #1
 8007eb8:	d903      	bls.n	8007ec2 <etharp_output+0x8e>
 8007eba:	69da      	ldr	r2, [r3, #28]
 8007ebc:	4291      	cmp	r1, r2
 8007ebe:	f000 809d 	beq.w	8007ffc <etharp_output+0x1c8>
 8007ec2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007ec6:	2a01      	cmp	r2, #1
 8007ec8:	d903      	bls.n	8007ed2 <etharp_output+0x9e>
 8007eca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ecc:	4291      	cmp	r1, r2
 8007ece:	f000 8097 	beq.w	8008000 <etharp_output+0x1cc>
 8007ed2:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 8007ed6:	2a01      	cmp	r2, #1
 8007ed8:	d902      	bls.n	8007ee0 <etharp_output+0xac>
 8007eda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007edc:	4291      	cmp	r1, r2
 8007ede:	d074      	beq.n	8007fca <etharp_output+0x196>
 8007ee0:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8007ee4:	2a01      	cmp	r2, #1
 8007ee6:	d902      	bls.n	8007eee <etharp_output+0xba>
 8007ee8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007eea:	4291      	cmp	r1, r2
 8007eec:	d078      	beq.n	8007fe0 <etharp_output+0x1ac>
 8007eee:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8007ef2:	2a01      	cmp	r2, #1
 8007ef4:	d902      	bls.n	8007efc <etharp_output+0xc8>
 8007ef6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8007ef8:	4291      	cmp	r1, r2
 8007efa:	d073      	beq.n	8007fe4 <etharp_output+0x1b0>
 8007efc:	f893 20a4 	ldrb.w	r2, [r3, #164]	; 0xa4
 8007f00:	2a01      	cmp	r2, #1
 8007f02:	d903      	bls.n	8007f0c <etharp_output+0xd8>
 8007f04:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8007f08:	4291      	cmp	r1, r2
 8007f0a:	d06d      	beq.n	8007fe8 <etharp_output+0x1b4>
 8007f0c:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
 8007f10:	2a01      	cmp	r2, #1
 8007f12:	d903      	bls.n	8007f1c <etharp_output+0xe8>
 8007f14:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8007f18:	4291      	cmp	r1, r2
 8007f1a:	d067      	beq.n	8007fec <etharp_output+0x1b8>
 8007f1c:	f893 20d4 	ldrb.w	r2, [r3, #212]	; 0xd4
 8007f20:	2a01      	cmp	r2, #1
 8007f22:	d903      	bls.n	8007f2c <etharp_output+0xf8>
 8007f24:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8007f28:	4291      	cmp	r1, r2
 8007f2a:	d061      	beq.n	8007ff0 <etharp_output+0x1bc>
 8007f2c:	f893 20ec 	ldrb.w	r2, [r3, #236]	; 0xec
 8007f30:	2a01      	cmp	r2, #1
 8007f32:	d903      	bls.n	8007f3c <etharp_output+0x108>
 8007f34:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 8007f38:	428a      	cmp	r2, r1
 8007f3a:	d05b      	beq.n	8007ff4 <etharp_output+0x1c0>
 8007f3c:	4632      	mov	r2, r6
 8007f3e:	4629      	mov	r1, r5
 8007f40:	4620      	mov	r0, r4
 8007f42:	f7ff fc61 	bl	8007808 <etharp_query>
 8007f46:	b005      	add	sp, #20
 8007f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f4a:	786b      	ldrb	r3, [r5, #1]
 8007f4c:	2701      	movs	r7, #1
 8007f4e:	205e      	movs	r0, #94	; 0x5e
 8007f50:	78a9      	ldrb	r1, [r5, #2]
 8007f52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f56:	78ea      	ldrb	r2, [r5, #3]
 8007f58:	f8ad 7008 	strh.w	r7, [sp, #8]
 8007f5c:	f88d 300b 	strb.w	r3, [sp, #11]
 8007f60:	ab02      	add	r3, sp, #8
 8007f62:	f88d 000a 	strb.w	r0, [sp, #10]
 8007f66:	f88d 100c 	strb.w	r1, [sp, #12]
 8007f6a:	f88d 200d 	strb.w	r2, [sp, #13]
 8007f6e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007f72:	4631      	mov	r1, r6
 8007f74:	f104 0229 	add.w	r2, r4, #41	; 0x29
 8007f78:	9000      	str	r0, [sp, #0]
 8007f7a:	4620      	mov	r0, r4
 8007f7c:	f001 fc8a 	bl	8009894 <ethernet_output>
 8007f80:	b005      	add	sp, #20
 8007f82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f84:	4b22      	ldr	r3, [pc, #136]	; (8008010 <etharp_output+0x1dc>)
 8007f86:	e7f2      	b.n	8007f6e <etharp_output+0x13a>
 8007f88:	4b22      	ldr	r3, [pc, #136]	; (8008014 <etharp_output+0x1e0>)
 8007f8a:	f240 321b 	movw	r2, #795	; 0x31b
 8007f8e:	4922      	ldr	r1, [pc, #136]	; (8008018 <etharp_output+0x1e4>)
 8007f90:	4822      	ldr	r0, [pc, #136]	; (800801c <etharp_output+0x1e8>)
 8007f92:	f007 fcf1 	bl	800f978 <iprintf>
 8007f96:	2e00      	cmp	r6, #0
 8007f98:	f47f af57 	bne.w	8007e4a <etharp_output+0x16>
 8007f9c:	4b1d      	ldr	r3, [pc, #116]	; (8008014 <etharp_output+0x1e0>)
 8007f9e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8007fa2:	491f      	ldr	r1, [pc, #124]	; (8008020 <etharp_output+0x1ec>)
 8007fa4:	481d      	ldr	r0, [pc, #116]	; (800801c <etharp_output+0x1e8>)
 8007fa6:	f007 fce7 	bl	800f978 <iprintf>
 8007faa:	2d00      	cmp	r5, #0
 8007fac:	f47f af50 	bne.w	8007e50 <etharp_output+0x1c>
 8007fb0:	4b18      	ldr	r3, [pc, #96]	; (8008014 <etharp_output+0x1e0>)
 8007fb2:	f240 321d 	movw	r2, #797	; 0x31d
 8007fb6:	491b      	ldr	r1, [pc, #108]	; (8008024 <etharp_output+0x1f0>)
 8007fb8:	4818      	ldr	r0, [pc, #96]	; (800801c <etharp_output+0x1e8>)
 8007fba:	f007 fcdd 	bl	800f978 <iprintf>
 8007fbe:	e747      	b.n	8007e50 <etharp_output+0x1c>
 8007fc0:	4631      	mov	r1, r6
 8007fc2:	4620      	mov	r0, r4
 8007fc4:	f7fe ffa4 	bl	8006f10 <etharp_output_to_arp_index>
 8007fc8:	e7da      	b.n	8007f80 <etharp_output+0x14c>
 8007fca:	2503      	movs	r5, #3
 8007fcc:	b2ed      	uxtb	r5, r5
 8007fce:	4631      	mov	r1, r6
 8007fd0:	4620      	mov	r0, r4
 8007fd2:	462a      	mov	r2, r5
 8007fd4:	f883 50f0 	strb.w	r5, [r3, #240]	; 0xf0
 8007fd8:	f7fe ff9a 	bl	8006f10 <etharp_output_to_arp_index>
 8007fdc:	b005      	add	sp, #20
 8007fde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fe0:	2504      	movs	r5, #4
 8007fe2:	e7f3      	b.n	8007fcc <etharp_output+0x198>
 8007fe4:	2505      	movs	r5, #5
 8007fe6:	e7f1      	b.n	8007fcc <etharp_output+0x198>
 8007fe8:	2506      	movs	r5, #6
 8007fea:	e7ef      	b.n	8007fcc <etharp_output+0x198>
 8007fec:	2507      	movs	r5, #7
 8007fee:	e7ed      	b.n	8007fcc <etharp_output+0x198>
 8007ff0:	2508      	movs	r5, #8
 8007ff2:	e7eb      	b.n	8007fcc <etharp_output+0x198>
 8007ff4:	2509      	movs	r5, #9
 8007ff6:	e7e9      	b.n	8007fcc <etharp_output+0x198>
 8007ff8:	2500      	movs	r5, #0
 8007ffa:	e7e7      	b.n	8007fcc <etharp_output+0x198>
 8007ffc:	2501      	movs	r5, #1
 8007ffe:	e7e5      	b.n	8007fcc <etharp_output+0x198>
 8008000:	2502      	movs	r5, #2
 8008002:	e7e3      	b.n	8007fcc <etharp_output+0x198>
 8008004:	f06f 0003 	mvn.w	r0, #3
 8008008:	e7ba      	b.n	8007f80 <etharp_output+0x14c>
 800800a:	bf00      	nop
 800800c:	200032e4 	.word	0x200032e4
 8008010:	08010d18 	.word	0x08010d18
 8008014:	080116e4 	.word	0x080116e4
 8008018:	0801171c 	.word	0x0801171c
 800801c:	08010e34 	.word	0x08010e34
 8008020:	0801189c 	.word	0x0801189c
 8008024:	080117f8 	.word	0x080117f8

08008028 <etharp_request>:
 8008028:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800802c:	4605      	mov	r5, r0
 800802e:	b083      	sub	sp, #12
 8008030:	4689      	mov	r9, r1
 8008032:	f100 0829 	add.w	r8, r0, #41	; 0x29
 8008036:	2800      	cmp	r0, #0
 8008038:	d053      	beq.n	80080e2 <etharp_request+0xba>
 800803a:	2200      	movs	r2, #0
 800803c:	211c      	movs	r1, #28
 800803e:	2002      	movs	r0, #2
 8008040:	f7fd ff70 	bl	8005f24 <pbuf_alloc>
 8008044:	4606      	mov	r6, r0
 8008046:	2800      	cmp	r0, #0
 8008048:	d053      	beq.n	80080f2 <etharp_request+0xca>
 800804a:	8943      	ldrh	r3, [r0, #10]
 800804c:	2b1b      	cmp	r3, #27
 800804e:	d940      	bls.n	80080d2 <etharp_request+0xaa>
 8008050:	6874      	ldr	r4, [r6, #4]
 8008052:	2001      	movs	r0, #1
 8008054:	f7fd fa5e 	bl	8005514 <lwip_htons>
 8008058:	80e0      	strh	r0, [r4, #6]
 800805a:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 800805e:	2b06      	cmp	r3, #6
 8008060:	d006      	beq.n	8008070 <etharp_request+0x48>
 8008062:	4b25      	ldr	r3, [pc, #148]	; (80080f8 <etharp_request+0xd0>)
 8008064:	f240 426b 	movw	r2, #1131	; 0x46b
 8008068:	4924      	ldr	r1, [pc, #144]	; (80080fc <etharp_request+0xd4>)
 800806a:	4825      	ldr	r0, [pc, #148]	; (8008100 <etharp_request+0xd8>)
 800806c:	f007 fc84 	bl	800f978 <iprintf>
 8008070:	f8d8 1000 	ldr.w	r1, [r8]
 8008074:	2700      	movs	r7, #0
 8008076:	4b23      	ldr	r3, [pc, #140]	; (8008104 <etharp_request+0xdc>)
 8008078:	f04f 0e01 	mov.w	lr, #1
 800807c:	60a1      	str	r1, [r4, #8]
 800807e:	f04f 0c08 	mov.w	ip, #8
 8008082:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 8008086:	4642      	mov	r2, r8
 8008088:	6819      	ldr	r1, [r3, #0]
 800808a:	889b      	ldrh	r3, [r3, #4]
 800808c:	81a0      	strh	r0, [r4, #12]
 800808e:	4628      	mov	r0, r5
 8008090:	f8c4 1012 	str.w	r1, [r4, #18]
 8008094:	2106      	movs	r1, #6
 8008096:	82e3      	strh	r3, [r4, #22]
 8008098:	686b      	ldr	r3, [r5, #4]
 800809a:	f8c4 300e 	str.w	r3, [r4, #14]
 800809e:	2304      	movs	r3, #4
 80080a0:	f8d9 5000 	ldr.w	r5, [r9]
 80080a4:	f884 e001 	strb.w	lr, [r4, #1]
 80080a8:	61a5      	str	r5, [r4, #24]
 80080aa:	f640 0506 	movw	r5, #2054	; 0x806
 80080ae:	f884 c002 	strb.w	ip, [r4, #2]
 80080b2:	7121      	strb	r1, [r4, #4]
 80080b4:	4631      	mov	r1, r6
 80080b6:	7163      	strb	r3, [r4, #5]
 80080b8:	7027      	strb	r7, [r4, #0]
 80080ba:	70e7      	strb	r7, [r4, #3]
 80080bc:	4b12      	ldr	r3, [pc, #72]	; (8008108 <etharp_request+0xe0>)
 80080be:	9500      	str	r5, [sp, #0]
 80080c0:	f001 fbe8 	bl	8009894 <ethernet_output>
 80080c4:	4630      	mov	r0, r6
 80080c6:	f7fd feb9 	bl	8005e3c <pbuf_free>
 80080ca:	4638      	mov	r0, r7
 80080cc:	b003      	add	sp, #12
 80080ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80080d2:	4b09      	ldr	r3, [pc, #36]	; (80080f8 <etharp_request+0xd0>)
 80080d4:	f240 4264 	movw	r2, #1124	; 0x464
 80080d8:	490c      	ldr	r1, [pc, #48]	; (800810c <etharp_request+0xe4>)
 80080da:	4809      	ldr	r0, [pc, #36]	; (8008100 <etharp_request+0xd8>)
 80080dc:	f007 fc4c 	bl	800f978 <iprintf>
 80080e0:	e7b6      	b.n	8008050 <etharp_request+0x28>
 80080e2:	4b05      	ldr	r3, [pc, #20]	; (80080f8 <etharp_request+0xd0>)
 80080e4:	f44f 628b 	mov.w	r2, #1112	; 0x458
 80080e8:	4909      	ldr	r1, [pc, #36]	; (8008110 <etharp_request+0xe8>)
 80080ea:	4805      	ldr	r0, [pc, #20]	; (8008100 <etharp_request+0xd8>)
 80080ec:	f007 fc44 	bl	800f978 <iprintf>
 80080f0:	e7a3      	b.n	800803a <etharp_request+0x12>
 80080f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80080f6:	e7e9      	b.n	80080cc <etharp_request+0xa4>
 80080f8:	080116e4 	.word	0x080116e4
 80080fc:	08011760 	.word	0x08011760
 8008100:	08010e34 	.word	0x08010e34
 8008104:	08010d20 	.word	0x08010d20
 8008108:	08010d18 	.word	0x08010d18
 800810c:	0801172c 	.word	0x0801172c
 8008110:	0801171c 	.word	0x0801171c

08008114 <icmp_input>:
 8008114:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008118:	4e45      	ldr	r6, [pc, #276]	; (8008230 <icmp_input+0x11c>)
 800811a:	b085      	sub	sp, #20
 800811c:	4605      	mov	r5, r0
 800811e:	68b7      	ldr	r7, [r6, #8]
 8008120:	783c      	ldrb	r4, [r7, #0]
 8008122:	f004 040f 	and.w	r4, r4, #15
 8008126:	00a4      	lsls	r4, r4, #2
 8008128:	2c13      	cmp	r4, #19
 800812a:	d914      	bls.n	8008156 <icmp_input+0x42>
 800812c:	8943      	ldrh	r3, [r0, #10]
 800812e:	2b03      	cmp	r3, #3
 8008130:	d911      	bls.n	8008156 <icmp_input+0x42>
 8008132:	6843      	ldr	r3, [r0, #4]
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	2b08      	cmp	r3, #8
 8008138:	d10d      	bne.n	8008156 <icmp_input+0x42>
 800813a:	6970      	ldr	r0, [r6, #20]
 800813c:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8008140:	2be0      	cmp	r3, #224	; 0xe0
 8008142:	d008      	beq.n	8008156 <icmp_input+0x42>
 8008144:	4688      	mov	r8, r1
 8008146:	6831      	ldr	r1, [r6, #0]
 8008148:	f000 fec4 	bl	8008ed4 <ip4_addr_isbroadcast_u32>
 800814c:	4681      	mov	r9, r0
 800814e:	b910      	cbnz	r0, 8008156 <icmp_input+0x42>
 8008150:	892b      	ldrh	r3, [r5, #8]
 8008152:	2b07      	cmp	r3, #7
 8008154:	d805      	bhi.n	8008162 <icmp_input+0x4e>
 8008156:	4628      	mov	r0, r5
 8008158:	b005      	add	sp, #20
 800815a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800815e:	f7fd be6d 	b.w	8005e3c <pbuf_free>
 8008162:	f104 010e 	add.w	r1, r4, #14
 8008166:	4628      	mov	r0, r5
 8008168:	f7fd fdb8 	bl	8005cdc <pbuf_header>
 800816c:	b310      	cbz	r0, 80081b4 <icmp_input+0xa0>
 800816e:	8929      	ldrh	r1, [r5, #8]
 8008170:	464a      	mov	r2, r9
 8008172:	2002      	movs	r0, #2
 8008174:	4421      	add	r1, r4
 8008176:	b289      	uxth	r1, r1
 8008178:	f7fd fed4 	bl	8005f24 <pbuf_alloc>
 800817c:	4681      	mov	r9, r0
 800817e:	2800      	cmp	r0, #0
 8008180:	d0e9      	beq.n	8008156 <icmp_input+0x42>
 8008182:	8942      	ldrh	r2, [r0, #10]
 8008184:	f104 0308 	add.w	r3, r4, #8
 8008188:	429a      	cmp	r2, r3
 800818a:	d342      	bcc.n	8008212 <icmp_input+0xfe>
 800818c:	4639      	mov	r1, r7
 800818e:	4622      	mov	r2, r4
 8008190:	6840      	ldr	r0, [r0, #4]
 8008192:	f007 fbde 	bl	800f952 <memcpy>
 8008196:	4261      	negs	r1, r4
 8008198:	4648      	mov	r0, r9
 800819a:	f7fd fd9f 	bl	8005cdc <pbuf_header>
 800819e:	b390      	cbz	r0, 8008206 <icmp_input+0xf2>
 80081a0:	4b24      	ldr	r3, [pc, #144]	; (8008234 <icmp_input+0x120>)
 80081a2:	22af      	movs	r2, #175	; 0xaf
 80081a4:	4924      	ldr	r1, [pc, #144]	; (8008238 <icmp_input+0x124>)
 80081a6:	4825      	ldr	r0, [pc, #148]	; (800823c <icmp_input+0x128>)
 80081a8:	f007 fbe6 	bl	800f978 <iprintf>
 80081ac:	4648      	mov	r0, r9
 80081ae:	f7fd fe45 	bl	8005e3c <pbuf_free>
 80081b2:	e7d0      	b.n	8008156 <icmp_input+0x42>
 80081b4:	f64f 71f2 	movw	r1, #65522	; 0xfff2
 80081b8:	4628      	mov	r0, r5
 80081ba:	1b09      	subs	r1, r1, r4
 80081bc:	b209      	sxth	r1, r1
 80081be:	f7fd fd8d 	bl	8005cdc <pbuf_header>
 80081c2:	bb48      	cbnz	r0, 8008218 <icmp_input+0x104>
 80081c4:	4621      	mov	r1, r4
 80081c6:	4628      	mov	r0, r5
 80081c8:	686c      	ldr	r4, [r5, #4]
 80081ca:	f7fd fd87 	bl	8005cdc <pbuf_header>
 80081ce:	4601      	mov	r1, r0
 80081d0:	2800      	cmp	r0, #0
 80081d2:	d1c0      	bne.n	8008156 <icmp_input+0x42>
 80081d4:	6868      	ldr	r0, [r5, #4]
 80081d6:	27ff      	movs	r7, #255	; 0xff
 80081d8:	6972      	ldr	r2, [r6, #20]
 80081da:	f04f 0c01 	mov.w	ip, #1
 80081de:	6933      	ldr	r3, [r6, #16]
 80081e0:	60c2      	str	r2, [r0, #12]
 80081e2:	460a      	mov	r2, r1
 80081e4:	6103      	str	r3, [r0, #16]
 80081e6:	463b      	mov	r3, r7
 80081e8:	7021      	strb	r1, [r4, #0]
 80081ea:	70a1      	strb	r1, [r4, #2]
 80081ec:	70e1      	strb	r1, [r4, #3]
 80081ee:	7281      	strb	r1, [r0, #10]
 80081f0:	72c1      	strb	r1, [r0, #11]
 80081f2:	7207      	strb	r7, [r0, #8]
 80081f4:	4628      	mov	r0, r5
 80081f6:	f8cd 8008 	str.w	r8, [sp, #8]
 80081fa:	e9cd 1c00 	strd	r1, ip, [sp]
 80081fe:	4910      	ldr	r1, [pc, #64]	; (8008240 <icmp_input+0x12c>)
 8008200:	f000 fc86 	bl	8008b10 <ip4_output_if>
 8008204:	e7a7      	b.n	8008156 <icmp_input+0x42>
 8008206:	4629      	mov	r1, r5
 8008208:	4648      	mov	r0, r9
 800820a:	f7fe f8d7 	bl	80063bc <pbuf_copy>
 800820e:	b150      	cbz	r0, 8008226 <icmp_input+0x112>
 8008210:	4648      	mov	r0, r9
 8008212:	f7fd fe13 	bl	8005e3c <pbuf_free>
 8008216:	e79e      	b.n	8008156 <icmp_input+0x42>
 8008218:	4b06      	ldr	r3, [pc, #24]	; (8008234 <icmp_input+0x120>)
 800821a:	22c0      	movs	r2, #192	; 0xc0
 800821c:	4909      	ldr	r1, [pc, #36]	; (8008244 <icmp_input+0x130>)
 800821e:	4807      	ldr	r0, [pc, #28]	; (800823c <icmp_input+0x128>)
 8008220:	f007 fbaa 	bl	800f978 <iprintf>
 8008224:	e797      	b.n	8008156 <icmp_input+0x42>
 8008226:	4628      	mov	r0, r5
 8008228:	464d      	mov	r5, r9
 800822a:	f7fd fe07 	bl	8005e3c <pbuf_free>
 800822e:	e7c9      	b.n	80081c4 <icmp_input+0xb0>
 8008230:	20005a1c 	.word	0x20005a1c
 8008234:	080118a8 	.word	0x080118a8
 8008238:	080118e0 	.word	0x080118e0
 800823c:	08010e34 	.word	0x08010e34
 8008240:	20005a30 	.word	0x20005a30
 8008244:	08011918 	.word	0x08011918

08008248 <icmp_dest_unreach>:
 8008248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800824c:	2200      	movs	r2, #0
 800824e:	b086      	sub	sp, #24
 8008250:	4604      	mov	r4, r0
 8008252:	4688      	mov	r8, r1
 8008254:	2001      	movs	r0, #1
 8008256:	2124      	movs	r1, #36	; 0x24
 8008258:	f7fd fe64 	bl	8005f24 <pbuf_alloc>
 800825c:	b3c0      	cbz	r0, 80082d0 <icmp_dest_unreach+0x88>
 800825e:	8943      	ldrh	r3, [r0, #10]
 8008260:	4605      	mov	r5, r0
 8008262:	2b23      	cmp	r3, #35	; 0x23
 8008264:	d937      	bls.n	80082d6 <icmp_dest_unreach+0x8e>
 8008266:	6863      	ldr	r3, [r4, #4]
 8008268:	2203      	movs	r2, #3
 800826a:	686c      	ldr	r4, [r5, #4]
 800826c:	2700      	movs	r7, #0
 800826e:	ae06      	add	r6, sp, #24
 8008270:	f884 8001 	strb.w	r8, [r4, #1]
 8008274:	7022      	strb	r2, [r4, #0]
 8008276:	6067      	str	r7, [r4, #4]
 8008278:	f8d3 c000 	ldr.w	ip, [r3]
 800827c:	6858      	ldr	r0, [r3, #4]
 800827e:	689a      	ldr	r2, [r3, #8]
 8008280:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8008284:	f8c4 c008 	str.w	ip, [r4, #8]
 8008288:	60e0      	str	r0, [r4, #12]
 800828a:	6122      	str	r2, [r4, #16]
 800828c:	f8c4 e014 	str.w	lr, [r4, #20]
 8008290:	6958      	ldr	r0, [r3, #20]
 8008292:	f8d3 c010 	ldr.w	ip, [r3, #16]
 8008296:	699a      	ldr	r2, [r3, #24]
 8008298:	61e0      	str	r0, [r4, #28]
 800829a:	f8c4 c018 	str.w	ip, [r4, #24]
 800829e:	6222      	str	r2, [r4, #32]
 80082a0:	68db      	ldr	r3, [r3, #12]
 80082a2:	f846 3d04 	str.w	r3, [r6, #-4]!
 80082a6:	4630      	mov	r0, r6
 80082a8:	f000 fb10 	bl	80088cc <ip4_route>
 80082ac:	b168      	cbz	r0, 80082ca <icmp_dest_unreach+0x82>
 80082ae:	f04f 0c01 	mov.w	ip, #1
 80082b2:	70a7      	strb	r7, [r4, #2]
 80082b4:	70e7      	strb	r7, [r4, #3]
 80082b6:	4632      	mov	r2, r6
 80082b8:	9002      	str	r0, [sp, #8]
 80082ba:	4639      	mov	r1, r7
 80082bc:	9700      	str	r7, [sp, #0]
 80082be:	23ff      	movs	r3, #255	; 0xff
 80082c0:	f8cd c004 	str.w	ip, [sp, #4]
 80082c4:	4628      	mov	r0, r5
 80082c6:	f000 fc23 	bl	8008b10 <ip4_output_if>
 80082ca:	4628      	mov	r0, r5
 80082cc:	f7fd fdb6 	bl	8005e3c <pbuf_free>
 80082d0:	b006      	add	sp, #24
 80082d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082d6:	4b04      	ldr	r3, [pc, #16]	; (80082e8 <icmp_dest_unreach+0xa0>)
 80082d8:	f44f 72b1 	mov.w	r2, #354	; 0x162
 80082dc:	4903      	ldr	r1, [pc, #12]	; (80082ec <icmp_dest_unreach+0xa4>)
 80082de:	4804      	ldr	r0, [pc, #16]	; (80082f0 <icmp_dest_unreach+0xa8>)
 80082e0:	f007 fb4a 	bl	800f978 <iprintf>
 80082e4:	e7bf      	b.n	8008266 <icmp_dest_unreach+0x1e>
 80082e6:	bf00      	nop
 80082e8:	080118a8 	.word	0x080118a8
 80082ec:	0801194c 	.word	0x0801194c
 80082f0:	08010e34 	.word	0x08010e34

080082f4 <icmp_time_exceeded>:
 80082f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082f8:	2200      	movs	r2, #0
 80082fa:	b086      	sub	sp, #24
 80082fc:	4604      	mov	r4, r0
 80082fe:	4688      	mov	r8, r1
 8008300:	2001      	movs	r0, #1
 8008302:	2124      	movs	r1, #36	; 0x24
 8008304:	f7fd fe0e 	bl	8005f24 <pbuf_alloc>
 8008308:	b3c0      	cbz	r0, 800837c <icmp_time_exceeded+0x88>
 800830a:	8943      	ldrh	r3, [r0, #10]
 800830c:	4605      	mov	r5, r0
 800830e:	2b23      	cmp	r3, #35	; 0x23
 8008310:	d937      	bls.n	8008382 <icmp_time_exceeded+0x8e>
 8008312:	6863      	ldr	r3, [r4, #4]
 8008314:	220b      	movs	r2, #11
 8008316:	686c      	ldr	r4, [r5, #4]
 8008318:	2700      	movs	r7, #0
 800831a:	ae06      	add	r6, sp, #24
 800831c:	f884 8001 	strb.w	r8, [r4, #1]
 8008320:	7022      	strb	r2, [r4, #0]
 8008322:	6067      	str	r7, [r4, #4]
 8008324:	f8d3 c000 	ldr.w	ip, [r3]
 8008328:	6858      	ldr	r0, [r3, #4]
 800832a:	689a      	ldr	r2, [r3, #8]
 800832c:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8008330:	f8c4 c008 	str.w	ip, [r4, #8]
 8008334:	60e0      	str	r0, [r4, #12]
 8008336:	6122      	str	r2, [r4, #16]
 8008338:	f8c4 e014 	str.w	lr, [r4, #20]
 800833c:	6958      	ldr	r0, [r3, #20]
 800833e:	f8d3 c010 	ldr.w	ip, [r3, #16]
 8008342:	699a      	ldr	r2, [r3, #24]
 8008344:	61e0      	str	r0, [r4, #28]
 8008346:	f8c4 c018 	str.w	ip, [r4, #24]
 800834a:	6222      	str	r2, [r4, #32]
 800834c:	68db      	ldr	r3, [r3, #12]
 800834e:	f846 3d04 	str.w	r3, [r6, #-4]!
 8008352:	4630      	mov	r0, r6
 8008354:	f000 faba 	bl	80088cc <ip4_route>
 8008358:	b168      	cbz	r0, 8008376 <icmp_time_exceeded+0x82>
 800835a:	f04f 0c01 	mov.w	ip, #1
 800835e:	70a7      	strb	r7, [r4, #2]
 8008360:	70e7      	strb	r7, [r4, #3]
 8008362:	4632      	mov	r2, r6
 8008364:	9002      	str	r0, [sp, #8]
 8008366:	4639      	mov	r1, r7
 8008368:	9700      	str	r7, [sp, #0]
 800836a:	23ff      	movs	r3, #255	; 0xff
 800836c:	f8cd c004 	str.w	ip, [sp, #4]
 8008370:	4628      	mov	r0, r5
 8008372:	f000 fbcd 	bl	8008b10 <ip4_output_if>
 8008376:	4628      	mov	r0, r5
 8008378:	f7fd fd60 	bl	8005e3c <pbuf_free>
 800837c:	b006      	add	sp, #24
 800837e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008382:	4b04      	ldr	r3, [pc, #16]	; (8008394 <icmp_time_exceeded+0xa0>)
 8008384:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8008388:	4903      	ldr	r1, [pc, #12]	; (8008398 <icmp_time_exceeded+0xa4>)
 800838a:	4804      	ldr	r0, [pc, #16]	; (800839c <icmp_time_exceeded+0xa8>)
 800838c:	f007 faf4 	bl	800f978 <iprintf>
 8008390:	e7bf      	b.n	8008312 <icmp_time_exceeded+0x1e>
 8008392:	bf00      	nop
 8008394:	080118a8 	.word	0x080118a8
 8008398:	0801194c 	.word	0x0801194c
 800839c:	08010e34 	.word	0x08010e34

080083a0 <igmp_send>:
 80083a0:	4b28      	ldr	r3, [pc, #160]	; (8008444 <igmp_send+0xa4>)
 80083a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80083a6:	4690      	mov	r8, r2
 80083a8:	2200      	movs	r2, #0
 80083aa:	b089      	sub	sp, #36	; 0x24
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4607      	mov	r7, r0
 80083b0:	460e      	mov	r6, r1
 80083b2:	4610      	mov	r0, r2
 80083b4:	2108      	movs	r1, #8
 80083b6:	9306      	str	r3, [sp, #24]
 80083b8:	f7fd fdb4 	bl	8005f24 <pbuf_alloc>
 80083bc:	b390      	cbz	r0, 8008424 <igmp_send+0x84>
 80083be:	8943      	ldrh	r3, [r0, #10]
 80083c0:	4605      	mov	r5, r0
 80083c2:	6844      	ldr	r4, [r0, #4]
 80083c4:	2b07      	cmp	r3, #7
 80083c6:	d930      	bls.n	800842a <igmp_send+0x8a>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f1b8 0f16 	cmp.w	r8, #22
 80083ce:	6872      	ldr	r2, [r6, #4]
 80083d0:	9306      	str	r3, [sp, #24]
 80083d2:	d132      	bne.n	800843a <igmp_send+0x9a>
 80083d4:	2301      	movs	r3, #1
 80083d6:	f106 0904 	add.w	r9, r6, #4
 80083da:	6062      	str	r2, [r4, #4]
 80083dc:	7233      	strb	r3, [r6, #8]
 80083de:	2600      	movs	r6, #0
 80083e0:	f884 8000 	strb.w	r8, [r4]
 80083e4:	2108      	movs	r1, #8
 80083e6:	4620      	mov	r0, r4
 80083e8:	7066      	strb	r6, [r4, #1]
 80083ea:	70a6      	strb	r6, [r4, #2]
 80083ec:	70e6      	strb	r6, [r4, #3]
 80083ee:	f7fd f895 	bl	800551c <inet_chksum>
 80083f2:	2104      	movs	r1, #4
 80083f4:	f10d 0e1c 	add.w	lr, sp, #28
 80083f8:	f04f 0c02 	mov.w	ip, #2
 80083fc:	8060      	strh	r0, [r4, #2]
 80083fe:	f240 4494 	movw	r4, #1172	; 0x494
 8008402:	9104      	str	r1, [sp, #16]
 8008404:	464a      	mov	r2, r9
 8008406:	9600      	str	r6, [sp, #0]
 8008408:	2301      	movs	r3, #1
 800840a:	9702      	str	r7, [sp, #8]
 800840c:	a906      	add	r1, sp, #24
 800840e:	f8cd e00c 	str.w	lr, [sp, #12]
 8008412:	4628      	mov	r0, r5
 8008414:	f8cd c004 	str.w	ip, [sp, #4]
 8008418:	9407      	str	r4, [sp, #28]
 800841a:	f000 fc0f 	bl	8008c3c <ip4_output_if_opt>
 800841e:	4628      	mov	r0, r5
 8008420:	f7fd fd0c 	bl	8005e3c <pbuf_free>
 8008424:	b009      	add	sp, #36	; 0x24
 8008426:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800842a:	4b07      	ldr	r3, [pc, #28]	; (8008448 <igmp_send+0xa8>)
 800842c:	f240 3202 	movw	r2, #770	; 0x302
 8008430:	4906      	ldr	r1, [pc, #24]	; (800844c <igmp_send+0xac>)
 8008432:	4807      	ldr	r0, [pc, #28]	; (8008450 <igmp_send+0xb0>)
 8008434:	f007 faa0 	bl	800f978 <iprintf>
 8008438:	e7c6      	b.n	80083c8 <igmp_send+0x28>
 800843a:	6062      	str	r2, [r4, #4]
 800843c:	f8df 9014 	ldr.w	r9, [pc, #20]	; 8008454 <igmp_send+0xb4>
 8008440:	e7cd      	b.n	80083de <igmp_send+0x3e>
 8008442:	bf00      	nop
 8008444:	08010d14 	.word	0x08010d14
 8008448:	08011978 	.word	0x08011978
 800844c:	080119b0 	.word	0x080119b0
 8008450:	08010e34 	.word	0x08010e34
 8008454:	200033d8 	.word	0x200033d8

08008458 <igmp_init>:
 8008458:	4b02      	ldr	r3, [pc, #8]	; (8008464 <igmp_init+0xc>)
 800845a:	4a03      	ldr	r2, [pc, #12]	; (8008468 <igmp_init+0x10>)
 800845c:	4903      	ldr	r1, [pc, #12]	; (800846c <igmp_init+0x14>)
 800845e:	e9c3 2100 	strd	r2, r1, [r3]
 8008462:	4770      	bx	lr
 8008464:	200033d8 	.word	0x200033d8
 8008468:	020000e0 	.word	0x020000e0
 800846c:	010000e0 	.word	0x010000e0

08008470 <igmp_start>:
 8008470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008472:	6a05      	ldr	r5, [r0, #32]
 8008474:	4606      	mov	r6, r0
 8008476:	b1a5      	cbz	r5, 80084a2 <igmp_start+0x32>
 8008478:	4f1f      	ldr	r7, [pc, #124]	; (80084f8 <igmp_start+0x88>)
 800847a:	462c      	mov	r4, r5
 800847c:	686b      	ldr	r3, [r5, #4]
 800847e:	687a      	ldr	r2, [r7, #4]
 8008480:	429a      	cmp	r2, r3
 8008482:	d103      	bne.n	800848c <igmp_start+0x1c>
 8008484:	e01a      	b.n	80084bc <igmp_start+0x4c>
 8008486:	6863      	ldr	r3, [r4, #4]
 8008488:	4293      	cmp	r3, r2
 800848a:	d017      	beq.n	80084bc <igmp_start+0x4c>
 800848c:	6824      	ldr	r4, [r4, #0]
 800848e:	2c00      	cmp	r4, #0
 8008490:	d1f9      	bne.n	8008486 <igmp_start+0x16>
 8008492:	2007      	movs	r0, #7
 8008494:	f7fd fad6 	bl	8005a44 <memp_malloc>
 8008498:	4604      	mov	r4, r0
 800849a:	b9e0      	cbnz	r0, 80084d6 <igmp_start+0x66>
 800849c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80084a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084a2:	2007      	movs	r0, #7
 80084a4:	f7fd face 	bl	8005a44 <memp_malloc>
 80084a8:	4604      	mov	r4, r0
 80084aa:	2800      	cmp	r0, #0
 80084ac:	d0f6      	beq.n	800849c <igmp_start+0x2c>
 80084ae:	4b12      	ldr	r3, [pc, #72]	; (80084f8 <igmp_start+0x88>)
 80084b0:	60a5      	str	r5, [r4, #8]
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	7325      	strb	r5, [r4, #12]
 80084b6:	e9c4 5300 	strd	r5, r3, [r4]
 80084ba:	6234      	str	r4, [r6, #32]
 80084bc:	7b23      	ldrb	r3, [r4, #12]
 80084be:	2202      	movs	r2, #2
 80084c0:	3301      	adds	r3, #1
 80084c2:	7262      	strb	r2, [r4, #9]
 80084c4:	7323      	strb	r3, [r4, #12]
 80084c6:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80084c8:	b11b      	cbz	r3, 80084d2 <igmp_start+0x62>
 80084ca:	4630      	mov	r0, r6
 80084cc:	2201      	movs	r2, #1
 80084ce:	490b      	ldr	r1, [pc, #44]	; (80084fc <igmp_start+0x8c>)
 80084d0:	4798      	blx	r3
 80084d2:	2000      	movs	r0, #0
 80084d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	2100      	movs	r1, #0
 80084da:	4b09      	ldr	r3, [pc, #36]	; (8008500 <igmp_start+0x90>)
 80084dc:	f240 1213 	movw	r2, #275	; 0x113
 80084e0:	7321      	strb	r1, [r4, #12]
 80084e2:	e9c4 0101 	strd	r0, r1, [r4, #4]
 80084e6:	4907      	ldr	r1, [pc, #28]	; (8008504 <igmp_start+0x94>)
 80084e8:	4807      	ldr	r0, [pc, #28]	; (8008508 <igmp_start+0x98>)
 80084ea:	f007 fa45 	bl	800f978 <iprintf>
 80084ee:	682b      	ldr	r3, [r5, #0]
 80084f0:	6023      	str	r3, [r4, #0]
 80084f2:	602c      	str	r4, [r5, #0]
 80084f4:	e7e2      	b.n	80084bc <igmp_start+0x4c>
 80084f6:	bf00      	nop
 80084f8:	200033d8 	.word	0x200033d8
 80084fc:	200033dc 	.word	0x200033dc
 8008500:	08011978 	.word	0x08011978
 8008504:	080119ec 	.word	0x080119ec
 8008508:	08010e34 	.word	0x08010e34

0800850c <igmp_report_groups>:
 800850c:	6a03      	ldr	r3, [r0, #32]
 800850e:	b30b      	cbz	r3, 8008554 <igmp_report_groups+0x48>
 8008510:	b570      	push	{r4, r5, r6, lr}
 8008512:	681c      	ldr	r4, [r3, #0]
 8008514:	b1c4      	cbz	r4, 8008548 <igmp_report_groups+0x3c>
 8008516:	4e10      	ldr	r6, [pc, #64]	; (8008558 <igmp_report_groups+0x4c>)
 8008518:	2501      	movs	r5, #1
 800851a:	e003      	b.n	8008524 <igmp_report_groups+0x18>
 800851c:	2b01      	cmp	r3, #1
 800851e:	d014      	beq.n	800854a <igmp_report_groups+0x3e>
 8008520:	6824      	ldr	r4, [r4, #0]
 8008522:	b18c      	cbz	r4, 8008548 <igmp_report_groups+0x3c>
 8008524:	7a63      	ldrb	r3, [r4, #9]
 8008526:	2b02      	cmp	r3, #2
 8008528:	d1f8      	bne.n	800851c <igmp_report_groups+0x10>
 800852a:	f007 fa3d 	bl	800f9a8 <rand>
 800852e:	fba6 2300 	umull	r2, r3, r6, r0
 8008532:	7265      	strb	r5, [r4, #9]
 8008534:	089b      	lsrs	r3, r3, #2
 8008536:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800853a:	1ac3      	subs	r3, r0, r3
 800853c:	bf08      	it	eq
 800853e:	2301      	moveq	r3, #1
 8008540:	8163      	strh	r3, [r4, #10]
 8008542:	6824      	ldr	r4, [r4, #0]
 8008544:	2c00      	cmp	r4, #0
 8008546:	d1ed      	bne.n	8008524 <igmp_report_groups+0x18>
 8008548:	bd70      	pop	{r4, r5, r6, pc}
 800854a:	8963      	ldrh	r3, [r4, #10]
 800854c:	3b01      	subs	r3, #1
 800854e:	2b04      	cmp	r3, #4
 8008550:	d8eb      	bhi.n	800852a <igmp_report_groups+0x1e>
 8008552:	e7e5      	b.n	8008520 <igmp_report_groups+0x14>
 8008554:	4770      	bx	lr
 8008556:	bf00      	nop
 8008558:	cccccccd 	.word	0xcccccccd

0800855c <igmp_lookfor_group>:
 800855c:	6a00      	ldr	r0, [r0, #32]
 800855e:	b150      	cbz	r0, 8008576 <igmp_lookfor_group+0x1a>
 8008560:	680a      	ldr	r2, [r1, #0]
 8008562:	6843      	ldr	r3, [r0, #4]
 8008564:	4293      	cmp	r3, r2
 8008566:	d103      	bne.n	8008570 <igmp_lookfor_group+0x14>
 8008568:	e006      	b.n	8008578 <igmp_lookfor_group+0x1c>
 800856a:	6843      	ldr	r3, [r0, #4]
 800856c:	4293      	cmp	r3, r2
 800856e:	d002      	beq.n	8008576 <igmp_lookfor_group+0x1a>
 8008570:	6800      	ldr	r0, [r0, #0]
 8008572:	2800      	cmp	r0, #0
 8008574:	d1f9      	bne.n	800856a <igmp_lookfor_group+0xe>
 8008576:	4770      	bx	lr
 8008578:	4770      	bx	lr
 800857a:	bf00      	nop

0800857c <igmp_input>:
 800857c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008580:	460c      	mov	r4, r1
 8008582:	8941      	ldrh	r1, [r0, #10]
 8008584:	4605      	mov	r5, r0
 8008586:	2907      	cmp	r1, #7
 8008588:	d913      	bls.n	80085b2 <igmp_input+0x36>
 800858a:	6846      	ldr	r6, [r0, #4]
 800858c:	4617      	mov	r7, r2
 800858e:	4630      	mov	r0, r6
 8008590:	f7fc ffc4 	bl	800551c <inet_chksum>
 8008594:	b968      	cbnz	r0, 80085b2 <igmp_input+0x36>
 8008596:	6a21      	ldr	r1, [r4, #32]
 8008598:	b159      	cbz	r1, 80085b2 <igmp_input+0x36>
 800859a:	683a      	ldr	r2, [r7, #0]
 800859c:	460c      	mov	r4, r1
 800859e:	6848      	ldr	r0, [r1, #4]
 80085a0:	4282      	cmp	r2, r0
 80085a2:	d103      	bne.n	80085ac <igmp_input+0x30>
 80085a4:	e00a      	b.n	80085bc <igmp_input+0x40>
 80085a6:	6863      	ldr	r3, [r4, #4]
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d007      	beq.n	80085bc <igmp_input+0x40>
 80085ac:	6824      	ldr	r4, [r4, #0]
 80085ae:	2c00      	cmp	r4, #0
 80085b0:	d1f9      	bne.n	80085a6 <igmp_input+0x2a>
 80085b2:	4628      	mov	r0, r5
 80085b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80085b8:	f7fd bc40 	b.w	8005e3c <pbuf_free>
 80085bc:	7833      	ldrb	r3, [r6, #0]
 80085be:	2b11      	cmp	r3, #17
 80085c0:	d008      	beq.n	80085d4 <igmp_input+0x58>
 80085c2:	2b16      	cmp	r3, #22
 80085c4:	d1f5      	bne.n	80085b2 <igmp_input+0x36>
 80085c6:	7a63      	ldrb	r3, [r4, #9]
 80085c8:	2b01      	cmp	r3, #1
 80085ca:	d1f2      	bne.n	80085b2 <igmp_input+0x36>
 80085cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80085d0:	60a3      	str	r3, [r4, #8]
 80085d2:	e7ee      	b.n	80085b2 <igmp_input+0x36>
 80085d4:	4f2d      	ldr	r7, [pc, #180]	; (800868c <igmp_input+0x110>)
 80085d6:	6873      	ldr	r3, [r6, #4]
 80085d8:	687f      	ldr	r7, [r7, #4]
 80085da:	4297      	cmp	r7, r2
 80085dc:	d012      	beq.n	8008604 <igmp_input+0x88>
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d0e7      	beq.n	80085b2 <igmp_input+0x36>
 80085e2:	7a63      	ldrb	r3, [r4, #9]
 80085e4:	7876      	ldrb	r6, [r6, #1]
 80085e6:	2b02      	cmp	r3, #2
 80085e8:	d005      	beq.n	80085f6 <igmp_input+0x7a>
 80085ea:	2b01      	cmp	r3, #1
 80085ec:	d1e1      	bne.n	80085b2 <igmp_input+0x36>
 80085ee:	8963      	ldrh	r3, [r4, #10]
 80085f0:	b10b      	cbz	r3, 80085f6 <igmp_input+0x7a>
 80085f2:	42b3      	cmp	r3, r6
 80085f4:	d9dd      	bls.n	80085b2 <igmp_input+0x36>
 80085f6:	2e02      	cmp	r6, #2
 80085f8:	d83d      	bhi.n	8008676 <igmp_input+0xfa>
 80085fa:	2301      	movs	r3, #1
 80085fc:	8163      	strh	r3, [r4, #10]
 80085fe:	2301      	movs	r3, #1
 8008600:	7263      	strb	r3, [r4, #9]
 8008602:	e7d6      	b.n	80085b2 <igmp_input+0x36>
 8008604:	bb03      	cbnz	r3, 8008648 <igmp_input+0xcc>
 8008606:	7877      	ldrb	r7, [r6, #1]
 8008608:	b917      	cbnz	r7, 8008610 <igmp_input+0x94>
 800860a:	230a      	movs	r3, #10
 800860c:	461f      	mov	r7, r3
 800860e:	7073      	strb	r3, [r6, #1]
 8008610:	680c      	ldr	r4, [r1, #0]
 8008612:	2c00      	cmp	r4, #0
 8008614:	d0cd      	beq.n	80085b2 <igmp_input+0x36>
 8008616:	f04f 0801 	mov.w	r8, #1
 800861a:	e005      	b.n	8008628 <igmp_input+0xac>
 800861c:	2b01      	cmp	r3, #1
 800861e:	d00d      	beq.n	800863c <igmp_input+0xc0>
 8008620:	6824      	ldr	r4, [r4, #0]
 8008622:	2c00      	cmp	r4, #0
 8008624:	d0c5      	beq.n	80085b2 <igmp_input+0x36>
 8008626:	7877      	ldrb	r7, [r6, #1]
 8008628:	7a63      	ldrb	r3, [r4, #9]
 800862a:	2b02      	cmp	r3, #2
 800862c:	d1f6      	bne.n	800861c <igmp_input+0xa0>
 800862e:	2f02      	cmp	r7, #2
 8008630:	d814      	bhi.n	800865c <igmp_input+0xe0>
 8008632:	f8a4 800a 	strh.w	r8, [r4, #10]
 8008636:	f884 8009 	strb.w	r8, [r4, #9]
 800863a:	e7f1      	b.n	8008620 <igmp_input+0xa4>
 800863c:	8963      	ldrh	r3, [r4, #10]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d0f5      	beq.n	800862e <igmp_input+0xb2>
 8008642:	42bb      	cmp	r3, r7
 8008644:	d8f3      	bhi.n	800862e <igmp_input+0xb2>
 8008646:	e7eb      	b.n	8008620 <igmp_input+0xa4>
 8008648:	4283      	cmp	r3, r0
 800864a:	d103      	bne.n	8008654 <igmp_input+0xd8>
 800864c:	e011      	b.n	8008672 <igmp_input+0xf6>
 800864e:	684a      	ldr	r2, [r1, #4]
 8008650:	4293      	cmp	r3, r2
 8008652:	d00e      	beq.n	8008672 <igmp_input+0xf6>
 8008654:	6809      	ldr	r1, [r1, #0]
 8008656:	2900      	cmp	r1, #0
 8008658:	d1f9      	bne.n	800864e <igmp_input+0xd2>
 800865a:	e7aa      	b.n	80085b2 <igmp_input+0x36>
 800865c:	f007 f9a4 	bl	800f9a8 <rand>
 8008660:	fbb0 f3f7 	udiv	r3, r0, r7
 8008664:	fb03 0017 	mls	r0, r3, r7, r0
 8008668:	2800      	cmp	r0, #0
 800866a:	bf08      	it	eq
 800866c:	4640      	moveq	r0, r8
 800866e:	8160      	strh	r0, [r4, #10]
 8008670:	e7e1      	b.n	8008636 <igmp_input+0xba>
 8008672:	460c      	mov	r4, r1
 8008674:	e7b5      	b.n	80085e2 <igmp_input+0x66>
 8008676:	f007 f997 	bl	800f9a8 <rand>
 800867a:	fbb0 f3f6 	udiv	r3, r0, r6
 800867e:	fb03 0016 	mls	r0, r3, r6, r0
 8008682:	2800      	cmp	r0, #0
 8008684:	d0b9      	beq.n	80085fa <igmp_input+0x7e>
 8008686:	8160      	strh	r0, [r4, #10]
 8008688:	e7b9      	b.n	80085fe <igmp_input+0x82>
 800868a:	bf00      	nop
 800868c:	200033d8 	.word	0x200033d8

08008690 <igmp_joingroup>:
 8008690:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008694:	680b      	ldr	r3, [r1, #0]
 8008696:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800869a:	2ae0      	cmp	r2, #224	; 0xe0
 800869c:	f040 80b1 	bne.w	8008802 <igmp_joingroup+0x172>
 80086a0:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 8008868 <igmp_joingroup+0x1d8>
 80086a4:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80086a8:	4293      	cmp	r3, r2
 80086aa:	f000 80be 	beq.w	800882a <igmp_joingroup+0x19a>
 80086ae:	4b64      	ldr	r3, [pc, #400]	; (8008840 <igmp_joingroup+0x1b0>)
 80086b0:	681d      	ldr	r5, [r3, #0]
 80086b2:	2d00      	cmp	r5, #0
 80086b4:	f000 808b 	beq.w	80087ce <igmp_joingroup+0x13e>
 80086b8:	4607      	mov	r7, r0
 80086ba:	4688      	mov	r8, r1
 80086bc:	f06f 0005 	mvn.w	r0, #5
 80086c0:	f8df b18c 	ldr.w	fp, [pc, #396]	; 8008850 <igmp_joingroup+0x1c0>
 80086c4:	f8df a190 	ldr.w	sl, [pc, #400]	; 8008858 <igmp_joingroup+0x1c8>
 80086c8:	e004      	b.n	80086d4 <igmp_joingroup+0x44>
 80086ca:	686a      	ldr	r2, [r5, #4]
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d009      	beq.n	80086e4 <igmp_joingroup+0x54>
 80086d0:	682d      	ldr	r5, [r5, #0]
 80086d2:	b33d      	cbz	r5, 8008724 <igmp_joingroup+0x94>
 80086d4:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 80086d8:	069b      	lsls	r3, r3, #26
 80086da:	d5f9      	bpl.n	80086d0 <igmp_joingroup+0x40>
 80086dc:	b117      	cbz	r7, 80086e4 <igmp_joingroup+0x54>
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d1f2      	bne.n	80086ca <igmp_joingroup+0x3a>
 80086e4:	f8d8 2000 	ldr.w	r2, [r8]
 80086e8:	f002 03f0 	and.w	r3, r2, #240	; 0xf0
 80086ec:	2be0      	cmp	r3, #224	; 0xe0
 80086ee:	d17e      	bne.n	80087ee <igmp_joingroup+0x15e>
 80086f0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80086f4:	429a      	cmp	r2, r3
 80086f6:	f000 808e 	beq.w	8008816 <igmp_joingroup+0x186>
 80086fa:	6a2e      	ldr	r6, [r5, #32]
 80086fc:	b1a6      	cbz	r6, 8008728 <igmp_joingroup+0x98>
 80086fe:	6873      	ldr	r3, [r6, #4]
 8008700:	429a      	cmp	r2, r3
 8008702:	d060      	beq.n	80087c6 <igmp_joingroup+0x136>
 8008704:	4634      	mov	r4, r6
 8008706:	e002      	b.n	800870e <igmp_joingroup+0x7e>
 8008708:	6863      	ldr	r3, [r4, #4]
 800870a:	429a      	cmp	r2, r3
 800870c:	d027      	beq.n	800875e <igmp_joingroup+0xce>
 800870e:	6824      	ldr	r4, [r4, #0]
 8008710:	2c00      	cmp	r4, #0
 8008712:	d1f9      	bne.n	8008708 <igmp_joingroup+0x78>
 8008714:	2007      	movs	r0, #7
 8008716:	f7fd f995 	bl	8005a44 <memp_malloc>
 800871a:	4604      	mov	r4, r0
 800871c:	2800      	cmp	r0, #0
 800871e:	d13b      	bne.n	8008798 <igmp_joingroup+0x108>
 8008720:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008724:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008728:	2007      	movs	r0, #7
 800872a:	f7fd f98b 	bl	8005a44 <memp_malloc>
 800872e:	4604      	mov	r4, r0
 8008730:	2800      	cmp	r0, #0
 8008732:	d0f5      	beq.n	8008720 <igmp_joingroup+0x90>
 8008734:	f8d8 3000 	ldr.w	r3, [r8]
 8008738:	7326      	strb	r6, [r4, #12]
 800873a:	e9c4 3601 	strd	r3, r6, [r4, #4]
 800873e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008742:	f8d8 2000 	ldr.w	r2, [r8]
 8008746:	429a      	cmp	r2, r3
 8008748:	d006      	beq.n	8008758 <igmp_joingroup+0xc8>
 800874a:	465b      	mov	r3, fp
 800874c:	f240 120d 	movw	r2, #269	; 0x10d
 8008750:	493c      	ldr	r1, [pc, #240]	; (8008844 <igmp_joingroup+0x1b4>)
 8008752:	4650      	mov	r0, sl
 8008754:	f007 f910 	bl	800f978 <iprintf>
 8008758:	2300      	movs	r3, #0
 800875a:	6023      	str	r3, [r4, #0]
 800875c:	622c      	str	r4, [r5, #32]
 800875e:	7a63      	ldrb	r3, [r4, #9]
 8008760:	7b22      	ldrb	r2, [r4, #12]
 8008762:	b11b      	cbz	r3, 800876c <igmp_joingroup+0xdc>
 8008764:	3201      	adds	r2, #1
 8008766:	2000      	movs	r0, #0
 8008768:	7322      	strb	r2, [r4, #12]
 800876a:	e7b1      	b.n	80086d0 <igmp_joingroup+0x40>
 800876c:	b31a      	cbz	r2, 80087b6 <igmp_joingroup+0x126>
 800876e:	2216      	movs	r2, #22
 8008770:	4621      	mov	r1, r4
 8008772:	4628      	mov	r0, r5
 8008774:	f7ff fe14 	bl	80083a0 <igmp_send>
 8008778:	f007 f916 	bl	800f9a8 <rand>
 800877c:	4b32      	ldr	r3, [pc, #200]	; (8008848 <igmp_joingroup+0x1b8>)
 800877e:	2101      	movs	r1, #1
 8008780:	7b22      	ldrb	r2, [r4, #12]
 8008782:	fba3 6300 	umull	r6, r3, r3, r0
 8008786:	7261      	strb	r1, [r4, #9]
 8008788:	089b      	lsrs	r3, r3, #2
 800878a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800878e:	1ac3      	subs	r3, r0, r3
 8008790:	bf08      	it	eq
 8008792:	460b      	moveq	r3, r1
 8008794:	8163      	strh	r3, [r4, #10]
 8008796:	e7e5      	b.n	8008764 <igmp_joingroup+0xd4>
 8008798:	2300      	movs	r3, #0
 800879a:	f8d8 1000 	ldr.w	r1, [r8]
 800879e:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80087a2:	7323      	strb	r3, [r4, #12]
 80087a4:	e9c4 1301 	strd	r1, r3, [r4, #4]
 80087a8:	f8d8 3000 	ldr.w	r3, [r8]
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d011      	beq.n	80087d4 <igmp_joingroup+0x144>
 80087b0:	6833      	ldr	r3, [r6, #0]
 80087b2:	6023      	str	r3, [r4, #0]
 80087b4:	6034      	str	r4, [r6, #0]
 80087b6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d0d8      	beq.n	800876e <igmp_joingroup+0xde>
 80087bc:	2201      	movs	r2, #1
 80087be:	4641      	mov	r1, r8
 80087c0:	4628      	mov	r0, r5
 80087c2:	4798      	blx	r3
 80087c4:	e7d3      	b.n	800876e <igmp_joingroup+0xde>
 80087c6:	7a73      	ldrb	r3, [r6, #9]
 80087c8:	4634      	mov	r4, r6
 80087ca:	7b32      	ldrb	r2, [r6, #12]
 80087cc:	e7c9      	b.n	8008762 <igmp_joingroup+0xd2>
 80087ce:	f06f 0005 	mvn.w	r0, #5
 80087d2:	e7a7      	b.n	8008724 <igmp_joingroup+0x94>
 80087d4:	465b      	mov	r3, fp
 80087d6:	f240 1213 	movw	r2, #275	; 0x113
 80087da:	491c      	ldr	r1, [pc, #112]	; (800884c <igmp_joingroup+0x1bc>)
 80087dc:	4650      	mov	r0, sl
 80087de:	f007 f8cb 	bl	800f978 <iprintf>
 80087e2:	6832      	ldr	r2, [r6, #0]
 80087e4:	7a63      	ldrb	r3, [r4, #9]
 80087e6:	6022      	str	r2, [r4, #0]
 80087e8:	7b22      	ldrb	r2, [r4, #12]
 80087ea:	6034      	str	r4, [r6, #0]
 80087ec:	e7b9      	b.n	8008762 <igmp_joingroup+0xd2>
 80087ee:	4b18      	ldr	r3, [pc, #96]	; (8008850 <igmp_joingroup+0x1c0>)
 80087f0:	f240 12eb 	movw	r2, #491	; 0x1eb
 80087f4:	4917      	ldr	r1, [pc, #92]	; (8008854 <igmp_joingroup+0x1c4>)
 80087f6:	4818      	ldr	r0, [pc, #96]	; (8008858 <igmp_joingroup+0x1c8>)
 80087f8:	f007 f8be 	bl	800f978 <iprintf>
 80087fc:	f06f 0005 	mvn.w	r0, #5
 8008800:	e790      	b.n	8008724 <igmp_joingroup+0x94>
 8008802:	4b13      	ldr	r3, [pc, #76]	; (8008850 <igmp_joingroup+0x1c0>)
 8008804:	f240 12c7 	movw	r2, #455	; 0x1c7
 8008808:	4914      	ldr	r1, [pc, #80]	; (800885c <igmp_joingroup+0x1cc>)
 800880a:	4813      	ldr	r0, [pc, #76]	; (8008858 <igmp_joingroup+0x1c8>)
 800880c:	f007 f8b4 	bl	800f978 <iprintf>
 8008810:	f06f 0005 	mvn.w	r0, #5
 8008814:	e786      	b.n	8008724 <igmp_joingroup+0x94>
 8008816:	4b0e      	ldr	r3, [pc, #56]	; (8008850 <igmp_joingroup+0x1c0>)
 8008818:	f44f 72f6 	mov.w	r2, #492	; 0x1ec
 800881c:	4910      	ldr	r1, [pc, #64]	; (8008860 <igmp_joingroup+0x1d0>)
 800881e:	480e      	ldr	r0, [pc, #56]	; (8008858 <igmp_joingroup+0x1c8>)
 8008820:	f007 f8aa 	bl	800f978 <iprintf>
 8008824:	f06f 0005 	mvn.w	r0, #5
 8008828:	e77c      	b.n	8008724 <igmp_joingroup+0x94>
 800882a:	4b09      	ldr	r3, [pc, #36]	; (8008850 <igmp_joingroup+0x1c0>)
 800882c:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
 8008830:	490c      	ldr	r1, [pc, #48]	; (8008864 <igmp_joingroup+0x1d4>)
 8008832:	4809      	ldr	r0, [pc, #36]	; (8008858 <igmp_joingroup+0x1c8>)
 8008834:	f007 f8a0 	bl	800f978 <iprintf>
 8008838:	f06f 0005 	mvn.w	r0, #5
 800883c:	e772      	b.n	8008724 <igmp_joingroup+0x94>
 800883e:	bf00      	nop
 8008840:	200085fc 	.word	0x200085fc
 8008844:	08011b14 	.word	0x08011b14
 8008848:	cccccccd 	.word	0xcccccccd
 800884c:	080119ec 	.word	0x080119ec
 8008850:	08011978 	.word	0x08011978
 8008854:	08011a9c 	.word	0x08011a9c
 8008858:	08010e34 	.word	0x08010e34
 800885c:	08011a30 	.word	0x08011a30
 8008860:	08011ad8 	.word	0x08011ad8
 8008864:	08011a68 	.word	0x08011a68
 8008868:	200033d8 	.word	0x200033d8

0800886c <igmp_tmr>:
 800886c:	4b15      	ldr	r3, [pc, #84]	; (80088c4 <igmp_tmr+0x58>)
 800886e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008872:	681d      	ldr	r5, [r3, #0]
 8008874:	b31d      	cbz	r5, 80088be <igmp_tmr+0x52>
 8008876:	4e14      	ldr	r6, [pc, #80]	; (80088c8 <igmp_tmr+0x5c>)
 8008878:	f04f 0802 	mov.w	r8, #2
 800887c:	6a2c      	ldr	r4, [r5, #32]
 800887e:	b914      	cbnz	r4, 8008886 <igmp_tmr+0x1a>
 8008880:	e01a      	b.n	80088b8 <igmp_tmr+0x4c>
 8008882:	6824      	ldr	r4, [r4, #0]
 8008884:	b1c4      	cbz	r4, 80088b8 <igmp_tmr+0x4c>
 8008886:	8962      	ldrh	r2, [r4, #10]
 8008888:	1e53      	subs	r3, r2, #1
 800888a:	2a00      	cmp	r2, #0
 800888c:	d0f9      	beq.n	8008882 <igmp_tmr+0x16>
 800888e:	b29b      	uxth	r3, r3
 8008890:	8163      	strh	r3, [r4, #10]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d1f5      	bne.n	8008882 <igmp_tmr+0x16>
 8008896:	7a63      	ldrb	r3, [r4, #9]
 8008898:	2b01      	cmp	r3, #1
 800889a:	d1f2      	bne.n	8008882 <igmp_tmr+0x16>
 800889c:	6873      	ldr	r3, [r6, #4]
 800889e:	4621      	mov	r1, r4
 80088a0:	6867      	ldr	r7, [r4, #4]
 80088a2:	2216      	movs	r2, #22
 80088a4:	4628      	mov	r0, r5
 80088a6:	429f      	cmp	r7, r3
 80088a8:	d0eb      	beq.n	8008882 <igmp_tmr+0x16>
 80088aa:	f884 8009 	strb.w	r8, [r4, #9]
 80088ae:	f7ff fd77 	bl	80083a0 <igmp_send>
 80088b2:	6824      	ldr	r4, [r4, #0]
 80088b4:	2c00      	cmp	r4, #0
 80088b6:	d1e6      	bne.n	8008886 <igmp_tmr+0x1a>
 80088b8:	682d      	ldr	r5, [r5, #0]
 80088ba:	2d00      	cmp	r5, #0
 80088bc:	d1de      	bne.n	800887c <igmp_tmr+0x10>
 80088be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088c2:	bf00      	nop
 80088c4:	200085fc 	.word	0x200085fc
 80088c8:	200033d8 	.word	0x200033d8

080088cc <ip4_route>:
 80088cc:	6801      	ldr	r1, [r0, #0]
 80088ce:	f001 03f0 	and.w	r3, r1, #240	; 0xf0
 80088d2:	2be0      	cmp	r3, #224	; 0xe0
 80088d4:	d028      	beq.n	8008928 <ip4_route+0x5c>
 80088d6:	4b19      	ldr	r3, [pc, #100]	; (800893c <ip4_route+0x70>)
 80088d8:	6818      	ldr	r0, [r3, #0]
 80088da:	b410      	push	{r4}
 80088dc:	b1a0      	cbz	r0, 8008908 <ip4_route+0x3c>
 80088de:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 80088e2:	07dc      	lsls	r4, r3, #31
 80088e4:	d50d      	bpl.n	8008902 <ip4_route+0x36>
 80088e6:	075a      	lsls	r2, r3, #29
 80088e8:	d50b      	bpl.n	8008902 <ip4_route+0x36>
 80088ea:	6842      	ldr	r2, [r0, #4]
 80088ec:	ea81 0402 	eor.w	r4, r1, r2
 80088f0:	b13a      	cbz	r2, 8008902 <ip4_route+0x36>
 80088f2:	6882      	ldr	r2, [r0, #8]
 80088f4:	4214      	tst	r4, r2
 80088f6:	d014      	beq.n	8008922 <ip4_route+0x56>
 80088f8:	079b      	lsls	r3, r3, #30
 80088fa:	d402      	bmi.n	8008902 <ip4_route+0x36>
 80088fc:	68c3      	ldr	r3, [r0, #12]
 80088fe:	4299      	cmp	r1, r3
 8008900:	d00f      	beq.n	8008922 <ip4_route+0x56>
 8008902:	6800      	ldr	r0, [r0, #0]
 8008904:	2800      	cmp	r0, #0
 8008906:	d1ea      	bne.n	80088de <ip4_route+0x12>
 8008908:	4b0d      	ldr	r3, [pc, #52]	; (8008940 <ip4_route+0x74>)
 800890a:	6818      	ldr	r0, [r3, #0]
 800890c:	b148      	cbz	r0, 8008922 <ip4_route+0x56>
 800890e:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 8008912:	f003 0305 	and.w	r3, r3, #5
 8008916:	2b05      	cmp	r3, #5
 8008918:	d10b      	bne.n	8008932 <ip4_route+0x66>
 800891a:	6843      	ldr	r3, [r0, #4]
 800891c:	2b00      	cmp	r3, #0
 800891e:	bf08      	it	eq
 8008920:	2000      	moveq	r0, #0
 8008922:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008926:	4770      	bx	lr
 8008928:	4b06      	ldr	r3, [pc, #24]	; (8008944 <ip4_route+0x78>)
 800892a:	6818      	ldr	r0, [r3, #0]
 800892c:	2800      	cmp	r0, #0
 800892e:	d0d2      	beq.n	80088d6 <ip4_route+0xa>
 8008930:	4770      	bx	lr
 8008932:	2000      	movs	r0, #0
 8008934:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008938:	4770      	bx	lr
 800893a:	bf00      	nop
 800893c:	200085fc 	.word	0x200085fc
 8008940:	20008600 	.word	0x20008600
 8008944:	200033e0 	.word	0x200033e0

08008948 <ip4_input>:
 8008948:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800894c:	6847      	ldr	r7, [r0, #4]
 800894e:	4604      	mov	r4, r0
 8008950:	783b      	ldrb	r3, [r7, #0]
 8008952:	091a      	lsrs	r2, r3, #4
 8008954:	2a04      	cmp	r2, #4
 8008956:	d005      	beq.n	8008964 <ip4_input+0x1c>
 8008958:	4620      	mov	r0, r4
 800895a:	f7fd fa6f 	bl	8005e3c <pbuf_free>
 800895e:	2000      	movs	r0, #0
 8008960:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008964:	f003 030f 	and.w	r3, r3, #15
 8008968:	8878      	ldrh	r0, [r7, #2]
 800896a:	4688      	mov	r8, r1
 800896c:	009e      	lsls	r6, r3, #2
 800896e:	f7fc fdd1 	bl	8005514 <lwip_htons>
 8008972:	8923      	ldrh	r3, [r4, #8]
 8008974:	4605      	mov	r5, r0
 8008976:	4283      	cmp	r3, r0
 8008978:	f200 8094 	bhi.w	8008aa4 <ip4_input+0x15c>
 800897c:	8963      	ldrh	r3, [r4, #10]
 800897e:	42b3      	cmp	r3, r6
 8008980:	d3ea      	bcc.n	8008958 <ip4_input+0x10>
 8008982:	8923      	ldrh	r3, [r4, #8]
 8008984:	42ab      	cmp	r3, r5
 8008986:	d3e7      	bcc.n	8008958 <ip4_input+0x10>
 8008988:	2e13      	cmp	r6, #19
 800898a:	d9e5      	bls.n	8008958 <ip4_input+0x10>
 800898c:	693a      	ldr	r2, [r7, #16]
 800898e:	f8df a178 	ldr.w	sl, [pc, #376]	; 8008b08 <ip4_input+0x1c0>
 8008992:	f002 01f0 	and.w	r1, r2, #240	; 0xf0
 8008996:	f898 302f 	ldrb.w	r3, [r8, #47]	; 0x2f
 800899a:	f8ca 2014 	str.w	r2, [sl, #20]
 800899e:	29e0      	cmp	r1, #224	; 0xe0
 80089a0:	68f8      	ldr	r0, [r7, #12]
 80089a2:	f8ca 0010 	str.w	r0, [sl, #16]
 80089a6:	f000 8085 	beq.w	8008ab4 <ip4_input+0x16c>
 80089aa:	4645      	mov	r5, r8
 80089ac:	f04f 0901 	mov.w	r9, #1
 80089b0:	f8df b158 	ldr.w	fp, [pc, #344]	; 8008b0c <ip4_input+0x1c4>
 80089b4:	07db      	lsls	r3, r3, #31
 80089b6:	d50a      	bpl.n	80089ce <ip4_input+0x86>
 80089b8:	686b      	ldr	r3, [r5, #4]
 80089ba:	b143      	cbz	r3, 80089ce <ip4_input+0x86>
 80089bc:	f8da 0014 	ldr.w	r0, [sl, #20]
 80089c0:	4283      	cmp	r3, r0
 80089c2:	d074      	beq.n	8008aae <ip4_input+0x166>
 80089c4:	4629      	mov	r1, r5
 80089c6:	f000 fa85 	bl	8008ed4 <ip4_addr_isbroadcast_u32>
 80089ca:	2800      	cmp	r0, #0
 80089cc:	d16f      	bne.n	8008aae <ip4_input+0x166>
 80089ce:	f1b9 0f00 	cmp.w	r9, #0
 80089d2:	d00d      	beq.n	80089f0 <ip4_input+0xa8>
 80089d4:	f89a 3014 	ldrb.w	r3, [sl, #20]
 80089d8:	2b7f      	cmp	r3, #127	; 0x7f
 80089da:	d00f      	beq.n	80089fc <ip4_input+0xb4>
 80089dc:	f8db 5000 	ldr.w	r5, [fp]
 80089e0:	4545      	cmp	r5, r8
 80089e2:	d008      	beq.n	80089f6 <ip4_input+0xae>
 80089e4:	b155      	cbz	r5, 80089fc <ip4_input+0xb4>
 80089e6:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 80089ea:	f04f 0900 	mov.w	r9, #0
 80089ee:	e7e1      	b.n	80089b4 <ip4_input+0x6c>
 80089f0:	682d      	ldr	r5, [r5, #0]
 80089f2:	4545      	cmp	r5, r8
 80089f4:	d1f6      	bne.n	80089e4 <ip4_input+0x9c>
 80089f6:	682d      	ldr	r5, [r5, #0]
 80089f8:	2d00      	cmp	r5, #0
 80089fa:	d1f4      	bne.n	80089e6 <ip4_input+0x9e>
 80089fc:	f8da 0010 	ldr.w	r0, [sl, #16]
 8008a00:	2500      	movs	r5, #0
 8008a02:	4641      	mov	r1, r8
 8008a04:	f000 fa66 	bl	8008ed4 <ip4_addr_isbroadcast_u32>
 8008a08:	2800      	cmp	r0, #0
 8008a0a:	d1a5      	bne.n	8008958 <ip4_input+0x10>
 8008a0c:	f8da 3010 	ldr.w	r3, [sl, #16]
 8008a10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a14:	2be0      	cmp	r3, #224	; 0xe0
 8008a16:	d09f      	beq.n	8008958 <ip4_input+0x10>
 8008a18:	2d00      	cmp	r5, #0
 8008a1a:	d09d      	beq.n	8008958 <ip4_input+0x10>
 8008a1c:	88fb      	ldrh	r3, [r7, #6]
 8008a1e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008a22:	b133      	cbz	r3, 8008a32 <ip4_input+0xea>
 8008a24:	4620      	mov	r0, r4
 8008a26:	f000 fb3f 	bl	80090a8 <ip4_reass>
 8008a2a:	4604      	mov	r4, r0
 8008a2c:	2800      	cmp	r0, #0
 8008a2e:	d096      	beq.n	800895e <ip4_input+0x16>
 8008a30:	6847      	ldr	r7, [r0, #4]
 8008a32:	f8ca 5000 	str.w	r5, [sl]
 8008a36:	4271      	negs	r1, r6
 8008a38:	f8ca 8004 	str.w	r8, [sl, #4]
 8008a3c:	4620      	mov	r0, r4
 8008a3e:	f8ca 7008 	str.w	r7, [sl, #8]
 8008a42:	783b      	ldrb	r3, [r7, #0]
 8008a44:	f003 030f 	and.w	r3, r3, #15
 8008a48:	009b      	lsls	r3, r3, #2
 8008a4a:	f8aa 300c 	strh.w	r3, [sl, #12]
 8008a4e:	f7fd f945 	bl	8005cdc <pbuf_header>
 8008a52:	7a7b      	ldrb	r3, [r7, #9]
 8008a54:	2b02      	cmp	r3, #2
 8008a56:	d049      	beq.n	8008aec <ip4_input+0x1a4>
 8008a58:	2b11      	cmp	r3, #17
 8008a5a:	d042      	beq.n	8008ae2 <ip4_input+0x19a>
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	d03b      	beq.n	8008ad8 <ip4_input+0x190>
 8008a60:	4629      	mov	r1, r5
 8008a62:	f8da 0014 	ldr.w	r0, [sl, #20]
 8008a66:	f000 fa35 	bl	8008ed4 <ip4_addr_isbroadcast_u32>
 8008a6a:	b970      	cbnz	r0, 8008a8a <ip4_input+0x142>
 8008a6c:	f8da 3014 	ldr.w	r3, [sl, #20]
 8008a70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a74:	2be0      	cmp	r3, #224	; 0xe0
 8008a76:	d008      	beq.n	8008a8a <ip4_input+0x142>
 8008a78:	4631      	mov	r1, r6
 8008a7a:	4620      	mov	r0, r4
 8008a7c:	f7fd f986 	bl	8005d8c <pbuf_header_force>
 8008a80:	6067      	str	r7, [r4, #4]
 8008a82:	2102      	movs	r1, #2
 8008a84:	4620      	mov	r0, r4
 8008a86:	f7ff fbdf 	bl	8008248 <icmp_dest_unreach>
 8008a8a:	4620      	mov	r0, r4
 8008a8c:	f7fd f9d6 	bl	8005e3c <pbuf_free>
 8008a90:	2300      	movs	r3, #0
 8008a92:	e9ca 3300 	strd	r3, r3, [sl]
 8008a96:	f8ca 3008 	str.w	r3, [sl, #8]
 8008a9a:	f8aa 300c 	strh.w	r3, [sl, #12]
 8008a9e:	e9ca 3304 	strd	r3, r3, [sl, #16]
 8008aa2:	e75c      	b.n	800895e <ip4_input+0x16>
 8008aa4:	4601      	mov	r1, r0
 8008aa6:	4620      	mov	r0, r4
 8008aa8:	f7fd fb32 	bl	8006110 <pbuf_realloc>
 8008aac:	e766      	b.n	800897c <ip4_input+0x34>
 8008aae:	f8da 0010 	ldr.w	r0, [sl, #16]
 8008ab2:	e7a6      	b.n	8008a02 <ip4_input+0xba>
 8008ab4:	f013 0520 	ands.w	r5, r3, #32
 8008ab8:	d0a3      	beq.n	8008a02 <ip4_input+0xba>
 8008aba:	f10a 0114 	add.w	r1, sl, #20
 8008abe:	4640      	mov	r0, r8
 8008ac0:	f7ff fd4c 	bl	800855c <igmp_lookfor_group>
 8008ac4:	b1c0      	cbz	r0, 8008af8 <ip4_input+0x1b0>
 8008ac6:	4b0e      	ldr	r3, [pc, #56]	; (8008b00 <ip4_input+0x1b8>)
 8008ac8:	4645      	mov	r5, r8
 8008aca:	e9da 0204 	ldrd	r0, r2, [sl, #16]
 8008ace:	429a      	cmp	r2, r3
 8008ad0:	d197      	bne.n	8008a02 <ip4_input+0xba>
 8008ad2:	2800      	cmp	r0, #0
 8008ad4:	d0a2      	beq.n	8008a1c <ip4_input+0xd4>
 8008ad6:	e794      	b.n	8008a02 <ip4_input+0xba>
 8008ad8:	4641      	mov	r1, r8
 8008ada:	4620      	mov	r0, r4
 8008adc:	f7ff fb1a 	bl	8008114 <icmp_input>
 8008ae0:	e7d6      	b.n	8008a90 <ip4_input+0x148>
 8008ae2:	4641      	mov	r1, r8
 8008ae4:	4620      	mov	r0, r4
 8008ae6:	f7fd ff01 	bl	80068ec <udp_input>
 8008aea:	e7d1      	b.n	8008a90 <ip4_input+0x148>
 8008aec:	4641      	mov	r1, r8
 8008aee:	4620      	mov	r0, r4
 8008af0:	4a04      	ldr	r2, [pc, #16]	; (8008b04 <ip4_input+0x1bc>)
 8008af2:	f7ff fd43 	bl	800857c <igmp_input>
 8008af6:	e7cb      	b.n	8008a90 <ip4_input+0x148>
 8008af8:	4605      	mov	r5, r0
 8008afa:	f8da 0010 	ldr.w	r0, [sl, #16]
 8008afe:	e780      	b.n	8008a02 <ip4_input+0xba>
 8008b00:	010000e0 	.word	0x010000e0
 8008b04:	20005a30 	.word	0x20005a30
 8008b08:	20005a1c 	.word	0x20005a1c
 8008b0c:	200085fc 	.word	0x200085fc

08008b10 <ip4_output_if>:
 8008b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b14:	b083      	sub	sp, #12
 8008b16:	4699      	mov	r9, r3
 8008b18:	4605      	mov	r5, r0
 8008b1a:	89c3      	ldrh	r3, [r0, #14]
 8008b1c:	f89d a030 	ldrb.w	sl, [sp, #48]	; 0x30
 8008b20:	f89d b034 	ldrb.w	fp, [sp, #52]	; 0x34
 8008b24:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8008b26:	2a00      	cmp	r2, #0
 8008b28:	d04d      	beq.n	8008bc6 <ip4_output_if+0xb6>
 8008b2a:	4688      	mov	r8, r1
 8008b2c:	4616      	mov	r6, r2
 8008b2e:	b111      	cbz	r1, 8008b36 <ip4_output_if+0x26>
 8008b30:	680a      	ldr	r2, [r1, #0]
 8008b32:	2a00      	cmp	r2, #0
 8008b34:	d144      	bne.n	8008bc0 <ip4_output_if+0xb0>
 8008b36:	2b01      	cmp	r3, #1
 8008b38:	f107 0804 	add.w	r8, r7, #4
 8008b3c:	d006      	beq.n	8008b4c <ip4_output_if+0x3c>
 8008b3e:	4b39      	ldr	r3, [pc, #228]	; (8008c24 <ip4_output_if+0x114>)
 8008b40:	f240 3233 	movw	r2, #819	; 0x333
 8008b44:	4938      	ldr	r1, [pc, #224]	; (8008c28 <ip4_output_if+0x118>)
 8008b46:	4839      	ldr	r0, [pc, #228]	; (8008c2c <ip4_output_if+0x11c>)
 8008b48:	f006 ff16 	bl	800f978 <iprintf>
 8008b4c:	2114      	movs	r1, #20
 8008b4e:	4628      	mov	r0, r5
 8008b50:	f7fd f8c4 	bl	8005cdc <pbuf_header>
 8008b54:	2800      	cmp	r0, #0
 8008b56:	d161      	bne.n	8008c1c <ip4_output_if+0x10c>
 8008b58:	896b      	ldrh	r3, [r5, #10]
 8008b5a:	686c      	ldr	r4, [r5, #4]
 8008b5c:	2b13      	cmp	r3, #19
 8008b5e:	d945      	bls.n	8008bec <ip4_output_if+0xdc>
 8008b60:	f884 9008 	strb.w	r9, [r4, #8]
 8008b64:	2345      	movs	r3, #69	; 0x45
 8008b66:	f884 b009 	strb.w	fp, [r4, #9]
 8008b6a:	6832      	ldr	r2, [r6, #0]
 8008b6c:	7023      	strb	r3, [r4, #0]
 8008b6e:	f884 a001 	strb.w	sl, [r4, #1]
 8008b72:	6122      	str	r2, [r4, #16]
 8008b74:	8928      	ldrh	r0, [r5, #8]
 8008b76:	f7fc fccd 	bl	8005514 <lwip_htons>
 8008b7a:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 8008c38 <ip4_output_if+0x128>
 8008b7e:	2300      	movs	r3, #0
 8008b80:	8060      	strh	r0, [r4, #2]
 8008b82:	f8b9 0004 	ldrh.w	r0, [r9, #4]
 8008b86:	71a3      	strb	r3, [r4, #6]
 8008b88:	71e3      	strb	r3, [r4, #7]
 8008b8a:	f7fc fcc3 	bl	8005514 <lwip_htons>
 8008b8e:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 8008b92:	80a0      	strh	r0, [r4, #4]
 8008b94:	3301      	adds	r3, #1
 8008b96:	f8a9 3004 	strh.w	r3, [r9, #4]
 8008b9a:	f1b8 0f00 	cmp.w	r8, #0
 8008b9e:	d02d      	beq.n	8008bfc <ip4_output_if+0xec>
 8008ba0:	f8d8 2000 	ldr.w	r2, [r8]
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	60e2      	str	r2, [r4, #12]
 8008ba8:	72a3      	strb	r3, [r4, #10]
 8008baa:	72e3      	strb	r3, [r4, #11]
 8008bac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008bae:	b9a3      	cbnz	r3, 8008bda <ip4_output_if+0xca>
 8008bb0:	4632      	mov	r2, r6
 8008bb2:	4629      	mov	r1, r5
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	4638      	mov	r0, r7
 8008bb8:	4798      	blx	r3
 8008bba:	b003      	add	sp, #12
 8008bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bc0:	2b01      	cmp	r3, #1
 8008bc2:	d0c3      	beq.n	8008b4c <ip4_output_if+0x3c>
 8008bc4:	e7bb      	b.n	8008b3e <ip4_output_if+0x2e>
 8008bc6:	2b01      	cmp	r3, #1
 8008bc8:	d11b      	bne.n	8008c02 <ip4_output_if+0xf2>
 8008bca:	686b      	ldr	r3, [r5, #4]
 8008bcc:	ae02      	add	r6, sp, #8
 8008bce:	691b      	ldr	r3, [r3, #16]
 8008bd0:	f846 3d04 	str.w	r3, [r6, #-4]!
 8008bd4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d0ea      	beq.n	8008bb0 <ip4_output_if+0xa0>
 8008bda:	892a      	ldrh	r2, [r5, #8]
 8008bdc:	429a      	cmp	r2, r3
 8008bde:	d9e7      	bls.n	8008bb0 <ip4_output_if+0xa0>
 8008be0:	4632      	mov	r2, r6
 8008be2:	4639      	mov	r1, r7
 8008be4:	4628      	mov	r0, r5
 8008be6:	f000 fced 	bl	80095c4 <ip4_frag>
 8008bea:	e7e6      	b.n	8008bba <ip4_output_if+0xaa>
 8008bec:	4b0d      	ldr	r3, [pc, #52]	; (8008c24 <ip4_output_if+0x114>)
 8008bee:	f240 3261 	movw	r2, #865	; 0x361
 8008bf2:	490f      	ldr	r1, [pc, #60]	; (8008c30 <ip4_output_if+0x120>)
 8008bf4:	480d      	ldr	r0, [pc, #52]	; (8008c2c <ip4_output_if+0x11c>)
 8008bf6:	f006 febf 	bl	800f978 <iprintf>
 8008bfa:	e7b1      	b.n	8008b60 <ip4_output_if+0x50>
 8008bfc:	4b0d      	ldr	r3, [pc, #52]	; (8008c34 <ip4_output_if+0x124>)
 8008bfe:	681a      	ldr	r2, [r3, #0]
 8008c00:	e7d0      	b.n	8008ba4 <ip4_output_if+0x94>
 8008c02:	4b08      	ldr	r3, [pc, #32]	; (8008c24 <ip4_output_if+0x114>)
 8008c04:	f240 3233 	movw	r2, #819	; 0x333
 8008c08:	4907      	ldr	r1, [pc, #28]	; (8008c28 <ip4_output_if+0x118>)
 8008c0a:	ae02      	add	r6, sp, #8
 8008c0c:	4807      	ldr	r0, [pc, #28]	; (8008c2c <ip4_output_if+0x11c>)
 8008c0e:	f006 feb3 	bl	800f978 <iprintf>
 8008c12:	686b      	ldr	r3, [r5, #4]
 8008c14:	691b      	ldr	r3, [r3, #16]
 8008c16:	f846 3d04 	str.w	r3, [r6, #-4]!
 8008c1a:	e7db      	b.n	8008bd4 <ip4_output_if+0xc4>
 8008c1c:	f06f 0001 	mvn.w	r0, #1
 8008c20:	e7cb      	b.n	8008bba <ip4_output_if+0xaa>
 8008c22:	bf00      	nop
 8008c24:	08011ca8 	.word	0x08011ca8
 8008c28:	08011d0c 	.word	0x08011d0c
 8008c2c:	08010e34 	.word	0x08010e34
 8008c30:	08011cdc 	.word	0x08011cdc
 8008c34:	08010d14 	.word	0x08010d14
 8008c38:	200033e0 	.word	0x200033e0

08008c3c <ip4_output_if_opt>:
 8008c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c40:	b087      	sub	sp, #28
 8008c42:	4616      	mov	r6, r2
 8008c44:	469b      	mov	fp, r3
 8008c46:	4604      	mov	r4, r0
 8008c48:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8008c4c:	89c3      	ldrh	r3, [r0, #14]
 8008c4e:	9201      	str	r2, [sp, #4]
 8008c50:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
 8008c54:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8008c56:	9202      	str	r2, [sp, #8]
 8008c58:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
 8008c5c:	2e00      	cmp	r6, #0
 8008c5e:	d077      	beq.n	8008d50 <ip4_output_if_opt+0x114>
 8008c60:	4688      	mov	r8, r1
 8008c62:	b111      	cbz	r1, 8008c6a <ip4_output_if_opt+0x2e>
 8008c64:	680a      	ldr	r2, [r1, #0]
 8008c66:	2a00      	cmp	r2, #0
 8008c68:	d16b      	bne.n	8008d42 <ip4_output_if_opt+0x106>
 8008c6a:	2b01      	cmp	r3, #1
 8008c6c:	f107 0804 	add.w	r8, r7, #4
 8008c70:	d006      	beq.n	8008c80 <ip4_output_if_opt+0x44>
 8008c72:	4b52      	ldr	r3, [pc, #328]	; (8008dbc <ip4_output_if_opt+0x180>)
 8008c74:	f240 3233 	movw	r2, #819	; 0x333
 8008c78:	4951      	ldr	r1, [pc, #324]	; (8008dc0 <ip4_output_if_opt+0x184>)
 8008c7a:	4852      	ldr	r0, [pc, #328]	; (8008dc4 <ip4_output_if_opt+0x188>)
 8008c7c:	f006 fe7c 	bl	800f978 <iprintf>
 8008c80:	f1ba 0f00 	cmp.w	sl, #0
 8008c84:	d062      	beq.n	8008d4c <ip4_output_if_opt+0x110>
 8008c86:	f10a 0903 	add.w	r9, sl, #3
 8008c8a:	4620      	mov	r0, r4
 8008c8c:	f029 0903 	bic.w	r9, r9, #3
 8008c90:	fa1f f989 	uxth.w	r9, r9
 8008c94:	f109 0514 	add.w	r5, r9, #20
 8008c98:	fa0f f189 	sxth.w	r1, r9
 8008c9c:	b2ad      	uxth	r5, r5
 8008c9e:	f7fd f81d 	bl	8005cdc <pbuf_header>
 8008ca2:	2800      	cmp	r0, #0
 8008ca4:	f040 8087 	bne.w	8008db6 <ip4_output_if_opt+0x17a>
 8008ca8:	9003      	str	r0, [sp, #12]
 8008caa:	4652      	mov	r2, sl
 8008cac:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008cae:	6860      	ldr	r0, [r4, #4]
 8008cb0:	f006 fe4f 	bl	800f952 <memcpy>
 8008cb4:	45ca      	cmp	sl, r9
 8008cb6:	9b03      	ldr	r3, [sp, #12]
 8008cb8:	d375      	bcc.n	8008da6 <ip4_output_if_opt+0x16a>
 8008cba:	2114      	movs	r1, #20
 8008cbc:	4620      	mov	r0, r4
 8008cbe:	f7fd f80d 	bl	8005cdc <pbuf_header>
 8008cc2:	2800      	cmp	r0, #0
 8008cc4:	d177      	bne.n	8008db6 <ip4_output_if_opt+0x17a>
 8008cc6:	8963      	ldrh	r3, [r4, #10]
 8008cc8:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8008ccc:	2b13      	cmp	r3, #19
 8008cce:	d952      	bls.n	8008d76 <ip4_output_if_opt+0x13a>
 8008cd0:	9b02      	ldr	r3, [sp, #8]
 8008cd2:	08ad      	lsrs	r5, r5, #2
 8008cd4:	f889 b008 	strb.w	fp, [r9, #8]
 8008cd8:	f889 3009 	strb.w	r3, [r9, #9]
 8008cdc:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8008ce0:	6833      	ldr	r3, [r6, #0]
 8008ce2:	9a01      	ldr	r2, [sp, #4]
 8008ce4:	f889 5000 	strb.w	r5, [r9]
 8008ce8:	f889 2001 	strb.w	r2, [r9, #1]
 8008cec:	f8c9 3010 	str.w	r3, [r9, #16]
 8008cf0:	8920      	ldrh	r0, [r4, #8]
 8008cf2:	f7fc fc0f 	bl	8005514 <lwip_htons>
 8008cf6:	4d34      	ldr	r5, [pc, #208]	; (8008dc8 <ip4_output_if_opt+0x18c>)
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	f8a9 0002 	strh.w	r0, [r9, #2]
 8008cfe:	88a8      	ldrh	r0, [r5, #4]
 8008d00:	f889 3006 	strb.w	r3, [r9, #6]
 8008d04:	f889 3007 	strb.w	r3, [r9, #7]
 8008d08:	f7fc fc04 	bl	8005514 <lwip_htons>
 8008d0c:	88ab      	ldrh	r3, [r5, #4]
 8008d0e:	f8a9 0004 	strh.w	r0, [r9, #4]
 8008d12:	3301      	adds	r3, #1
 8008d14:	80ab      	strh	r3, [r5, #4]
 8008d16:	f1b8 0f00 	cmp.w	r8, #0
 8008d1a:	d034      	beq.n	8008d86 <ip4_output_if_opt+0x14a>
 8008d1c:	f8d8 2000 	ldr.w	r2, [r8]
 8008d20:	2300      	movs	r3, #0
 8008d22:	f8c9 200c 	str.w	r2, [r9, #12]
 8008d26:	f889 300a 	strb.w	r3, [r9, #10]
 8008d2a:	f889 300b 	strb.w	r3, [r9, #11]
 8008d2e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008d30:	b9c3      	cbnz	r3, 8008d64 <ip4_output_if_opt+0x128>
 8008d32:	4632      	mov	r2, r6
 8008d34:	4621      	mov	r1, r4
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	4638      	mov	r0, r7
 8008d3a:	4798      	blx	r3
 8008d3c:	b007      	add	sp, #28
 8008d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d42:	2b01      	cmp	r3, #1
 8008d44:	d195      	bne.n	8008c72 <ip4_output_if_opt+0x36>
 8008d46:	f1ba 0f00 	cmp.w	sl, #0
 8008d4a:	d19c      	bne.n	8008c86 <ip4_output_if_opt+0x4a>
 8008d4c:	2514      	movs	r5, #20
 8008d4e:	e7b4      	b.n	8008cba <ip4_output_if_opt+0x7e>
 8008d50:	2b01      	cmp	r3, #1
 8008d52:	d11b      	bne.n	8008d8c <ip4_output_if_opt+0x150>
 8008d54:	6863      	ldr	r3, [r4, #4]
 8008d56:	ae06      	add	r6, sp, #24
 8008d58:	691b      	ldr	r3, [r3, #16]
 8008d5a:	f846 3d04 	str.w	r3, [r6, #-4]!
 8008d5e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d0e6      	beq.n	8008d32 <ip4_output_if_opt+0xf6>
 8008d64:	8922      	ldrh	r2, [r4, #8]
 8008d66:	429a      	cmp	r2, r3
 8008d68:	d9e3      	bls.n	8008d32 <ip4_output_if_opt+0xf6>
 8008d6a:	4632      	mov	r2, r6
 8008d6c:	4639      	mov	r1, r7
 8008d6e:	4620      	mov	r0, r4
 8008d70:	f000 fc28 	bl	80095c4 <ip4_frag>
 8008d74:	e7e2      	b.n	8008d3c <ip4_output_if_opt+0x100>
 8008d76:	4b11      	ldr	r3, [pc, #68]	; (8008dbc <ip4_output_if_opt+0x180>)
 8008d78:	f240 3261 	movw	r2, #865	; 0x361
 8008d7c:	4913      	ldr	r1, [pc, #76]	; (8008dcc <ip4_output_if_opt+0x190>)
 8008d7e:	4811      	ldr	r0, [pc, #68]	; (8008dc4 <ip4_output_if_opt+0x188>)
 8008d80:	f006 fdfa 	bl	800f978 <iprintf>
 8008d84:	e7a4      	b.n	8008cd0 <ip4_output_if_opt+0x94>
 8008d86:	4b12      	ldr	r3, [pc, #72]	; (8008dd0 <ip4_output_if_opt+0x194>)
 8008d88:	681a      	ldr	r2, [r3, #0]
 8008d8a:	e7c9      	b.n	8008d20 <ip4_output_if_opt+0xe4>
 8008d8c:	4b0b      	ldr	r3, [pc, #44]	; (8008dbc <ip4_output_if_opt+0x180>)
 8008d8e:	f240 3233 	movw	r2, #819	; 0x333
 8008d92:	490b      	ldr	r1, [pc, #44]	; (8008dc0 <ip4_output_if_opt+0x184>)
 8008d94:	ae06      	add	r6, sp, #24
 8008d96:	480b      	ldr	r0, [pc, #44]	; (8008dc4 <ip4_output_if_opt+0x188>)
 8008d98:	f006 fdee 	bl	800f978 <iprintf>
 8008d9c:	6863      	ldr	r3, [r4, #4]
 8008d9e:	691b      	ldr	r3, [r3, #16]
 8008da0:	f846 3d04 	str.w	r3, [r6, #-4]!
 8008da4:	e7db      	b.n	8008d5e <ip4_output_if_opt+0x122>
 8008da6:	6860      	ldr	r0, [r4, #4]
 8008da8:	eba9 020a 	sub.w	r2, r9, sl
 8008dac:	4619      	mov	r1, r3
 8008dae:	4450      	add	r0, sl
 8008db0:	f006 fdda 	bl	800f968 <memset>
 8008db4:	e781      	b.n	8008cba <ip4_output_if_opt+0x7e>
 8008db6:	f06f 0001 	mvn.w	r0, #1
 8008dba:	e7bf      	b.n	8008d3c <ip4_output_if_opt+0x100>
 8008dbc:	08011ca8 	.word	0x08011ca8
 8008dc0:	08011d0c 	.word	0x08011d0c
 8008dc4:	08010e34 	.word	0x08010e34
 8008dc8:	200033e0 	.word	0x200033e0
 8008dcc:	08011cdc 	.word	0x08011cdc
 8008dd0:	08010d14 	.word	0x08010d14

08008dd4 <ip4_output_if_src>:
 8008dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dd8:	469b      	mov	fp, r3
 8008dda:	89c3      	ldrh	r3, [r0, #14]
 8008ddc:	b083      	sub	sp, #12
 8008dde:	4605      	mov	r5, r0
 8008de0:	2b01      	cmp	r3, #1
 8008de2:	4689      	mov	r9, r1
 8008de4:	4616      	mov	r6, r2
 8008de6:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
 8008dea:	f89d a034 	ldrb.w	sl, [sp, #52]	; 0x34
 8008dee:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8008df0:	d13b      	bne.n	8008e6a <ip4_output_if_src+0x96>
 8008df2:	2e00      	cmp	r6, #0
 8008df4:	d042      	beq.n	8008e7c <ip4_output_if_src+0xa8>
 8008df6:	2114      	movs	r1, #20
 8008df8:	4628      	mov	r0, r5
 8008dfa:	f7fc ff6f 	bl	8005cdc <pbuf_header>
 8008dfe:	2800      	cmp	r0, #0
 8008e00:	d158      	bne.n	8008eb4 <ip4_output_if_src+0xe0>
 8008e02:	896b      	ldrh	r3, [r5, #10]
 8008e04:	686c      	ldr	r4, [r5, #4]
 8008e06:	2b13      	cmp	r3, #19
 8008e08:	d949      	bls.n	8008e9e <ip4_output_if_src+0xca>
 8008e0a:	f884 b008 	strb.w	fp, [r4, #8]
 8008e0e:	2345      	movs	r3, #69	; 0x45
 8008e10:	f884 a009 	strb.w	sl, [r4, #9]
 8008e14:	6832      	ldr	r2, [r6, #0]
 8008e16:	f884 8001 	strb.w	r8, [r4, #1]
 8008e1a:	7023      	strb	r3, [r4, #0]
 8008e1c:	6122      	str	r2, [r4, #16]
 8008e1e:	8928      	ldrh	r0, [r5, #8]
 8008e20:	f7fc fb78 	bl	8005514 <lwip_htons>
 8008e24:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8008ed0 <ip4_output_if_src+0xfc>
 8008e28:	2300      	movs	r3, #0
 8008e2a:	8060      	strh	r0, [r4, #2]
 8008e2c:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 8008e30:	71a3      	strb	r3, [r4, #6]
 8008e32:	71e3      	strb	r3, [r4, #7]
 8008e34:	f7fc fb6e 	bl	8005514 <lwip_htons>
 8008e38:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8008e3c:	80a0      	strh	r0, [r4, #4]
 8008e3e:	3301      	adds	r3, #1
 8008e40:	f8a8 3004 	strh.w	r3, [r8, #4]
 8008e44:	f1b9 0f00 	cmp.w	r9, #0
 8008e48:	d031      	beq.n	8008eae <ip4_output_if_src+0xda>
 8008e4a:	f8d9 2000 	ldr.w	r2, [r9]
 8008e4e:	2300      	movs	r3, #0
 8008e50:	60e2      	str	r2, [r4, #12]
 8008e52:	72a3      	strb	r3, [r4, #10]
 8008e54:	72e3      	strb	r3, [r4, #11]
 8008e56:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008e58:	b9c3      	cbnz	r3, 8008e8c <ip4_output_if_src+0xb8>
 8008e5a:	4632      	mov	r2, r6
 8008e5c:	4629      	mov	r1, r5
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	4638      	mov	r0, r7
 8008e62:	4798      	blx	r3
 8008e64:	b003      	add	sp, #12
 8008e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e6a:	4b14      	ldr	r3, [pc, #80]	; (8008ebc <ip4_output_if_src+0xe8>)
 8008e6c:	f240 3233 	movw	r2, #819	; 0x333
 8008e70:	4913      	ldr	r1, [pc, #76]	; (8008ec0 <ip4_output_if_src+0xec>)
 8008e72:	4814      	ldr	r0, [pc, #80]	; (8008ec4 <ip4_output_if_src+0xf0>)
 8008e74:	f006 fd80 	bl	800f978 <iprintf>
 8008e78:	2e00      	cmp	r6, #0
 8008e7a:	d1bc      	bne.n	8008df6 <ip4_output_if_src+0x22>
 8008e7c:	686b      	ldr	r3, [r5, #4]
 8008e7e:	ae02      	add	r6, sp, #8
 8008e80:	691b      	ldr	r3, [r3, #16]
 8008e82:	f846 3d04 	str.w	r3, [r6, #-4]!
 8008e86:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d0e6      	beq.n	8008e5a <ip4_output_if_src+0x86>
 8008e8c:	892a      	ldrh	r2, [r5, #8]
 8008e8e:	429a      	cmp	r2, r3
 8008e90:	d9e3      	bls.n	8008e5a <ip4_output_if_src+0x86>
 8008e92:	4632      	mov	r2, r6
 8008e94:	4639      	mov	r1, r7
 8008e96:	4628      	mov	r0, r5
 8008e98:	f000 fb94 	bl	80095c4 <ip4_frag>
 8008e9c:	e7e2      	b.n	8008e64 <ip4_output_if_src+0x90>
 8008e9e:	4b07      	ldr	r3, [pc, #28]	; (8008ebc <ip4_output_if_src+0xe8>)
 8008ea0:	f240 3261 	movw	r2, #865	; 0x361
 8008ea4:	4908      	ldr	r1, [pc, #32]	; (8008ec8 <ip4_output_if_src+0xf4>)
 8008ea6:	4807      	ldr	r0, [pc, #28]	; (8008ec4 <ip4_output_if_src+0xf0>)
 8008ea8:	f006 fd66 	bl	800f978 <iprintf>
 8008eac:	e7ad      	b.n	8008e0a <ip4_output_if_src+0x36>
 8008eae:	4b07      	ldr	r3, [pc, #28]	; (8008ecc <ip4_output_if_src+0xf8>)
 8008eb0:	681a      	ldr	r2, [r3, #0]
 8008eb2:	e7cc      	b.n	8008e4e <ip4_output_if_src+0x7a>
 8008eb4:	f06f 0001 	mvn.w	r0, #1
 8008eb8:	e7d4      	b.n	8008e64 <ip4_output_if_src+0x90>
 8008eba:	bf00      	nop
 8008ebc:	08011ca8 	.word	0x08011ca8
 8008ec0:	08011d0c 	.word	0x08011d0c
 8008ec4:	08010e34 	.word	0x08010e34
 8008ec8:	08011cdc 	.word	0x08011cdc
 8008ecc:	08010d14 	.word	0x08010d14
 8008ed0:	200033e0 	.word	0x200033e0

08008ed4 <ip4_addr_isbroadcast_u32>:
 8008ed4:	1e43      	subs	r3, r0, #1
 8008ed6:	3303      	adds	r3, #3
 8008ed8:	d814      	bhi.n	8008f04 <ip4_addr_isbroadcast_u32+0x30>
 8008eda:	f891 302f 	ldrb.w	r3, [r1, #47]	; 0x2f
 8008ede:	f013 0302 	ands.w	r3, r3, #2
 8008ee2:	d00d      	beq.n	8008f00 <ip4_addr_isbroadcast_u32+0x2c>
 8008ee4:	684b      	ldr	r3, [r1, #4]
 8008ee6:	4283      	cmp	r3, r0
 8008ee8:	d00a      	beq.n	8008f00 <ip4_addr_isbroadcast_u32+0x2c>
 8008eea:	688a      	ldr	r2, [r1, #8]
 8008eec:	4043      	eors	r3, r0
 8008eee:	4213      	tst	r3, r2
 8008ef0:	d106      	bne.n	8008f00 <ip4_addr_isbroadcast_u32+0x2c>
 8008ef2:	43d2      	mvns	r2, r2
 8008ef4:	ea32 0300 	bics.w	r3, r2, r0
 8008ef8:	bf0c      	ite	eq
 8008efa:	2001      	moveq	r0, #1
 8008efc:	2000      	movne	r0, #0
 8008efe:	4770      	bx	lr
 8008f00:	2000      	movs	r0, #0
 8008f02:	4770      	bx	lr
 8008f04:	2001      	movs	r0, #1
 8008f06:	4770      	bx	lr

08008f08 <ipfrag_free_pbuf_custom>:
 8008f08:	b510      	push	{r4, lr}
 8008f0a:	4604      	mov	r4, r0
 8008f0c:	b148      	cbz	r0, 8008f22 <ipfrag_free_pbuf_custom+0x1a>
 8008f0e:	6960      	ldr	r0, [r4, #20]
 8008f10:	b108      	cbz	r0, 8008f16 <ipfrag_free_pbuf_custom+0xe>
 8008f12:	f7fc ff93 	bl	8005e3c <pbuf_free>
 8008f16:	4621      	mov	r1, r4
 8008f18:	2002      	movs	r0, #2
 8008f1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f1e:	f7fc bdc3 	b.w	8005aa8 <memp_free>
 8008f22:	4b04      	ldr	r3, [pc, #16]	; (8008f34 <ipfrag_free_pbuf_custom+0x2c>)
 8008f24:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 8008f28:	4903      	ldr	r1, [pc, #12]	; (8008f38 <ipfrag_free_pbuf_custom+0x30>)
 8008f2a:	4804      	ldr	r0, [pc, #16]	; (8008f3c <ipfrag_free_pbuf_custom+0x34>)
 8008f2c:	f006 fd24 	bl	800f978 <iprintf>
 8008f30:	e7ed      	b.n	8008f0e <ipfrag_free_pbuf_custom+0x6>
 8008f32:	bf00      	nop
 8008f34:	08011d18 	.word	0x08011d18
 8008f38:	08011d54 	.word	0x08011d54
 8008f3c:	08010e34 	.word	0x08010e34

08008f40 <ip_reass_free_complete_datagram>:
 8008f40:	4281      	cmp	r1, r0
 8008f42:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f46:	4680      	mov	r8, r0
 8008f48:	4689      	mov	r9, r1
 8008f4a:	d075      	beq.n	8009038 <ip_reass_free_complete_datagram+0xf8>
 8008f4c:	f1b9 0f00 	cmp.w	r9, #0
 8008f50:	d009      	beq.n	8008f66 <ip_reass_free_complete_datagram+0x26>
 8008f52:	f8d9 3000 	ldr.w	r3, [r9]
 8008f56:	4543      	cmp	r3, r8
 8008f58:	d005      	beq.n	8008f66 <ip_reass_free_complete_datagram+0x26>
 8008f5a:	4b3f      	ldr	r3, [pc, #252]	; (8009058 <ip_reass_free_complete_datagram+0x118>)
 8008f5c:	22ad      	movs	r2, #173	; 0xad
 8008f5e:	493f      	ldr	r1, [pc, #252]	; (800905c <ip_reass_free_complete_datagram+0x11c>)
 8008f60:	483f      	ldr	r0, [pc, #252]	; (8009060 <ip_reass_free_complete_datagram+0x120>)
 8008f62:	f006 fd09 	bl	800f978 <iprintf>
 8008f66:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8008f6a:	6863      	ldr	r3, [r4, #4]
 8008f6c:	889a      	ldrh	r2, [r3, #4]
 8008f6e:	b1a2      	cbz	r2, 8008f9a <ip_reass_free_complete_datagram+0x5a>
 8008f70:	2600      	movs	r6, #0
 8008f72:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 8009058 <ip_reass_free_complete_datagram+0x118>
 8008f76:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 8009074 <ip_reass_free_complete_datagram+0x134>
 8008f7a:	6863      	ldr	r3, [r4, #4]
 8008f7c:	4620      	mov	r0, r4
 8008f7e:	681f      	ldr	r7, [r3, #0]
 8008f80:	f7fd f954 	bl	800622c <pbuf_clen>
 8008f84:	1835      	adds	r5, r6, r0
 8008f86:	4620      	mov	r0, r4
 8008f88:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8008f8c:	b2ae      	uxth	r6, r5
 8008f8e:	da42      	bge.n	8009016 <ip_reass_free_complete_datagram+0xd6>
 8008f90:	f7fc ff54 	bl	8005e3c <pbuf_free>
 8008f94:	b30f      	cbz	r7, 8008fda <ip_reass_free_complete_datagram+0x9a>
 8008f96:	463c      	mov	r4, r7
 8008f98:	e7ef      	b.n	8008f7a <ip_reass_free_complete_datagram+0x3a>
 8008f9a:	4642      	mov	r2, r8
 8008f9c:	6818      	ldr	r0, [r3, #0]
 8008f9e:	2101      	movs	r1, #1
 8008fa0:	f8c8 0004 	str.w	r0, [r8, #4]
 8008fa4:	4620      	mov	r0, r4
 8008fa6:	f852 5f08 	ldr.w	r5, [r2, #8]!
 8008faa:	68d6      	ldr	r6, [r2, #12]
 8008fac:	f8d2 c004 	ldr.w	ip, [r2, #4]
 8008fb0:	6897      	ldr	r7, [r2, #8]
 8008fb2:	60de      	str	r6, [r3, #12]
 8008fb4:	601d      	str	r5, [r3, #0]
 8008fb6:	f8c3 c004 	str.w	ip, [r3, #4]
 8008fba:	609f      	str	r7, [r3, #8]
 8008fbc:	6915      	ldr	r5, [r2, #16]
 8008fbe:	611d      	str	r5, [r3, #16]
 8008fc0:	f7ff f998 	bl	80082f4 <icmp_time_exceeded>
 8008fc4:	4620      	mov	r0, r4
 8008fc6:	f7fd f931 	bl	800622c <pbuf_clen>
 8008fca:	4606      	mov	r6, r0
 8008fcc:	4620      	mov	r0, r4
 8008fce:	f7fc ff35 	bl	8005e3c <pbuf_free>
 8008fd2:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8008fd6:	2c00      	cmp	r4, #0
 8008fd8:	d1cb      	bne.n	8008f72 <ip_reass_free_complete_datagram+0x32>
 8008fda:	4c22      	ldr	r4, [pc, #136]	; (8009064 <ip_reass_free_complete_datagram+0x124>)
 8008fdc:	6823      	ldr	r3, [r4, #0]
 8008fde:	4598      	cmp	r8, r3
 8008fe0:	d026      	beq.n	8009030 <ip_reass_free_complete_datagram+0xf0>
 8008fe2:	f1b9 0f00 	cmp.w	r9, #0
 8008fe6:	d02e      	beq.n	8009046 <ip_reass_free_complete_datagram+0x106>
 8008fe8:	f8d8 3000 	ldr.w	r3, [r8]
 8008fec:	f8c9 3000 	str.w	r3, [r9]
 8008ff0:	4641      	mov	r1, r8
 8008ff2:	2001      	movs	r0, #1
 8008ff4:	f7fc fd58 	bl	8005aa8 <memp_free>
 8008ff8:	88a3      	ldrh	r3, [r4, #4]
 8008ffa:	42b3      	cmp	r3, r6
 8008ffc:	d206      	bcs.n	800900c <ip_reass_free_complete_datagram+0xcc>
 8008ffe:	4b16      	ldr	r3, [pc, #88]	; (8009058 <ip_reass_free_complete_datagram+0x118>)
 8009000:	22d2      	movs	r2, #210	; 0xd2
 8009002:	4919      	ldr	r1, [pc, #100]	; (8009068 <ip_reass_free_complete_datagram+0x128>)
 8009004:	4816      	ldr	r0, [pc, #88]	; (8009060 <ip_reass_free_complete_datagram+0x120>)
 8009006:	f006 fcb7 	bl	800f978 <iprintf>
 800900a:	88a3      	ldrh	r3, [r4, #4]
 800900c:	1b9b      	subs	r3, r3, r6
 800900e:	4630      	mov	r0, r6
 8009010:	80a3      	strh	r3, [r4, #4]
 8009012:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009016:	465b      	mov	r3, fp
 8009018:	22cc      	movs	r2, #204	; 0xcc
 800901a:	4651      	mov	r1, sl
 800901c:	4810      	ldr	r0, [pc, #64]	; (8009060 <ip_reass_free_complete_datagram+0x120>)
 800901e:	f006 fcab 	bl	800f978 <iprintf>
 8009022:	4620      	mov	r0, r4
 8009024:	f7fc ff0a 	bl	8005e3c <pbuf_free>
 8009028:	2f00      	cmp	r7, #0
 800902a:	d0d6      	beq.n	8008fda <ip_reass_free_complete_datagram+0x9a>
 800902c:	463c      	mov	r4, r7
 800902e:	e7a4      	b.n	8008f7a <ip_reass_free_complete_datagram+0x3a>
 8009030:	f8d8 3000 	ldr.w	r3, [r8]
 8009034:	6023      	str	r3, [r4, #0]
 8009036:	e7db      	b.n	8008ff0 <ip_reass_free_complete_datagram+0xb0>
 8009038:	4b07      	ldr	r3, [pc, #28]	; (8009058 <ip_reass_free_complete_datagram+0x118>)
 800903a:	22ab      	movs	r2, #171	; 0xab
 800903c:	490b      	ldr	r1, [pc, #44]	; (800906c <ip_reass_free_complete_datagram+0x12c>)
 800903e:	4808      	ldr	r0, [pc, #32]	; (8009060 <ip_reass_free_complete_datagram+0x120>)
 8009040:	f006 fc9a 	bl	800f978 <iprintf>
 8009044:	e782      	b.n	8008f4c <ip_reass_free_complete_datagram+0xc>
 8009046:	4b04      	ldr	r3, [pc, #16]	; (8009058 <ip_reass_free_complete_datagram+0x118>)
 8009048:	f240 1245 	movw	r2, #325	; 0x145
 800904c:	4908      	ldr	r1, [pc, #32]	; (8009070 <ip_reass_free_complete_datagram+0x130>)
 800904e:	4804      	ldr	r0, [pc, #16]	; (8009060 <ip_reass_free_complete_datagram+0x120>)
 8009050:	f006 fc92 	bl	800f978 <iprintf>
 8009054:	e7c8      	b.n	8008fe8 <ip_reass_free_complete_datagram+0xa8>
 8009056:	bf00      	nop
 8009058:	08011d18 	.word	0x08011d18
 800905c:	08011d6c 	.word	0x08011d6c
 8009060:	08010e34 	.word	0x08010e34
 8009064:	200033e8 	.word	0x200033e8
 8009068:	08011dbc 	.word	0x08011dbc
 800906c:	08011d60 	.word	0x08011d60
 8009070:	08011da0 	.word	0x08011da0
 8009074:	08011d80 	.word	0x08011d80

08009078 <ip_reass_tmr>:
 8009078:	b538      	push	{r3, r4, r5, lr}
 800907a:	4b0a      	ldr	r3, [pc, #40]	; (80090a4 <ip_reass_tmr+0x2c>)
 800907c:	6818      	ldr	r0, [r3, #0]
 800907e:	b180      	cbz	r0, 80090a2 <ip_reass_tmr+0x2a>
 8009080:	2500      	movs	r5, #0
 8009082:	e003      	b.n	800908c <ip_reass_tmr+0x14>
 8009084:	4605      	mov	r5, r0
 8009086:	77c2      	strb	r2, [r0, #31]
 8009088:	4620      	mov	r0, r4
 800908a:	b154      	cbz	r4, 80090a2 <ip_reass_tmr+0x2a>
 800908c:	7fc3      	ldrb	r3, [r0, #31]
 800908e:	6804      	ldr	r4, [r0, #0]
 8009090:	1e5a      	subs	r2, r3, #1
 8009092:	2b00      	cmp	r3, #0
 8009094:	d1f6      	bne.n	8009084 <ip_reass_tmr+0xc>
 8009096:	4629      	mov	r1, r5
 8009098:	f7ff ff52 	bl	8008f40 <ip_reass_free_complete_datagram>
 800909c:	4620      	mov	r0, r4
 800909e:	2c00      	cmp	r4, #0
 80090a0:	d1f4      	bne.n	800908c <ip_reass_tmr+0x14>
 80090a2:	bd38      	pop	{r3, r4, r5, pc}
 80090a4:	200033e8 	.word	0x200033e8

080090a8 <ip4_reass>:
 80090a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090ac:	6845      	ldr	r5, [r0, #4]
 80090ae:	b083      	sub	sp, #12
 80090b0:	4680      	mov	r8, r0
 80090b2:	782b      	ldrb	r3, [r5, #0]
 80090b4:	f003 030f 	and.w	r3, r3, #15
 80090b8:	2b05      	cmp	r3, #5
 80090ba:	f040 8116 	bne.w	80092ea <ip4_reass+0x242>
 80090be:	88e8      	ldrh	r0, [r5, #6]
 80090c0:	f7fc fa28 	bl	8005514 <lwip_htons>
 80090c4:	f3c0 090c 	ubfx	r9, r0, #0, #13
 80090c8:	8868      	ldrh	r0, [r5, #2]
 80090ca:	f7fc fa23 	bl	8005514 <lwip_htons>
 80090ce:	782b      	ldrb	r3, [r5, #0]
 80090d0:	4eba      	ldr	r6, [pc, #744]	; (80093bc <ip4_reass+0x314>)
 80090d2:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 80090d6:	f003 030f 	and.w	r3, r3, #15
 80090da:	eba0 0383 	sub.w	r3, r0, r3, lsl #2
 80090de:	4640      	mov	r0, r8
 80090e0:	b29b      	uxth	r3, r3
 80090e2:	9300      	str	r3, [sp, #0]
 80090e4:	f7fd f8a2 	bl	800622c <pbuf_clen>
 80090e8:	88b3      	ldrh	r3, [r6, #4]
 80090ea:	4683      	mov	fp, r0
 80090ec:	4403      	add	r3, r0
 80090ee:	2b0a      	cmp	r3, #10
 80090f0:	f300 8104 	bgt.w	80092fc <ip4_reass+0x254>
 80090f4:	6834      	ldr	r4, [r6, #0]
 80090f6:	2c00      	cmp	r4, #0
 80090f8:	f000 8091 	beq.w	800921e <ip4_reass+0x176>
 80090fc:	68ea      	ldr	r2, [r5, #12]
 80090fe:	e003      	b.n	8009108 <ip4_reass+0x60>
 8009100:	6824      	ldr	r4, [r4, #0]
 8009102:	2c00      	cmp	r4, #0
 8009104:	f000 808b 	beq.w	800921e <ip4_reass+0x176>
 8009108:	6963      	ldr	r3, [r4, #20]
 800910a:	4293      	cmp	r3, r2
 800910c:	d1f8      	bne.n	8009100 <ip4_reass+0x58>
 800910e:	692b      	ldr	r3, [r5, #16]
 8009110:	69a1      	ldr	r1, [r4, #24]
 8009112:	4299      	cmp	r1, r3
 8009114:	d1f4      	bne.n	8009100 <ip4_reass+0x58>
 8009116:	89a1      	ldrh	r1, [r4, #12]
 8009118:	88ab      	ldrh	r3, [r5, #4]
 800911a:	4299      	cmp	r1, r3
 800911c:	d1f0      	bne.n	8009100 <ip4_reass+0x58>
 800911e:	88e8      	ldrh	r0, [r5, #6]
 8009120:	f7fc f9f8 	bl	8005514 <lwip_htons>
 8009124:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8009128:	2800      	cmp	r0, #0
 800912a:	f000 8127 	beq.w	800937c <ip4_reass+0x2d4>
 800912e:	88eb      	ldrh	r3, [r5, #6]
 8009130:	f013 0320 	ands.w	r3, r3, #32
 8009134:	9301      	str	r3, [sp, #4]
 8009136:	d10a      	bne.n	800914e <ip4_reass+0xa6>
 8009138:	9b00      	ldr	r3, [sp, #0]
 800913a:	444b      	add	r3, r9
 800913c:	b29b      	uxth	r3, r3
 800913e:	4599      	cmp	r9, r3
 8009140:	f200 80d3 	bhi.w	80092ea <ip4_reass+0x242>
 8009144:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8009148:	4293      	cmp	r3, r2
 800914a:	f200 80ce 	bhi.w	80092ea <ip4_reass+0x242>
 800914e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009152:	8878      	ldrh	r0, [r7, #2]
 8009154:	f7fc f9de 	bl	8005514 <lwip_htons>
 8009158:	783d      	ldrb	r5, [r7, #0]
 800915a:	f005 050f 	and.w	r5, r5, #15
 800915e:	eba0 0585 	sub.w	r5, r0, r5, lsl #2
 8009162:	88f8      	ldrh	r0, [r7, #6]
 8009164:	f7fc f9d6 	bl	8005514 <lwip_htons>
 8009168:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800916c:	b2ad      	uxth	r5, r5
 800916e:	f8d8 a004 	ldr.w	sl, [r8, #4]
 8009172:	00c0      	lsls	r0, r0, #3
 8009174:	2300      	movs	r3, #0
 8009176:	eb05 0c00 	add.w	ip, r5, r0
 800917a:	f88a 3000 	strb.w	r3, [sl]
 800917e:	f88a 3001 	strb.w	r3, [sl, #1]
 8009182:	f88a 3002 	strb.w	r3, [sl, #2]
 8009186:	fa1f fc8c 	uxth.w	ip, ip
 800918a:	f88a 3003 	strb.w	r3, [sl, #3]
 800918e:	6863      	ldr	r3, [r4, #4]
 8009190:	f8aa c006 	strh.w	ip, [sl, #6]
 8009194:	f8aa 0004 	strh.w	r0, [sl, #4]
 8009198:	2b00      	cmp	r3, #0
 800919a:	f000 81ca 	beq.w	8009532 <ip4_reass+0x48a>
 800919e:	685d      	ldr	r5, [r3, #4]
 80091a0:	88aa      	ldrh	r2, [r5, #4]
 80091a2:	4290      	cmp	r0, r2
 80091a4:	f0c0 8196 	bcc.w	80094d4 <ip4_reass+0x42c>
 80091a8:	f000 8096 	beq.w	80092d8 <ip4_reass+0x230>
 80091ac:	f8b5 e006 	ldrh.w	lr, [r5, #6]
 80091b0:	4570      	cmp	r0, lr
 80091b2:	f0c0 8091 	bcc.w	80092d8 <ip4_reass+0x230>
 80091b6:	682a      	ldr	r2, [r5, #0]
 80091b8:	2701      	movs	r7, #1
 80091ba:	b192      	cbz	r2, 80091e2 <ip4_reass+0x13a>
 80091bc:	6853      	ldr	r3, [r2, #4]
 80091be:	8899      	ldrh	r1, [r3, #4]
 80091c0:	4288      	cmp	r0, r1
 80091c2:	f0c0 8083 	bcc.w	80092cc <ip4_reass+0x224>
 80091c6:	f000 8087 	beq.w	80092d8 <ip4_reass+0x230>
 80091ca:	88da      	ldrh	r2, [r3, #6]
 80091cc:	4290      	cmp	r0, r2
 80091ce:	f0c0 8083 	bcc.w	80092d8 <ip4_reass+0x230>
 80091d2:	461d      	mov	r5, r3
 80091d4:	4571      	cmp	r1, lr
 80091d6:	bf18      	it	ne
 80091d8:	2700      	movne	r7, #0
 80091da:	4696      	mov	lr, r2
 80091dc:	682a      	ldr	r2, [r5, #0]
 80091de:	2a00      	cmp	r2, #0
 80091e0:	d1ec      	bne.n	80091bc <ip4_reass+0x114>
 80091e2:	4570      	cmp	r0, lr
 80091e4:	f0c0 81b3 	bcc.w	800954e <ip4_reass+0x4a6>
 80091e8:	4570      	cmp	r0, lr
 80091ea:	f8c5 8000 	str.w	r8, [r5]
 80091ee:	9b01      	ldr	r3, [sp, #4]
 80091f0:	f000 80d7 	beq.w	80093a2 <ip4_reass+0x2fa>
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	f040 8162 	bne.w	80094be <ip4_reass+0x416>
 80091fa:	88b3      	ldrh	r3, [r6, #4]
 80091fc:	449b      	add	fp, r3
 80091fe:	f8a6 b004 	strh.w	fp, [r6, #4]
 8009202:	7fa3      	ldrb	r3, [r4, #30]
 8009204:	9a00      	ldr	r2, [sp, #0]
 8009206:	f043 0301 	orr.w	r3, r3, #1
 800920a:	4491      	add	r9, r2
 800920c:	77a3      	strb	r3, [r4, #30]
 800920e:	f8a4 901c 	strh.w	r9, [r4, #28]
 8009212:	f04f 0800 	mov.w	r8, #0
 8009216:	4640      	mov	r0, r8
 8009218:	b003      	add	sp, #12
 800921a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800921e:	2001      	movs	r0, #1
 8009220:	f7fc fc10 	bl	8005a44 <memp_malloc>
 8009224:	4604      	mov	r4, r0
 8009226:	b338      	cbz	r0, 8009278 <ip4_reass+0x1d0>
 8009228:	2100      	movs	r1, #0
 800922a:	6832      	ldr	r2, [r6, #0]
 800922c:	2703      	movs	r7, #3
 800922e:	f104 0008 	add.w	r0, r4, #8
 8009232:	60a1      	str	r1, [r4, #8]
 8009234:	61e1      	str	r1, [r4, #28]
 8009236:	6061      	str	r1, [r4, #4]
 8009238:	60e1      	str	r1, [r4, #12]
 800923a:	6121      	str	r1, [r4, #16]
 800923c:	6161      	str	r1, [r4, #20]
 800923e:	61a1      	str	r1, [r4, #24]
 8009240:	77e7      	strb	r7, [r4, #31]
 8009242:	6022      	str	r2, [r4, #0]
 8009244:	682a      	ldr	r2, [r5, #0]
 8009246:	f8d5 c004 	ldr.w	ip, [r5, #4]
 800924a:	68af      	ldr	r7, [r5, #8]
 800924c:	68e9      	ldr	r1, [r5, #12]
 800924e:	60a2      	str	r2, [r4, #8]
 8009250:	f8c0 c004 	str.w	ip, [r0, #4]
 8009254:	6087      	str	r7, [r0, #8]
 8009256:	60c1      	str	r1, [r0, #12]
 8009258:	692a      	ldr	r2, [r5, #16]
 800925a:	6034      	str	r4, [r6, #0]
 800925c:	6102      	str	r2, [r0, #16]
 800925e:	e766      	b.n	800912e <ip4_reass+0x86>
 8009260:	2800      	cmp	r0, #0
 8009262:	f000 80ad 	beq.w	80093c0 <ip4_reass+0x318>
 8009266:	f7ff fe6b 	bl	8008f40 <ip_reass_free_complete_datagram>
 800926a:	2f01      	cmp	r7, #1
 800926c:	4404      	add	r4, r0
 800926e:	f340 80ac 	ble.w	80093ca <ip4_reass+0x322>
 8009272:	45a3      	cmp	fp, r4
 8009274:	f340 80a9 	ble.w	80093ca <ip4_reass+0x322>
 8009278:	6833      	ldr	r3, [r6, #0]
 800927a:	2b00      	cmp	r3, #0
 800927c:	f000 80a5 	beq.w	80093ca <ip4_reass+0x322>
 8009280:	f8d5 e00c 	ldr.w	lr, [r5, #12]
 8009284:	f04f 0c00 	mov.w	ip, #0
 8009288:	695a      	ldr	r2, [r3, #20]
 800928a:	4661      	mov	r1, ip
 800928c:	4660      	mov	r0, ip
 800928e:	4572      	cmp	r2, lr
 8009290:	4667      	mov	r7, ip
 8009292:	d010      	beq.n	80092b6 <ip4_reass+0x20e>
 8009294:	3701      	adds	r7, #1
 8009296:	b120      	cbz	r0, 80092a2 <ip4_reass+0x1fa>
 8009298:	f893 a01f 	ldrb.w	sl, [r3, #31]
 800929c:	7fc2      	ldrb	r2, [r0, #31]
 800929e:	4592      	cmp	sl, r2
 80092a0:	d801      	bhi.n	80092a6 <ip4_reass+0x1fe>
 80092a2:	4661      	mov	r1, ip
 80092a4:	4618      	mov	r0, r3
 80092a6:	681a      	ldr	r2, [r3, #0]
 80092a8:	469c      	mov	ip, r3
 80092aa:	2a00      	cmp	r2, #0
 80092ac:	d0d8      	beq.n	8009260 <ip4_reass+0x1b8>
 80092ae:	4613      	mov	r3, r2
 80092b0:	695a      	ldr	r2, [r3, #20]
 80092b2:	4572      	cmp	r2, lr
 80092b4:	d1ee      	bne.n	8009294 <ip4_reass+0x1ec>
 80092b6:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80092ba:	699a      	ldr	r2, [r3, #24]
 80092bc:	4552      	cmp	r2, sl
 80092be:	d1e9      	bne.n	8009294 <ip4_reass+0x1ec>
 80092c0:	f8b3 a00c 	ldrh.w	sl, [r3, #12]
 80092c4:	88aa      	ldrh	r2, [r5, #4]
 80092c6:	4592      	cmp	sl, r2
 80092c8:	d1e4      	bne.n	8009294 <ip4_reass+0x1ec>
 80092ca:	e7ec      	b.n	80092a6 <ip4_reass+0x1fe>
 80092cc:	4570      	cmp	r0, lr
 80092ce:	f8ca 2000 	str.w	r2, [sl]
 80092d2:	d301      	bcc.n	80092d8 <ip4_reass+0x230>
 80092d4:	458c      	cmp	ip, r1
 80092d6:	d987      	bls.n	80091e8 <ip4_reass+0x140>
 80092d8:	4640      	mov	r0, r8
 80092da:	f7fc ffa7 	bl	800622c <pbuf_clen>
 80092de:	88b3      	ldrh	r3, [r6, #4]
 80092e0:	1a1b      	subs	r3, r3, r0
 80092e2:	4640      	mov	r0, r8
 80092e4:	80b3      	strh	r3, [r6, #4]
 80092e6:	f7fc fda9 	bl	8005e3c <pbuf_free>
 80092ea:	4640      	mov	r0, r8
 80092ec:	f04f 0800 	mov.w	r8, #0
 80092f0:	f7fc fda4 	bl	8005e3c <pbuf_free>
 80092f4:	4640      	mov	r0, r8
 80092f6:	b003      	add	sp, #12
 80092f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092fc:	2700      	movs	r7, #0
 80092fe:	6833      	ldr	r3, [r6, #0]
 8009300:	b37b      	cbz	r3, 8009362 <ip4_reass+0x2ba>
 8009302:	f8d5 e00c 	ldr.w	lr, [r5, #12]
 8009306:	f04f 0c00 	mov.w	ip, #0
 800930a:	695a      	ldr	r2, [r3, #20]
 800930c:	4661      	mov	r1, ip
 800930e:	4660      	mov	r0, ip
 8009310:	4572      	cmp	r2, lr
 8009312:	4664      	mov	r4, ip
 8009314:	d00f      	beq.n	8009336 <ip4_reass+0x28e>
 8009316:	3401      	adds	r4, #1
 8009318:	b120      	cbz	r0, 8009324 <ip4_reass+0x27c>
 800931a:	f893 a01f 	ldrb.w	sl, [r3, #31]
 800931e:	7fc2      	ldrb	r2, [r0, #31]
 8009320:	4592      	cmp	sl, r2
 8009322:	d801      	bhi.n	8009328 <ip4_reass+0x280>
 8009324:	4661      	mov	r1, ip
 8009326:	4618      	mov	r0, r3
 8009328:	681a      	ldr	r2, [r3, #0]
 800932a:	469c      	mov	ip, r3
 800932c:	b18a      	cbz	r2, 8009352 <ip4_reass+0x2aa>
 800932e:	4613      	mov	r3, r2
 8009330:	695a      	ldr	r2, [r3, #20]
 8009332:	4572      	cmp	r2, lr
 8009334:	d1ef      	bne.n	8009316 <ip4_reass+0x26e>
 8009336:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800933a:	699a      	ldr	r2, [r3, #24]
 800933c:	4552      	cmp	r2, sl
 800933e:	d1ea      	bne.n	8009316 <ip4_reass+0x26e>
 8009340:	f8b3 a00c 	ldrh.w	sl, [r3, #12]
 8009344:	88aa      	ldrh	r2, [r5, #4]
 8009346:	4592      	cmp	sl, r2
 8009348:	d1e5      	bne.n	8009316 <ip4_reass+0x26e>
 800934a:	681a      	ldr	r2, [r3, #0]
 800934c:	469c      	mov	ip, r3
 800934e:	2a00      	cmp	r2, #0
 8009350:	d1ed      	bne.n	800932e <ip4_reass+0x286>
 8009352:	b170      	cbz	r0, 8009372 <ip4_reass+0x2ca>
 8009354:	f7ff fdf4 	bl	8008f40 <ip_reass_free_complete_datagram>
 8009358:	2c01      	cmp	r4, #1
 800935a:	4407      	add	r7, r0
 800935c:	dd01      	ble.n	8009362 <ip4_reass+0x2ba>
 800935e:	45bb      	cmp	fp, r7
 8009360:	dccd      	bgt.n	80092fe <ip4_reass+0x256>
 8009362:	2f00      	cmp	r7, #0
 8009364:	d0c1      	beq.n	80092ea <ip4_reass+0x242>
 8009366:	88b3      	ldrh	r3, [r6, #4]
 8009368:	445b      	add	r3, fp
 800936a:	2b0a      	cmp	r3, #10
 800936c:	f77f aec2 	ble.w	80090f4 <ip4_reass+0x4c>
 8009370:	e7bb      	b.n	80092ea <ip4_reass+0x242>
 8009372:	45bb      	cmp	fp, r7
 8009374:	ddf5      	ble.n	8009362 <ip4_reass+0x2ba>
 8009376:	2c01      	cmp	r4, #1
 8009378:	dcc1      	bgt.n	80092fe <ip4_reass+0x256>
 800937a:	e7f2      	b.n	8009362 <ip4_reass+0x2ba>
 800937c:	89e0      	ldrh	r0, [r4, #14]
 800937e:	f7fc f8c9 	bl	8005514 <lwip_htons>
 8009382:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8009386:	2800      	cmp	r0, #0
 8009388:	f43f aed1 	beq.w	800912e <ip4_reass+0x86>
 800938c:	682a      	ldr	r2, [r5, #0]
 800938e:	686f      	ldr	r7, [r5, #4]
 8009390:	68a8      	ldr	r0, [r5, #8]
 8009392:	68e9      	ldr	r1, [r5, #12]
 8009394:	60a2      	str	r2, [r4, #8]
 8009396:	60e7      	str	r7, [r4, #12]
 8009398:	6120      	str	r0, [r4, #16]
 800939a:	6161      	str	r1, [r4, #20]
 800939c:	692a      	ldr	r2, [r5, #16]
 800939e:	61a2      	str	r2, [r4, #24]
 80093a0:	e6c5      	b.n	800912e <ip4_reass+0x86>
 80093a2:	b1e3      	cbz	r3, 80093de <ip4_reass+0x336>
 80093a4:	7fa3      	ldrb	r3, [r4, #30]
 80093a6:	07d9      	lsls	r1, r3, #31
 80093a8:	f140 808d 	bpl.w	80094c6 <ip4_reass+0x41e>
 80093ac:	2f00      	cmp	r7, #0
 80093ae:	f040 80f7 	bne.w	80095a0 <ip4_reass+0x4f8>
 80093b2:	88b3      	ldrh	r3, [r6, #4]
 80093b4:	449b      	add	fp, r3
 80093b6:	f8a6 b004 	strh.w	fp, [r6, #4]
 80093ba:	e72a      	b.n	8009212 <ip4_reass+0x16a>
 80093bc:	200033e8 	.word	0x200033e8
 80093c0:	45a3      	cmp	fp, r4
 80093c2:	dd02      	ble.n	80093ca <ip4_reass+0x322>
 80093c4:	2f01      	cmp	r7, #1
 80093c6:	f73f af57 	bgt.w	8009278 <ip4_reass+0x1d0>
 80093ca:	45a3      	cmp	fp, r4
 80093cc:	dc8d      	bgt.n	80092ea <ip4_reass+0x242>
 80093ce:	2001      	movs	r0, #1
 80093d0:	f7fc fb38 	bl	8005a44 <memp_malloc>
 80093d4:	4604      	mov	r4, r0
 80093d6:	2800      	cmp	r0, #0
 80093d8:	f47f af26 	bne.w	8009228 <ip4_reass+0x180>
 80093dc:	e785      	b.n	80092ea <ip4_reass+0x242>
 80093de:	2f00      	cmp	r7, #0
 80093e0:	f43f af0b 	beq.w	80091fa <ip4_reass+0x152>
 80093e4:	6863      	ldr	r3, [r4, #4]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	f43f af07 	beq.w	80091fa <ip4_reass+0x152>
 80093ec:	6858      	ldr	r0, [r3, #4]
 80093ee:	8883      	ldrh	r3, [r0, #4]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	f040 8081 	bne.w	80094f8 <ip4_reass+0x450>
 80093f6:	f8da 3000 	ldr.w	r3, [sl]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	f000 80c6 	beq.w	800958c <ip4_reass+0x4e4>
 8009400:	685d      	ldr	r5, [r3, #4]
 8009402:	f8ba 2006 	ldrh.w	r2, [sl, #6]
 8009406:	88ab      	ldrh	r3, [r5, #4]
 8009408:	429a      	cmp	r2, r3
 800940a:	d006      	beq.n	800941a <ip4_reass+0x372>
 800940c:	e074      	b.n	80094f8 <ip4_reass+0x450>
 800940e:	685b      	ldr	r3, [r3, #4]
 8009410:	88e9      	ldrh	r1, [r5, #6]
 8009412:	889a      	ldrh	r2, [r3, #4]
 8009414:	4291      	cmp	r1, r2
 8009416:	d16f      	bne.n	80094f8 <ip4_reass+0x450>
 8009418:	461d      	mov	r5, r3
 800941a:	682b      	ldr	r3, [r5, #0]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d1f6      	bne.n	800940e <ip4_reass+0x366>
 8009420:	4285      	cmp	r5, r0
 8009422:	f000 80a0 	beq.w	8009566 <ip4_reass+0x4be>
 8009426:	88b3      	ldrh	r3, [r6, #4]
 8009428:	449b      	add	fp, r3
 800942a:	9b01      	ldr	r3, [sp, #4]
 800942c:	f8a6 b004 	strh.w	fp, [r6, #4]
 8009430:	2b00      	cmp	r3, #0
 8009432:	f000 80ad 	beq.w	8009590 <ip4_reass+0x4e8>
 8009436:	8ba2      	ldrh	r2, [r4, #28]
 8009438:	4623      	mov	r3, r4
 800943a:	3214      	adds	r2, #20
 800943c:	6861      	ldr	r1, [r4, #4]
 800943e:	83a2      	strh	r2, [r4, #28]
 8009440:	f853 2f08 	ldr.w	r2, [r3, #8]!
 8009444:	684f      	ldr	r7, [r1, #4]
 8009446:	685d      	ldr	r5, [r3, #4]
 8009448:	6898      	ldr	r0, [r3, #8]
 800944a:	68d9      	ldr	r1, [r3, #12]
 800944c:	607d      	str	r5, [r7, #4]
 800944e:	60b8      	str	r0, [r7, #8]
 8009450:	60f9      	str	r1, [r7, #12]
 8009452:	683d      	ldr	r5, [r7, #0]
 8009454:	603a      	str	r2, [r7, #0]
 8009456:	691a      	ldr	r2, [r3, #16]
 8009458:	613a      	str	r2, [r7, #16]
 800945a:	8ba0      	ldrh	r0, [r4, #28]
 800945c:	f7fc f85a 	bl	8005514 <lwip_htons>
 8009460:	2300      	movs	r3, #0
 8009462:	8078      	strh	r0, [r7, #2]
 8009464:	71bb      	strb	r3, [r7, #6]
 8009466:	71fb      	strb	r3, [r7, #7]
 8009468:	72bb      	strb	r3, [r7, #10]
 800946a:	72fb      	strb	r3, [r7, #11]
 800946c:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8009470:	b165      	cbz	r5, 800948c <ip4_reass+0x3e4>
 8009472:	686f      	ldr	r7, [r5, #4]
 8009474:	f06f 0113 	mvn.w	r1, #19
 8009478:	4628      	mov	r0, r5
 800947a:	f7fc fc2f 	bl	8005cdc <pbuf_header>
 800947e:	4629      	mov	r1, r5
 8009480:	4640      	mov	r0, r8
 8009482:	f7fc fefd 	bl	8006280 <pbuf_cat>
 8009486:	683d      	ldr	r5, [r7, #0]
 8009488:	2d00      	cmp	r5, #0
 800948a:	d1f2      	bne.n	8009472 <ip4_reass+0x3ca>
 800948c:	6832      	ldr	r2, [r6, #0]
 800948e:	42a2      	cmp	r2, r4
 8009490:	d04c      	beq.n	800952c <ip4_reass+0x484>
 8009492:	b14a      	cbz	r2, 80094a8 <ip4_reass+0x400>
 8009494:	6813      	ldr	r3, [r2, #0]
 8009496:	429c      	cmp	r4, r3
 8009498:	d037      	beq.n	800950a <ip4_reass+0x462>
 800949a:	b12b      	cbz	r3, 80094a8 <ip4_reass+0x400>
 800949c:	681a      	ldr	r2, [r3, #0]
 800949e:	42a2      	cmp	r2, r4
 80094a0:	d034      	beq.n	800950c <ip4_reass+0x464>
 80094a2:	4613      	mov	r3, r2
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d1f9      	bne.n	800949c <ip4_reass+0x3f4>
 80094a8:	4b40      	ldr	r3, [pc, #256]	; (80095ac <ip4_reass+0x504>)
 80094aa:	f240 1245 	movw	r2, #325	; 0x145
 80094ae:	4940      	ldr	r1, [pc, #256]	; (80095b0 <ip4_reass+0x508>)
 80094b0:	4840      	ldr	r0, [pc, #256]	; (80095b4 <ip4_reass+0x50c>)
 80094b2:	f006 fa61 	bl	800f978 <iprintf>
 80094b6:	6822      	ldr	r2, [r4, #0]
 80094b8:	2300      	movs	r3, #0
 80094ba:	601a      	str	r2, [r3, #0]
 80094bc:	deff      	udf	#255	; 0xff
 80094be:	7fa3      	ldrb	r3, [r4, #30]
 80094c0:	07da      	lsls	r2, r3, #31
 80094c2:	f53f af76 	bmi.w	80093b2 <ip4_reass+0x30a>
 80094c6:	88b3      	ldrh	r3, [r6, #4]
 80094c8:	f04f 0800 	mov.w	r8, #0
 80094cc:	449b      	add	fp, r3
 80094ce:	f8a6 b004 	strh.w	fp, [r6, #4]
 80094d2:	e70f      	b.n	80092f4 <ip4_reass+0x24c>
 80094d4:	4594      	cmp	ip, r2
 80094d6:	f8ca 3000 	str.w	r3, [sl]
 80094da:	f63f aefd 	bhi.w	80092d8 <ip4_reass+0x230>
 80094de:	9b01      	ldr	r3, [sp, #4]
 80094e0:	f8c4 8004 	str.w	r8, [r4, #4]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	f43f af7d 	beq.w	80093e4 <ip4_reass+0x33c>
 80094ea:	7fa3      	ldrb	r3, [r4, #30]
 80094ec:	07db      	lsls	r3, r3, #31
 80094ee:	d5ea      	bpl.n	80094c6 <ip4_reass+0x41e>
 80094f0:	4643      	mov	r3, r8
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	f47f af7a 	bne.w	80093ec <ip4_reass+0x344>
 80094f8:	88b3      	ldrh	r3, [r6, #4]
 80094fa:	449b      	add	fp, r3
 80094fc:	9b01      	ldr	r3, [sp, #4]
 80094fe:	f8a6 b004 	strh.w	fp, [r6, #4]
 8009502:	2b00      	cmp	r3, #0
 8009504:	f43f ae7d 	beq.w	8009202 <ip4_reass+0x15a>
 8009508:	e683      	b.n	8009212 <ip4_reass+0x16a>
 800950a:	4613      	mov	r3, r2
 800950c:	6822      	ldr	r2, [r4, #0]
 800950e:	601a      	str	r2, [r3, #0]
 8009510:	4621      	mov	r1, r4
 8009512:	2001      	movs	r0, #1
 8009514:	f7fc fac8 	bl	8005aa8 <memp_free>
 8009518:	4640      	mov	r0, r8
 800951a:	f7fc fe87 	bl	800622c <pbuf_clen>
 800951e:	88b3      	ldrh	r3, [r6, #4]
 8009520:	1a18      	subs	r0, r3, r0
 8009522:	80b0      	strh	r0, [r6, #4]
 8009524:	4640      	mov	r0, r8
 8009526:	b003      	add	sp, #12
 8009528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800952c:	6823      	ldr	r3, [r4, #0]
 800952e:	6033      	str	r3, [r6, #0]
 8009530:	e7ee      	b.n	8009510 <ip4_reass+0x468>
 8009532:	9b01      	ldr	r3, [sp, #4]
 8009534:	f8c4 8004 	str.w	r8, [r4, #4]
 8009538:	2b00      	cmp	r3, #0
 800953a:	f43f af53 	beq.w	80093e4 <ip4_reass+0x33c>
 800953e:	7fa3      	ldrb	r3, [r4, #30]
 8009540:	07d8      	lsls	r0, r3, #31
 8009542:	d5c0      	bpl.n	80094c6 <ip4_reass+0x41e>
 8009544:	4643      	mov	r3, r8
 8009546:	2b00      	cmp	r3, #0
 8009548:	f47f af50 	bne.w	80093ec <ip4_reass+0x344>
 800954c:	e731      	b.n	80093b2 <ip4_reass+0x30a>
 800954e:	4b17      	ldr	r3, [pc, #92]	; (80095ac <ip4_reass+0x504>)
 8009550:	f240 12ab 	movw	r2, #427	; 0x1ab
 8009554:	4918      	ldr	r1, [pc, #96]	; (80095b8 <ip4_reass+0x510>)
 8009556:	4817      	ldr	r0, [pc, #92]	; (80095b4 <ip4_reass+0x50c>)
 8009558:	f006 fa0e 	bl	800f978 <iprintf>
 800955c:	f8b5 e006 	ldrh.w	lr, [r5, #6]
 8009560:	f8ba 0004 	ldrh.w	r0, [sl, #4]
 8009564:	e640      	b.n	80091e8 <ip4_reass+0x140>
 8009566:	4b11      	ldr	r3, [pc, #68]	; (80095ac <ip4_reass+0x504>)
 8009568:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800956c:	4913      	ldr	r1, [pc, #76]	; (80095bc <ip4_reass+0x514>)
 800956e:	4811      	ldr	r0, [pc, #68]	; (80095b4 <ip4_reass+0x50c>)
 8009570:	f006 fa02 	bl	800f978 <iprintf>
 8009574:	682b      	ldr	r3, [r5, #0]
 8009576:	2b00      	cmp	r3, #0
 8009578:	f43f af55 	beq.w	8009426 <ip4_reass+0x37e>
 800957c:	4b0b      	ldr	r3, [pc, #44]	; (80095ac <ip4_reass+0x504>)
 800957e:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8009582:	490f      	ldr	r1, [pc, #60]	; (80095c0 <ip4_reass+0x518>)
 8009584:	480b      	ldr	r0, [pc, #44]	; (80095b4 <ip4_reass+0x50c>)
 8009586:	f006 f9f7 	bl	800f978 <iprintf>
 800958a:	e74c      	b.n	8009426 <ip4_reass+0x37e>
 800958c:	4655      	mov	r5, sl
 800958e:	e747      	b.n	8009420 <ip4_reass+0x378>
 8009590:	7fa3      	ldrb	r3, [r4, #30]
 8009592:	9a00      	ldr	r2, [sp, #0]
 8009594:	f043 0301 	orr.w	r3, r3, #1
 8009598:	444a      	add	r2, r9
 800959a:	77a3      	strb	r3, [r4, #30]
 800959c:	b292      	uxth	r2, r2
 800959e:	e74b      	b.n	8009438 <ip4_reass+0x390>
 80095a0:	6863      	ldr	r3, [r4, #4]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	f47f af22 	bne.w	80093ec <ip4_reass+0x344>
 80095a8:	e7a6      	b.n	80094f8 <ip4_reass+0x450>
 80095aa:	bf00      	nop
 80095ac:	08011d18 	.word	0x08011d18
 80095b0:	08011da0 	.word	0x08011da0
 80095b4:	08010e34 	.word	0x08010e34
 80095b8:	08011dd8 	.word	0x08011dd8
 80095bc:	08011df8 	.word	0x08011df8
 80095c0:	08011e08 	.word	0x08011e08

080095c4 <ip4_frag>:
 80095c4:	8ccb      	ldrh	r3, [r1, #38]	; 0x26
 80095c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095ca:	f1b3 0614 	subs.w	r6, r3, #20
 80095ce:	b08b      	sub	sp, #44	; 0x2c
 80095d0:	4605      	mov	r5, r0
 80095d2:	bf48      	it	mi
 80095d4:	f1a3 060d 	submi.w	r6, r3, #13
 80095d8:	6843      	ldr	r3, [r0, #4]
 80095da:	9107      	str	r1, [sp, #28]
 80095dc:	f893 8000 	ldrb.w	r8, [r3]
 80095e0:	10f6      	asrs	r6, r6, #3
 80095e2:	9302      	str	r3, [sp, #8]
 80095e4:	f008 080f 	and.w	r8, r8, #15
 80095e8:	b2b3      	uxth	r3, r6
 80095ea:	9209      	str	r2, [sp, #36]	; 0x24
 80095ec:	ea4f 0888 	mov.w	r8, r8, lsl #2
 80095f0:	9308      	str	r3, [sp, #32]
 80095f2:	f1b8 0f14 	cmp.w	r8, #20
 80095f6:	f040 80de 	bne.w	80097b6 <ip4_frag+0x1f2>
 80095fa:	9b02      	ldr	r3, [sp, #8]
 80095fc:	88d8      	ldrh	r0, [r3, #6]
 80095fe:	f7fb ff89 	bl	8005514 <lwip_htons>
 8009602:	f3c0 030c 	ubfx	r3, r0, #0, #13
 8009606:	f410 5400 	ands.w	r4, r0, #8192	; 0x2000
 800960a:	9304      	str	r3, [sp, #16]
 800960c:	f040 80dd 	bne.w	80097ca <ip4_frag+0x206>
 8009610:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 8009614:	f1aa 0a14 	sub.w	sl, sl, #20
 8009618:	fa1f fa8a 	uxth.w	sl, sl
 800961c:	f1ba 0f00 	cmp.w	sl, #0
 8009620:	f000 8087 	beq.w	8009732 <ip4_frag+0x16e>
 8009624:	b2b6      	uxth	r6, r6
 8009626:	00f3      	lsls	r3, r6, #3
 8009628:	9306      	str	r3, [sp, #24]
 800962a:	9b06      	ldr	r3, [sp, #24]
 800962c:	2200      	movs	r2, #0
 800962e:	2114      	movs	r1, #20
 8009630:	2002      	movs	r0, #2
 8009632:	4553      	cmp	r3, sl
 8009634:	bfa8      	it	ge
 8009636:	4653      	movge	r3, sl
 8009638:	461e      	mov	r6, r3
 800963a:	f7fc fc73 	bl	8005f24 <pbuf_alloc>
 800963e:	4683      	mov	fp, r0
 8009640:	b2b3      	uxth	r3, r6
 8009642:	9303      	str	r3, [sp, #12]
 8009644:	2800      	cmp	r0, #0
 8009646:	f000 80b3 	beq.w	80097b0 <ip4_frag+0x1ec>
 800964a:	896b      	ldrh	r3, [r5, #10]
 800964c:	2b13      	cmp	r3, #19
 800964e:	f240 8082 	bls.w	8009756 <ip4_frag+0x192>
 8009652:	9902      	ldr	r1, [sp, #8]
 8009654:	f8db 3004 	ldr.w	r3, [fp, #4]
 8009658:	680a      	ldr	r2, [r1, #0]
 800965a:	684f      	ldr	r7, [r1, #4]
 800965c:	6888      	ldr	r0, [r1, #8]
 800965e:	68c9      	ldr	r1, [r1, #12]
 8009660:	601a      	str	r2, [r3, #0]
 8009662:	60d9      	str	r1, [r3, #12]
 8009664:	9902      	ldr	r1, [sp, #8]
 8009666:	605f      	str	r7, [r3, #4]
 8009668:	6098      	str	r0, [r3, #8]
 800966a:	690a      	ldr	r2, [r1, #16]
 800966c:	611a      	str	r2, [r3, #16]
 800966e:	f8db 3004 	ldr.w	r3, [fp, #4]
 8009672:	9305      	str	r3, [sp, #20]
 8009674:	b366      	cbz	r6, 80096d0 <ip4_frag+0x10c>
 8009676:	9e03      	ldr	r6, [sp, #12]
 8009678:	896c      	ldrh	r4, [r5, #10]
 800967a:	2002      	movs	r0, #2
 800967c:	eba4 0408 	sub.w	r4, r4, r8
 8009680:	b2a4      	uxth	r4, r4
 8009682:	42b4      	cmp	r4, r6
 8009684:	bf28      	it	cs
 8009686:	4634      	movcs	r4, r6
 8009688:	2c00      	cmp	r4, #0
 800968a:	d054      	beq.n	8009736 <ip4_frag+0x172>
 800968c:	f7fc f9da 	bl	8005a44 <memp_malloc>
 8009690:	2202      	movs	r2, #2
 8009692:	4681      	mov	r9, r0
 8009694:	4621      	mov	r1, r4
 8009696:	4603      	mov	r3, r0
 8009698:	2800      	cmp	r0, #0
 800969a:	d054      	beq.n	8009746 <ip4_frag+0x182>
 800969c:	9401      	str	r4, [sp, #4]
 800969e:	2004      	movs	r0, #4
 80096a0:	686f      	ldr	r7, [r5, #4]
 80096a2:	4447      	add	r7, r8
 80096a4:	9700      	str	r7, [sp, #0]
 80096a6:	f7fc fae5 	bl	8005c74 <pbuf_alloced_custom>
 80096aa:	4607      	mov	r7, r0
 80096ac:	2800      	cmp	r0, #0
 80096ae:	d046      	beq.n	800973e <ip4_frag+0x17a>
 80096b0:	4628      	mov	r0, r5
 80096b2:	1b36      	subs	r6, r6, r4
 80096b4:	f7fc fdc6 	bl	8006244 <pbuf_ref>
 80096b8:	4b49      	ldr	r3, [pc, #292]	; (80097e0 <ip4_frag+0x21c>)
 80096ba:	b2b6      	uxth	r6, r6
 80096bc:	f8c9 5014 	str.w	r5, [r9, #20]
 80096c0:	f8c9 3010 	str.w	r3, [r9, #16]
 80096c4:	4639      	mov	r1, r7
 80096c6:	4658      	mov	r0, fp
 80096c8:	f7fc fdda 	bl	8006280 <pbuf_cat>
 80096cc:	2e00      	cmp	r6, #0
 80096ce:	d132      	bne.n	8009736 <ip4_frag+0x172>
 80096d0:	9e07      	ldr	r6, [sp, #28]
 80096d2:	44a0      	add	r8, r4
 80096d4:	9f04      	ldr	r7, [sp, #16]
 80096d6:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 80096d8:	fa1f f888 	uxth.w	r8, r8
 80096dc:	f3c7 000c 	ubfx	r0, r7, #0, #13
 80096e0:	3b13      	subs	r3, #19
 80096e2:	459a      	cmp	sl, r3
 80096e4:	db3f      	blt.n	8009766 <ip4_frag+0x1a2>
 80096e6:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
 80096ea:	f7fb ff13 	bl	8005514 <lwip_htons>
 80096ee:	9b03      	ldr	r3, [sp, #12]
 80096f0:	9a05      	ldr	r2, [sp, #20]
 80096f2:	3314      	adds	r3, #20
 80096f4:	80d0      	strh	r0, [r2, #6]
 80096f6:	b298      	uxth	r0, r3
 80096f8:	f7fb ff0c 	bl	8005514 <lwip_htons>
 80096fc:	9905      	ldr	r1, [sp, #20]
 80096fe:	2300      	movs	r3, #0
 8009700:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009702:	8048      	strh	r0, [r1, #2]
 8009704:	4608      	mov	r0, r1
 8009706:	728b      	strb	r3, [r1, #10]
 8009708:	4659      	mov	r1, fp
 800970a:	72c3      	strb	r3, [r0, #11]
 800970c:	4630      	mov	r0, r6
 800970e:	6973      	ldr	r3, [r6, #20]
 8009710:	4798      	blx	r3
 8009712:	4658      	mov	r0, fp
 8009714:	f7fc fb92 	bl	8005e3c <pbuf_free>
 8009718:	9b03      	ldr	r3, [sp, #12]
 800971a:	9a08      	ldr	r2, [sp, #32]
 800971c:	ebaa 0a03 	sub.w	sl, sl, r3
 8009720:	4417      	add	r7, r2
 8009722:	fa1f fa8a 	uxth.w	sl, sl
 8009726:	b2bb      	uxth	r3, r7
 8009728:	9304      	str	r3, [sp, #16]
 800972a:	f1ba 0f00 	cmp.w	sl, #0
 800972e:	f47f af7c 	bne.w	800962a <ip4_frag+0x66>
 8009732:	2000      	movs	r0, #0
 8009734:	e00c      	b.n	8009750 <ip4_frag+0x18c>
 8009736:	682d      	ldr	r5, [r5, #0]
 8009738:	f04f 0800 	mov.w	r8, #0
 800973c:	e79c      	b.n	8009678 <ip4_frag+0xb4>
 800973e:	4649      	mov	r1, r9
 8009740:	2002      	movs	r0, #2
 8009742:	f7fc f9b1 	bl	8005aa8 <memp_free>
 8009746:	4658      	mov	r0, fp
 8009748:	f7fc fb78 	bl	8005e3c <pbuf_free>
 800974c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009750:	b00b      	add	sp, #44	; 0x2c
 8009752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009756:	4b23      	ldr	r3, [pc, #140]	; (80097e4 <ip4_frag+0x220>)
 8009758:	f240 3209 	movw	r2, #777	; 0x309
 800975c:	4922      	ldr	r1, [pc, #136]	; (80097e8 <ip4_frag+0x224>)
 800975e:	4823      	ldr	r0, [pc, #140]	; (80097ec <ip4_frag+0x228>)
 8009760:	f006 f90a 	bl	800f978 <iprintf>
 8009764:	e775      	b.n	8009652 <ip4_frag+0x8e>
 8009766:	f7fb fed5 	bl	8005514 <lwip_htons>
 800976a:	9f03      	ldr	r7, [sp, #12]
 800976c:	9e05      	ldr	r6, [sp, #20]
 800976e:	463b      	mov	r3, r7
 8009770:	ebaa 0a07 	sub.w	sl, sl, r7
 8009774:	80f0      	strh	r0, [r6, #6]
 8009776:	3314      	adds	r3, #20
 8009778:	fa1f fa8a 	uxth.w	sl, sl
 800977c:	b298      	uxth	r0, r3
 800977e:	f7fb fec9 	bl	8005514 <lwip_htons>
 8009782:	2300      	movs	r3, #0
 8009784:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009786:	4659      	mov	r1, fp
 8009788:	72b3      	strb	r3, [r6, #10]
 800978a:	72f3      	strb	r3, [r6, #11]
 800978c:	9b07      	ldr	r3, [sp, #28]
 800978e:	8070      	strh	r0, [r6, #2]
 8009790:	4618      	mov	r0, r3
 8009792:	695b      	ldr	r3, [r3, #20]
 8009794:	4798      	blx	r3
 8009796:	4658      	mov	r0, fp
 8009798:	f7fc fb50 	bl	8005e3c <pbuf_free>
 800979c:	9b04      	ldr	r3, [sp, #16]
 800979e:	9a08      	ldr	r2, [sp, #32]
 80097a0:	4413      	add	r3, r2
 80097a2:	b29b      	uxth	r3, r3
 80097a4:	9304      	str	r3, [sp, #16]
 80097a6:	f1ba 0f00 	cmp.w	sl, #0
 80097aa:	f47f af3e 	bne.w	800962a <ip4_frag+0x66>
 80097ae:	e7c0      	b.n	8009732 <ip4_frag+0x16e>
 80097b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80097b4:	e7cc      	b.n	8009750 <ip4_frag+0x18c>
 80097b6:	4b0b      	ldr	r3, [pc, #44]	; (80097e4 <ip4_frag+0x220>)
 80097b8:	f240 22e1 	movw	r2, #737	; 0x2e1
 80097bc:	490c      	ldr	r1, [pc, #48]	; (80097f0 <ip4_frag+0x22c>)
 80097be:	480b      	ldr	r0, [pc, #44]	; (80097ec <ip4_frag+0x228>)
 80097c0:	f006 f8da 	bl	800f978 <iprintf>
 80097c4:	f06f 0005 	mvn.w	r0, #5
 80097c8:	e7c2      	b.n	8009750 <ip4_frag+0x18c>
 80097ca:	4b06      	ldr	r3, [pc, #24]	; (80097e4 <ip4_frag+0x220>)
 80097cc:	f240 22e6 	movw	r2, #742	; 0x2e6
 80097d0:	4908      	ldr	r1, [pc, #32]	; (80097f4 <ip4_frag+0x230>)
 80097d2:	4806      	ldr	r0, [pc, #24]	; (80097ec <ip4_frag+0x228>)
 80097d4:	f006 f8d0 	bl	800f978 <iprintf>
 80097d8:	f06f 0005 	mvn.w	r0, #5
 80097dc:	e7b8      	b.n	8009750 <ip4_frag+0x18c>
 80097de:	bf00      	nop
 80097e0:	08008f09 	.word	0x08008f09
 80097e4:	08011d18 	.word	0x08011d18
 80097e8:	08011e70 	.word	0x08011e70
 80097ec:	08010e34 	.word	0x08010e34
 80097f0:	08011e2c 	.word	0x08011e2c
 80097f4:	08011e54 	.word	0x08011e54

080097f8 <ethernet_input>:
 80097f8:	8943      	ldrh	r3, [r0, #10]
 80097fa:	2b0e      	cmp	r3, #14
 80097fc:	b570      	push	{r4, r5, r6, lr}
 80097fe:	4604      	mov	r4, r0
 8009800:	d919      	bls.n	8009836 <ethernet_input+0x3e>
 8009802:	6840      	ldr	r0, [r0, #4]
 8009804:	460e      	mov	r6, r1
 8009806:	7803      	ldrb	r3, [r0, #0]
 8009808:	8985      	ldrh	r5, [r0, #12]
 800980a:	07d9      	lsls	r1, r3, #31
 800980c:	d50a      	bpl.n	8009824 <ethernet_input+0x2c>
 800980e:	2b01      	cmp	r3, #1
 8009810:	d032      	beq.n	8009878 <ethernet_input+0x80>
 8009812:	2206      	movs	r2, #6
 8009814:	491e      	ldr	r1, [pc, #120]	; (8009890 <ethernet_input+0x98>)
 8009816:	f006 f88d 	bl	800f934 <memcmp>
 800981a:	b918      	cbnz	r0, 8009824 <ethernet_input+0x2c>
 800981c:	7b63      	ldrb	r3, [r4, #13]
 800981e:	f043 0308 	orr.w	r3, r3, #8
 8009822:	7363      	strb	r3, [r4, #13]
 8009824:	2d08      	cmp	r5, #8
 8009826:	d00b      	beq.n	8009840 <ethernet_input+0x48>
 8009828:	f5b5 6fc1 	cmp.w	r5, #1544	; 0x608
 800982c:	d103      	bne.n	8009836 <ethernet_input+0x3e>
 800982e:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
 8009832:	071b      	lsls	r3, r3, #28
 8009834:	d414      	bmi.n	8009860 <ethernet_input+0x68>
 8009836:	4620      	mov	r0, r4
 8009838:	f7fc fb00 	bl	8005e3c <pbuf_free>
 800983c:	2000      	movs	r0, #0
 800983e:	bd70      	pop	{r4, r5, r6, pc}
 8009840:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
 8009844:	071a      	lsls	r2, r3, #28
 8009846:	d5f6      	bpl.n	8009836 <ethernet_input+0x3e>
 8009848:	f06f 010d 	mvn.w	r1, #13
 800984c:	4620      	mov	r0, r4
 800984e:	f7fc fa45 	bl	8005cdc <pbuf_header>
 8009852:	2800      	cmp	r0, #0
 8009854:	d1ef      	bne.n	8009836 <ethernet_input+0x3e>
 8009856:	4631      	mov	r1, r6
 8009858:	4620      	mov	r0, r4
 800985a:	f7ff f875 	bl	8008948 <ip4_input>
 800985e:	e7ed      	b.n	800983c <ethernet_input+0x44>
 8009860:	f06f 010d 	mvn.w	r1, #13
 8009864:	4620      	mov	r0, r4
 8009866:	f7fc fa39 	bl	8005cdc <pbuf_header>
 800986a:	2800      	cmp	r0, #0
 800986c:	d1e3      	bne.n	8009836 <ethernet_input+0x3e>
 800986e:	4631      	mov	r1, r6
 8009870:	4620      	mov	r0, r4
 8009872:	f7fd fcc1 	bl	80071f8 <etharp_input>
 8009876:	e7e1      	b.n	800983c <ethernet_input+0x44>
 8009878:	7843      	ldrb	r3, [r0, #1]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d1d2      	bne.n	8009824 <ethernet_input+0x2c>
 800987e:	7883      	ldrb	r3, [r0, #2]
 8009880:	2b5e      	cmp	r3, #94	; 0x5e
 8009882:	d1cf      	bne.n	8009824 <ethernet_input+0x2c>
 8009884:	7b63      	ldrb	r3, [r4, #13]
 8009886:	f043 0310 	orr.w	r3, r3, #16
 800988a:	7363      	strb	r3, [r4, #13]
 800988c:	e7ca      	b.n	8009824 <ethernet_input+0x2c>
 800988e:	bf00      	nop
 8009890:	08010d18 	.word	0x08010d18

08009894 <ethernet_output>:
 8009894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009898:	460c      	mov	r4, r1
 800989a:	4605      	mov	r5, r0
 800989c:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 80098a0:	4616      	mov	r6, r2
 80098a2:	461f      	mov	r7, r3
 80098a4:	f7fb fe36 	bl	8005514 <lwip_htons>
 80098a8:	210e      	movs	r1, #14
 80098aa:	4680      	mov	r8, r0
 80098ac:	4620      	mov	r0, r4
 80098ae:	f7fc fa15 	bl	8005cdc <pbuf_header>
 80098b2:	bb10      	cbnz	r0, 80098fa <ethernet_output+0x66>
 80098b4:	6861      	ldr	r1, [r4, #4]
 80098b6:	f8a1 800c 	strh.w	r8, [r1, #12]
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	600b      	str	r3, [r1, #0]
 80098be:	88bb      	ldrh	r3, [r7, #4]
 80098c0:	808b      	strh	r3, [r1, #4]
 80098c2:	6833      	ldr	r3, [r6, #0]
 80098c4:	f8c1 3006 	str.w	r3, [r1, #6]
 80098c8:	88b3      	ldrh	r3, [r6, #4]
 80098ca:	814b      	strh	r3, [r1, #10]
 80098cc:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 80098d0:	2b06      	cmp	r3, #6
 80098d2:	d105      	bne.n	80098e0 <ethernet_output+0x4c>
 80098d4:	4621      	mov	r1, r4
 80098d6:	69ab      	ldr	r3, [r5, #24]
 80098d8:	4628      	mov	r0, r5
 80098da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098de:	4718      	bx	r3
 80098e0:	4b08      	ldr	r3, [pc, #32]	; (8009904 <ethernet_output+0x70>)
 80098e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80098e6:	4908      	ldr	r1, [pc, #32]	; (8009908 <ethernet_output+0x74>)
 80098e8:	4808      	ldr	r0, [pc, #32]	; (800990c <ethernet_output+0x78>)
 80098ea:	f006 f845 	bl	800f978 <iprintf>
 80098ee:	4621      	mov	r1, r4
 80098f0:	69ab      	ldr	r3, [r5, #24]
 80098f2:	4628      	mov	r0, r5
 80098f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098f8:	4718      	bx	r3
 80098fa:	f06f 0001 	mvn.w	r0, #1
 80098fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009902:	bf00      	nop
 8009904:	08011e90 	.word	0x08011e90
 8009908:	08011ec8 	.word	0x08011ec8
 800990c:	08010e34 	.word	0x08010e34

08009910 <sys_mbox_new>:
 8009910:	b510      	push	{r4, lr}
 8009912:	b082      	sub	sp, #8
 8009914:	2304      	movs	r3, #4
 8009916:	4604      	mov	r4, r0
 8009918:	9100      	str	r1, [sp, #0]
 800991a:	4668      	mov	r0, sp
 800991c:	2100      	movs	r1, #0
 800991e:	9301      	str	r3, [sp, #4]
 8009920:	f7f9 fa7e 	bl	8002e20 <osMessageCreate>
 8009924:	fab0 f380 	clz	r3, r0
 8009928:	6020      	str	r0, [r4, #0]
 800992a:	095b      	lsrs	r3, r3, #5
 800992c:	4258      	negs	r0, r3
 800992e:	b002      	add	sp, #8
 8009930:	bd10      	pop	{r4, pc}
 8009932:	bf00      	nop

08009934 <sys_mbox_trypost>:
 8009934:	b508      	push	{r3, lr}
 8009936:	2200      	movs	r2, #0
 8009938:	6800      	ldr	r0, [r0, #0]
 800993a:	f7f9 fa77 	bl	8002e2c <osMessagePut>
 800993e:	3000      	adds	r0, #0
 8009940:	bf18      	it	ne
 8009942:	2001      	movne	r0, #1
 8009944:	4240      	negs	r0, r0
 8009946:	bd08      	pop	{r3, pc}

08009948 <sys_arch_mbox_fetch>:
 8009948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800994a:	4615      	mov	r5, r2
 800994c:	b085      	sub	sp, #20
 800994e:	4606      	mov	r6, r0
 8009950:	460f      	mov	r7, r1
 8009952:	f7f9 f971 	bl	8002c38 <osKernelSysTick>
 8009956:	4604      	mov	r4, r0
 8009958:	b15d      	cbz	r5, 8009972 <sys_arch_mbox_fetch+0x2a>
 800995a:	462a      	mov	r2, r5
 800995c:	6831      	ldr	r1, [r6, #0]
 800995e:	a801      	add	r0, sp, #4
 8009960:	f7f9 fa90 	bl	8002e84 <osMessageGet>
 8009964:	9b01      	ldr	r3, [sp, #4]
 8009966:	2b10      	cmp	r3, #16
 8009968:	d009      	beq.n	800997e <sys_arch_mbox_fetch+0x36>
 800996a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800996e:	b005      	add	sp, #20
 8009970:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009972:	6831      	ldr	r1, [r6, #0]
 8009974:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009978:	a801      	add	r0, sp, #4
 800997a:	f7f9 fa83 	bl	8002e84 <osMessageGet>
 800997e:	9b02      	ldr	r3, [sp, #8]
 8009980:	603b      	str	r3, [r7, #0]
 8009982:	f7f9 f959 	bl	8002c38 <osKernelSysTick>
 8009986:	1b00      	subs	r0, r0, r4
 8009988:	b005      	add	sp, #20
 800998a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800998c <sys_mbox_valid>:
 800998c:	6800      	ldr	r0, [r0, #0]
 800998e:	3000      	adds	r0, #0
 8009990:	bf18      	it	ne
 8009992:	2001      	movne	r0, #1
 8009994:	4770      	bx	lr
 8009996:	bf00      	nop

08009998 <sys_sem_new>:
 8009998:	b570      	push	{r4, r5, r6, lr}
 800999a:	b082      	sub	sp, #8
 800999c:	2400      	movs	r4, #0
 800999e:	4606      	mov	r6, r0
 80099a0:	460d      	mov	r5, r1
 80099a2:	ab02      	add	r3, sp, #8
 80099a4:	2101      	movs	r1, #1
 80099a6:	f843 4d04 	str.w	r4, [r3, #-4]!
 80099aa:	4618      	mov	r0, r3
 80099ac:	f7f9 f9c6 	bl	8002d3c <osSemaphoreCreate>
 80099b0:	6030      	str	r0, [r6, #0]
 80099b2:	b148      	cbz	r0, 80099c8 <sys_sem_new+0x30>
 80099b4:	b115      	cbz	r5, 80099bc <sys_sem_new+0x24>
 80099b6:	4620      	mov	r0, r4
 80099b8:	b002      	add	sp, #8
 80099ba:	bd70      	pop	{r4, r5, r6, pc}
 80099bc:	4629      	mov	r1, r5
 80099be:	f7f9 f9d1 	bl	8002d64 <osSemaphoreWait>
 80099c2:	4628      	mov	r0, r5
 80099c4:	b002      	add	sp, #8
 80099c6:	bd70      	pop	{r4, r5, r6, pc}
 80099c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80099cc:	e7f4      	b.n	80099b8 <sys_sem_new+0x20>
 80099ce:	bf00      	nop

080099d0 <sys_arch_sem_wait>:
 80099d0:	b570      	push	{r4, r5, r6, lr}
 80099d2:	460e      	mov	r6, r1
 80099d4:	4604      	mov	r4, r0
 80099d6:	f7f9 f92f 	bl	8002c38 <osKernelSysTick>
 80099da:	4605      	mov	r5, r0
 80099dc:	b956      	cbnz	r6, 80099f4 <sys_arch_sem_wait+0x24>
 80099de:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80099e2:	6820      	ldr	r0, [r4, #0]
 80099e4:	f7f9 f9be 	bl	8002d64 <osSemaphoreWait>
 80099e8:	2800      	cmp	r0, #0
 80099ea:	d1f8      	bne.n	80099de <sys_arch_sem_wait+0xe>
 80099ec:	f7f9 f924 	bl	8002c38 <osKernelSysTick>
 80099f0:	1b40      	subs	r0, r0, r5
 80099f2:	bd70      	pop	{r4, r5, r6, pc}
 80099f4:	4631      	mov	r1, r6
 80099f6:	6820      	ldr	r0, [r4, #0]
 80099f8:	f7f9 f9b4 	bl	8002d64 <osSemaphoreWait>
 80099fc:	2800      	cmp	r0, #0
 80099fe:	d0f5      	beq.n	80099ec <sys_arch_sem_wait+0x1c>
 8009a00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a04:	bd70      	pop	{r4, r5, r6, pc}
 8009a06:	bf00      	nop

08009a08 <sys_sem_signal>:
 8009a08:	6800      	ldr	r0, [r0, #0]
 8009a0a:	f7f9 b9d7 	b.w	8002dbc <osSemaphoreRelease>
 8009a0e:	bf00      	nop

08009a10 <sys_sem_free>:
 8009a10:	6800      	ldr	r0, [r0, #0]
 8009a12:	f7f9 b9fb 	b.w	8002e0c <osSemaphoreDelete>
 8009a16:	bf00      	nop

08009a18 <sys_sem_valid>:
 8009a18:	6800      	ldr	r0, [r0, #0]
 8009a1a:	3000      	adds	r0, #0
 8009a1c:	bf18      	it	ne
 8009a1e:	2001      	movne	r0, #1
 8009a20:	4770      	bx	lr
 8009a22:	bf00      	nop

08009a24 <sys_init>:
 8009a24:	b508      	push	{r3, lr}
 8009a26:	4803      	ldr	r0, [pc, #12]	; (8009a34 <sys_init+0x10>)
 8009a28:	f7f9 f926 	bl	8002c78 <osMutexCreate>
 8009a2c:	4b02      	ldr	r3, [pc, #8]	; (8009a38 <sys_init+0x14>)
 8009a2e:	6018      	str	r0, [r3, #0]
 8009a30:	bd08      	pop	{r3, pc}
 8009a32:	bf00      	nop
 8009a34:	08010d28 	.word	0x08010d28
 8009a38:	20008608 	.word	0x20008608

08009a3c <sys_mutex_new>:
 8009a3c:	b510      	push	{r4, lr}
 8009a3e:	b082      	sub	sp, #8
 8009a40:	2200      	movs	r2, #0
 8009a42:	4604      	mov	r4, r0
 8009a44:	ab02      	add	r3, sp, #8
 8009a46:	f843 2d04 	str.w	r2, [r3, #-4]!
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f7f9 f914 	bl	8002c78 <osMutexCreate>
 8009a50:	fab0 f380 	clz	r3, r0
 8009a54:	6020      	str	r0, [r4, #0]
 8009a56:	095b      	lsrs	r3, r3, #5
 8009a58:	4258      	negs	r0, r3
 8009a5a:	b002      	add	sp, #8
 8009a5c:	bd10      	pop	{r4, pc}
 8009a5e:	bf00      	nop

08009a60 <sys_mutex_free>:
 8009a60:	6800      	ldr	r0, [r0, #0]
 8009a62:	f7f9 b961 	b.w	8002d28 <osMutexDelete>
 8009a66:	bf00      	nop

08009a68 <sys_mutex_lock>:
 8009a68:	6800      	ldr	r0, [r0, #0]
 8009a6a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009a6e:	f7f9 b907 	b.w	8002c80 <osMutexWait>
 8009a72:	bf00      	nop

08009a74 <sys_mutex_unlock>:
 8009a74:	6800      	ldr	r0, [r0, #0]
 8009a76:	f7f9 b92f 	b.w	8002cd8 <osMutexRelease>
 8009a7a:	bf00      	nop

08009a7c <sys_thread_new>:
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	b530      	push	{r4, r5, lr}
 8009a80:	bfb8      	it	lt
 8009a82:	3303      	addlt	r3, #3
 8009a84:	b087      	sub	sp, #28
 8009a86:	2400      	movs	r4, #0
 8009a88:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8009a8a:	109b      	asrs	r3, r3, #2
 8009a8c:	9404      	str	r4, [sp, #16]
 8009a8e:	f8ad 500c 	strh.w	r5, [sp, #12]
 8009a92:	9305      	str	r3, [sp, #20]
 8009a94:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8009a98:	4611      	mov	r1, r2
 8009a9a:	a801      	add	r0, sp, #4
 8009a9c:	f7f9 f8d4 	bl	8002c48 <osThreadCreate>
 8009aa0:	b007      	add	sp, #28
 8009aa2:	bd30      	pop	{r4, r5, pc}

08009aa4 <sys_arch_protect>:
 8009aa4:	b508      	push	{r3, lr}
 8009aa6:	4b04      	ldr	r3, [pc, #16]	; (8009ab8 <sys_arch_protect+0x14>)
 8009aa8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009aac:	6818      	ldr	r0, [r3, #0]
 8009aae:	f7f9 f8e7 	bl	8002c80 <osMutexWait>
 8009ab2:	2001      	movs	r0, #1
 8009ab4:	bd08      	pop	{r3, pc}
 8009ab6:	bf00      	nop
 8009ab8:	20008608 	.word	0x20008608

08009abc <sys_arch_unprotect>:
 8009abc:	4b01      	ldr	r3, [pc, #4]	; (8009ac4 <sys_arch_unprotect+0x8>)
 8009abe:	6818      	ldr	r0, [r3, #0]
 8009ac0:	f7f9 b90a 	b.w	8002cd8 <osMutexRelease>
 8009ac4:	20008608 	.word	0x20008608

08009ac8 <low_level_output>:
 8009ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009acc:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 8009b80 <low_level_output+0xb8>
 8009ad0:	b083      	sub	sp, #12
 8009ad2:	468b      	mov	fp, r1
 8009ad4:	f8da 402c 	ldr.w	r4, [sl, #44]	; 0x2c
 8009ad8:	68a3      	ldr	r3, [r4, #8]
 8009ada:	2900      	cmp	r1, #0
 8009adc:	d048      	beq.n	8009b70 <low_level_output+0xa8>
 8009ade:	6822      	ldr	r2, [r4, #0]
 8009ae0:	2a00      	cmp	r2, #0
 8009ae2:	db1f      	blt.n	8009b24 <low_level_output+0x5c>
 8009ae4:	2000      	movs	r0, #0
 8009ae6:	f240 59f4 	movw	r9, #1524	; 0x5f4
 8009aea:	4680      	mov	r8, r0
 8009aec:	f8bb 200a 	ldrh.w	r2, [fp, #10]
 8009af0:	2700      	movs	r7, #0
 8009af2:	1816      	adds	r6, r2, r0
 8009af4:	454e      	cmp	r6, r9
 8009af6:	d803      	bhi.n	8009b00 <low_level_output+0x38>
 8009af8:	e027      	b.n	8009b4a <low_level_output+0x82>
 8009afa:	454e      	cmp	r6, r9
 8009afc:	68a3      	ldr	r3, [r4, #8]
 8009afe:	d923      	bls.n	8009b48 <low_level_output+0x80>
 8009b00:	eba9 0500 	sub.w	r5, r9, r0
 8009b04:	f8db 1004 	ldr.w	r1, [fp, #4]
 8009b08:	4418      	add	r0, r3
 8009b0a:	f2a6 56f4 	subw	r6, r6, #1524	; 0x5f4
 8009b0e:	4439      	add	r1, r7
 8009b10:	462a      	mov	r2, r5
 8009b12:	f005 ff1e 	bl	800f952 <memcpy>
 8009b16:	68e4      	ldr	r4, [r4, #12]
 8009b18:	2000      	movs	r0, #0
 8009b1a:	442f      	add	r7, r5
 8009b1c:	6823      	ldr	r3, [r4, #0]
 8009b1e:	44a8      	add	r8, r5
 8009b20:	4283      	cmp	r3, r0
 8009b22:	daea      	bge.n	8009afa <low_level_output+0x32>
 8009b24:	f06f 0007 	mvn.w	r0, #7
 8009b28:	f8da 3000 	ldr.w	r3, [sl]
 8009b2c:	f241 0214 	movw	r2, #4116	; 0x1014
 8009b30:	5899      	ldr	r1, [r3, r2]
 8009b32:	0689      	lsls	r1, r1, #26
 8009b34:	d505      	bpl.n	8009b42 <low_level_output+0x7a>
 8009b36:	2520      	movs	r5, #32
 8009b38:	f241 0104 	movw	r1, #4100	; 0x1004
 8009b3c:	2400      	movs	r4, #0
 8009b3e:	509d      	str	r5, [r3, r2]
 8009b40:	505c      	str	r4, [r3, r1]
 8009b42:	b003      	add	sp, #12
 8009b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b48:	4632      	mov	r2, r6
 8009b4a:	f8db 1004 	ldr.w	r1, [fp, #4]
 8009b4e:	4418      	add	r0, r3
 8009b50:	9301      	str	r3, [sp, #4]
 8009b52:	4490      	add	r8, r2
 8009b54:	4439      	add	r1, r7
 8009b56:	f005 fefc 	bl	800f952 <memcpy>
 8009b5a:	f8db b000 	ldr.w	fp, [fp]
 8009b5e:	9b01      	ldr	r3, [sp, #4]
 8009b60:	f1bb 0f00 	cmp.w	fp, #0
 8009b64:	d005      	beq.n	8009b72 <low_level_output+0xaa>
 8009b66:	6822      	ldr	r2, [r4, #0]
 8009b68:	4630      	mov	r0, r6
 8009b6a:	2a00      	cmp	r2, #0
 8009b6c:	dabe      	bge.n	8009aec <low_level_output+0x24>
 8009b6e:	e7d9      	b.n	8009b24 <low_level_output+0x5c>
 8009b70:	4688      	mov	r8, r1
 8009b72:	4641      	mov	r1, r8
 8009b74:	4802      	ldr	r0, [pc, #8]	; (8009b80 <low_level_output+0xb8>)
 8009b76:	f7f7 f8fd 	bl	8000d74 <HAL_ETH_TransmitFrame>
 8009b7a:	2000      	movs	r0, #0
 8009b7c:	e7d4      	b.n	8009b28 <low_level_output+0x60>
 8009b7e:	bf00      	nop
 8009b80:	20009edc 	.word	0x20009edc

08009b84 <ethernetif_input>:
 8009b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b88:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 8009c80 <ethernetif_input+0xfc>
 8009b8c:	b083      	sub	sp, #12
 8009b8e:	9001      	str	r0, [sp, #4]
 8009b90:	4b3a      	ldr	r3, [pc, #232]	; (8009c7c <ethernetif_input+0xf8>)
 8009b92:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009b96:	6818      	ldr	r0, [r3, #0]
 8009b98:	f7f9 f8e4 	bl	8002d64 <osSemaphoreWait>
 8009b9c:	2800      	cmp	r0, #0
 8009b9e:	d1f7      	bne.n	8009b90 <ethernetif_input+0xc>
 8009ba0:	4837      	ldr	r0, [pc, #220]	; (8009c80 <ethernetif_input+0xfc>)
 8009ba2:	f7f7 f965 	bl	8000e70 <HAL_ETH_GetReceivedFrame_IT>
 8009ba6:	4604      	mov	r4, r0
 8009ba8:	2800      	cmp	r0, #0
 8009baa:	d1f1      	bne.n	8009b90 <ethernetif_input+0xc>
 8009bac:	f8ba 103c 	ldrh.w	r1, [sl, #60]	; 0x3c
 8009bb0:	bb59      	cbnz	r1, 8009c0a <ethernetif_input+0x86>
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	9300      	str	r3, [sp, #0]
 8009bb6:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 8009bba:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
 8009bbe:	b140      	cbz	r0, 8009bd2 <ethernetif_input+0x4e>
 8009bc0:	2100      	movs	r1, #0
 8009bc2:	681a      	ldr	r2, [r3, #0]
 8009bc4:	3101      	adds	r1, #1
 8009bc6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8009bca:	4288      	cmp	r0, r1
 8009bcc:	601a      	str	r2, [r3, #0]
 8009bce:	68db      	ldr	r3, [r3, #12]
 8009bd0:	d1f7      	bne.n	8009bc2 <ethernetif_input+0x3e>
 8009bd2:	2100      	movs	r1, #0
 8009bd4:	f8da 3000 	ldr.w	r3, [sl]
 8009bd8:	f241 0214 	movw	r2, #4116	; 0x1014
 8009bdc:	f8ca 1038 	str.w	r1, [sl, #56]	; 0x38
 8009be0:	5899      	ldr	r1, [r3, r2]
 8009be2:	0609      	lsls	r1, r1, #24
 8009be4:	d505      	bpl.n	8009bf2 <ethernetif_input+0x6e>
 8009be6:	2080      	movs	r0, #128	; 0x80
 8009be8:	f241 0108 	movw	r1, #4104	; 0x1008
 8009bec:	5098      	str	r0, [r3, r2]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	505a      	str	r2, [r3, r1]
 8009bf2:	9800      	ldr	r0, [sp, #0]
 8009bf4:	2800      	cmp	r0, #0
 8009bf6:	d0cb      	beq.n	8009b90 <ethernetif_input+0xc>
 8009bf8:	9901      	ldr	r1, [sp, #4]
 8009bfa:	690b      	ldr	r3, [r1, #16]
 8009bfc:	4798      	blx	r3
 8009bfe:	2800      	cmp	r0, #0
 8009c00:	d0ce      	beq.n	8009ba0 <ethernetif_input+0x1c>
 8009c02:	9800      	ldr	r0, [sp, #0]
 8009c04:	f7fc f91a 	bl	8005e3c <pbuf_free>
 8009c08:	e7ca      	b.n	8009ba0 <ethernetif_input+0x1c>
 8009c0a:	2203      	movs	r2, #3
 8009c0c:	2004      	movs	r0, #4
 8009c0e:	f8da 5040 	ldr.w	r5, [sl, #64]	; 0x40
 8009c12:	f7fc f987 	bl	8005f24 <pbuf_alloc>
 8009c16:	9000      	str	r0, [sp, #0]
 8009c18:	2800      	cmp	r0, #0
 8009c1a:	d0ca      	beq.n	8009bb2 <ethernetif_input+0x2e>
 8009c1c:	46a8      	mov	r8, r5
 8009c1e:	4621      	mov	r1, r4
 8009c20:	f8da 6030 	ldr.w	r6, [sl, #48]	; 0x30
 8009c24:	4683      	mov	fp, r0
 8009c26:	f240 59f4 	movw	r9, #1524	; 0x5f4
 8009c2a:	f8bb 200a 	ldrh.w	r2, [fp, #10]
 8009c2e:	2500      	movs	r5, #0
 8009c30:	1854      	adds	r4, r2, r1
 8009c32:	454c      	cmp	r4, r9
 8009c34:	d914      	bls.n	8009c60 <ethernetif_input+0xdc>
 8009c36:	4643      	mov	r3, r8
 8009c38:	eba9 0701 	sub.w	r7, r9, r1
 8009c3c:	f8db 0004 	ldr.w	r0, [fp, #4]
 8009c40:	f2a4 54f4 	subw	r4, r4, #1524	; 0x5f4
 8009c44:	4419      	add	r1, r3
 8009c46:	4428      	add	r0, r5
 8009c48:	463a      	mov	r2, r7
 8009c4a:	f005 fe82 	bl	800f952 <memcpy>
 8009c4e:	68f6      	ldr	r6, [r6, #12]
 8009c50:	454c      	cmp	r4, r9
 8009c52:	443d      	add	r5, r7
 8009c54:	f04f 0100 	mov.w	r1, #0
 8009c58:	68b3      	ldr	r3, [r6, #8]
 8009c5a:	d8ed      	bhi.n	8009c38 <ethernetif_input+0xb4>
 8009c5c:	4698      	mov	r8, r3
 8009c5e:	4622      	mov	r2, r4
 8009c60:	f8db 0004 	ldr.w	r0, [fp, #4]
 8009c64:	4441      	add	r1, r8
 8009c66:	4428      	add	r0, r5
 8009c68:	f005 fe73 	bl	800f952 <memcpy>
 8009c6c:	f8db b000 	ldr.w	fp, [fp]
 8009c70:	4621      	mov	r1, r4
 8009c72:	f1bb 0f00 	cmp.w	fp, #0
 8009c76:	d1d8      	bne.n	8009c2a <ethernetif_input+0xa6>
 8009c78:	e79d      	b.n	8009bb6 <ethernetif_input+0x32>
 8009c7a:	bf00      	nop
 8009c7c:	200033f0 	.word	0x200033f0
 8009c80:	20009edc 	.word	0x20009edc

08009c84 <HAL_ETH_MspInit>:
 8009c84:	6802      	ldr	r2, [r0, #0]
 8009c86:	4b3e      	ldr	r3, [pc, #248]	; (8009d80 <HAL_ETH_MspInit+0xfc>)
 8009c88:	429a      	cmp	r2, r3
 8009c8a:	d000      	beq.n	8009c8e <HAL_ETH_MspInit+0xa>
 8009c8c:	4770      	bx	lr
 8009c8e:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
 8009c92:	2032      	movs	r0, #50	; 0x32
 8009c94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009c96:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8009c9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c9c:	631a      	str	r2, [r3, #48]	; 0x30
 8009c9e:	b08d      	sub	sp, #52	; 0x34
 8009ca0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ca2:	2702      	movs	r7, #2
 8009ca4:	2400      	movs	r4, #0
 8009ca6:	2603      	movs	r6, #3
 8009ca8:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8009cac:	250b      	movs	r5, #11
 8009cae:	a907      	add	r1, sp, #28
 8009cb0:	9200      	str	r2, [sp, #0]
 8009cb2:	9a00      	ldr	r2, [sp, #0]
 8009cb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009cb6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8009cba:	631a      	str	r2, [r3, #48]	; 0x30
 8009cbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009cbe:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8009cc2:	9201      	str	r2, [sp, #4]
 8009cc4:	9a01      	ldr	r2, [sp, #4]
 8009cc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009cc8:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8009ccc:	631a      	str	r2, [r3, #48]	; 0x30
 8009cce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009cd0:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8009cd4:	9202      	str	r2, [sp, #8]
 8009cd6:	9a02      	ldr	r2, [sp, #8]
 8009cd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009cda:	f042 0204 	orr.w	r2, r2, #4
 8009cde:	631a      	str	r2, [r3, #48]	; 0x30
 8009ce0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ce2:	f002 0204 	and.w	r2, r2, #4
 8009ce6:	9203      	str	r2, [sp, #12]
 8009ce8:	9a03      	ldr	r2, [sp, #12]
 8009cea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009cec:	f042 0201 	orr.w	r2, r2, #1
 8009cf0:	631a      	str	r2, [r3, #48]	; 0x30
 8009cf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009cf4:	f002 0201 	and.w	r2, r2, #1
 8009cf8:	9204      	str	r2, [sp, #16]
 8009cfa:	9a04      	ldr	r2, [sp, #16]
 8009cfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009cfe:	433a      	orrs	r2, r7
 8009d00:	631a      	str	r2, [r3, #48]	; 0x30
 8009d02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d04:	403a      	ands	r2, r7
 8009d06:	9205      	str	r2, [sp, #20]
 8009d08:	9a05      	ldr	r2, [sp, #20]
 8009d0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009d10:	631a      	str	r2, [r3, #48]	; 0x30
 8009d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d14:	9007      	str	r0, [sp, #28]
 8009d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d1a:	481a      	ldr	r0, [pc, #104]	; (8009d84 <HAL_ETH_MspInit+0x100>)
 8009d1c:	9708      	str	r7, [sp, #32]
 8009d1e:	9306      	str	r3, [sp, #24]
 8009d20:	9b06      	ldr	r3, [sp, #24]
 8009d22:	950b      	str	r5, [sp, #44]	; 0x2c
 8009d24:	e9cd 4609 	strd	r4, r6, [sp, #36]	; 0x24
 8009d28:	f7f7 f9ee 	bl	8001108 <HAL_GPIO_Init>
 8009d2c:	2386      	movs	r3, #134	; 0x86
 8009d2e:	a907      	add	r1, sp, #28
 8009d30:	4815      	ldr	r0, [pc, #84]	; (8009d88 <HAL_ETH_MspInit+0x104>)
 8009d32:	9307      	str	r3, [sp, #28]
 8009d34:	e9cd 7408 	strd	r7, r4, [sp, #32]
 8009d38:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
 8009d3c:	f7f7 f9e4 	bl	8001108 <HAL_GPIO_Init>
 8009d40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009d44:	a907      	add	r1, sp, #28
 8009d46:	4811      	ldr	r0, [pc, #68]	; (8009d8c <HAL_ETH_MspInit+0x108>)
 8009d48:	9307      	str	r3, [sp, #28]
 8009d4a:	e9cd 7408 	strd	r7, r4, [sp, #32]
 8009d4e:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
 8009d52:	f7f7 f9d9 	bl	8001108 <HAL_GPIO_Init>
 8009d56:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8009d5a:	a907      	add	r1, sp, #28
 8009d5c:	480c      	ldr	r0, [pc, #48]	; (8009d90 <HAL_ETH_MspInit+0x10c>)
 8009d5e:	9307      	str	r3, [sp, #28]
 8009d60:	e9cd 7408 	strd	r7, r4, [sp, #32]
 8009d64:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
 8009d68:	f7f7 f9ce 	bl	8001108 <HAL_GPIO_Init>
 8009d6c:	4622      	mov	r2, r4
 8009d6e:	2105      	movs	r1, #5
 8009d70:	203d      	movs	r0, #61	; 0x3d
 8009d72:	f7f6 fc91 	bl	8000698 <HAL_NVIC_SetPriority>
 8009d76:	203d      	movs	r0, #61	; 0x3d
 8009d78:	f7f6 fcc4 	bl	8000704 <HAL_NVIC_EnableIRQ>
 8009d7c:	b00d      	add	sp, #52	; 0x34
 8009d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d80:	40028000 	.word	0x40028000
 8009d84:	40020800 	.word	0x40020800
 8009d88:	40020000 	.word	0x40020000
 8009d8c:	40020400 	.word	0x40020400
 8009d90:	40021800 	.word	0x40021800

08009d94 <HAL_ETH_RxCpltCallback>:
 8009d94:	4b01      	ldr	r3, [pc, #4]	; (8009d9c <HAL_ETH_RxCpltCallback+0x8>)
 8009d96:	6818      	ldr	r0, [r3, #0]
 8009d98:	f7f9 b810 	b.w	8002dbc <osSemaphoreRelease>
 8009d9c:	200033f0 	.word	0x200033f0

08009da0 <ethernetif_init>:
 8009da0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009da2:	4604      	mov	r4, r0
 8009da4:	b08b      	sub	sp, #44	; 0x2c
 8009da6:	2800      	cmp	r0, #0
 8009da8:	f000 8082 	beq.w	8009eb0 <ethernetif_init+0x110>
 8009dac:	4d44      	ldr	r5, [pc, #272]	; (8009ec0 <ethernetif_init+0x120>)
 8009dae:	f247 4673 	movw	r6, #29811	; 0x7473
 8009db2:	4a44      	ldr	r2, [pc, #272]	; (8009ec4 <ethernetif_init+0x124>)
 8009db4:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8009db8:	4b43      	ldr	r3, [pc, #268]	; (8009ec8 <ethernetif_init+0x128>)
 8009dba:	a803      	add	r0, sp, #12
 8009dbc:	6162      	str	r2, [r4, #20]
 8009dbe:	2201      	movs	r2, #1
 8009dc0:	61a3      	str	r3, [r4, #24]
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	8626      	strh	r6, [r4, #48]	; 0x30
 8009dc6:	6229      	str	r1, [r5, #32]
 8009dc8:	f501 01c3 	add.w	r1, r1, #6389760	; 0x618000
 8009dcc:	4e3f      	ldr	r6, [pc, #252]	; (8009ecc <ethernetif_init+0x12c>)
 8009dce:	6168      	str	r0, [r5, #20]
 8009dd0:	4628      	mov	r0, r5
 8009dd2:	602e      	str	r6, [r5, #0]
 8009dd4:	606a      	str	r2, [r5, #4]
 8009dd6:	61aa      	str	r2, [r5, #24]
 8009dd8:	822b      	strh	r3, [r5, #16]
 8009dda:	9301      	str	r3, [sp, #4]
 8009ddc:	f8ad 3010 	strh.w	r3, [sp, #16]
 8009de0:	61eb      	str	r3, [r5, #28]
 8009de2:	9103      	str	r1, [sp, #12]
 8009de4:	f7f6 fdf6 	bl	80009d4 <HAL_ETH_Init>
 8009de8:	b928      	cbnz	r0, 8009df6 <ethernetif_init+0x56>
 8009dea:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8009dee:	f043 0304 	orr.w	r3, r3, #4
 8009df2:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
 8009df6:	2304      	movs	r3, #4
 8009df8:	4a35      	ldr	r2, [pc, #212]	; (8009ed0 <ethernetif_init+0x130>)
 8009dfa:	4936      	ldr	r1, [pc, #216]	; (8009ed4 <ethernetif_init+0x134>)
 8009dfc:	2700      	movs	r7, #0
 8009dfe:	4830      	ldr	r0, [pc, #192]	; (8009ec0 <ethernetif_init+0x120>)
 8009e00:	f7f6 fd0e 	bl	8000820 <HAL_ETH_DMATxDescListInit>
 8009e04:	2304      	movs	r3, #4
 8009e06:	4a34      	ldr	r2, [pc, #208]	; (8009ed8 <ethernetif_init+0x138>)
 8009e08:	4934      	ldr	r1, [pc, #208]	; (8009edc <ethernetif_init+0x13c>)
 8009e0a:	482d      	ldr	r0, [pc, #180]	; (8009ec0 <ethernetif_init+0x120>)
 8009e0c:	f7f6 fd8e 	bl	800092c <HAL_ETH_DMARxDescListInit>
 8009e10:	696b      	ldr	r3, [r5, #20]
 8009e12:	2106      	movs	r1, #6
 8009e14:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
 8009e18:	a80a      	add	r0, sp, #40	; 0x28
 8009e1a:	f240 55dc 	movw	r5, #1500	; 0x5dc
 8009e1e:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
 8009e22:	f042 020a 	orr.w	r2, r2, #10
 8009e26:	781e      	ldrb	r6, [r3, #0]
 8009e28:	2101      	movs	r1, #1
 8009e2a:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
 8009e2e:	785e      	ldrb	r6, [r3, #1]
 8009e30:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
 8009e34:	789e      	ldrb	r6, [r3, #2]
 8009e36:	f884 602b 	strb.w	r6, [r4, #43]	; 0x2b
 8009e3a:	78de      	ldrb	r6, [r3, #3]
 8009e3c:	f840 7d20 	str.w	r7, [r0, #-32]!
 8009e40:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
 8009e44:	791e      	ldrb	r6, [r3, #4]
 8009e46:	f884 602d 	strb.w	r6, [r4, #45]	; 0x2d
 8009e4a:	795b      	ldrb	r3, [r3, #5]
 8009e4c:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
 8009e50:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 8009e54:	84e5      	strh	r5, [r4, #38]	; 0x26
 8009e56:	ad05      	add	r5, sp, #20
 8009e58:	f7f8 ff70 	bl	8002d3c <osSemaphoreCreate>
 8009e5c:	4e20      	ldr	r6, [pc, #128]	; (8009ee0 <ethernetif_init+0x140>)
 8009e5e:	4b21      	ldr	r3, [pc, #132]	; (8009ee4 <ethernetif_init+0x144>)
 8009e60:	6018      	str	r0, [r3, #0]
 8009e62:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8009e64:	6836      	ldr	r6, [r6, #0]
 8009e66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009e68:	4621      	mov	r1, r4
 8009e6a:	a805      	add	r0, sp, #20
 8009e6c:	602e      	str	r6, [r5, #0]
 8009e6e:	f7f8 feeb 	bl	8002c48 <osThreadCreate>
 8009e72:	4813      	ldr	r0, [pc, #76]	; (8009ec0 <ethernetif_init+0x120>)
 8009e74:	f7f7 f8fe 	bl	8001074 <HAL_ETH_Start>
 8009e78:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8009e7c:	aa01      	add	r2, sp, #4
 8009e7e:	211d      	movs	r1, #29
 8009e80:	f043 0320 	orr.w	r3, r3, #32
 8009e84:	480e      	ldr	r0, [pc, #56]	; (8009ec0 <ethernetif_init+0x120>)
 8009e86:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
 8009e8a:	f7f7 f881 	bl	8000f90 <HAL_ETH_ReadPHYRegister>
 8009e8e:	9b01      	ldr	r3, [sp, #4]
 8009e90:	211d      	movs	r1, #29
 8009e92:	480b      	ldr	r0, [pc, #44]	; (8009ec0 <ethernetif_init+0x120>)
 8009e94:	f043 030b 	orr.w	r3, r3, #11
 8009e98:	461a      	mov	r2, r3
 8009e9a:	9301      	str	r3, [sp, #4]
 8009e9c:	f7f7 f8b2 	bl	8001004 <HAL_ETH_WritePHYRegister>
 8009ea0:	aa01      	add	r2, sp, #4
 8009ea2:	211d      	movs	r1, #29
 8009ea4:	4806      	ldr	r0, [pc, #24]	; (8009ec0 <ethernetif_init+0x120>)
 8009ea6:	f7f7 f873 	bl	8000f90 <HAL_ETH_ReadPHYRegister>
 8009eaa:	4638      	mov	r0, r7
 8009eac:	b00b      	add	sp, #44	; 0x2c
 8009eae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009eb0:	4b0d      	ldr	r3, [pc, #52]	; (8009ee8 <ethernetif_init+0x148>)
 8009eb2:	f240 222d 	movw	r2, #557	; 0x22d
 8009eb6:	490d      	ldr	r1, [pc, #52]	; (8009eec <ethernetif_init+0x14c>)
 8009eb8:	480d      	ldr	r0, [pc, #52]	; (8009ef0 <ethernetif_init+0x150>)
 8009eba:	f005 fd5d 	bl	800f978 <iprintf>
 8009ebe:	e775      	b.n	8009dac <ethernetif_init+0xc>
 8009ec0:	20009edc 	.word	0x20009edc
 8009ec4:	08007e35 	.word	0x08007e35
 8009ec8:	08009ac9 	.word	0x08009ac9
 8009ecc:	40028000 	.word	0x40028000
 8009ed0:	20009f24 	.word	0x20009f24
 8009ed4:	2000860c 	.word	0x2000860c
 8009ed8:	2000868c 	.word	0x2000868c
 8009edc:	20009e5c 	.word	0x20009e5c
 8009ee0:	08010d2c 	.word	0x08010d2c
 8009ee4:	200033f0 	.word	0x200033f0
 8009ee8:	08011efc 	.word	0x08011efc
 8009eec:	0801171c 	.word	0x0801171c
 8009ef0:	08010e34 	.word	0x08010e34

08009ef4 <sys_now>:
 8009ef4:	f7f6 bba4 	b.w	8000640 <HAL_GetTick>

08009ef8 <MX_LWIP_Init>:
 8009ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009efa:	4b1c      	ldr	r3, [pc, #112]	; (8009f6c <MX_LWIP_Init+0x74>)
 8009efc:	2100      	movs	r1, #0
 8009efe:	4f1c      	ldr	r7, [pc, #112]	; (8009f70 <MX_LWIP_Init+0x78>)
 8009f00:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8009f04:	4d1b      	ldr	r5, [pc, #108]	; (8009f74 <MX_LWIP_Init+0x7c>)
 8009f06:	b085      	sub	sp, #20
 8009f08:	603b      	str	r3, [r7, #0]
 8009f0a:	f103 4352 	add.w	r3, r3, #3523215360	; 0xd2000000
 8009f0e:	4e1a      	ldr	r6, [pc, #104]	; (8009f78 <MX_LWIP_Init+0x80>)
 8009f10:	4608      	mov	r0, r1
 8009f12:	602b      	str	r3, [r5, #0]
 8009f14:	6032      	str	r2, [r6, #0]
 8009f16:	f7fb fabf 	bl	8005498 <tcpip_init>
 8009f1a:	6838      	ldr	r0, [r7, #0]
 8009f1c:	6836      	ldr	r6, [r6, #0]
 8009f1e:	2100      	movs	r1, #0
 8009f20:	4a16      	ldr	r2, [pc, #88]	; (8009f7c <MX_LWIP_Init+0x84>)
 8009f22:	4b17      	ldr	r3, [pc, #92]	; (8009f80 <MX_LWIP_Init+0x88>)
 8009f24:	682f      	ldr	r7, [r5, #0]
 8009f26:	4c17      	ldr	r4, [pc, #92]	; (8009f84 <MX_LWIP_Init+0x8c>)
 8009f28:	9100      	str	r1, [sp, #0]
 8009f2a:	4611      	mov	r1, r2
 8009f2c:	6010      	str	r0, [r2, #0]
 8009f2e:	461a      	mov	r2, r3
 8009f30:	601e      	str	r6, [r3, #0]
 8009f32:	4d15      	ldr	r5, [pc, #84]	; (8009f88 <MX_LWIP_Init+0x90>)
 8009f34:	4815      	ldr	r0, [pc, #84]	; (8009f8c <MX_LWIP_Init+0x94>)
 8009f36:	4e16      	ldr	r6, [pc, #88]	; (8009f90 <MX_LWIP_Init+0x98>)
 8009f38:	462b      	mov	r3, r5
 8009f3a:	9002      	str	r0, [sp, #8]
 8009f3c:	4620      	mov	r0, r4
 8009f3e:	602f      	str	r7, [r5, #0]
 8009f40:	9601      	str	r6, [sp, #4]
 8009f42:	f7fb fde1 	bl	8005b08 <netif_add>
 8009f46:	4620      	mov	r0, r4
 8009f48:	f7fb fe60 	bl	8005c0c <netif_set_default>
 8009f4c:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8009f50:	4620      	mov	r0, r4
 8009f52:	075b      	lsls	r3, r3, #29
 8009f54:	d404      	bmi.n	8009f60 <MX_LWIP_Init+0x68>
 8009f56:	b005      	add	sp, #20
 8009f58:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8009f5c:	f7fb be7c 	b.w	8005c58 <netif_set_down>
 8009f60:	b005      	add	sp, #20
 8009f62:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8009f66:	f7fb be57 	b.w	8005c18 <netif_set_up>
 8009f6a:	bf00      	nop
 8009f6c:	2f00a8c0 	.word	0x2f00a8c0
 8009f70:	2000b738 	.word	0x2000b738
 8009f74:	2000b6f4 	.word	0x2000b6f4
 8009f78:	2000b734 	.word	0x2000b734
 8009f7c:	2000b730 	.word	0x2000b730
 8009f80:	2000b73c 	.word	0x2000b73c
 8009f84:	2000b6f8 	.word	0x2000b6f8
 8009f88:	2000b740 	.word	0x2000b740
 8009f8c:	08005405 	.word	0x08005405
 8009f90:	08009da1 	.word	0x08009da1

08009f94 <_Z7setTruePv>:
	// Receive done. Wake up thread an continue
	xTaskNotifyGive(defaultTaskHandle);
}

void setTrue(void* args){
	*static_cast<volatile bool*>(args) = true;
 8009f94:	2301      	movs	r3, #1
 8009f96:	7003      	strb	r3, [r0, #0]
}
 8009f98:	4770      	bx	lr
 8009f9a:	bf00      	nop

08009f9c <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE16registerCallbackEPFvPvRKNS_17ReaderCacheChangeEES3_>:
    }
}

template <class NetworkDriver>
void StatefulReaderT<NetworkDriver>::registerCallback(ddsReaderCallback_fp cb, void* callee){
    if(cb != nullptr){
 8009f9c:	b119      	cbz	r1, 8009fa6 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE16registerCallbackEPFvPvRKNS_17ReaderCacheChangeEES3_+0xa>
        m_callback = cb;
 8009f9e:	f8c0 1120 	str.w	r1, [r0, #288]	; 0x120
        m_callee = callee; // It's okay if this is null
 8009fa2:	f8c0 2124 	str.w	r2, [r0, #292]	; 0x124
    }else{
#if SLR_VERBOSE
        printf("StatefulReader[%s]: Passed callback is nullptr\n", &m_attributes.topicName[0]);
#endif
    }
}
 8009fa6:	4770      	bx	lr

08009fa8 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE12onNewAckNackERKNS_17SubmessageAckNackERKNS_12GuidPrefix_tE>:
}

template <typename NetworkDriver>
void StatelessWriterT<NetworkDriver>::onNewAckNack(const SubmessageAckNack& /*msg*/, const GuidPrefix_t& sourceGuidPrefix){
    // Too lazy to respond
}
 8009fa8:	4770      	bx	lr
 8009faa:	bf00      	nop

08009fac <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE19addNewMatchedReaderERKNS_11ReaderProxyE>:

    return true;
}

template <class NetworkDriver>
bool StatefulWriterT<NetworkDriver>::addNewMatchedReader(const ReaderProxy& newProxy){
 8009fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        uint32_t getNumElements(){
        	return m_numElements;
        }

        bool add(const TYPE& data){
            if(isFull()){
 8009fae:	f8d0 517c 	ldr.w	r5, [r0, #380]	; 0x17c
 8009fb2:	2d03      	cmp	r5, #3
 8009fb4:	d012      	beq.n	8009fdc <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE19addNewMatchedReaderERKNS_11ReaderProxyE+0x30>
                return false;
            }
            for(uint8_t bucket=0; bucket < sizeof(m_bitMap); ++bucket){
                if(bucket != 0xFF){
                    uint8_t byte = m_bitMap[bucket];
 8009fb6:	f890 3178 	ldrb.w	r3, [r0, #376]	; 0x178
                    for(uint8_t bit=0; bit < 8; ++bit){
                        if(!(byte & 1)){
 8009fba:	f013 0201 	ands.w	r2, r3, #1
 8009fbe:	d00f      	beq.n	8009fe0 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE19addNewMatchedReaderERKNS_11ReaderProxyE+0x34>
 8009fc0:	079c      	lsls	r4, r3, #30
 8009fc2:	d523      	bpl.n	800a00c <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE19addNewMatchedReaderERKNS_11ReaderProxyE+0x60>
 8009fc4:	075a      	lsls	r2, r3, #29
 8009fc6:	d524      	bpl.n	800a012 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE19addNewMatchedReaderERKNS_11ReaderProxyE+0x66>
 8009fc8:	071f      	lsls	r7, r3, #28
 8009fca:	d525      	bpl.n	800a018 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE19addNewMatchedReaderERKNS_11ReaderProxyE+0x6c>
 8009fcc:	06de      	lsls	r6, r3, #27
 8009fce:	d526      	bpl.n	800a01e <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE19addNewMatchedReaderERKNS_11ReaderProxyE+0x72>
 8009fd0:	069c      	lsls	r4, r3, #26
 8009fd2:	d527      	bpl.n	800a024 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE19addNewMatchedReaderERKNS_11ReaderProxyE+0x78>
 8009fd4:	065a      	lsls	r2, r3, #25
 8009fd6:	d528      	bpl.n	800a02a <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE19addNewMatchedReaderERKNS_11ReaderProxyE+0x7e>
 8009fd8:	09da      	lsrs	r2, r3, #7
 8009fda:	d013      	beq.n	800a004 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE19addNewMatchedReaderERKNS_11ReaderProxyE+0x58>
                return false;
 8009fdc:	2000      	movs	r0, #0
    log("StatefulWriter[%s]: New reader added with id: ", &this->m_attributes.topicName[0]);
    printGuid(newProxy.remoteReaderGuid);
    log("\n");
#endif
    return m_proxies.add(newProxy);
}
 8009fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                        if(!(byte & 1)){
 8009fe0:	4616      	mov	r6, r2
 8009fe2:	2701      	movs	r7, #1
                            m_bitMap[bucket] |= 1 << bit;
                            m_data[bucket*8+bit] = data;
 8009fe4:	2258      	movs	r2, #88	; 0x58
 8009fe6:	4604      	mov	r4, r0
                            m_bitMap[bucket] |= 1 << bit;
 8009fe8:	433b      	orrs	r3, r7
                            ++m_numElements;
 8009fea:	3501      	adds	r5, #1
                            m_data[bucket*8+bit] = data;
 8009fec:	fb02 0006 	mla	r0, r2, r6, r0
                            m_bitMap[bucket] |= 1 << bit;
 8009ff0:	f884 3178 	strb.w	r3, [r4, #376]	; 0x178
                            m_data[bucket*8+bit] = data;
 8009ff4:	f500 70c0 	add.w	r0, r0, #384	; 0x180
 8009ff8:	f005 fcab 	bl	800f952 <memcpy>
                            return true;
 8009ffc:	2001      	movs	r0, #1
                            ++m_numElements;
 8009ffe:	f8c4 517c 	str.w	r5, [r4, #380]	; 0x17c
 800a002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                        if(!(byte & 1)){
 800a004:	f06f 077f 	mvn.w	r7, #127	; 0x7f
 800a008:	2607      	movs	r6, #7
 800a00a:	e7eb      	b.n	8009fe4 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE19addNewMatchedReaderERKNS_11ReaderProxyE+0x38>
 800a00c:	2702      	movs	r7, #2
 800a00e:	2601      	movs	r6, #1
 800a010:	e7e8      	b.n	8009fe4 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE19addNewMatchedReaderERKNS_11ReaderProxyE+0x38>
 800a012:	2704      	movs	r7, #4
 800a014:	2602      	movs	r6, #2
 800a016:	e7e5      	b.n	8009fe4 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE19addNewMatchedReaderERKNS_11ReaderProxyE+0x38>
 800a018:	2708      	movs	r7, #8
 800a01a:	2603      	movs	r6, #3
 800a01c:	e7e2      	b.n	8009fe4 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE19addNewMatchedReaderERKNS_11ReaderProxyE+0x38>
 800a01e:	2710      	movs	r7, #16
 800a020:	2604      	movs	r6, #4
 800a022:	e7df      	b.n	8009fe4 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE19addNewMatchedReaderERKNS_11ReaderProxyE+0x38>
 800a024:	2720      	movs	r7, #32
 800a026:	2605      	movs	r6, #5
 800a028:	e7dc      	b.n	8009fe4 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE19addNewMatchedReaderERKNS_11ReaderProxyE+0x38>
 800a02a:	2740      	movs	r7, #64	; 0x40
 800a02c:	2606      	movs	r6, #6
 800a02e:	e7d9      	b.n	8009fe4 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE19addNewMatchedReaderERKNS_11ReaderProxyE+0x38>

0800a030 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE19addNewMatchedWriterERKNS_11WriterProxyE>:

template <class NetworkDriver>
bool StatefulReaderT<NetworkDriver>::addNewMatchedWriter(const WriterProxy& newProxy){
 800a030:	b4f0      	push	{r4, r5, r6, r7}
            if(isFull()){
 800a032:	6f47      	ldr	r7, [r0, #116]	; 0x74
 800a034:	2f03      	cmp	r7, #3
 800a036:	d013      	beq.n	800a060 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE19addNewMatchedWriterERKNS_11WriterProxyE+0x30>
                    uint8_t byte = m_bitMap[bucket];
 800a038:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800a03c:	4606      	mov	r6, r0
                        if(!(byte & 1)){
 800a03e:	f013 0401 	ands.w	r4, r3, #1
 800a042:	d012      	beq.n	800a06a <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE19addNewMatchedWriterERKNS_11WriterProxyE+0x3a>
 800a044:	0798      	lsls	r0, r3, #30
 800a046:	d52f      	bpl.n	800a0a8 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE19addNewMatchedWriterERKNS_11WriterProxyE+0x78>
 800a048:	075a      	lsls	r2, r3, #29
 800a04a:	d530      	bpl.n	800a0ae <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE19addNewMatchedWriterERKNS_11WriterProxyE+0x7e>
 800a04c:	071d      	lsls	r5, r3, #28
 800a04e:	d531      	bpl.n	800a0b4 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE19addNewMatchedWriterERKNS_11WriterProxyE+0x84>
 800a050:	06dc      	lsls	r4, r3, #27
 800a052:	d532      	bpl.n	800a0ba <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE19addNewMatchedWriterERKNS_11WriterProxyE+0x8a>
 800a054:	0698      	lsls	r0, r3, #26
 800a056:	d533      	bpl.n	800a0c0 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE19addNewMatchedWriterERKNS_11WriterProxyE+0x90>
 800a058:	065a      	lsls	r2, r3, #25
 800a05a:	d534      	bpl.n	800a0c6 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE19addNewMatchedWriterERKNS_11WriterProxyE+0x96>
 800a05c:	09da      	lsrs	r2, r3, #7
 800a05e:	d01f      	beq.n	800a0a0 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE19addNewMatchedWriterERKNS_11WriterProxyE+0x70>
                return false;
 800a060:	f04f 0c00 	mov.w	ip, #0
    printf("StatefulReader[%s]: New writer added with id: ", &this->m_attributes.topicName[0]);
    printGuid(newProxy.remoteWriterGuid);
    printf("\n");
#endif
    return m_proxies.add(newProxy);
}
 800a064:	bcf0      	pop	{r4, r5, r6, r7}
 800a066:	4660      	mov	r0, ip
 800a068:	4770      	bx	lr
                        if(!(byte & 1)){
 800a06a:	2001      	movs	r0, #1
                            m_data[bucket*8+bit] = data;
 800a06c:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
                            m_bitMap[bucket] |= 1 << bit;
 800a070:	4303      	orrs	r3, r0
                            m_data[bucket*8+bit] = data;
 800a072:	460d      	mov	r5, r1
                            ++m_numElements;
 800a074:	3701      	adds	r7, #1
                            m_data[bucket*8+bit] = data;
 800a076:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
                            m_bitMap[bucket] |= 1 << bit;
 800a07a:	f886 3070 	strb.w	r3, [r6, #112]	; 0x70
                            return true;
 800a07e:	f04f 0c01 	mov.w	ip, #1
                            m_data[bucket*8+bit] = data;
 800a082:	3478      	adds	r4, #120	; 0x78
 800a084:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a086:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a088:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a08a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a08c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a08e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a090:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a094:	e884 0003 	stmia.w	r4, {r0, r1}
                            ++m_numElements;
 800a098:	6777      	str	r7, [r6, #116]	; 0x74
 800a09a:	4660      	mov	r0, ip
 800a09c:	bcf0      	pop	{r4, r5, r6, r7}
 800a09e:	4770      	bx	lr
                        if(!(byte & 1)){
 800a0a0:	f06f 007f 	mvn.w	r0, #127	; 0x7f
 800a0a4:	2407      	movs	r4, #7
 800a0a6:	e7e1      	b.n	800a06c <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE19addNewMatchedWriterERKNS_11WriterProxyE+0x3c>
 800a0a8:	2002      	movs	r0, #2
 800a0aa:	2401      	movs	r4, #1
 800a0ac:	e7de      	b.n	800a06c <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE19addNewMatchedWriterERKNS_11WriterProxyE+0x3c>
 800a0ae:	2004      	movs	r0, #4
 800a0b0:	2402      	movs	r4, #2
 800a0b2:	e7db      	b.n	800a06c <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE19addNewMatchedWriterERKNS_11WriterProxyE+0x3c>
 800a0b4:	2008      	movs	r0, #8
 800a0b6:	2403      	movs	r4, #3
 800a0b8:	e7d8      	b.n	800a06c <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE19addNewMatchedWriterERKNS_11WriterProxyE+0x3c>
 800a0ba:	2010      	movs	r0, #16
 800a0bc:	2404      	movs	r4, #4
 800a0be:	e7d5      	b.n	800a06c <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE19addNewMatchedWriterERKNS_11WriterProxyE+0x3c>
 800a0c0:	2020      	movs	r0, #32
 800a0c2:	2405      	movs	r4, #5
 800a0c4:	e7d2      	b.n	800a06c <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE19addNewMatchedWriterERKNS_11WriterProxyE+0x3c>
 800a0c6:	2040      	movs	r0, #64	; 0x40
 800a0c8:	2406      	movs	r4, #6
 800a0ca:	e7cf      	b.n	800a06c <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE19addNewMatchedWriterERKNS_11WriterProxyE+0x3c>

0800a0cc <_Z26receiveCallbackLatencyRTPSPvRKN4rtps17ReaderCacheChangeE>:
void receiveCallbackLatencyRTPS(void* callee, const rtps::ReaderCacheChange& cacheChange){
 800a0cc:	b570      	push	{r4, r5, r6, lr}
 800a0ce:	460d      	mov	r5, r1
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_RESET);
	}

	inline void startReceived(){
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_SET);
 800a0d0:	2201      	movs	r2, #1
 800a0d2:	2140      	movs	r1, #64	; 0x40
 800a0d4:	4811      	ldr	r0, [pc, #68]	; (800a11c <_Z26receiveCallbackLatencyRTPSPvRKN4rtps17ReaderCacheChangeE+0x50>)
 800a0d6:	f7f7 f935 	bl	8001344 <HAL_GPIO_WritePin>
	bool success = cacheChange.copyInto(data.data(), data.size());
 800a0da:	88ea      	ldrh	r2, [r5, #6]
        ReaderCacheChange& operator=(const ReaderCacheChange &other) = delete;
        ReaderCacheChange& operator=(ReaderCacheChange&& other) = delete;


        bool copyInto(uint8_t* buffer, DataSize_t destSize) const{
            if(destSize < size){
 800a0dc:	2a10      	cmp	r2, #16
 800a0de:	d900      	bls.n	800a0e2 <_Z26receiveCallbackLatencyRTPSPvRKN4rtps17ReaderCacheChangeE+0x16>
 800a0e0:	e7fe      	b.n	800a0e0 <_Z26receiveCallbackLatencyRTPSPvRKN4rtps17ReaderCacheChangeE+0x14>
                return false;
            }else{
                memcpy(buffer, data, size);
 800a0e2:	4c0f      	ldr	r4, [pc, #60]	; (800a120 <_Z26receiveCallbackLatencyRTPSPvRKN4rtps17ReaderCacheChangeE+0x54>)
 800a0e4:	6829      	ldr	r1, [r5, #0]
 800a0e6:	4620      	mov	r0, r4
 800a0e8:	f005 fc33 	bl	800f952 <memcpy>
		}

	inline void endReceived(){
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, GPIO_PIN_RESET);
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	2140      	movs	r1, #64	; 0x40
 800a0f0:	480a      	ldr	r0, [pc, #40]	; (800a11c <_Z26receiveCallbackLatencyRTPSPvRKN4rtps17ReaderCacheChangeE+0x50>)
 800a0f2:	f7f7 f927 	bl	8001344 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_RESET);
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	2120      	movs	r1, #32
 800a0fa:	4808      	ldr	r0, [pc, #32]	; (800a11c <_Z26receiveCallbackLatencyRTPSPvRKN4rtps17ReaderCacheChangeE+0x50>)
 800a0fc:	f7f7 f922 	bl	8001344 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_RESET);
 800a100:	2200      	movs	r2, #0
 800a102:	2180      	movs	r1, #128	; 0x80
 800a104:	4807      	ldr	r0, [pc, #28]	; (800a124 <_Z26receiveCallbackLatencyRTPSPvRKN4rtps17ReaderCacheChangeE+0x58>)
 800a106:	f7f7 f91d 	bl	8001344 <HAL_GPIO_WritePin>
	xTaskNotifyGive(defaultTaskHandle);
 800a10a:	2300      	movs	r3, #0
 800a10c:	6920      	ldr	r0, [r4, #16]
 800a10e:	2202      	movs	r2, #2
 800a110:	4619      	mov	r1, r3
}
 800a112:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	xTaskNotifyGive(defaultTaskHandle);
 800a116:	f7fa be27 	b.w	8004d68 <xTaskGenericNotify>
 800a11a:	bf00      	nop
 800a11c:	40020c00 	.word	0x40020c00
 800a120:	200033f4 	.word	0x200033f4
 800a124:	40020400 	.word	0x40020400

0800a128 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEED1Ev>:
StatefulWriterT<NetworkDriver>::~StatefulWriterT(){
 800a128:	b570      	push	{r4, r5, r6, lr}
}
 800a12a:	4a0f      	ldr	r2, [pc, #60]	; (800a168 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEED1Ev+0x40>)
StatefulWriterT<NetworkDriver>::~StatefulWriterT(){
 800a12c:	4605      	mov	r5, r0
    m_running = false;
 800a12e:	2300      	movs	r3, #0
    sys_msleep(10); // Required for tests/ Join currently not available
 800a130:	200a      	movs	r0, #10
}
 800a132:	602a      	str	r2, [r5, #0]
   *
   *  @tparam  Tp  Type of element. Required to be a complete type.
   *  @tparam  N  Number of elements.
  */
  template<typename _Tp, std::size_t _Nm>
    struct array
 800a134:	f105 0684 	add.w	r6, r5, #132	; 0x84
    m_running = false;
 800a138:	f885 3174 	strb.w	r3, [r5, #372]	; 0x174
 800a13c:	f505 74b0 	add.w	r4, r5, #352	; 0x160
    sys_msleep(10); // Required for tests/ Join currently not available
 800a140:	f7fc fa96 	bl	8006670 <sys_msleep>
        sys_mutex_free(&m_mutex);
 800a144:	f105 0058 	add.w	r0, r5, #88	; 0x58
 800a148:	f7ff fc8a 	bl	8009a60 <sys_mutex_free>
 800a14c:	3c14      	subs	r4, #20

#include "rtps/common/types.h"
#include "rtps/storages/PBufWrapper.h"

namespace rtps{
    struct CacheChange{
 800a14e:	f104 000c 	add.w	r0, r4, #12
 800a152:	f005 f86f 	bl	800f234 <_ZN4rtps11PBufWrapperD1Ev>
 800a156:	42a6      	cmp	r6, r4
 800a158:	d1f8      	bne.n	800a14c <_ZN4rtps15StatefulWriterTINS_9UdpDriverEED1Ev+0x24>
            this->destPort = other.destPort;
            this->destAddr = other.destAddr;
        }

        PacketInfo() = default;
        ~PacketInfo() = default;
 800a15a:	f105 006c 	add.w	r0, r5, #108	; 0x6c
 800a15e:	f005 f869 	bl	800f234 <_ZN4rtps11PBufWrapperD1Ev>
}
 800a162:	4628      	mov	r0, r5
 800a164:	bd70      	pop	{r4, r5, r6, pc}
 800a166:	bf00      	nop
 800a168:	08011f6c 	.word	0x08011f6c

0800a16c <_ZN4rtps16StatelessWriterTINS_9UdpDriverEED1Ev>:
}
 800a16c:	4b0b      	ldr	r3, [pc, #44]	; (800a19c <_ZN4rtps16StatelessWriterTINS_9UdpDriverEED1Ev+0x30>)
StatelessWriterT<NetworkDriver>::~StatelessWriterT(){
 800a16e:	b570      	push	{r4, r5, r6, lr}
 800a170:	4606      	mov	r6, r0
 800a172:	f100 0584 	add.w	r5, r0, #132	; 0x84
 800a176:	f500 74b0 	add.w	r4, r0, #352	; 0x160
}
 800a17a:	f840 3b58 	str.w	r3, [r0], #88
        sys_mutex_free(&m_mutex);
 800a17e:	f7ff fc6f 	bl	8009a60 <sys_mutex_free>
 800a182:	3c14      	subs	r4, #20
 800a184:	f104 000c 	add.w	r0, r4, #12
 800a188:	f005 f854 	bl	800f234 <_ZN4rtps11PBufWrapperD1Ev>
 800a18c:	42a5      	cmp	r5, r4
 800a18e:	d1f8      	bne.n	800a182 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEED1Ev+0x16>
 800a190:	f106 006c 	add.w	r0, r6, #108	; 0x6c
 800a194:	f005 f84e 	bl	800f234 <_ZN4rtps11PBufWrapperD1Ev>
}
 800a198:	4630      	mov	r0, r6
 800a19a:	bd70      	pop	{r4, r5, r6, pc}
 800a19c:	08011f20 	.word	0x08011f20

0800a1a0 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEED1Ev>:
StatefulReaderT<NetworkDriver>::~StatefulReaderT(){
 800a1a0:	b510      	push	{r4, lr}
}
 800a1a2:	4b06      	ldr	r3, [pc, #24]	; (800a1bc <_ZN4rtps15StatefulReaderTINS_9UdpDriverEED1Ev+0x1c>)
StatefulReaderT<NetworkDriver>::~StatefulReaderT(){
 800a1a4:	4604      	mov	r4, r0
    sys_mutex_free(&m_mutex);
 800a1a6:	f500 7094 	add.w	r0, r0, #296	; 0x128
}
 800a1aa:	6023      	str	r3, [r4, #0]
    sys_mutex_free(&m_mutex);
 800a1ac:	f7ff fc58 	bl	8009a60 <sys_mutex_free>
 800a1b0:	f104 0064 	add.w	r0, r4, #100	; 0x64
 800a1b4:	f005 f83e 	bl	800f234 <_ZN4rtps11PBufWrapperD1Ev>
}
 800a1b8:	4620      	mov	r0, r4
 800a1ba:	bd10      	pop	{r4, pc}
 800a1bc:	08011f48 	.word	0x08011f48

0800a1c0 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEED0Ev>:
StatefulReaderT<NetworkDriver>::~StatefulReaderT(){
 800a1c0:	b510      	push	{r4, lr}
}
 800a1c2:	4b08      	ldr	r3, [pc, #32]	; (800a1e4 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEED0Ev+0x24>)
StatefulReaderT<NetworkDriver>::~StatefulReaderT(){
 800a1c4:	4604      	mov	r4, r0
    sys_mutex_free(&m_mutex);
 800a1c6:	f500 7094 	add.w	r0, r0, #296	; 0x128
}
 800a1ca:	6023      	str	r3, [r4, #0]
    sys_mutex_free(&m_mutex);
 800a1cc:	f7ff fc48 	bl	8009a60 <sys_mutex_free>
 800a1d0:	f104 0064 	add.w	r0, r4, #100	; 0x64
 800a1d4:	f005 f82e 	bl	800f234 <_ZN4rtps11PBufWrapperD1Ev>
	vPortFree ( ptr );
 800a1d8:	4620      	mov	r0, r4
 800a1da:	f7fb f889 	bl	80052f0 <vPortFree>
}
 800a1de:	4620      	mov	r0, r4
 800a1e0:	bd10      	pop	{r4, pc}
 800a1e2:	bf00      	nop
 800a1e4:	08011f48 	.word	0x08011f48

0800a1e8 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE21setAllChangesToUnsentEv>:
    //return kind == ChangeKind_t::INVALID || (m_topicKind == TopicKind_t::NO_KEY && kind != ChangeKind_t::ALIVE);
    return kind != ChangeKind_t::ALIVE;
}

template <class NetworkDriver>
void StatefulWriterT<NetworkDriver>::setAllChangesToUnsent(){
 800a1e8:	b538      	push	{r3, r4, r5, lr}
    Lock lock(m_mutex);
 800a1ea:	f100 0558 	add.w	r5, r0, #88	; 0x58
void StatefulWriterT<NetworkDriver>::setAllChangesToUnsent(){
 800a1ee:	4604      	mov	r4, r0
namespace rtps{

    class Lock {
    public:
        explicit Lock(sys_mutex_t& passedMutex) : m_mutex(passedMutex) {
            sys_mutex_lock(&m_mutex);
 800a1f0:	4628      	mov	r0, r5
 800a1f2:	f7ff fc39 	bl	8009a68 <sys_mutex_lock>

    m_nextSequenceNumberToSend = m_history.getSeqNumMin();
 800a1f6:	f104 0084 	add.w	r0, r4, #132	; 0x84
 800a1fa:	f005 f891 	bl	800f320 <_ZNK4rtps18SimpleHistoryCache12getSeqNumMinEv>
 800a1fe:	f104 037c 	add.w	r3, r4, #124	; 0x7c
 800a202:	c803      	ldmia	r0, {r0, r1}
 800a204:	e883 0003 	stmia.w	r3, {r0, r1}

    if(mp_threadPool != nullptr){
 800a208:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800a20a:	b110      	cbz	r0, 800a212 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE21setAllChangesToUnsentEv+0x2a>
        mp_threadPool->addWorkload(this);
 800a20c:	4621      	mov	r1, r4
 800a20e:	f001 fd07 	bl	800bc20 <_ZN4rtps10ThreadPool11addWorkloadEPNS_6WriterE>
        };

        ~Lock() {
            sys_mutex_unlock(&m_mutex);
 800a212:	4628      	mov	r0, r5
    }
}
 800a214:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a218:	f7ff bc2c 	b.w	8009a74 <sys_mutex_unlock>

0800a21c <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE21setAllChangesToUnsentEv>:
void StatelessWriterT<NetworkDriver>::setAllChangesToUnsent() {
 800a21c:	b538      	push	{r3, r4, r5, lr}
    Lock lock(m_mutex);
 800a21e:	f100 0558 	add.w	r5, r0, #88	; 0x58
void StatelessWriterT<NetworkDriver>::setAllChangesToUnsent() {
 800a222:	4604      	mov	r4, r0
            sys_mutex_lock(&m_mutex);
 800a224:	4628      	mov	r0, r5
 800a226:	f7ff fc1f 	bl	8009a68 <sys_mutex_lock>
    m_nextSequenceNumberToSend = m_history.getSeqNumMin();
 800a22a:	f104 0084 	add.w	r0, r4, #132	; 0x84
 800a22e:	f005 f877 	bl	800f320 <_ZNK4rtps18SimpleHistoryCache12getSeqNumMinEv>
 800a232:	f104 037c 	add.w	r3, r4, #124	; 0x7c
 800a236:	c803      	ldmia	r0, {r0, r1}
 800a238:	e883 0003 	stmia.w	r3, {r0, r1}
    if(mp_threadPool != nullptr){
 800a23c:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800a23e:	b110      	cbz	r0, 800a246 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE21setAllChangesToUnsentEv+0x2a>
        mp_threadPool->addWorkload(this);
 800a240:	4621      	mov	r1, r4
 800a242:	f001 fced 	bl	800bc20 <_ZN4rtps10ThreadPool11addWorkloadEPNS_6WriterE>
            sys_mutex_unlock(&m_mutex);
 800a246:	4628      	mov	r0, r5
}
 800a248:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a24c:	f7ff bc12 	b.w	8009a74 <sys_mutex_unlock>

0800a250 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE9newChangeENS_12ChangeKind_tEPKht>:
    if (isIrrelevant(kind)) {
 800a250:	2901      	cmp	r1, #1
const rtps::CacheChange* StatefulWriterT<NetworkDriver>::newChange(ChangeKind_t kind, const uint8_t* data, DataSize_t size) {
 800a252:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (isIrrelevant(kind)) {
 800a256:	d12c      	bne.n	800a2b2 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE9newChangeENS_12ChangeKind_tEPKht+0x62>
    Lock lock{m_mutex};
 800a258:	f100 0758 	add.w	r7, r0, #88	; 0x58
    if(m_history.isFull()){
 800a25c:	f100 0584 	add.w	r5, r0, #132	; 0x84
 800a260:	4604      	mov	r4, r0
 800a262:	4698      	mov	r8, r3
            sys_mutex_lock(&m_mutex);
 800a264:	4638      	mov	r0, r7
 800a266:	4616      	mov	r6, r2
 800a268:	f7ff fbfe 	bl	8009a68 <sys_mutex_lock>
 800a26c:	4628      	mov	r0, r5
 800a26e:	f005 f849 	bl	800f304 <_ZNK4rtps18SimpleHistoryCache6isFullEv>
 800a272:	b980      	cbnz	r0, 800a296 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE9newChangeENS_12ChangeKind_tEPKht+0x46>
    auto* result = m_history.addChange(data, size);
 800a274:	4628      	mov	r0, r5
 800a276:	4642      	mov	r2, r8
 800a278:	4631      	mov	r1, r6
 800a27a:	f005 f86d 	bl	800f358 <_ZN4rtps18SimpleHistoryCache9addChangeEPKht>
 800a27e:	4605      	mov	r5, r0
    if(mp_threadPool != nullptr){
 800a280:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800a282:	b110      	cbz	r0, 800a28a <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE9newChangeENS_12ChangeKind_tEPKht+0x3a>
        mp_threadPool->addWorkload(this);
 800a284:	4621      	mov	r1, r4
 800a286:	f001 fccb 	bl	800bc20 <_ZN4rtps10ThreadPool11addWorkloadEPNS_6WriterE>
            sys_mutex_unlock(&m_mutex);
 800a28a:	4638      	mov	r0, r7
 800a28c:	f7ff fbf2 	bl	8009a74 <sys_mutex_unlock>
}
 800a290:	4628      	mov	r0, r5
 800a292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        SequenceNumber_t newMin = ++SequenceNumber_t(m_history.getSeqNumMin());
 800a296:	4628      	mov	r0, r5
 800a298:	f005 f842 	bl	800f320 <_ZNK4rtps18SimpleHistoryCache12getSeqNumMinEv>
        bool operator!=(const SequenceNumber_t& other) const{
            return !(*this == other);
        }

        bool operator<(const SequenceNumber_t& other) const{
            return high < other.high || (high == other.high && low < other.low);
 800a29c:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800a29e:	e9d0 2300 	ldrd	r2, r3, [r0]
            return *this == other || *this < other;
        }

        SequenceNumber_t& operator++(){
            ++low;
            if(low == 0){
 800a2a2:	3301      	adds	r3, #1
                ++high;
 800a2a4:	bf08      	it	eq
 800a2a6:	3201      	addeq	r2, #1
            return high < other.high || (high == other.high && low < other.low);
 800a2a8:	4291      	cmp	r1, r2
 800a2aa:	da06      	bge.n	800a2ba <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE9newChangeENS_12ChangeKind_tEPKht+0x6a>
            m_nextSequenceNumberToSend = newMin; // Make sure we have the correct sn to send
 800a2ac:	e9c4 231f 	strd	r2, r3, [r4, #124]	; 0x7c
 800a2b0:	e7e0      	b.n	800a274 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE9newChangeENS_12ChangeKind_tEPKht+0x24>
        return nullptr;
 800a2b2:	2500      	movs	r5, #0
}
 800a2b4:	4628      	mov	r0, r5
 800a2b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2ba:	d1db      	bne.n	800a274 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE9newChangeENS_12ChangeKind_tEPKht+0x24>
 800a2bc:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800a2c0:	4299      	cmp	r1, r3
 800a2c2:	d2d7      	bcs.n	800a274 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE9newChangeENS_12ChangeKind_tEPKht+0x24>
 800a2c4:	e7f2      	b.n	800a2ac <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE9newChangeENS_12ChangeKind_tEPKht+0x5c>
 800a2c6:	bf00      	nop

0800a2c8 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE9newChangeENS_12ChangeKind_tEPKht>:
    if(isIrrelevant(kind)){
 800a2c8:	2901      	cmp	r1, #1
const CacheChange* StatelessWriterT<NetworkDriver>::newChange(rtps::ChangeKind_t kind, const uint8_t* data, DataSize_t size) {
 800a2ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if(isIrrelevant(kind)){
 800a2ce:	d12c      	bne.n	800a32a <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE9newChangeENS_12ChangeKind_tEPKht+0x62>
    Lock lock(m_mutex);
 800a2d0:	f100 0758 	add.w	r7, r0, #88	; 0x58
    if(m_history.isFull()){
 800a2d4:	f100 0584 	add.w	r5, r0, #132	; 0x84
 800a2d8:	4604      	mov	r4, r0
 800a2da:	4698      	mov	r8, r3
            sys_mutex_lock(&m_mutex);
 800a2dc:	4638      	mov	r0, r7
 800a2de:	4616      	mov	r6, r2
 800a2e0:	f7ff fbc2 	bl	8009a68 <sys_mutex_lock>
 800a2e4:	4628      	mov	r0, r5
 800a2e6:	f005 f80d 	bl	800f304 <_ZNK4rtps18SimpleHistoryCache6isFullEv>
 800a2ea:	b980      	cbnz	r0, 800a30e <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE9newChangeENS_12ChangeKind_tEPKht+0x46>
    auto* result = m_history.addChange(data, size);
 800a2ec:	4628      	mov	r0, r5
 800a2ee:	4642      	mov	r2, r8
 800a2f0:	4631      	mov	r1, r6
 800a2f2:	f005 f831 	bl	800f358 <_ZN4rtps18SimpleHistoryCache9addChangeEPKht>
 800a2f6:	4605      	mov	r5, r0
    if(mp_threadPool != nullptr){
 800a2f8:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800a2fa:	b110      	cbz	r0, 800a302 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE9newChangeENS_12ChangeKind_tEPKht+0x3a>
        mp_threadPool->addWorkload(this);
 800a2fc:	4621      	mov	r1, r4
 800a2fe:	f001 fc8f 	bl	800bc20 <_ZN4rtps10ThreadPool11addWorkloadEPNS_6WriterE>
            sys_mutex_unlock(&m_mutex);
 800a302:	4638      	mov	r0, r7
 800a304:	f7ff fbb6 	bl	8009a74 <sys_mutex_unlock>
}
 800a308:	4628      	mov	r0, r5
 800a30a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        SequenceNumber_t newMin = ++SequenceNumber_t(m_history.getSeqNumMin());
 800a30e:	4628      	mov	r0, r5
 800a310:	f005 f806 	bl	800f320 <_ZNK4rtps18SimpleHistoryCache12getSeqNumMinEv>
 800a314:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800a316:	e9d0 2300 	ldrd	r2, r3, [r0]
            if(low == 0){
 800a31a:	3301      	adds	r3, #1
                ++high;
 800a31c:	bf08      	it	eq
 800a31e:	3201      	addeq	r2, #1
            return high < other.high || (high == other.high && low < other.low);
 800a320:	4291      	cmp	r1, r2
 800a322:	da06      	bge.n	800a332 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE9newChangeENS_12ChangeKind_tEPKht+0x6a>
            m_nextSequenceNumberToSend = newMin; // Make sure we have the correct sn to send
 800a324:	e9c4 231f 	strd	r2, r3, [r4, #124]	; 0x7c
 800a328:	e7e0      	b.n	800a2ec <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE9newChangeENS_12ChangeKind_tEPKht+0x24>
        return nullptr;
 800a32a:	2500      	movs	r5, #0
}
 800a32c:	4628      	mov	r0, r5
 800a32e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a332:	d1db      	bne.n	800a2ec <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE9newChangeENS_12ChangeKind_tEPKht+0x24>
 800a334:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800a338:	4299      	cmp	r1, r3
 800a33a:	d2d7      	bcs.n	800a2ec <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE9newChangeENS_12ChangeKind_tEPKht+0x24>
 800a33c:	e7f2      	b.n	800a324 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE9newChangeENS_12ChangeKind_tEPKht+0x5c>
 800a33e:	bf00      	nop

0800a340 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE19addNewMatchedReaderERKNS_11ReaderProxyE>:
bool StatelessWriterT<NetworkDriver>::addNewMatchedReader(const ReaderProxy& newProxy){
 800a340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
            if(isFull()){
 800a342:	f8d0 5170 	ldr.w	r5, [r0, #368]	; 0x170
 800a346:	2d03      	cmp	r5, #3
 800a348:	d012      	beq.n	800a370 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE19addNewMatchedReaderERKNS_11ReaderProxyE+0x30>
                    uint8_t byte = m_bitMap[bucket];
 800a34a:	f890 316c 	ldrb.w	r3, [r0, #364]	; 0x16c
                        if(!(byte & 1)){
 800a34e:	f013 0201 	ands.w	r2, r3, #1
 800a352:	d00f      	beq.n	800a374 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE19addNewMatchedReaderERKNS_11ReaderProxyE+0x34>
 800a354:	079c      	lsls	r4, r3, #30
 800a356:	d523      	bpl.n	800a3a0 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE19addNewMatchedReaderERKNS_11ReaderProxyE+0x60>
 800a358:	075a      	lsls	r2, r3, #29
 800a35a:	d524      	bpl.n	800a3a6 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE19addNewMatchedReaderERKNS_11ReaderProxyE+0x66>
 800a35c:	071f      	lsls	r7, r3, #28
 800a35e:	d525      	bpl.n	800a3ac <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE19addNewMatchedReaderERKNS_11ReaderProxyE+0x6c>
 800a360:	06de      	lsls	r6, r3, #27
 800a362:	d526      	bpl.n	800a3b2 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE19addNewMatchedReaderERKNS_11ReaderProxyE+0x72>
 800a364:	069c      	lsls	r4, r3, #26
 800a366:	d527      	bpl.n	800a3b8 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE19addNewMatchedReaderERKNS_11ReaderProxyE+0x78>
 800a368:	065a      	lsls	r2, r3, #25
 800a36a:	d528      	bpl.n	800a3be <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE19addNewMatchedReaderERKNS_11ReaderProxyE+0x7e>
 800a36c:	09da      	lsrs	r2, r3, #7
 800a36e:	d013      	beq.n	800a398 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE19addNewMatchedReaderERKNS_11ReaderProxyE+0x58>
                return false;
 800a370:	2000      	movs	r0, #0
}
 800a372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                        if(!(byte & 1)){
 800a374:	4616      	mov	r6, r2
 800a376:	2701      	movs	r7, #1
                            m_data[bucket*8+bit] = data;
 800a378:	2258      	movs	r2, #88	; 0x58
 800a37a:	4604      	mov	r4, r0
                            m_bitMap[bucket] |= 1 << bit;
 800a37c:	433b      	orrs	r3, r7
                            ++m_numElements;
 800a37e:	3501      	adds	r5, #1
                            m_data[bucket*8+bit] = data;
 800a380:	fb02 0006 	mla	r0, r2, r6, r0
                            m_bitMap[bucket] |= 1 << bit;
 800a384:	f884 316c 	strb.w	r3, [r4, #364]	; 0x16c
                            m_data[bucket*8+bit] = data;
 800a388:	f500 70ba 	add.w	r0, r0, #372	; 0x174
 800a38c:	f005 fae1 	bl	800f952 <memcpy>
                            return true;
 800a390:	2001      	movs	r0, #1
                            ++m_numElements;
 800a392:	f8c4 5170 	str.w	r5, [r4, #368]	; 0x170
 800a396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                        if(!(byte & 1)){
 800a398:	f06f 077f 	mvn.w	r7, #127	; 0x7f
 800a39c:	2607      	movs	r6, #7
 800a39e:	e7eb      	b.n	800a378 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE19addNewMatchedReaderERKNS_11ReaderProxyE+0x38>
 800a3a0:	2702      	movs	r7, #2
 800a3a2:	2601      	movs	r6, #1
 800a3a4:	e7e8      	b.n	800a378 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE19addNewMatchedReaderERKNS_11ReaderProxyE+0x38>
 800a3a6:	2704      	movs	r7, #4
 800a3a8:	2602      	movs	r6, #2
 800a3aa:	e7e5      	b.n	800a378 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE19addNewMatchedReaderERKNS_11ReaderProxyE+0x38>
 800a3ac:	2708      	movs	r7, #8
 800a3ae:	2603      	movs	r6, #3
 800a3b0:	e7e2      	b.n	800a378 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE19addNewMatchedReaderERKNS_11ReaderProxyE+0x38>
 800a3b2:	2710      	movs	r7, #16
 800a3b4:	2604      	movs	r6, #4
 800a3b6:	e7df      	b.n	800a378 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE19addNewMatchedReaderERKNS_11ReaderProxyE+0x38>
 800a3b8:	2720      	movs	r7, #32
 800a3ba:	2605      	movs	r6, #5
 800a3bc:	e7dc      	b.n	800a378 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE19addNewMatchedReaderERKNS_11ReaderProxyE+0x38>
 800a3be:	2740      	movs	r7, #64	; 0x40
 800a3c0:	2606      	movs	r6, #6
 800a3c2:	e7d9      	b.n	800a378 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE19addNewMatchedReaderERKNS_11ReaderProxyE+0x38>

0800a3c4 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEED0Ev>:
}
 800a3c4:	4b0d      	ldr	r3, [pc, #52]	; (800a3fc <_ZN4rtps16StatelessWriterTINS_9UdpDriverEED0Ev+0x38>)
StatelessWriterT<NetworkDriver>::~StatelessWriterT(){
 800a3c6:	b570      	push	{r4, r5, r6, lr}
 800a3c8:	4605      	mov	r5, r0
 800a3ca:	f100 0684 	add.w	r6, r0, #132	; 0x84
 800a3ce:	f500 74b0 	add.w	r4, r0, #352	; 0x160
}
 800a3d2:	f840 3b58 	str.w	r3, [r0], #88
        sys_mutex_free(&m_mutex);
 800a3d6:	f7ff fb43 	bl	8009a60 <sys_mutex_free>
 800a3da:	3c14      	subs	r4, #20
 800a3dc:	f104 000c 	add.w	r0, r4, #12
 800a3e0:	f004 ff28 	bl	800f234 <_ZN4rtps11PBufWrapperD1Ev>
 800a3e4:	42a6      	cmp	r6, r4
 800a3e6:	d1f8      	bne.n	800a3da <_ZN4rtps16StatelessWriterTINS_9UdpDriverEED0Ev+0x16>
 800a3e8:	f105 006c 	add.w	r0, r5, #108	; 0x6c
 800a3ec:	f004 ff22 	bl	800f234 <_ZN4rtps11PBufWrapperD1Ev>
 800a3f0:	4628      	mov	r0, r5
 800a3f2:	f7fa ff7d 	bl	80052f0 <vPortFree>
}
 800a3f6:	4628      	mov	r0, r5
 800a3f8:	bd70      	pop	{r4, r5, r6, pc}
 800a3fa:	bf00      	nop
 800a3fc:	08011f20 	.word	0x08011f20

0800a400 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEED0Ev>:
StatefulWriterT<NetworkDriver>::~StatefulWriterT(){
 800a400:	b570      	push	{r4, r5, r6, lr}
}
 800a402:	4a10      	ldr	r2, [pc, #64]	; (800a444 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEED0Ev+0x44>)
StatefulWriterT<NetworkDriver>::~StatefulWriterT(){
 800a404:	4605      	mov	r5, r0
    m_running = false;
 800a406:	2300      	movs	r3, #0
    sys_msleep(10); // Required for tests/ Join currently not available
 800a408:	200a      	movs	r0, #10
}
 800a40a:	602a      	str	r2, [r5, #0]
 800a40c:	f105 0684 	add.w	r6, r5, #132	; 0x84
    m_running = false;
 800a410:	f885 3174 	strb.w	r3, [r5, #372]	; 0x174
 800a414:	f505 74b0 	add.w	r4, r5, #352	; 0x160
    sys_msleep(10); // Required for tests/ Join currently not available
 800a418:	f7fc f92a 	bl	8006670 <sys_msleep>
        sys_mutex_free(&m_mutex);
 800a41c:	f105 0058 	add.w	r0, r5, #88	; 0x58
 800a420:	f7ff fb1e 	bl	8009a60 <sys_mutex_free>
 800a424:	3c14      	subs	r4, #20
 800a426:	f104 000c 	add.w	r0, r4, #12
 800a42a:	f004 ff03 	bl	800f234 <_ZN4rtps11PBufWrapperD1Ev>
 800a42e:	42a6      	cmp	r6, r4
 800a430:	d1f8      	bne.n	800a424 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEED0Ev+0x24>
 800a432:	f105 006c 	add.w	r0, r5, #108	; 0x6c
 800a436:	f004 fefd 	bl	800f234 <_ZN4rtps11PBufWrapperD1Ev>
 800a43a:	4628      	mov	r0, r5
 800a43c:	f7fa ff58 	bl	80052f0 <vPortFree>
}
 800a440:	4628      	mov	r0, r5
 800a442:	bd70      	pop	{r4, r5, r6, pc}
 800a444:	08011f6c 	.word	0x08011f6c

0800a448 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE12removeWriterERKNS_4GuidE>:

template <class NetworkDriver>
void StatefulReaderT<NetworkDriver>::removeWriter(const Guid& guid){
 800a448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                memcpy(m_bitMap, m_pool.m_bitMap, sizeof(m_bitMap));
 800a44c:	f890 5070 	ldrb.w	r5, [r0, #112]	; 0x70
 800a450:	b083      	sub	sp, #12
            return nullptr;
        }

        MemPoolIter begin(){
            MemPoolIter it(*this);
            if(!(m_bitMap[0] & 1)){
 800a452:	07ec      	lsls	r4, r5, #31
 800a454:	d405      	bmi.n	800a462 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE12removeWriterERKNS_4GuidE+0x1a>
                if(m_pool.m_numElements == 0){
 800a456:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d14e      	bne.n	800a4fa <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE12removeWriterERKNS_4GuidE+0xb2>
        return proxy.remoteWriterGuid == guid;
    };
    auto thunk=[](void* arg, const WriterProxy& value){return (*static_cast<decltype(isElementToRemove)*>(arg))(value);};

    m_proxies.remove(thunk, &isElementToRemove);
}
 800a45c:	b003      	add	sp, #12
 800a45e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            explicit MemoryPoolIterator(MemoryPool<TYPE, SIZE>& pool) : m_pool(pool){
 800a462:	2400      	movs	r4, #0
      template<typename _Tp>
        static bool
        equal(const _Tp* __first1, const _Tp* __last1, const _Tp* __first2)
        {
	  if (const size_t __len = (__last1 - __first1))
	    return !__builtin_memcmp(__first1, __first2, sizeof(_Tp) * __len);
 800a464:	f101 030c 	add.w	r3, r1, #12
 800a468:	460f      	mov	r7, r1
 800a46a:	4680      	mov	r8, r0
        return proxy.remoteWriterGuid == guid;
 800a46c:	f100 0b70 	add.w	fp, r0, #112	; 0x70
 800a470:	f04f 0a38 	mov.w	sl, #56	; 0x38
 800a474:	9301      	str	r3, [sp, #4]
            for(auto it=begin(); it!=end();++it){
 800a476:	2c03      	cmp	r4, #3
 800a478:	d0f0      	beq.n	800a45c <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE12removeWriterERKNS_4GuidE+0x14>
 800a47a:	2308      	movs	r3, #8
 800a47c:	220c      	movs	r2, #12
 800a47e:	4639      	mov	r1, r7
 800a480:	fb1a 3904 	smlabb	r9, sl, r4, r3
 800a484:	44d9      	add	r9, fp
 800a486:	4648      	mov	r0, r9
      end() noexcept
      { return iterator(data() + _Nm); }

      _GLIBCXX17_CONSTEXPR const_iterator
      end() const noexcept
      { return const_iterator(data() + _Nm); }
 800a488:	eb09 0602 	add.w	r6, r9, r2
 800a48c:	f005 fa52 	bl	800f934 <memcmp>
            return this->prefix == other.prefix &&
 800a490:	b968      	cbnz	r0, 800a4ae <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE12removeWriterERKNS_4GuidE+0x66>
 800a492:	f109 020f 	add.w	r2, r9, #15
	  if (const size_t __len = (__last1 - __first1))
 800a496:	1b92      	subs	r2, r2, r6
 800a498:	d004      	beq.n	800a4a4 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE12removeWriterERKNS_4GuidE+0x5c>
	    return !__builtin_memcmp(__first1, __first2, sizeof(_Tp) * __len);
 800a49a:	4630      	mov	r0, r6
 800a49c:	9901      	ldr	r1, [sp, #4]
 800a49e:	f005 fa49 	bl	800f934 <memcmp>
            return this->entityKey == other.entityKey &&
 800a4a2:	b920      	cbnz	r0, 800a4ae <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE12removeWriterERKNS_4GuidE+0x66>
 800a4a4:	f899 200f 	ldrb.w	r2, [r9, #15]
 800a4a8:	7bfb      	ldrb	r3, [r7, #15]
 800a4aa:	429a      	cmp	r2, r3
 800a4ac:	d010      	beq.n	800a4d0 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE12removeWriterERKNS_4GuidE+0x88>
                if(m_pool.m_numElements == 0){
 800a4ae:	f8d8 3074 	ldr.w	r3, [r8, #116]	; 0x74
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d0d2      	beq.n	800a45c <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE12removeWriterERKNS_4GuidE+0x14>
                    m_bitMap[bucket] = m_bitMap[bucket] >> 1;
 800a4b6:	106d      	asrs	r5, r5, #1
                    ++m_bit;
 800a4b8:	3401      	adds	r4, #1
                }while(!(m_bitMap[bucket] & 1) && m_bit < SIZE);
 800a4ba:	f005 0301 	and.w	r3, r5, #1
                    ++m_bit;
 800a4be:	b2e4      	uxtb	r4, r4
 800a4c0:	b2ed      	uxtb	r5, r5
 800a4c2:	2c02      	cmp	r4, #2
 800a4c4:	bf88      	it	hi
 800a4c6:	f043 0301 	orrhi.w	r3, r3, #1
                }while(!(m_bitMap[bucket] & 1) && m_bit < SIZE);
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d0f3      	beq.n	800a4b6 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE12removeWriterERKNS_4GuidE+0x6e>
 800a4ce:	e7d2      	b.n	800a476 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE12removeWriterERKNS_4GuidE+0x2e>
                    m_bitMap[bucket] &= ~(static_cast<uint8_t>(1) << pos);
 800a4d0:	eb08 01d4 	add.w	r1, r8, r4, lsr #3
 800a4d4:	2201      	movs	r2, #1
 800a4d6:	f004 0407 	and.w	r4, r4, #7
 800a4da:	f891 3070 	ldrb.w	r3, [r1, #112]	; 0x70
 800a4de:	fa02 f404 	lsl.w	r4, r2, r4
 800a4e2:	ea23 0304 	bic.w	r3, r3, r4
 800a4e6:	f881 3070 	strb.w	r3, [r1, #112]	; 0x70
                    --m_numElements;
 800a4ea:	f8d8 3074 	ldr.w	r3, [r8, #116]	; 0x74
 800a4ee:	3b01      	subs	r3, #1
 800a4f0:	f8c8 3074 	str.w	r3, [r8, #116]	; 0x74
}
 800a4f4:	b003      	add	sp, #12
 800a4f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if(m_pool.m_numElements == 0){
 800a4fa:	2401      	movs	r4, #1
 800a4fc:	e002      	b.n	800a504 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE12removeWriterERKNS_4GuidE+0xbc>
                }while(!(m_bitMap[bucket] & 1) && m_bit < SIZE);
 800a4fe:	07d2      	lsls	r2, r2, #31
 800a500:	d4b0      	bmi.n	800a464 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE12removeWriterERKNS_4GuidE+0x1c>
 800a502:	461c      	mov	r4, r3
                    m_bitMap[bucket] = m_bitMap[bucket] >> 1;
 800a504:	106a      	asrs	r2, r5, #1
 800a506:	1c63      	adds	r3, r4, #1
                }while(!(m_bitMap[bucket] & 1) && m_bit < SIZE);
 800a508:	2c02      	cmp	r4, #2
                    m_bitMap[bucket] = m_bitMap[bucket] >> 1;
 800a50a:	b2d5      	uxtb	r5, r2
 800a50c:	b2db      	uxtb	r3, r3
                }while(!(m_bitMap[bucket] & 1) && m_bit < SIZE);
 800a50e:	d9f6      	bls.n	800a4fe <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE12removeWriterERKNS_4GuidE+0xb6>
 800a510:	e7a8      	b.n	800a464 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE12removeWriterERKNS_4GuidE+0x1c>
 800a512:	bf00      	nop

0800a514 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12removeReaderERKNS_4GuidE>:
void StatefulWriterT<NetworkDriver>::removeReader(const Guid& guid){
 800a514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                memcpy(m_bitMap, m_pool.m_bitMap, sizeof(m_bitMap));
 800a518:	f890 5178 	ldrb.w	r5, [r0, #376]	; 0x178
 800a51c:	b083      	sub	sp, #12
            if(!(m_bitMap[0] & 1)){
 800a51e:	07ec      	lsls	r4, r5, #31
 800a520:	d406      	bmi.n	800a530 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12removeReaderERKNS_4GuidE+0x1c>
                if(m_pool.m_numElements == 0){
 800a522:	f8d0 317c 	ldr.w	r3, [r0, #380]	; 0x17c
 800a526:	2b00      	cmp	r3, #0
 800a528:	d14e      	bne.n	800a5c8 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12removeReaderERKNS_4GuidE+0xb4>
}
 800a52a:	b003      	add	sp, #12
 800a52c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            explicit MemoryPoolIterator(MemoryPool<TYPE, SIZE>& pool) : m_pool(pool){
 800a530:	2400      	movs	r4, #0
 800a532:	f101 030c 	add.w	r3, r1, #12
 800a536:	460f      	mov	r7, r1
 800a538:	4680      	mov	r8, r0
        return proxy.remoteReaderGuid == guid;
 800a53a:	f500 7bbc 	add.w	fp, r0, #376	; 0x178
 800a53e:	f04f 0a58 	mov.w	sl, #88	; 0x58
 800a542:	9301      	str	r3, [sp, #4]
            for(auto it=begin(); it!=end();++it){
 800a544:	2c03      	cmp	r4, #3
 800a546:	d0f0      	beq.n	800a52a <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12removeReaderERKNS_4GuidE+0x16>
 800a548:	2308      	movs	r3, #8
 800a54a:	220c      	movs	r2, #12
 800a54c:	4639      	mov	r1, r7
 800a54e:	fb1a 3904 	smlabb	r9, sl, r4, r3
 800a552:	44d9      	add	r9, fp
 800a554:	4648      	mov	r0, r9
 800a556:	eb09 0602 	add.w	r6, r9, r2
 800a55a:	f005 f9eb 	bl	800f934 <memcmp>
            return this->prefix == other.prefix &&
 800a55e:	b968      	cbnz	r0, 800a57c <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12removeReaderERKNS_4GuidE+0x68>
 800a560:	f109 020f 	add.w	r2, r9, #15
	  if (const size_t __len = (__last1 - __first1))
 800a564:	1b92      	subs	r2, r2, r6
 800a566:	d004      	beq.n	800a572 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12removeReaderERKNS_4GuidE+0x5e>
	    return !__builtin_memcmp(__first1, __first2, sizeof(_Tp) * __len);
 800a568:	4630      	mov	r0, r6
 800a56a:	9901      	ldr	r1, [sp, #4]
 800a56c:	f005 f9e2 	bl	800f934 <memcmp>
            return this->entityKey == other.entityKey &&
 800a570:	b920      	cbnz	r0, 800a57c <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12removeReaderERKNS_4GuidE+0x68>
 800a572:	f899 200f 	ldrb.w	r2, [r9, #15]
 800a576:	7bfb      	ldrb	r3, [r7, #15]
 800a578:	429a      	cmp	r2, r3
 800a57a:	d010      	beq.n	800a59e <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12removeReaderERKNS_4GuidE+0x8a>
                if(m_pool.m_numElements == 0){
 800a57c:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
 800a580:	2b00      	cmp	r3, #0
 800a582:	d0d2      	beq.n	800a52a <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12removeReaderERKNS_4GuidE+0x16>
                    m_bitMap[bucket] = m_bitMap[bucket] >> 1;
 800a584:	106d      	asrs	r5, r5, #1
                    ++m_bit;
 800a586:	3401      	adds	r4, #1
                }while(!(m_bitMap[bucket] & 1) && m_bit < SIZE);
 800a588:	f005 0301 	and.w	r3, r5, #1
                    ++m_bit;
 800a58c:	b2e4      	uxtb	r4, r4
 800a58e:	b2ed      	uxtb	r5, r5
 800a590:	2c02      	cmp	r4, #2
 800a592:	bf88      	it	hi
 800a594:	f043 0301 	orrhi.w	r3, r3, #1
                }while(!(m_bitMap[bucket] & 1) && m_bit < SIZE);
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d0f3      	beq.n	800a584 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12removeReaderERKNS_4GuidE+0x70>
 800a59c:	e7d2      	b.n	800a544 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12removeReaderERKNS_4GuidE+0x30>
                    m_bitMap[bucket] &= ~(static_cast<uint8_t>(1) << pos);
 800a59e:	eb08 01d4 	add.w	r1, r8, r4, lsr #3
 800a5a2:	2201      	movs	r2, #1
 800a5a4:	f004 0407 	and.w	r4, r4, #7
 800a5a8:	f891 3178 	ldrb.w	r3, [r1, #376]	; 0x178
 800a5ac:	fa02 f404 	lsl.w	r4, r2, r4
 800a5b0:	ea23 0304 	bic.w	r3, r3, r4
 800a5b4:	f881 3178 	strb.w	r3, [r1, #376]	; 0x178
                    --m_numElements;
 800a5b8:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
 800a5bc:	3b01      	subs	r3, #1
 800a5be:	f8c8 317c 	str.w	r3, [r8, #380]	; 0x17c
}
 800a5c2:	b003      	add	sp, #12
 800a5c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if(m_pool.m_numElements == 0){
 800a5c8:	2401      	movs	r4, #1
 800a5ca:	e002      	b.n	800a5d2 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12removeReaderERKNS_4GuidE+0xbe>
                }while(!(m_bitMap[bucket] & 1) && m_bit < SIZE);
 800a5cc:	07d2      	lsls	r2, r2, #31
 800a5ce:	d4b0      	bmi.n	800a532 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12removeReaderERKNS_4GuidE+0x1e>
 800a5d0:	461c      	mov	r4, r3
                    m_bitMap[bucket] = m_bitMap[bucket] >> 1;
 800a5d2:	106a      	asrs	r2, r5, #1
 800a5d4:	1c63      	adds	r3, r4, #1
                }while(!(m_bitMap[bucket] & 1) && m_bit < SIZE);
 800a5d6:	2c02      	cmp	r4, #2
                    m_bitMap[bucket] = m_bitMap[bucket] >> 1;
 800a5d8:	b2d5      	uxtb	r5, r2
 800a5da:	b2db      	uxtb	r3, r3
                }while(!(m_bitMap[bucket] & 1) && m_bit < SIZE);
 800a5dc:	d9f6      	bls.n	800a5cc <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12removeReaderERKNS_4GuidE+0xb8>
 800a5de:	e7a8      	b.n	800a532 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12removeReaderERKNS_4GuidE+0x1e>

0800a5e0 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE12removeReaderERKNS_4GuidE>:
void StatelessWriterT<NetworkDriver>::removeReader(const Guid& guid){
 800a5e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                memcpy(m_bitMap, m_pool.m_bitMap, sizeof(m_bitMap));
 800a5e4:	f890 516c 	ldrb.w	r5, [r0, #364]	; 0x16c
 800a5e8:	b083      	sub	sp, #12
            if(!(m_bitMap[0] & 1)){
 800a5ea:	07ec      	lsls	r4, r5, #31
 800a5ec:	d406      	bmi.n	800a5fc <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE12removeReaderERKNS_4GuidE+0x1c>
                if(m_pool.m_numElements == 0){
 800a5ee:	f8d0 3170 	ldr.w	r3, [r0, #368]	; 0x170
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d14e      	bne.n	800a694 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE12removeReaderERKNS_4GuidE+0xb4>
}
 800a5f6:	b003      	add	sp, #12
 800a5f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            explicit MemoryPoolIterator(MemoryPool<TYPE, SIZE>& pool) : m_pool(pool){
 800a5fc:	2400      	movs	r4, #0
 800a5fe:	f101 030c 	add.w	r3, r1, #12
 800a602:	460f      	mov	r7, r1
 800a604:	4680      	mov	r8, r0
        return proxy.remoteReaderGuid == guid;
 800a606:	f500 7bb6 	add.w	fp, r0, #364	; 0x16c
 800a60a:	f04f 0a58 	mov.w	sl, #88	; 0x58
 800a60e:	9301      	str	r3, [sp, #4]
            for(auto it=begin(); it!=end();++it){
 800a610:	2c03      	cmp	r4, #3
 800a612:	d0f0      	beq.n	800a5f6 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE12removeReaderERKNS_4GuidE+0x16>
 800a614:	2308      	movs	r3, #8
 800a616:	220c      	movs	r2, #12
 800a618:	4639      	mov	r1, r7
 800a61a:	fb1a 3904 	smlabb	r9, sl, r4, r3
 800a61e:	44d9      	add	r9, fp
 800a620:	4648      	mov	r0, r9
 800a622:	eb09 0602 	add.w	r6, r9, r2
 800a626:	f005 f985 	bl	800f934 <memcmp>
            return this->prefix == other.prefix &&
 800a62a:	b968      	cbnz	r0, 800a648 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE12removeReaderERKNS_4GuidE+0x68>
 800a62c:	f109 020f 	add.w	r2, r9, #15
	  if (const size_t __len = (__last1 - __first1))
 800a630:	1b92      	subs	r2, r2, r6
 800a632:	d004      	beq.n	800a63e <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE12removeReaderERKNS_4GuidE+0x5e>
	    return !__builtin_memcmp(__first1, __first2, sizeof(_Tp) * __len);
 800a634:	4630      	mov	r0, r6
 800a636:	9901      	ldr	r1, [sp, #4]
 800a638:	f005 f97c 	bl	800f934 <memcmp>
            return this->entityKey == other.entityKey &&
 800a63c:	b920      	cbnz	r0, 800a648 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE12removeReaderERKNS_4GuidE+0x68>
 800a63e:	f899 200f 	ldrb.w	r2, [r9, #15]
 800a642:	7bfb      	ldrb	r3, [r7, #15]
 800a644:	429a      	cmp	r2, r3
 800a646:	d010      	beq.n	800a66a <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE12removeReaderERKNS_4GuidE+0x8a>
                if(m_pool.m_numElements == 0){
 800a648:	f8d8 3170 	ldr.w	r3, [r8, #368]	; 0x170
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d0d2      	beq.n	800a5f6 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE12removeReaderERKNS_4GuidE+0x16>
                    m_bitMap[bucket] = m_bitMap[bucket] >> 1;
 800a650:	106d      	asrs	r5, r5, #1
                    ++m_bit;
 800a652:	3401      	adds	r4, #1
                }while(!(m_bitMap[bucket] & 1) && m_bit < SIZE);
 800a654:	f005 0301 	and.w	r3, r5, #1
                    ++m_bit;
 800a658:	b2e4      	uxtb	r4, r4
 800a65a:	b2ed      	uxtb	r5, r5
 800a65c:	2c02      	cmp	r4, #2
 800a65e:	bf88      	it	hi
 800a660:	f043 0301 	orrhi.w	r3, r3, #1
                }while(!(m_bitMap[bucket] & 1) && m_bit < SIZE);
 800a664:	2b00      	cmp	r3, #0
 800a666:	d0f3      	beq.n	800a650 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE12removeReaderERKNS_4GuidE+0x70>
 800a668:	e7d2      	b.n	800a610 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE12removeReaderERKNS_4GuidE+0x30>
                    m_bitMap[bucket] &= ~(static_cast<uint8_t>(1) << pos);
 800a66a:	eb08 01d4 	add.w	r1, r8, r4, lsr #3
 800a66e:	2201      	movs	r2, #1
 800a670:	f004 0407 	and.w	r4, r4, #7
 800a674:	f891 316c 	ldrb.w	r3, [r1, #364]	; 0x16c
 800a678:	fa02 f404 	lsl.w	r4, r2, r4
 800a67c:	ea23 0304 	bic.w	r3, r3, r4
 800a680:	f881 316c 	strb.w	r3, [r1, #364]	; 0x16c
                    --m_numElements;
 800a684:	f8d8 3170 	ldr.w	r3, [r8, #368]	; 0x170
 800a688:	3b01      	subs	r3, #1
 800a68a:	f8c8 3170 	str.w	r3, [r8, #368]	; 0x170
}
 800a68e:	b003      	add	sp, #12
 800a690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if(m_pool.m_numElements == 0){
 800a694:	2401      	movs	r4, #1
 800a696:	e002      	b.n	800a69e <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE12removeReaderERKNS_4GuidE+0xbe>
                }while(!(m_bitMap[bucket] & 1) && m_bit < SIZE);
 800a698:	07d2      	lsls	r2, r2, #31
 800a69a:	d4b0      	bmi.n	800a5fe <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE12removeReaderERKNS_4GuidE+0x1e>
 800a69c:	461c      	mov	r4, r3
                    m_bitMap[bucket] = m_bitMap[bucket] >> 1;
 800a69e:	106a      	asrs	r2, r5, #1
 800a6a0:	1c63      	adds	r3, r4, #1
                }while(!(m_bitMap[bucket] & 1) && m_bit < SIZE);
 800a6a2:	2c02      	cmp	r4, #2
                    m_bitMap[bucket] = m_bitMap[bucket] >> 1;
 800a6a4:	b2d5      	uxtb	r5, r2
 800a6a6:	b2db      	uxtb	r3, r3
                }while(!(m_bitMap[bucket] & 1) && m_bit < SIZE);
 800a6a8:	d9f6      	bls.n	800a698 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE12removeReaderERKNS_4GuidE+0xb8>
 800a6aa:	e7a8      	b.n	800a5fe <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE12removeReaderERKNS_4GuidE+0x1e>

0800a6ac <_ZN4rtps14MessageFactory17addSubMessageDataINS_11PBufWrapperEEEvRT_RKS3_bRKNS_16SequenceNumber_tERKNS_10EntityId_tESC_.constprop.22>:
            }

        }

        template <class Buffer>
        void addSubMessageData(Buffer& buffer, const Buffer& filledPayload, bool containsInlineQos, const SequenceNumber_t& SN, const EntityId_t& writerID, const EntityId_t& readerID){
 800a6ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a6b0:	460d      	mov	r5, r1
 800a6b2:	b089      	sub	sp, #36	; 0x24
            SubmessageData msg;
            msg.header.submessageId = SubmessageKind::DATA;
#if IS_LITTLE_ENDIAN
            msg.header.flags = FLAG_LITTLE_ENDIAN;
 800a6b4:	2101      	movs	r1, #1
            msg.header.submessageId = SubmessageKind::DATA;
 800a6b6:	2615      	movs	r6, #21
        void addSubMessageData(Buffer& buffer, const Buffer& filledPayload, bool containsInlineQos, const SequenceNumber_t& SN, const EntityId_t& writerID, const EntityId_t& readerID){
 800a6b8:	4604      	mov	r4, r0
#else
            msg.header.flags = FLAG_BIG_ENDIAN;
#endif

            msg.header.submessageLength = SubmessageData::getRawSize() + filledPayload.spaceUsed() - numBytesUntilEndOfLength;
 800a6ba:	4628      	mov	r0, r5
        void addSubMessageData(Buffer& buffer, const Buffer& filledPayload, bool containsInlineQos, const SequenceNumber_t& SN, const EntityId_t& writerID, const EntityId_t& readerID){
 800a6bc:	4699      	mov	r9, r3
 800a6be:	4690      	mov	r8, r2
            msg.header.submessageId = SubmessageKind::DATA;
 800a6c0:	f88d 6008 	strb.w	r6, [sp, #8]
            msg.header.flags = FLAG_LITTLE_ENDIAN;
 800a6c4:	f88d 1009 	strb.w	r1, [sp, #9]
        void addSubMessageData(Buffer& buffer, const Buffer& filledPayload, bool containsInlineQos, const SequenceNumber_t& SN, const EntityId_t& writerID, const EntityId_t& readerID){
 800a6c8:	9f10      	ldr	r7, [sp, #64]	; 0x40
            msg.header.submessageLength = SubmessageData::getRawSize() + filledPayload.spaceUsed() - numBytesUntilEndOfLength;
 800a6ca:	f004 fdc1 	bl	800f250 <_ZNK4rtps11PBufWrapper9spaceUsedEv>
 800a6ce:	f100 0314 	add.w	r3, r0, #20

            if(containsInlineQos){
                msg.header.flags |= FLAG_INLINE_QOS;
            }
            if(filledPayload.isValid()){
 800a6d2:	4628      	mov	r0, r5
            msg.header.submessageLength = SubmessageData::getRawSize() + filledPayload.spaceUsed() - numBytesUntilEndOfLength;
 800a6d4:	f8ad 300a 	strh.w	r3, [sp, #10]
            if(filledPayload.isValid()){
 800a6d8:	f004 fdb4 	bl	800f244 <_ZNK4rtps11PBufWrapper7isValidEv>
 800a6dc:	b128      	cbz	r0, 800a6ea <_ZN4rtps14MessageFactory17addSubMessageDataINS_11PBufWrapperEEEvRT_RKS3_bRKNS_16SequenceNumber_tERKNS_10EntityId_tESC_.constprop.22+0x3e>
                msg.header.flags |= FLAG_DATA_PAYLOAD;
 800a6de:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800a6e2:	f043 0304 	orr.w	r3, r3, #4
 800a6e6:	f88d 3009 	strb.w	r3, [sp, #9]
            }

            msg.writerSN = SN;
 800a6ea:	ae06      	add	r6, sp, #24
            msg.extraFlags = 0;
 800a6ec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
            msg.writerSN = SN;
 800a6f0:	e898 0003 	ldmia.w	r8, {r0, r1}
            msg.extraFlags = 0;
 800a6f4:	9303      	str	r3, [sp, #12]
            msg.writerSN = SN;
 800a6f6:	e886 0003 	stmia.w	r6, {r0, r1}
            msg.readerId = readerID;
 800a6fa:	6838      	ldr	r0, [r7, #0]
        return true;
	}

	template<typename Buffer>
    bool serializeMessage(Buffer& buffer, SubmessageData& msg){
        if(!buffer.reserve(SubmessageData::getRawSize())){
 800a6fc:	2118      	movs	r1, #24
 800a6fe:	9004      	str	r0, [sp, #16]
            msg.writerId = writerID;
 800a700:	f8d9 0000 	ldr.w	r0, [r9]
 800a704:	9005      	str	r0, [sp, #20]
 800a706:	4620      	mov	r0, r4
 800a708:	f004 fdde 	bl	800f2c8 <_ZN4rtps11PBufWrapper7reserveEt>
 800a70c:	b988      	cbnz	r0, 800a732 <_ZN4rtps14MessageFactory17addSubMessageDataINS_11PBufWrapperEEEvRT_RKS3_bRKNS_16SequenceNumber_tERKNS_10EntityId_tESC_.constprop.22+0x86>
            constexpr uint16_t octetsToInlineQoS = 4 + 4 + 8; // EntityIds + SequenceNumber
            msg.octetsToInlineQos = octetsToInlineQoS;

            serializeMessage(buffer, msg);

            if(filledPayload.isValid()){
 800a70e:	4628      	mov	r0, r5
 800a710:	f004 fd98 	bl	800f244 <_ZNK4rtps11PBufWrapper7isValidEv>
 800a714:	b150      	cbz	r0, 800a72c <_ZN4rtps14MessageFactory17addSubMessageDataINS_11PBufWrapperEEEvRT_RKS3_bRKNS_16SequenceNumber_tERKNS_10EntityId_tESC_.constprop.22+0x80>
                Buffer shallowCopy = filledPayload;
 800a716:	4629      	mov	r1, r5
 800a718:	4668      	mov	r0, sp
 800a71a:	f004 fd69 	bl	800f1f0 <_ZN4rtps11PBufWrapperC1ERKS0_>
                buffer.append(std::move(shallowCopy));
 800a71e:	4620      	mov	r0, r4
 800a720:	4669      	mov	r1, sp
 800a722:	f004 fdb9 	bl	800f298 <_ZN4rtps11PBufWrapper6appendEOS0_>
                Buffer shallowCopy = filledPayload;
 800a726:	4668      	mov	r0, sp
 800a728:	f004 fd84 	bl	800f234 <_ZN4rtps11PBufWrapperD1Ev>
            }
        }
 800a72c:	b009      	add	sp, #36	; 0x24
 800a72e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if(!buffer.reserve(Header::getRawSize())){
 800a732:	2114      	movs	r1, #20
 800a734:	4620      	mov	r0, r4
 800a736:	f004 fdc7 	bl	800f2c8 <_ZN4rtps11PBufWrapper7reserveEt>
 800a73a:	b1a0      	cbz	r0, 800a766 <_ZN4rtps14MessageFactory17addSubMessageDataINS_11PBufWrapperEEEvRT_RKS3_bRKNS_16SequenceNumber_tERKNS_10EntityId_tESC_.constprop.22+0xba>
		buffer.reserve(SubmessageHeader::getRawSize());
 800a73c:	2104      	movs	r1, #4
 800a73e:	4620      	mov	r0, r4
 800a740:	f004 fdc2 	bl	800f2c8 <_ZN4rtps11PBufWrapper7reserveEt>
		buffer.append(reinterpret_cast<uint8_t*>(&header.submessageId), sizeof(SubmessageKind));
 800a744:	2201      	movs	r2, #1
 800a746:	a902      	add	r1, sp, #8
 800a748:	4620      	mov	r0, r4
 800a74a:	f004 fd8b 	bl	800f264 <_ZN4rtps11PBufWrapper6appendEPKht>
		buffer.append(&header.flags, sizeof(uint8_t));
 800a74e:	2201      	movs	r2, #1
 800a750:	f10d 0109 	add.w	r1, sp, #9
 800a754:	4620      	mov	r0, r4
 800a756:	f004 fd85 	bl	800f264 <_ZN4rtps11PBufWrapper6appendEPKht>
		buffer.append(reinterpret_cast<uint8_t*>(&header.submessageLength), sizeof(uint16_t));
 800a75a:	2202      	movs	r2, #2
 800a75c:	f10d 010a 	add.w	r1, sp, #10
 800a760:	4620      	mov	r0, r4
 800a762:	f004 fd7f 	bl	800f264 <_ZN4rtps11PBufWrapper6appendEPKht>
            return false;
        }

		serializeMessage(buffer, msg.header);

		buffer.append(reinterpret_cast<uint8_t*>(&msg.extraFlags), sizeof(uint16_t));
 800a766:	a903      	add	r1, sp, #12
 800a768:	2202      	movs	r2, #2
 800a76a:	4620      	mov	r0, r4
 800a76c:	f004 fd7a 	bl	800f264 <_ZN4rtps11PBufWrapper6appendEPKht>
		buffer.append(reinterpret_cast<uint8_t*>(&msg.octetsToInlineQos), sizeof(uint16_t));
 800a770:	f10d 010e 	add.w	r1, sp, #14
 800a774:	2202      	movs	r2, #2
 800a776:	4620      	mov	r0, r4
 800a778:	f004 fd74 	bl	800f264 <_ZN4rtps11PBufWrapper6appendEPKht>
		buffer.append(msg.readerId.entityKey.data(), msg.readerId.entityKey.size());
 800a77c:	a904      	add	r1, sp, #16
 800a77e:	2203      	movs	r2, #3
 800a780:	4620      	mov	r0, r4
 800a782:	f004 fd6f 	bl	800f264 <_ZN4rtps11PBufWrapper6appendEPKht>
		buffer.append(reinterpret_cast<uint8_t*>(&msg.readerId.entityKind), sizeof(EntityKind_t));
 800a786:	f10d 0113 	add.w	r1, sp, #19
 800a78a:	2201      	movs	r2, #1
 800a78c:	4620      	mov	r0, r4
 800a78e:	f004 fd69 	bl	800f264 <_ZN4rtps11PBufWrapper6appendEPKht>
		buffer.append(msg.writerId.entityKey.data(), msg.writerId.entityKey.size());
 800a792:	a905      	add	r1, sp, #20
 800a794:	2203      	movs	r2, #3
 800a796:	4620      	mov	r0, r4
 800a798:	f004 fd64 	bl	800f264 <_ZN4rtps11PBufWrapper6appendEPKht>
		buffer.append(reinterpret_cast<uint8_t*>(&msg.writerId.entityKind), sizeof(EntityKind_t));
 800a79c:	f10d 0117 	add.w	r1, sp, #23
 800a7a0:	2201      	movs	r2, #1
 800a7a2:	4620      	mov	r0, r4
 800a7a4:	f004 fd5e 	bl	800f264 <_ZN4rtps11PBufWrapper6appendEPKht>
		buffer.append(reinterpret_cast<uint8_t*>(&msg.writerSN.high), sizeof(msg.writerSN.high));
 800a7a8:	4631      	mov	r1, r6
 800a7aa:	2204      	movs	r2, #4
 800a7ac:	4620      	mov	r0, r4
 800a7ae:	f004 fd59 	bl	800f264 <_ZN4rtps11PBufWrapper6appendEPKht>
		buffer.append(reinterpret_cast<uint8_t*>(&msg.writerSN.low), sizeof(msg.writerSN.low));
 800a7b2:	2204      	movs	r2, #4
 800a7b4:	a907      	add	r1, sp, #28
 800a7b6:	4620      	mov	r0, r4
 800a7b8:	f004 fd54 	bl	800f264 <_ZN4rtps11PBufWrapper6appendEPKht>
 800a7bc:	e7a7      	b.n	800a70e <_ZN4rtps14MessageFactory17addSubMessageDataINS_11PBufWrapperEEEvRT_RKS3_bRKNS_16SequenceNumber_tERKNS_10EntityId_tESC_.constprop.22+0x62>
 800a7be:	bf00      	nop

0800a7c0 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE8progressEv>:
    //return kind == ChangeKind_t::INVALID || (m_topicKind == TopicKind_t::NO_KEY && kind != ChangeKind_t::ALIVE);
    return kind != ChangeKind_t::ALIVE;
}

template <typename NetworkDriver>
void StatelessWriterT<NetworkDriver>::progress(){
 800a7c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                memcpy(m_bitMap, m_pool.m_bitMap, sizeof(m_bitMap));
 800a7c4:	f890 716c 	ldrb.w	r7, [r0, #364]	; 0x16c
 800a7c8:	b08f      	sub	sp, #60	; 0x3c
 800a7ca:	4680      	mov	r8, r0
            if(!(m_bitMap[0] & 1)){
 800a7cc:	07f9      	lsls	r1, r7, #31
 800a7ce:	d412      	bmi.n	800a7f6 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE8progressEv+0x36>
                if(m_pool.m_numElements == 0){
 800a7d0:	f8d0 3170 	ldr.w	r3, [r0, #368]	; 0x170
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	f040 80dc 	bne.w	800a992 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE8progressEv+0x1d2>
            ++low;
 800a7da:	f8d8 3080 	ldr.w	r3, [r8, #128]	; 0x80
 800a7de:	3301      	adds	r3, #1
 800a7e0:	f8c8 3080 	str.w	r3, [r8, #128]	; 0x80
            if(low == 0){
 800a7e4:	b923      	cbnz	r3, 800a7f0 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE8progressEv+0x30>
                ++high;
 800a7e6:	f8d8 307c 	ldr.w	r3, [r8, #124]	; 0x7c
 800a7ea:	3301      	adds	r3, #1
 800a7ec:	f8c8 307c 	str.w	r3, [r8, #124]	; 0x7c
        m_transport->sendPacket(info);

    }

    ++m_nextSequenceNumberToSend;
}
 800a7f0:	b00f      	add	sp, #60	; 0x3c
 800a7f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            explicit MemoryPoolIterator(MemoryPool<TYPE, SIZE>& pool) : m_pool(pool){
 800a7f6:	2400      	movs	r4, #0

    struct PBufWrapper {

        pbuf* firstElement = nullptr;

        PBufWrapper() = default;
 800a7f8:	f04f 0a00 	mov.w	sl, #0
            header.protocolName = PROTOCOL_TYPE;
 800a7fc:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 800a9b0 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE8progressEv+0x1f0>
    for(const auto& proxy : m_proxies){
 800a800:	2c03      	cmp	r4, #3
 800a802:	d0ea      	beq.n	800a7da <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE8progressEv+0x1a>
            header.guidPrefix = guidPrefix;
 800a804:	4642      	mov	r2, r8
        info.srcPort = m_packetInfo.srcPort;
 800a806:	f8b8 6060 	ldrh.w	r6, [r8, #96]	; 0x60
            header.protocolName = PROTOCOL_TYPE;
 800a80a:	f8d9 5000 	ldr.w	r5, [r9]
            header.guidPrefix = guidPrefix;
 800a80e:	ab0b      	add	r3, sp, #44	; 0x2c
 800a810:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800a814:	f8ad 6010 	strh.w	r6, [sp, #16]
 800a818:	6851      	ldr	r1, [r2, #4]
 800a81a:	6892      	ldr	r2, [r2, #8]
            header.protocolVersion = PROTOCOLVERSION;
 800a81c:	f8b9 6004 	ldrh.w	r6, [r9, #4]
            header.protocolName = PROTOCOL_TYPE;
 800a820:	9509      	str	r5, [sp, #36]	; 0x24
            header.vendorId = Config::VENDOR_ID;
 800a822:	f8b9 5008 	ldrh.w	r5, [r9, #8]
            header.protocolVersion = PROTOCOLVERSION;
 800a826:	f8ad 6028 	strh.w	r6, [sp, #40]	; 0x28
 800a82a:	ae09      	add	r6, sp, #36	; 0x24
            header.vendorId = Config::VENDOR_ID;
 800a82c:	f8ad 502a 	strh.w	r5, [sp, #42]	; 0x2a
 800a830:	ad0a      	add	r5, sp, #40	; 0x28
 800a832:	f8cd a01c 	str.w	sl, [sp, #28]
 800a836:	f8ad a020 	strh.w	sl, [sp, #32]
            header.guidPrefix = guidPrefix;
 800a83a:	c307      	stmia	r3!, {r0, r1, r2}
	    if(!buffer.reserve(Header::getRawSize())){
 800a83c:	a807      	add	r0, sp, #28
 800a83e:	2114      	movs	r1, #20
 800a840:	f004 fd42 	bl	800f2c8 <_ZN4rtps11PBufWrapper7reserveEt>
 800a844:	b1a0      	cbz	r0, 800a870 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE8progressEv+0xb0>
		buffer.append(header.protocolName.data(), sizeof(std::array<uint8_t, 4>));
 800a846:	2204      	movs	r2, #4
 800a848:	4631      	mov	r1, r6
 800a84a:	a807      	add	r0, sp, #28
 800a84c:	f004 fd0a 	bl	800f264 <_ZN4rtps11PBufWrapper6appendEPKht>
		buffer.append(reinterpret_cast<uint8_t*>(&header.protocolVersion), sizeof(ProtocolVersion_t));
 800a850:	4629      	mov	r1, r5
 800a852:	2202      	movs	r2, #2
 800a854:	a807      	add	r0, sp, #28
 800a856:	f004 fd05 	bl	800f264 <_ZN4rtps11PBufWrapper6appendEPKht>
		buffer.append(header.vendorId.vendorId.data(), sizeof(VendorId_t));
 800a85a:	2202      	movs	r2, #2
 800a85c:	f10d 012a 	add.w	r1, sp, #42	; 0x2a
 800a860:	a807      	add	r0, sp, #28
 800a862:	f004 fcff 	bl	800f264 <_ZN4rtps11PBufWrapper6appendEPKht>
		buffer.append(header.guidPrefix.id.data(), sizeof(GuidPrefix_t));
 800a866:	a90b      	add	r1, sp, #44	; 0x2c
 800a868:	220c      	movs	r2, #12
 800a86a:	a807      	add	r0, sp, #28
 800a86c:	f004 fcfa 	bl	800f264 <_ZN4rtps11PBufWrapper6appendEPKht>
            header.submessageId = SubmessageKind::INFO_TS;
 800a870:	2209      	movs	r2, #9
            header.flags = FLAG_LITTLE_ENDIAN;
 800a872:	f04f 0b01 	mov.w	fp, #1
                header.submessageLength = sizeof(Time_t);
 800a876:	2308      	movs	r3, #8
        if(!buffer.reserve(Header::getRawSize())){
 800a878:	2114      	movs	r1, #20
 800a87a:	a807      	add	r0, sp, #28
            header.submessageId = SubmessageKind::INFO_TS;
 800a87c:	f88d 200c 	strb.w	r2, [sp, #12]
            header.flags = FLAG_LITTLE_ENDIAN;
 800a880:	f88d b00d 	strb.w	fp, [sp, #13]
                header.submessageLength = sizeof(Time_t);
 800a884:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a888:	f004 fd1e 	bl	800f2c8 <_ZN4rtps11PBufWrapper7reserveEt>
 800a88c:	b1a0      	cbz	r0, 800a8b8 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE8progressEv+0xf8>
		buffer.reserve(SubmessageHeader::getRawSize());
 800a88e:	2104      	movs	r1, #4
 800a890:	a807      	add	r0, sp, #28
 800a892:	f004 fd19 	bl	800f2c8 <_ZN4rtps11PBufWrapper7reserveEt>
		buffer.append(reinterpret_cast<uint8_t*>(&header.submessageId), sizeof(SubmessageKind));
 800a896:	465a      	mov	r2, fp
 800a898:	a903      	add	r1, sp, #12
 800a89a:	a807      	add	r0, sp, #28
 800a89c:	f004 fce2 	bl	800f264 <_ZN4rtps11PBufWrapper6appendEPKht>
		buffer.append(&header.flags, sizeof(uint8_t));
 800a8a0:	465a      	mov	r2, fp
 800a8a2:	f10d 010d 	add.w	r1, sp, #13
 800a8a6:	a807      	add	r0, sp, #28
 800a8a8:	f004 fcdc 	bl	800f264 <_ZN4rtps11PBufWrapper6appendEPKht>
		buffer.append(reinterpret_cast<uint8_t*>(&header.submessageLength), sizeof(uint16_t));
 800a8ac:	2202      	movs	r2, #2
 800a8ae:	f10d 010e 	add.w	r1, sp, #14
 800a8b2:	a807      	add	r0, sp, #28
 800a8b4:	f004 fcd6 	bl	800f264 <_ZN4rtps11PBufWrapper6appendEPKht>
                buffer.reserve(header.submessageLength);
 800a8b8:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 800a8bc:	a807      	add	r0, sp, #28
 800a8be:	f004 fd03 	bl	800f2c8 <_ZN4rtps11PBufWrapper7reserveEt>
            Lock lock(m_mutex);
 800a8c2:	f108 0b58 	add.w	fp, r8, #88	; 0x58

namespace rtps{
    inline Time_t getCurrentTimeStamp(){
        Time_t now;
        // TODO FIX
        uint32_t nowMs = sys_now();
 800a8c6:	f7ff fb15 	bl	8009ef4 <sys_now>
        now.seconds = (int32_t) nowMs / 1000;
 800a8ca:	4b38      	ldr	r3, [pc, #224]	; (800a9ac <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE8progressEv+0x1ec>)
                buffer.append(reinterpret_cast<uint8_t*>(&now.seconds), sizeof(Time_t::seconds));
 800a8cc:	4631      	mov	r1, r6
        now.fraction = ((nowMs % 1000)/1000);
 800a8ce:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
        now.seconds = (int32_t) nowMs / 1000;
 800a8d2:	fb83 2300 	smull	r2, r3, r3, r0
 800a8d6:	17c0      	asrs	r0, r0, #31
 800a8d8:	2204      	movs	r2, #4
 800a8da:	ebc0 13a3 	rsb	r3, r0, r3, asr #6
 800a8de:	a807      	add	r0, sp, #28
 800a8e0:	9309      	str	r3, [sp, #36]	; 0x24
 800a8e2:	f004 fcbf 	bl	800f264 <_ZN4rtps11PBufWrapper6appendEPKht>
                buffer.append(reinterpret_cast<uint8_t*>(&now.fraction), sizeof(Time_t::fraction));
 800a8e6:	4629      	mov	r1, r5
 800a8e8:	2204      	movs	r2, #4
 800a8ea:	a807      	add	r0, sp, #28
 800a8ec:	f004 fcba 	bl	800f264 <_ZN4rtps11PBufWrapper6appendEPKht>
            sys_mutex_lock(&m_mutex);
 800a8f0:	4658      	mov	r0, fp
 800a8f2:	f7ff f8b9 	bl	8009a68 <sys_mutex_lock>
            const CacheChange* next = m_history.getChangeBySN(m_nextSequenceNumberToSend);
 800a8f6:	f108 037c 	add.w	r3, r8, #124	; 0x7c
 800a8fa:	f108 0084 	add.w	r0, r8, #132	; 0x84
 800a8fe:	e893 0006 	ldmia.w	r3, {r1, r2}
 800a902:	f004 fd89 	bl	800f418 <_ZNK4rtps18SimpleHistoryCache13getChangeBySNENS_16SequenceNumber_tE>
            if(next == nullptr){
 800a906:	2800      	cmp	r0, #0
 800a908:	d03a      	beq.n	800a980 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE8progressEv+0x1c0>
 800a90a:	eb04 0584 	add.w	r5, r4, r4, lsl #2
 800a90e:	f508 76b6 	add.w	r6, r8, #364	; 0x16c
            MessageFactory::addSubMessageData(info.buffer, next->data, false, next->sequenceNumber, m_attributes.endpointGuid.entityId,
 800a912:	1d02      	adds	r2, r0, #4
 800a914:	f100 010c 	add.w	r1, r0, #12
 800a918:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 800a91c:	f108 0310 	add.w	r3, r8, #16
 800a920:	a807      	add	r0, sp, #28
 800a922:	00ed      	lsls	r5, r5, #3
 800a924:	f105 0c14 	add.w	ip, r5, #20
 800a928:	44b4      	add	ip, r6


    constexpr ip4_addr transformIP4ToU32(uint8_t MSB, uint8_t p2, uint8_t p1, uint8_t LSB) {
        return {((uint32_t) (LSB << 24)) |
                ((uint32_t) (p1 << 16)) |
                ((uint32_t) (p2 << 8)) |
 800a92a:	442e      	add	r6, r5
 800a92c:	f8cd c000 	str.w	ip, [sp]
 800a930:	f7ff febc 	bl	800a6ac <_ZN4rtps14MessageFactory17addSubMessageDataINS_11PBufWrapperEEEvRT_RKS3_bRKNS_16SequenceNumber_tERKNS_10EntityId_tESC_.constprop.22>
            sys_mutex_unlock(&m_mutex);
 800a934:	4658      	mov	r0, fp
 800a936:	f7ff f89d 	bl	8009a74 <sys_mutex_unlock>
        info.destPort = (Ip4Port_t) locator.port;
 800a93a:	2358      	movs	r3, #88	; 0x58
 800a93c:	6af2      	ldr	r2, [r6, #44]	; 0x2c
        m_transport->sendPacket(info);
 800a93e:	a904      	add	r1, sp, #16
        info.destPort = (Ip4Port_t) locator.port;
 800a940:	fb03 8304 	mla	r3, r3, r4, r8
        m_transport->sendPacket(info);
 800a944:	f8d8 0074 	ldr.w	r0, [r8, #116]	; 0x74
        info.destAddr = locator.getIp4Address();
 800a948:	9205      	str	r2, [sp, #20]
        info.destPort = (Ip4Port_t) locator.port;
 800a94a:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 800a94e:	f8ad 3018 	strh.w	r3, [sp, #24]
        m_transport->sendPacket(info);
 800a952:	f001 faa5 	bl	800bea0 <_ZN4rtps9UdpDriver10sendPacketERNS_10PacketInfoE>
 800a956:	a807      	add	r0, sp, #28
 800a958:	f004 fc6c 	bl	800f234 <_ZN4rtps11PBufWrapperD1Ev>
                if(m_pool.m_numElements == 0){
 800a95c:	f8d8 3170 	ldr.w	r3, [r8, #368]	; 0x170
 800a960:	2b00      	cmp	r3, #0
 800a962:	f43f af3a 	beq.w	800a7da <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE8progressEv+0x1a>
                    m_bitMap[bucket] = m_bitMap[bucket] >> 1;
 800a966:	107f      	asrs	r7, r7, #1
                    ++m_bit;
 800a968:	3401      	adds	r4, #1
                }while(!(m_bitMap[bucket] & 1) && m_bit < SIZE);
 800a96a:	f007 0301 	and.w	r3, r7, #1
                    ++m_bit;
 800a96e:	b2e4      	uxtb	r4, r4
 800a970:	b2ff      	uxtb	r7, r7
 800a972:	2c02      	cmp	r4, #2
 800a974:	bf88      	it	hi
 800a976:	f043 0301 	orrhi.w	r3, r3, #1
                }while(!(m_bitMap[bucket] & 1) && m_bit < SIZE);
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d0f3      	beq.n	800a966 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE8progressEv+0x1a6>
 800a97e:	e73f      	b.n	800a800 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE8progressEv+0x40>
 800a980:	4658      	mov	r0, fp
 800a982:	f7ff f877 	bl	8009a74 <sys_mutex_unlock>
 800a986:	a807      	add	r0, sp, #28
 800a988:	f004 fc54 	bl	800f234 <_ZN4rtps11PBufWrapperD1Ev>
}
 800a98c:	b00f      	add	sp, #60	; 0x3c
 800a98e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if(m_pool.m_numElements == 0){
 800a992:	2401      	movs	r4, #1
 800a994:	e003      	b.n	800a99e <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE8progressEv+0x1de>
                }while(!(m_bitMap[bucket] & 1) && m_bit < SIZE);
 800a996:	07d2      	lsls	r2, r2, #31
 800a998:	f53f af2e 	bmi.w	800a7f8 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE8progressEv+0x38>
 800a99c:	461c      	mov	r4, r3
                    m_bitMap[bucket] = m_bitMap[bucket] >> 1;
 800a99e:	107a      	asrs	r2, r7, #1
 800a9a0:	1c63      	adds	r3, r4, #1
                }while(!(m_bitMap[bucket] & 1) && m_bit < SIZE);
 800a9a2:	2c02      	cmp	r4, #2
                    m_bitMap[bucket] = m_bitMap[bucket] >> 1;
 800a9a4:	b2d7      	uxtb	r7, r2
 800a9a6:	b2db      	uxtb	r3, r3
                }while(!(m_bitMap[bucket] & 1) && m_bit < SIZE);
 800a9a8:	d9f5      	bls.n	800a996 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE8progressEv+0x1d6>
 800a9aa:	e725      	b.n	800a7f8 <_ZN4rtps16StatelessWriterTINS_9UdpDriverEE8progressEv+0x38>
 800a9ac:	10624dd3 	.word	0x10624dd3
 800a9b0:	08010d40 	.word	0x08010d40

0800a9b4 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE9newChangeERKNS_17ReaderCacheChangeE>:
    if(m_callback == nullptr){
 800a9b4:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	f000 8085 	beq.w	800aac8 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE9newChangeERKNS_17ReaderCacheChangeE+0x114>
    Lock lock{m_mutex};
 800a9be:	f500 7394 	add.w	r3, r0, #296	; 0x128
void StatefulReaderT<NetworkDriver>::newChange(const ReaderCacheChange& cacheChange){
 800a9c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9c6:	4607      	mov	r7, r0
 800a9c8:	b085      	sub	sp, #20
            sys_mutex_lock(&m_mutex);
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	4688      	mov	r8, r1
    Lock lock{m_mutex};
 800a9ce:	9303      	str	r3, [sp, #12]
 800a9d0:	f7ff f84a 	bl	8009a68 <sys_mutex_lock>
                memcpy(m_bitMap, m_pool.m_bitMap, sizeof(m_bitMap));
 800a9d4:	f897 5070 	ldrb.w	r5, [r7, #112]	; 0x70
            if(!(m_bitMap[0] & 1)){
 800a9d8:	f015 0401 	ands.w	r4, r5, #1
 800a9dc:	d03c      	beq.n	800aa58 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE9newChangeERKNS_17ReaderCacheChangeE+0xa4>
            explicit MemoryPoolIterator(MemoryPool<TYPE, SIZE>& pool) : m_pool(pool){
 800a9de:	2400      	movs	r4, #0
 800a9e0:	f108 0308 	add.w	r3, r8, #8
    for(auto& proxy : m_proxies){
 800a9e4:	f107 0a70 	add.w	sl, r7, #112	; 0x70
        if(proxy.remoteWriterGuid == cacheChange.writerGuid){
 800a9e8:	f04f 0938 	mov.w	r9, #56	; 0x38
 800a9ec:	9301      	str	r3, [sp, #4]
 800a9ee:	f108 0314 	add.w	r3, r8, #20
 800a9f2:	9302      	str	r3, [sp, #8]
    for(auto& proxy : m_proxies){
 800a9f4:	2c03      	cmp	r4, #3
 800a9f6:	d01c      	beq.n	800aa32 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE9newChangeERKNS_17ReaderCacheChangeE+0x7e>
        if(proxy.remoteWriterGuid == cacheChange.writerGuid){
 800a9f8:	2308      	movs	r3, #8
 800a9fa:	220c      	movs	r2, #12
 800a9fc:	9901      	ldr	r1, [sp, #4]
 800a9fe:	fb19 3604 	smlabb	r6, r9, r4, r3
 800aa02:	4456      	add	r6, sl
 800aa04:	4630      	mov	r0, r6
 800aa06:	eb06 0b02 	add.w	fp, r6, r2
 800aa0a:	f004 ff93 	bl	800f934 <memcmp>
            return this->prefix == other.prefix &&
 800aa0e:	b970      	cbnz	r0, 800aa2e <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE9newChangeERKNS_17ReaderCacheChangeE+0x7a>
 800aa10:	f106 020f 	add.w	r2, r6, #15
	  if (const size_t __len = (__last1 - __first1))
 800aa14:	ebb2 020b 	subs.w	r2, r2, fp
 800aa18:	d004      	beq.n	800aa24 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE9newChangeERKNS_17ReaderCacheChangeE+0x70>
	    return !__builtin_memcmp(__first1, __first2, sizeof(_Tp) * __len);
 800aa1a:	4658      	mov	r0, fp
 800aa1c:	9902      	ldr	r1, [sp, #8]
 800aa1e:	f004 ff89 	bl	800f934 <memcmp>
            return this->entityKey == other.entityKey &&
 800aa22:	b920      	cbnz	r0, 800aa2e <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE9newChangeERKNS_17ReaderCacheChangeE+0x7a>
 800aa24:	7bf2      	ldrb	r2, [r6, #15]
 800aa26:	f898 3017 	ldrb.w	r3, [r8, #23]
 800aa2a:	429a      	cmp	r2, r3
 800aa2c:	d024      	beq.n	800aa78 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE9newChangeERKNS_17ReaderCacheChangeE+0xc4>
                if(m_pool.m_numElements == 0){
 800aa2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa30:	b92b      	cbnz	r3, 800aa3e <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE9newChangeERKNS_17ReaderCacheChangeE+0x8a>
            sys_mutex_unlock(&m_mutex);
 800aa32:	9803      	ldr	r0, [sp, #12]
}
 800aa34:	b005      	add	sp, #20
 800aa36:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa3a:	f7ff b81b 	b.w	8009a74 <sys_mutex_unlock>
                    m_bitMap[bucket] = m_bitMap[bucket] >> 1;
 800aa3e:	106d      	asrs	r5, r5, #1
                    ++m_bit;
 800aa40:	3401      	adds	r4, #1
                }while(!(m_bitMap[bucket] & 1) && m_bit < SIZE);
 800aa42:	f005 0301 	and.w	r3, r5, #1
                    ++m_bit;
 800aa46:	b2e4      	uxtb	r4, r4
 800aa48:	b2ed      	uxtb	r5, r5
 800aa4a:	2c02      	cmp	r4, #2
 800aa4c:	bf88      	it	hi
 800aa4e:	f043 0301 	orrhi.w	r3, r3, #1
                }while(!(m_bitMap[bucket] & 1) && m_bit < SIZE);
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d0f3      	beq.n	800aa3e <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE9newChangeERKNS_17ReaderCacheChangeE+0x8a>
 800aa56:	e7cd      	b.n	800a9f4 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE9newChangeERKNS_17ReaderCacheChangeE+0x40>
                if(m_pool.m_numElements == 0){
 800aa58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d0e9      	beq.n	800aa32 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE9newChangeERKNS_17ReaderCacheChangeE+0x7e>
                    m_bitMap[bucket] = m_bitMap[bucket] >> 1;
 800aa5e:	106b      	asrs	r3, r5, #1
                    ++m_bit;
 800aa60:	3401      	adds	r4, #1
                }while(!(m_bitMap[bucket] & 1) && m_bit < SIZE);
 800aa62:	f003 0201 	and.w	r2, r3, #1
                    ++m_bit;
 800aa66:	b2e4      	uxtb	r4, r4
                    m_bitMap[bucket] = m_bitMap[bucket] >> 1;
 800aa68:	b2dd      	uxtb	r5, r3
 800aa6a:	2c02      	cmp	r4, #2
 800aa6c:	bf88      	it	hi
 800aa6e:	f042 0201 	orrhi.w	r2, r2, #1
                }while(!(m_bitMap[bucket] & 1) && m_bit < SIZE);
 800aa72:	2a00      	cmp	r2, #0
 800aa74:	d0f3      	beq.n	800aa5e <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE9newChangeERKNS_17ReaderCacheChangeE+0xaa>
 800aa76:	e7b3      	b.n	800a9e0 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE9newChangeERKNS_17ReaderCacheChangeE+0x2c>
            return high == other.high && low == other.low;
 800aa78:	ebc4 06c4 	rsb	r6, r4, r4, lsl #3
 800aa7c:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800aa80:	eb07 06c6 	add.w	r6, r7, r6, lsl #3
 800aa84:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
 800aa88:	f106 0088 	add.w	r0, r6, #136	; 0x88
 800aa8c:	429a      	cmp	r2, r3
 800aa8e:	d1ce      	bne.n	800aa2e <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE9newChangeERKNS_17ReaderCacheChangeE+0x7a>
 800aa90:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
 800aa94:	f106 028c 	add.w	r2, r6, #140	; 0x8c
 800aa98:	f8d8 301c 	ldr.w	r3, [r8, #28]
 800aa9c:	4299      	cmp	r1, r3
 800aa9e:	d1c6      	bne.n	800aa2e <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE9newChangeERKNS_17ReaderCacheChangeE+0x7a>
                m_callback(m_callee, cacheChange);
 800aaa0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800aaa4:	4683      	mov	fp, r0
 800aaa6:	4641      	mov	r1, r8
 800aaa8:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800aaac:	9201      	str	r2, [sp, #4]
 800aaae:	4798      	blx	r3
            ++low;
 800aab0:	9a01      	ldr	r2, [sp, #4]
 800aab2:	6813      	ldr	r3, [r2, #0]
 800aab4:	3301      	adds	r3, #1
 800aab6:	6013      	str	r3, [r2, #0]
            if(low == 0){
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d1ba      	bne.n	800aa32 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE9newChangeERKNS_17ReaderCacheChangeE+0x7e>
                ++high;
 800aabc:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
 800aac0:	3301      	adds	r3, #1
 800aac2:	f8cb 3000 	str.w	r3, [fp]
 800aac6:	e7b4      	b.n	800aa32 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE9newChangeERKNS_17ReaderCacheChangeE+0x7e>
 800aac8:	4770      	bx	lr
 800aaca:	bf00      	nop

0800aacc <_ZN4rtps13UdpConnectionD1Ev>:
            other.pcb = nullptr;
            return *this;
        }

        ~UdpConnection() {
            if (pcb != nullptr) {
 800aacc:	6803      	ldr	r3, [r0, #0]
        ~UdpConnection() {
 800aace:	b510      	push	{r4, lr}
 800aad0:	4604      	mov	r4, r0
            if (pcb != nullptr) {
 800aad2:	b153      	cbz	r3, 800aaea <_ZN4rtps13UdpConnectionD1Ev+0x1e>

namespace rtps{
        class TcpipCoreLock{
            public:
            TcpipCoreLock(){
                LOCK_TCPIP_CORE();
 800aad4:	4806      	ldr	r0, [pc, #24]	; (800aaf0 <_ZN4rtps13UdpConnectionD1Ev+0x24>)
 800aad6:	f7fe ffc7 	bl	8009a68 <sys_mutex_lock>
                TcpipCoreLock lock;
                udp_remove(pcb);
 800aada:	6820      	ldr	r0, [r4, #0]
 800aadc:	f7fc f95c 	bl	8006d98 <udp_remove>
                pcb = nullptr;
 800aae0:	2300      	movs	r3, #0
            }
            ~TcpipCoreLock(){
                UNLOCK_TCPIP_CORE();
 800aae2:	4803      	ldr	r0, [pc, #12]	; (800aaf0 <_ZN4rtps13UdpConnectionD1Ev+0x24>)
 800aae4:	6023      	str	r3, [r4, #0]
 800aae6:	f7fe ffc5 	bl	8009a74 <sys_mutex_unlock>
            }
        }
 800aaea:	4620      	mov	r0, r4
 800aaec:	bd10      	pop	{r4, pc}
 800aaee:	bf00      	nop
 800aaf0:	20005a18 	.word	0x20005a18

0800aaf4 <__tcf_0>:

void latencyTestRPTS(){
	bool pubMatched = false;
		bool subMatched = false;
		static rtps::Domain domain;
 800aaf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
}
 800aaf8:	f641 5188 	movw	r1, #7560	; 0x1d88
 800aafc:	4e46      	ldr	r6, [pc, #280]	; (800ac18 <__tcf_0+0x124>)
    m_running = false;
 800aafe:	f641 63fc 	movw	r3, #7932	; 0x1efc
 800ab02:	2200      	movs	r2, #0
}
 800ab04:	4f45      	ldr	r7, [pc, #276]	; (800ac1c <__tcf_0+0x128>)
    sys_msleep(10); // Required for tests/ Join currently not available
 800ab06:	200a      	movs	r0, #10
    struct array
 800ab08:	4d45      	ldr	r5, [pc, #276]	; (800ac20 <__tcf_0+0x12c>)
}
 800ab0a:	5077      	str	r7, [r6, r1]
    m_running = false;
 800ab0c:	54f2      	strb	r2, [r6, r3]
 800ab0e:	f1a5 04dc 	sub.w	r4, r5, #220	; 0xdc
    sys_msleep(10); // Required for tests/ Join currently not available
 800ab12:	f7fb fdad 	bl	8006670 <sys_msleep>
        sys_mutex_free(&m_mutex);
 800ab16:	f506 50ef 	add.w	r0, r6, #7648	; 0x1de0
 800ab1a:	f7fe ffa1 	bl	8009a60 <sys_mutex_free>
 800ab1e:	3d14      	subs	r5, #20
 800ab20:	f105 000c 	add.w	r0, r5, #12
 800ab24:	f004 fb86 	bl	800f234 <_ZN4rtps11PBufWrapperD1Ev>
 800ab28:	42a5      	cmp	r5, r4
 800ab2a:	d1f8      	bne.n	800ab1e <__tcf_0+0x2a>
 800ab2c:	f1a5 0018 	sub.w	r0, r5, #24
 800ab30:	f5a5 74d6 	sub.w	r4, r5, #428	; 0x1ac
 800ab34:	f004 fb7e 	bl	800f234 <_ZN4rtps11PBufWrapperD1Ev>
}
 800ab38:	f5a5 7143 	sub.w	r1, r5, #780	; 0x30c
    m_running = false;
 800ab3c:	f641 4374 	movw	r3, #7284	; 0x1c74
 800ab40:	2200      	movs	r2, #0
}
 800ab42:	600f      	str	r7, [r1, #0]
    sys_msleep(10); // Required for tests/ Join currently not available
 800ab44:	200a      	movs	r0, #10
    m_running = false;
 800ab46:	54f2      	strb	r2, [r6, r3]
 800ab48:	f5a5 7722 	sub.w	r7, r5, #648	; 0x288
    sys_msleep(10); // Required for tests/ Join currently not available
 800ab4c:	f7fb fd90 	bl	8006670 <sys_msleep>
        sys_mutex_free(&m_mutex);
 800ab50:	f5a5 702d 	sub.w	r0, r5, #692	; 0x2b4
 800ab54:	f7fe ff84 	bl	8009a60 <sys_mutex_free>
 800ab58:	3c14      	subs	r4, #20
 800ab5a:	f104 000c 	add.w	r0, r4, #12
 800ab5e:	f004 fb69 	bl	800f234 <_ZN4rtps11PBufWrapperD1Ev>
 800ab62:	42bc      	cmp	r4, r7
 800ab64:	d1f8      	bne.n	800ab58 <__tcf_0+0x64>
 800ab66:	f1a4 0018 	sub.w	r0, r4, #24
}
 800ab6a:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 800ac28 <__tcf_0+0x134>
 800ab6e:	f004 fb61 	bl	800f234 <_ZN4rtps11PBufWrapperD1Ev>
 800ab72:	f641 13d0 	movw	r3, #6608	; 0x19d0
    sys_mutex_free(&m_mutex);
 800ab76:	f1a4 008c 	sub.w	r0, r4, #140	; 0x8c
 800ab7a:	f5a4 65b7 	sub.w	r5, r4, #1464	; 0x5b8
}
 800ab7e:	f846 8003 	str.w	r8, [r6, r3]
 800ab82:	f5a4 672b 	sub.w	r7, r4, #2736	; 0xab0
    sys_mutex_free(&m_mutex);
 800ab86:	f7fe ff6b 	bl	8009a60 <sys_mutex_free>
 800ab8a:	f5a4 70a8 	sub.w	r0, r4, #336	; 0x150
 800ab8e:	f004 fb51 	bl	800f234 <_ZN4rtps11PBufWrapperD1Ev>
}
 800ab92:	f641 03a4 	movw	r3, #6308	; 0x18a4
    sys_mutex_free(&m_mutex);
 800ab96:	f5a4 70dc 	sub.w	r0, r4, #440	; 0x1b8
}
 800ab9a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800ac2c <__tcf_0+0x138>
}
 800ab9e:	f846 8003 	str.w	r8, [r6, r3]
 800aba2:	f8df 808c 	ldr.w	r8, [pc, #140]	; 800ac30 <__tcf_0+0x13c>
    sys_mutex_free(&m_mutex);
 800aba6:	f7fe ff5b 	bl	8009a60 <sys_mutex_free>
 800abaa:	f5a4 701f 	sub.w	r0, r4, #636	; 0x27c
 800abae:	f004 fb41 	bl	800f234 <_ZN4rtps11PBufWrapperD1Ev>
 800abb2:	f855 3c6c 	ldr.w	r3, [r5, #-108]
 800abb6:	f1a5 006c 	sub.w	r0, r5, #108	; 0x6c
 800abba:	699b      	ldr	r3, [r3, #24]
 800abbc:	4543      	cmp	r3, r8
 800abbe:	d129      	bne.n	800ac14 <__tcf_0+0x120>
        sys_mutex_free(&m_mutex);
 800abc0:	f1a5 0014 	sub.w	r0, r5, #20
}
 800abc4:	f845 9c6c 	str.w	r9, [r5, #-108]
 800abc8:	f105 0618 	add.w	r6, r5, #24
 800abcc:	f105 04f4 	add.w	r4, r5, #244	; 0xf4
        sys_mutex_free(&m_mutex);
 800abd0:	f7fe ff46 	bl	8009a60 <sys_mutex_free>
 800abd4:	3c14      	subs	r4, #20
 800abd6:	f104 000c 	add.w	r0, r4, #12
 800abda:	f004 fb2b 	bl	800f234 <_ZN4rtps11PBufWrapperD1Ev>
 800abde:	42a6      	cmp	r6, r4
 800abe0:	d1f8      	bne.n	800abd4 <__tcf_0+0xe0>
 800abe2:	4628      	mov	r0, r5
 800abe4:	f004 fb26 	bl	800f234 <_ZN4rtps11PBufWrapperD1Ev>
 800abe8:	f5a5 751f 	sub.w	r5, r5, #636	; 0x27c
 800abec:	42bd      	cmp	r5, r7
 800abee:	d1e0      	bne.n	800abb2 <__tcf_0+0xbe>
 800abf0:	4c0c      	ldr	r4, [pc, #48]	; (800ac24 <__tcf_0+0x130>)
 800abf2:	f104 000c 	add.w	r0, r4, #12
 800abf6:	f1a4 0550 	sub.w	r5, r4, #80	; 0x50
 800abfa:	f003 fe0f 	bl	800e81c <_ZN4rtps11ParticipantD1Ev>
 800abfe:	3c08      	subs	r4, #8
 800ac00:	4620      	mov	r0, r4
 800ac02:	f7ff ff63 	bl	800aacc <_ZN4rtps13UdpConnectionD1Ev>
 800ac06:	42ac      	cmp	r4, r5
 800ac08:	d1f9      	bne.n	800abfe <__tcf_0+0x10a>
#include "rtps/entities/StatelessWriter.h"
#include "rtps/storages/PBufWrapper.h"
#include "rtps/ThreadPool.h"

namespace rtps{
    class Domain{
 800ac0a:	4803      	ldr	r0, [pc, #12]	; (800ac18 <__tcf_0+0x124>)
 800ac0c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac10:	f000 bfc8 	b.w	800bba4 <_ZN4rtps10ThreadPoolD1Ev>
 800ac14:	4798      	blx	r3
 800ac16:	e7e7      	b.n	800abe8 <__tcf_0+0xf4>
 800ac18:	20003920 	.word	0x20003920
 800ac1c:	08011f6c 	.word	0x08011f6c
 800ac20:	20005808 	.word	0x20005808
 800ac24:	20003aac 	.word	0x20003aac
 800ac28:	08011f48 	.word	0x08011f48
 800ac2c:	08011f20 	.word	0x08011f20
 800ac30:	0800a16d 	.word	0x0800a16d

0800ac34 <__io_putchar>:
extern "C" int __io_putchar(int ch) {
 800ac34:	b500      	push	{lr}
 800ac36:	b083      	sub	sp, #12
  HAL_UART_Transmit(&huart6, (uint8_t *)&ch, 1, 1000);
 800ac38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ac3c:	2201      	movs	r2, #1
extern "C" int __io_putchar(int ch) {
 800ac3e:	a902      	add	r1, sp, #8
 800ac40:	f841 0d04 	str.w	r0, [r1, #-4]!
  HAL_UART_Transmit(&huart6, (uint8_t *)&ch, 1, 1000);
 800ac44:	4803      	ldr	r0, [pc, #12]	; (800ac54 <__io_putchar+0x20>)
 800ac46:	f7f7 fba7 	bl	8002398 <HAL_UART_Transmit>
}
 800ac4a:	9801      	ldr	r0, [sp, #4]
 800ac4c:	b003      	add	sp, #12
 800ac4e:	f85d fb04 	ldr.w	pc, [sp], #4
 800ac52:	bf00      	nop
 800ac54:	20003408 	.word	0x20003408

0800ac58 <_Z10uart_printPc>:
void uart_print(char* str){
 800ac58:	b510      	push	{r4, lr}
 800ac5a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800ac5c:	f7fa f962 	bl	8004f24 <vPortEnterCritical>
	HAL_UART_Transmit(&huart6, (uint8_t*) str, strlen(str), 100);
 800ac60:	4620      	mov	r0, r4
 800ac62:	f7f5 faf7 	bl	8000254 <strlen>
 800ac66:	4621      	mov	r1, r4
 800ac68:	b282      	uxth	r2, r0
 800ac6a:	2364      	movs	r3, #100	; 0x64
 800ac6c:	4803      	ldr	r0, [pc, #12]	; (800ac7c <_Z10uart_printPc+0x24>)
 800ac6e:	f7f7 fb93 	bl	8002398 <HAL_UART_Transmit>
}
 800ac72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	taskEXIT_CRITICAL();
 800ac76:	f7fa b97b 	b.w	8004f70 <vPortExitCritical>
 800ac7a:	bf00      	nop
 800ac7c:	20003408 	.word	0x20003408

0800ac80 <_ZdlPv>:
	vPortFree ( ptr );
 800ac80:	f7fa bb36 	b.w	80052f0 <vPortFree>

0800ac84 <vApplicationStackOverflowHook>:
extern "C" void vApplicationStackOverflowHook( TaskHandle_t xTask, signed char *pcTaskName ){
 800ac84:	b508      	push	{r3, lr}
	uart_print("Stackoverflow\n");
 800ac86:	4802      	ldr	r0, [pc, #8]	; (800ac90 <vApplicationStackOverflowHook+0xc>)
 800ac88:	f7ff ffe6 	bl	800ac58 <_Z10uart_printPc>
 800ac8c:	e7fe      	b.n	800ac8c <vApplicationStackOverflowHook+0x8>
 800ac8e:	bf00      	nop
 800ac90:	08011f98 	.word	0x08011f98

0800ac94 <vApplicationMallocFailedHook>:
extern "C" void vApplicationMallocFailedHook( void ){
 800ac94:	b508      	push	{r3, lr}
	uart_print("Malloc failed\n");
 800ac96:	4802      	ldr	r0, [pc, #8]	; (800aca0 <vApplicationMallocFailedHook+0xc>)
 800ac98:	f7ff ffde 	bl	800ac58 <_Z10uart_printPc>
 800ac9c:	e7fe      	b.n	800ac9c <vApplicationMallocFailedHook+0x8>
 800ac9e:	bf00      	nop
 800aca0:	08011fa8 	.word	0x08011fa8

0800aca4 <_Z18SystemClock_Configv>:
{
 800aca4:	b5f0      	push	{r4, r5, r6, r7, lr}
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800aca6:	2400      	movs	r4, #0
{
 800aca8:	b0b9      	sub	sp, #228	; 0xe4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800acaa:	2234      	movs	r2, #52	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800acac:	2502      	movs	r5, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800acae:	4621      	mov	r1, r4
 800acb0:	a807      	add	r0, sp, #28
 800acb2:	f004 fe59 	bl	800f968 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800acb6:	4621      	mov	r1, r4
 800acb8:	2290      	movs	r2, #144	; 0x90
 800acba:	a814      	add	r0, sp, #80	; 0x50
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800acbc:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800acbe:	2601      	movs	r6, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800acc0:	f44f 27a0 	mov.w	r7, #327680	; 0x50000
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800acc4:	e9cd 4402 	strd	r4, r4, [sp, #8]
 800acc8:	e9cd 4404 	strd	r4, r4, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800accc:	f004 fe4c 	bl	800f968 <memset>
  HAL_PWR_EnableBkUpAccess();
 800acd0:	f7f6 fbe4 	bl	800149c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_PWR_CLK_ENABLE();
 800acd4:	4b1e      	ldr	r3, [pc, #120]	; (800ad50 <_Z18SystemClock_Configv+0xac>)
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800acd6:	4a1f      	ldr	r2, [pc, #124]	; (800ad54 <_Z18SystemClock_Configv+0xb0>)
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800acd8:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 800acda:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800acdc:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800ace0:	6419      	str	r1, [r3, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800ace2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  __HAL_RCC_PWR_CLK_ENABLE();
 800ace6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ace8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800acec:	9300      	str	r3, [sp, #0]
 800acee:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800acf0:	6813      	ldr	r3, [r2, #0]
 800acf2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800acf6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800acfa:	6013      	str	r3, [r2, #0]
 800acfc:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.PLL.PLLM = 4;
 800acfe:	2204      	movs	r2, #4
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800ad00:	9607      	str	r6, [sp, #28]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800ad02:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800ad06:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800ad08:	9708      	str	r7, [sp, #32]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800ad0a:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLN = 96;
 800ad0c:	2360      	movs	r3, #96	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800ad0e:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 96;
 800ad10:	9310      	str	r3, [sp, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800ad12:	9e01      	ldr	r6, [sp, #4]
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800ad14:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 4;
 800ad16:	e9cd 120e 	strd	r1, r2, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800ad1a:	f7f6 fc03 	bl	8001524 <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800ad1e:	f7f6 fbc5 	bl	80014ac <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800ad22:	220f      	movs	r2, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800ad24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800ad28:	2103      	movs	r1, #3
 800ad2a:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800ad2c:	9202      	str	r2, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800ad2e:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800ad30:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800ad32:	e9cd 5403 	strd	r5, r4, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800ad36:	f7f6 fdc3 	bl	80018c0 <HAL_RCC_ClockConfig>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART6
 800ad3a:	4b07      	ldr	r3, [pc, #28]	; (800ad58 <_Z18SystemClock_Configv+0xb4>)
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ad3c:	a814      	add	r0, sp, #80	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800ad3e:	9427      	str	r4, [sp, #156]	; 0x9c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800ad40:	942a      	str	r4, [sp, #168]	; 0xa8
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800ad42:	9433      	str	r4, [sp, #204]	; 0xcc
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART6
 800ad44:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ad46:	f7f6 ff01 	bl	8001b4c <HAL_RCCEx_PeriphCLKConfig>
}
 800ad4a:	b039      	add	sp, #228	; 0xe4
 800ad4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad4e:	bf00      	nop
 800ad50:	40023800 	.word	0x40023800
 800ad54:	40007000 	.word	0x40007000
 800ad58:	00200900 	.word	0x00200900

0800ad5c <main>:
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b090      	sub	sp, #64	; 0x40
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ad60:	2400      	movs	r4, #0
  HAL_Init();
 800ad62:	f7f5 fc55 	bl	8000610 <HAL_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ad66:	2601      	movs	r6, #1
  SystemClock_Config();
 800ad68:	f7ff ff9c 	bl	800aca4 <_Z18SystemClock_Configv>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800ad6c:	4b67      	ldr	r3, [pc, #412]	; (800af0c <main+0x1b0>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ad6e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800ad70:	f44f 4181 	mov.w	r1, #16512	; 0x4080
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ad74:	9406      	str	r4, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800ad76:	4622      	mov	r2, r4
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ad78:	9408      	str	r4, [sp, #32]
		GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_11 | GPIO_PIN_12;
 800ad7a:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 800ad7e:	9409      	str	r4, [sp, #36]	; 0x24
  huart3.Init.Mode = UART_MODE_TX_RX;
 800ad80:	270c      	movs	r7, #12
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ad82:	940a      	str	r4, [sp, #40]	; 0x28
  huart3.Init.BaudRate = 115200;
 800ad84:	f44f 39e1 	mov.w	r9, #115200	; 0x1c200
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800ad88:	6b1d      	ldr	r5, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800ad8a:	4861      	ldr	r0, [pc, #388]	; (800af10 <main+0x1b4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800ad8c:	f045 0504 	orr.w	r5, r5, #4
 800ad90:	631d      	str	r5, [r3, #48]	; 0x30
 800ad92:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 800ad94:	f005 0504 	and.w	r5, r5, #4
 800ad98:	9500      	str	r5, [sp, #0]
 800ad9a:	9d00      	ldr	r5, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800ad9c:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 800ad9e:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 800ada2:	631d      	str	r5, [r3, #48]	; 0x30
 800ada4:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 800ada6:	f005 0580 	and.w	r5, r5, #128	; 0x80
 800adaa:	9501      	str	r5, [sp, #4]
 800adac:	9d01      	ldr	r5, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800adae:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 800adb0:	4335      	orrs	r5, r6
 800adb2:	631d      	str	r5, [r3, #48]	; 0x30
 800adb4:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 800adb6:	4035      	ands	r5, r6
 800adb8:	9502      	str	r5, [sp, #8]
 800adba:	9d02      	ldr	r5, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800adbc:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 800adbe:	f045 0502 	orr.w	r5, r5, #2
 800adc2:	631d      	str	r5, [r3, #48]	; 0x30
 800adc4:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 800adc6:	f005 0502 	and.w	r5, r5, #2
 800adca:	9503      	str	r5, [sp, #12]
 800adcc:	9d03      	ldr	r5, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800adce:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 800add0:	f045 0508 	orr.w	r5, r5, #8
 800add4:	631d      	str	r5, [r3, #48]	; 0x30
 800add6:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 800add8:	f005 0508 	and.w	r5, r5, #8
 800addc:	9504      	str	r5, [sp, #16]
 800adde:	9d04      	ldr	r5, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800ade0:	6b1d      	ldr	r5, [r3, #48]	; 0x30
 800ade2:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 800ade6:	631d      	str	r5, [r3, #48]	; 0x30
 800ade8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  huart3.Instance = USART3;
 800adea:	4d4a      	ldr	r5, [pc, #296]	; (800af14 <main+0x1b8>)
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800adec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adf0:	9305      	str	r3, [sp, #20]
 800adf2:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800adf4:	f7f6 faa6 	bl	8001344 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800adf8:	4622      	mov	r2, r4
 800adfa:	2140      	movs	r1, #64	; 0x40
 800adfc:	4846      	ldr	r0, [pc, #280]	; (800af18 <main+0x1bc>)
 800adfe:	f7f6 faa1 	bl	8001344 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800ae02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800ae06:	4b45      	ldr	r3, [pc, #276]	; (800af1c <main+0x1c0>)
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800ae08:	a906      	add	r1, sp, #24
 800ae0a:	4845      	ldr	r0, [pc, #276]	; (800af20 <main+0x1c4>)
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800ae0c:	9206      	str	r2, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800ae0e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae10:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800ae12:	f7f6 f979 	bl	8001108 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800ae16:	f44f 4381 	mov.w	r3, #16512	; 0x4080
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ae1a:	a906      	add	r1, sp, #24
 800ae1c:	483c      	ldr	r0, [pc, #240]	; (800af10 <main+0x1b4>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ae1e:	e9cd 3606 	strd	r3, r6, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ae22:	e9cd 4408 	strd	r4, r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ae26:	f7f6 f96f 	bl	8001108 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800ae2a:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800ae2c:	a906      	add	r1, sp, #24
 800ae2e:	483a      	ldr	r0, [pc, #232]	; (800af18 <main+0x1bc>)
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800ae30:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ae32:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae34:	e9cd 6407 	strd	r6, r4, [sp, #28]
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800ae38:	f7f6 f966 	bl	8001108 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800ae3c:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800ae3e:	a906      	add	r1, sp, #24
 800ae40:	4835      	ldr	r0, [pc, #212]	; (800af18 <main+0x1bc>)
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800ae42:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae44:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800ae48:	f7f6 f95e 	bl	8001108 <HAL_GPIO_Init>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_11 | GPIO_PIN_12, GPIO_PIN_RESET); // D4 Matched, D5 RTT
 800ae4c:	4622      	mov	r2, r4
 800ae4e:	f641 01f0 	movw	r1, #6384	; 0x18f0
 800ae52:	4834      	ldr	r0, [pc, #208]	; (800af24 <main+0x1c8>)
 800ae54:	f7f6 fa76 	bl	8001344 <HAL_GPIO_WritePin>
		GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_11 | GPIO_PIN_12;
 800ae58:	f641 03f0 	movw	r3, #6384	; 0x18f0
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ae5c:	940f      	str	r4, [sp, #60]	; 0x3c
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ae5e:	4831      	ldr	r0, [pc, #196]	; (800af24 <main+0x1c8>)
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ae60:	960c      	str	r6, [sp, #48]	; 0x30
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ae62:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
		GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_11 | GPIO_PIN_12;
 800ae66:	f848 3d14 	str.w	r3, [r8, #-20]!
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ae6a:	4641      	mov	r1, r8
 800ae6c:	f7f6 f94c 	bl	8001108 <HAL_GPIO_Init>
  huart3.Instance = USART3;
 800ae70:	4b2d      	ldr	r3, [pc, #180]	; (800af28 <main+0x1cc>)
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800ae72:	f105 0094 	add.w	r0, r5, #148	; 0x94
  huart3.Init.Mode = UART_MODE_TX_RX;
 800ae76:	f8c5 70a8 	str.w	r7, [r5, #168]	; 0xa8
  huart3.Init.Parity = UART_PARITY_NONE;
 800ae7a:	f8c5 40a4 	str.w	r4, [r5, #164]	; 0xa4
  huart3.Init.BaudRate = 115200;
 800ae7e:	e9c5 3925 	strd	r3, r9, [r5, #148]	; 0x94
  huart3.Init.StopBits = UART_STOPBITS_1;
 800ae82:	e9c5 4427 	strd	r4, r4, [r5, #156]	; 0x9c
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800ae86:	e9c5 442b 	strd	r4, r4, [r5, #172]	; 0xac
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800ae8a:	e9c5 442d 	strd	r4, r4, [r5, #180]	; 0xb4
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800ae8e:	f7f7 fb67 	bl	8002560 <HAL_UART_Init>
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ae92:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800ae96:	2206      	movs	r2, #6
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ae98:	2302      	movs	r3, #2
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ae9a:	f505 708a 	add.w	r0, r5, #276	; 0x114
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ae9e:	f8c5 1114 	str.w	r1, [r5, #276]	; 0x114
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800aea2:	f8c5 2118 	str.w	r2, [r5, #280]	; 0x118
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800aea6:	f8c5 6130 	str.w	r6, [r5, #304]	; 0x130
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800aeaa:	f8c5 6140 	str.w	r6, [r5, #320]	; 0x140
  osThreadDef(defaultTask, StartDefaultTask, osPriorityRealtime, 0, 250);
 800aeae:	4646      	mov	r6, r8
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800aeb0:	f8c5 3120 	str.w	r3, [r5, #288]	; 0x120
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800aeb4:	f8c5 312c 	str.w	r3, [r5, #300]	; 0x12c
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800aeb8:	f8c5 4124 	str.w	r4, [r5, #292]	; 0x124
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800aebc:	f8c5 4134 	str.w	r4, [r5, #308]	; 0x134
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800aec0:	f8c5 4138 	str.w	r4, [r5, #312]	; 0x138
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800aec4:	f8c5 4144 	str.w	r4, [r5, #324]	; 0x144
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800aec8:	f7f6 fa40 	bl	800134c <HAL_PCD_Init>
  huart6.Instance = USART6;
 800aecc:	4b17      	ldr	r3, [pc, #92]	; (800af2c <main+0x1d0>)
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800aece:	f105 0014 	add.w	r0, r5, #20
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800aed2:	63ac      	str	r4, [r5, #56]	; 0x38
  huart6.Instance = USART6;
 800aed4:	616b      	str	r3, [r5, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800aed6:	e9c5 740a 	strd	r7, r4, [r5, #40]	; 0x28
  osThreadDef(defaultTask, StartDefaultTask, osPriorityRealtime, 0, 250);
 800aeda:	4f15      	ldr	r7, [pc, #84]	; (800af30 <main+0x1d4>)
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800aedc:	e9c5 9406 	strd	r9, r4, [r5, #24]
  huart6.Init.Parity = UART_PARITY_NONE;
 800aee0:	e9c5 4408 	strd	r4, r4, [r5, #32]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800aee4:	e9c5 440c 	strd	r4, r4, [r5, #48]	; 0x30
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800aee8:	f7f7 fb3a 	bl	8002560 <HAL_UART_Init>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityRealtime, 0, 250);
 800aeec:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800aeee:	683f      	ldr	r7, [r7, #0]
 800aef0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800aef2:	4640      	mov	r0, r8
 800aef4:	4621      	mov	r1, r4
  osThreadDef(defaultTask, StartDefaultTask, osPriorityRealtime, 0, 250);
 800aef6:	6037      	str	r7, [r6, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800aef8:	f7f7 fea6 	bl	8002c48 <osThreadCreate>
  volatile int heap_size = rtps::Config::OVERALL_HEAP_SIZE;
 800aefc:	f241 6312 	movw	r3, #5650	; 0x1612
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800af00:	6128      	str	r0, [r5, #16]
  volatile int heap_size = rtps::Config::OVERALL_HEAP_SIZE;
 800af02:	9306      	str	r3, [sp, #24]
  osKernelStart();
 800af04:	f7f7 fe92 	bl	8002c2c <osKernelStart>
 800af08:	e7fe      	b.n	800af08 <main+0x1ac>
 800af0a:	bf00      	nop
 800af0c:	40023800 	.word	0x40023800
 800af10:	40020400 	.word	0x40020400
 800af14:	200033f4 	.word	0x200033f4
 800af18:	40021800 	.word	0x40021800
 800af1c:	10110000 	.word	0x10110000
 800af20:	40020800 	.word	0x40020800
 800af24:	40020c00 	.word	0x40020c00
 800af28:	40004800 	.word	0x40004800
 800af2c:	40011400 	.word	0x40011400
 800af30:	08010d4c 	.word	0x08010d4c

0800af34 <_Z15latencyTestRPTSv>:
void latencyTestRPTS(){
 800af34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		static rtps::Domain domain;
 800af38:	4c64      	ldr	r4, [pc, #400]	; (800b0cc <_Z15latencyTestRPTSv+0x198>)
	bool pubMatched = false;
 800af3a:	2300      	movs	r3, #0
void latencyTestRPTS(){
 800af3c:	b084      	sub	sp, #16
		static rtps::Domain domain;
 800af3e:	f8d4 2518 	ldr.w	r2, [r4, #1304]	; 0x518
	bool pubMatched = false;
 800af42:	f88d 300d 	strb.w	r3, [sp, #13]
		bool subMatched = false;
 800af46:	f88d 300e 	strb.w	r3, [sp, #14]
		static rtps::Domain domain;
 800af4a:	07d3      	lsls	r3, r2, #31
 800af4c:	d508      	bpl.n	800af60 <_Z15latencyTestRPTSv+0x2c>
		volatile bool success = false; //domain.start();
 800af4e:	2400      	movs	r4, #0
 800af50:	f88d 400f 	strb.w	r4, [sp, #15]
		if(!success){
 800af54:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800af58:	b993      	cbnz	r3, 800af80 <_Z15latencyTestRPTSv+0x4c>
	    	}
	    }
	    GPIO::endMatched();
	    HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_SET);
	    uart_print("done\n");
}
 800af5a:	b004      	add	sp, #16
 800af5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		static rtps::Domain domain;
 800af60:	485b      	ldr	r0, [pc, #364]	; (800b0d0 <_Z15latencyTestRPTSv+0x19c>)
 800af62:	f001 ff6f 	bl	800ce44 <_ZN4rtps6DomainC1Ev>
 800af66:	2301      	movs	r3, #1
 800af68:	485a      	ldr	r0, [pc, #360]	; (800b0d4 <_Z15latencyTestRPTSv+0x1a0>)
 800af6a:	f8c4 3518 	str.w	r3, [r4, #1304]	; 0x518
		volatile bool success = false; //domain.start();
 800af6e:	2400      	movs	r4, #0
		static rtps::Domain domain;
 800af70:	f004 fcaf 	bl	800f8d2 <atexit>
		volatile bool success = false; //domain.start();
 800af74:	f88d 400f 	strb.w	r4, [sp, #15]
		if(!success){
 800af78:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d0ec      	beq.n	800af5a <_Z15latencyTestRPTSv+0x26>
		rtps::Participant* part = domain.createParticipant();
 800af80:	4853      	ldr	r0, [pc, #332]	; (800b0d0 <_Z15latencyTestRPTSv+0x19c>)
 800af82:	f002 fe83 	bl	800dc8c <_ZN4rtps6Domain17createParticipantEv>
		if(part == nullptr){
 800af86:	4605      	mov	r5, r0
 800af88:	2800      	cmp	r0, #0
 800af8a:	d0e6      	beq.n	800af5a <_Z15latencyTestRPTSv+0x26>
		part->registerOnNewPublisherMatchedCallback(setTrue, &pubMatched);
 800af8c:	f10d 020d 	add.w	r2, sp, #13
 800af90:	4951      	ldr	r1, [pc, #324]	; (800b0d8 <_Z15latencyTestRPTSv+0x1a4>)
 800af92:	f003 fc87 	bl	800e8a4 <_ZN4rtps11Participant37registerOnNewPublisherMatchedCallbackEPFvPvES1_>
		part->registerOnNewSubscriberMatchedCallback(setTrue, &subMatched);
 800af96:	f10d 020e 	add.w	r2, sp, #14
 800af9a:	494f      	ldr	r1, [pc, #316]	; (800b0d8 <_Z15latencyTestRPTSv+0x1a4>)
 800af9c:	4628      	mov	r0, r5
 800af9e:	f003 fc8b 	bl	800e8b8 <_ZN4rtps11Participant38registerOnNewSubscriberMatchedCallbackEPFvPvES1_>
	    rtps::Writer* writer = domain.createWriter(*part, "LatencyTest_PUB2SUB", "LatencyType", false);
 800afa2:	4b4e      	ldr	r3, [pc, #312]	; (800b0dc <_Z15latencyTestRPTSv+0x1a8>)
 800afa4:	4629      	mov	r1, r5
 800afa6:	4a4e      	ldr	r2, [pc, #312]	; (800b0e0 <_Z15latencyTestRPTSv+0x1ac>)
 800afa8:	9400      	str	r4, [sp, #0]
 800afaa:	4849      	ldr	r0, [pc, #292]	; (800b0d0 <_Z15latencyTestRPTSv+0x19c>)
 800afac:	f002 feb8 	bl	800dd20 <_ZN4rtps6Domain12createWriterERNS_11ParticipantEPKcS4_b>
 800afb0:	4607      	mov	r7, r0
	    rtps::Reader* reader = domain.createReader(*part, "LatencyTest_SUB2PUB", "LatencyType", false);
 800afb2:	9400      	str	r4, [sp, #0]
 800afb4:	4629      	mov	r1, r5
 800afb6:	4b49      	ldr	r3, [pc, #292]	; (800b0dc <_Z15latencyTestRPTSv+0x1a8>)
 800afb8:	4a4a      	ldr	r2, [pc, #296]	; (800b0e4 <_Z15latencyTestRPTSv+0x1b0>)
 800afba:	4845      	ldr	r0, [pc, #276]	; (800b0d0 <_Z15latencyTestRPTSv+0x19c>)
 800afbc:	f002 fb4e 	bl	800d65c <_ZN4rtps6Domain12createReaderERNS_11ParticipantEPKcS4_b>
	    if(writer == nullptr || reader == nullptr){
 800afc0:	2f00      	cmp	r7, #0
 800afc2:	d0ca      	beq.n	800af5a <_Z15latencyTestRPTSv+0x26>
 800afc4:	fab0 f280 	clz	r2, r0
 800afc8:	0952      	lsrs	r2, r2, #5
 800afca:	2a00      	cmp	r2, #0
 800afcc:	d1c5      	bne.n	800af5a <_Z15latencyTestRPTSv+0x26>
	    reader->registerCallback(receiveCallbackLatencyRTPS, nullptr);
 800afce:	6803      	ldr	r3, [r0, #0]
 800afd0:	4945      	ldr	r1, [pc, #276]	; (800b0e8 <_Z15latencyTestRPTSv+0x1b4>)
 800afd2:	685b      	ldr	r3, [r3, #4]
 800afd4:	4798      	blx	r3
	taskENTER_CRITICAL();
 800afd6:	f7f9 ffa5 	bl	8004f24 <vPortEnterCritical>
	HAL_UART_Transmit(&huart6, (uint8_t*) str, strlen(str), 100);
 800afda:	2364      	movs	r3, #100	; 0x64
 800afdc:	2210      	movs	r2, #16
 800afde:	4943      	ldr	r1, [pc, #268]	; (800b0ec <_Z15latencyTestRPTSv+0x1b8>)
 800afe0:	4843      	ldr	r0, [pc, #268]	; (800b0f0 <_Z15latencyTestRPTSv+0x1bc>)
 800afe2:	f7f7 f9d9 	bl	8002398 <HAL_UART_Transmit>
	taskEXIT_CRITICAL();
 800afe6:	f7f9 ffc3 	bl	8004f70 <vPortExitCritical>
 800afea:	e001      	b.n	800aff0 <_Z15latencyTestRPTSv+0xbc>
	    	vTaskDelay(1/ portTICK_PERIOD_MS);
 800afec:	f7f9 fb92 	bl	8004714 <vTaskDelay>
	    while(!subMatched || ! pubMatched){
 800aff0:	f89d 300e 	ldrb.w	r3, [sp, #14]
	    	vTaskDelay(1/ portTICK_PERIOD_MS);
 800aff4:	2001      	movs	r0, #1
	    while(!subMatched || ! pubMatched){
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d0f8      	beq.n	800afec <_Z15latencyTestRPTSv+0xb8>
 800affa:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d0f4      	beq.n	800afec <_Z15latencyTestRPTSv+0xb8>
	taskENTER_CRITICAL();
 800b002:	f7f9 ff8f 	bl	8004f24 <vPortEnterCritical>
	HAL_UART_Transmit(&huart6, (uint8_t*) str, strlen(str), 100);
 800b006:	2364      	movs	r3, #100	; 0x64
 800b008:	2208      	movs	r2, #8
 800b00a:	493a      	ldr	r1, [pc, #232]	; (800b0f4 <_Z15latencyTestRPTSv+0x1c0>)
 800b00c:	4838      	ldr	r0, [pc, #224]	; (800b0f0 <_Z15latencyTestRPTSv+0x1bc>)
	    sys_msleep(2000);
 800b00e:	f242 7442 	movw	r4, #10050	; 0x2742
	HAL_UART_Transmit(&huart6, (uint8_t*) str, strlen(str), 100);
 800b012:	f7f7 f9c1 	bl	8002398 <HAL_UART_Transmit>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 800b016:	4e38      	ldr	r6, [pc, #224]	; (800b0f8 <_Z15latencyTestRPTSv+0x1c4>)
	taskEXIT_CRITICAL();
 800b018:	f7f9 ffaa 	bl	8004f70 <vPortExitCritical>
	    sys_msleep(2000);
 800b01c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
		HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 800b020:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 800b104 <_Z15latencyTestRPTSv+0x1d0>
 800b024:	f7fb fb24 	bl	8006670 <sys_msleep>
 800b028:	e001      	b.n	800b02e <_Z15latencyTestRPTSv+0xfa>
	    for(size_t i=0; i<numSamples; ++i){
 800b02a:	3c01      	subs	r4, #1
 800b02c:	d038      	beq.n	800b0a0 <_Z15latencyTestRPTSv+0x16c>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 800b02e:	2201      	movs	r2, #1
 800b030:	2110      	movs	r1, #16
 800b032:	4630      	mov	r0, r6
 800b034:	f7f6 f986 	bl	8001344 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_SET);
 800b038:	2201      	movs	r2, #1
 800b03a:	2120      	movs	r1, #32
 800b03c:	4630      	mov	r0, r6
 800b03e:	f7f6 f981 	bl	8001344 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 800b042:	2201      	movs	r2, #1
 800b044:	2180      	movs	r1, #128	; 0x80
 800b046:	4640      	mov	r0, r8
 800b048:	f7f6 f97c 	bl	8001344 <HAL_GPIO_WritePin>
	    	auto* change = writer->newChange(rtps::ChangeKind_t::ALIVE, data.data(), data.size());
 800b04c:	6839      	ldr	r1, [r7, #0]
 800b04e:	2310      	movs	r3, #16
 800b050:	4a2a      	ldr	r2, [pc, #168]	; (800b0fc <_Z15latencyTestRPTSv+0x1c8>)
 800b052:	68cd      	ldr	r5, [r1, #12]
 800b054:	4638      	mov	r0, r7
 800b056:	2101      	movs	r1, #1
 800b058:	47a8      	blx	r5
	    	auto notificationValueBefore = ulTaskNotifyTake(pdTRUE, pdMS_TO_TICKS(3000));
 800b05a:	f640 31b8 	movw	r1, #3000	; 0xbb8
	    	if(change == nullptr){
 800b05e:	b1f8      	cbz	r0, 800b0a0 <_Z15latencyTestRPTSv+0x16c>
	    	auto notificationValueBefore = ulTaskNotifyTake(pdTRUE, pdMS_TO_TICKS(3000));
 800b060:	2001      	movs	r0, #1
 800b062:	f7f9 fe11 	bl	8004c88 <ulTaskNotifyTake>
	    	if(notificationValueBefore == 0){ // Timeout
 800b066:	4605      	mov	r5, r0
 800b068:	2800      	cmp	r0, #0
 800b06a:	d1de      	bne.n	800b02a <_Z15latencyTestRPTSv+0xf6>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 800b06c:	4602      	mov	r2, r0
 800b06e:	2110      	movs	r1, #16
 800b070:	4630      	mov	r0, r6
 800b072:	f7f6 f967 	bl	8001344 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_RESET);
 800b076:	462a      	mov	r2, r5
 800b078:	4630      	mov	r0, r6
 800b07a:	2120      	movs	r1, #32
 800b07c:	f7f6 f962 	bl	8001344 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_RESET);
 800b080:	462a      	mov	r2, r5
 800b082:	4640      	mov	r0, r8
 800b084:	2180      	movs	r1, #128	; 0x80
 800b086:	f7f6 f95d 	bl	8001344 <HAL_GPIO_WritePin>
	taskENTER_CRITICAL();
 800b08a:	f7f9 ff4b 	bl	8004f24 <vPortEnterCritical>
	HAL_UART_Transmit(&huart6, (uint8_t*) str, strlen(str), 100);
 800b08e:	2364      	movs	r3, #100	; 0x64
 800b090:	220e      	movs	r2, #14
 800b092:	491b      	ldr	r1, [pc, #108]	; (800b100 <_Z15latencyTestRPTSv+0x1cc>)
 800b094:	4816      	ldr	r0, [pc, #88]	; (800b0f0 <_Z15latencyTestRPTSv+0x1bc>)
 800b096:	f7f7 f97f 	bl	8002398 <HAL_UART_Transmit>
	taskEXIT_CRITICAL();
 800b09a:	f7f9 ff69 	bl	8004f70 <vPortExitCritical>
 800b09e:	e7c4      	b.n	800b02a <_Z15latencyTestRPTSv+0xf6>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	2110      	movs	r1, #16
 800b0a4:	4814      	ldr	r0, [pc, #80]	; (800b0f8 <_Z15latencyTestRPTSv+0x1c4>)
 800b0a6:	f7f6 f94d 	bl	8001344 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_SET);
 800b0aa:	2201      	movs	r2, #1
 800b0ac:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 800b0b0:	4814      	ldr	r0, [pc, #80]	; (800b104 <_Z15latencyTestRPTSv+0x1d0>)
 800b0b2:	f7f6 f947 	bl	8001344 <HAL_GPIO_WritePin>
	taskENTER_CRITICAL();
 800b0b6:	f7f9 ff35 	bl	8004f24 <vPortEnterCritical>
	HAL_UART_Transmit(&huart6, (uint8_t*) str, strlen(str), 100);
 800b0ba:	2364      	movs	r3, #100	; 0x64
 800b0bc:	2205      	movs	r2, #5
 800b0be:	4912      	ldr	r1, [pc, #72]	; (800b108 <_Z15latencyTestRPTSv+0x1d4>)
 800b0c0:	480b      	ldr	r0, [pc, #44]	; (800b0f0 <_Z15latencyTestRPTSv+0x1bc>)
 800b0c2:	f7f7 f969 	bl	8002398 <HAL_UART_Transmit>
	taskEXIT_CRITICAL();
 800b0c6:	f7f9 ff53 	bl	8004f70 <vPortExitCritical>
 800b0ca:	e746      	b.n	800af5a <_Z15latencyTestRPTSv+0x26>
 800b0cc:	200033f4 	.word	0x200033f4
 800b0d0:	20003920 	.word	0x20003920
 800b0d4:	0800aaf5 	.word	0x0800aaf5
 800b0d8:	08009f95 	.word	0x08009f95
 800b0dc:	08011fb8 	.word	0x08011fb8
 800b0e0:	08011fc4 	.word	0x08011fc4
 800b0e4:	08011fd8 	.word	0x08011fd8
 800b0e8:	0800a0cd 	.word	0x0800a0cd
 800b0ec:	08011fec 	.word	0x08011fec
 800b0f0:	20003408 	.word	0x20003408
 800b0f4:	08012000 	.word	0x08012000
 800b0f8:	40020c00 	.word	0x40020c00
 800b0fc:	20003910 	.word	0x20003910
 800b100:	0801200c 	.word	0x0801200c
 800b104:	40020400 	.word	0x40020400
 800b108:	0801201c 	.word	0x0801201c

0800b10c <_Z16StartDefaultTaskPKv>:
  */
/* USER CODE END Header_StartDefaultTask */


void StartDefaultTask(void const * argument)
{
 800b10c:	b500      	push	{lr}
 800b10e:	b083      	sub	sp, #12

	/* init code for LWIP */
	MX_LWIP_Init();
 800b110:	f7fe fef2 	bl	8009ef8 <MX_LWIP_Init>


    /* USER CODE BEGIN 5 */
	latencyTestRPTS();
 800b114:	f7ff ff0e 	bl	800af34 <_Z15latencyTestRPTSv>

	volatile auto size = uxTaskGetStackHighWaterMark(nullptr);
 800b118:	2000      	movs	r0, #0
 800b11a:	f7f9 fc65 	bl	80049e8 <uxTaskGetStackHighWaterMark>
 800b11e:	4603      	mov	r3, r0
	uart_print("bla");
 800b120:	4802      	ldr	r0, [pc, #8]	; (800b12c <_Z16StartDefaultTaskPKv+0x20>)
	volatile auto size = uxTaskGetStackHighWaterMark(nullptr);
 800b122:	9301      	str	r3, [sp, #4]
	uart_print("bla");
 800b124:	f7ff fd98 	bl	800ac58 <_Z10uart_printPc>
 800b128:	e7fe      	b.n	800b128 <_Z16StartDefaultTaskPKv+0x1c>
 800b12a:	bf00      	nop
 800b12c:	08012024 	.word	0x08012024

0800b130 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800b130:	6802      	ldr	r2, [r0, #0]
 800b132:	4b03      	ldr	r3, [pc, #12]	; (800b140 <HAL_TIM_PeriodElapsedCallback+0x10>)
 800b134:	429a      	cmp	r2, r3
 800b136:	d000      	beq.n	800b13a <HAL_TIM_PeriodElapsedCallback+0xa>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800b138:	4770      	bx	lr
    HAL_IncTick();
 800b13a:	f7f5 ba75 	b.w	8000628 <HAL_IncTick>
 800b13e:	bf00      	nop
 800b140:	40010000 	.word	0x40010000

0800b144 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE8sendDataERKNS_11ReaderProxyERKNS_16SequenceNumber_tE>:
        ++nextSN;
    }
}

template <class NetworkDriver>
bool StatefulWriterT<NetworkDriver>::sendData(const ReaderProxy &reader, const SequenceNumber_t& snMissing){
 800b144:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b148:	4616      	mov	r6, r2
            header.guidPrefix = guidPrefix;
 800b14a:	4602      	mov	r2, r0
 800b14c:	b08f      	sub	sp, #60	; 0x3c
 800b14e:	4604      	mov	r4, r0
 800b150:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800b154:	460d      	mov	r5, r1
            header.protocolName = PROTOCOL_TYPE;
 800b156:	4f50      	ldr	r7, [pc, #320]	; (800b298 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE8sendDataERKNS_11ReaderProxyERKNS_16SequenceNumber_tE+0x154>)
            header.guidPrefix = guidPrefix;
 800b158:	ab0b      	add	r3, sp, #44	; 0x2c
 800b15a:	6851      	ldr	r1, [r2, #4]
 800b15c:	f04f 0c00 	mov.w	ip, #0
 800b160:	6892      	ldr	r2, [r2, #8]
 800b162:	f10d 0924 	add.w	r9, sp, #36	; 0x24
 800b166:	f8cd c01c 	str.w	ip, [sp, #28]
 800b16a:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800b16e:	f8ad c020 	strh.w	ip, [sp, #32]
 800b172:	c307      	stmia	r3!, {r0, r1, r2}

    // TODO smarter packaging e.g. by creating MessageStruct and serialize after adjusting values
    // Reusing the pbuf is not possible. See https://www.nongnu.org/lwip/2_0_x/raw_api.html (Zero-Copy MACs)

    PacketInfo info;
    info.srcPort = m_packetInfo.srcPort;
 800b174:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
	    if(!buffer.reserve(Header::getRawSize())){
 800b178:	a807      	add	r0, sp, #28
            header.protocolName = PROTOCOL_TYPE;
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	2114      	movs	r1, #20
 800b17e:	f8ad 2010 	strh.w	r2, [sp, #16]
 800b182:	9309      	str	r3, [sp, #36]	; 0x24
            header.protocolVersion = PROTOCOLVERSION;
 800b184:	88ba      	ldrh	r2, [r7, #4]
            header.vendorId = Config::VENDOR_ID;
 800b186:	893b      	ldrh	r3, [r7, #8]
            header.protocolVersion = PROTOCOLVERSION;
 800b188:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
            header.vendorId = Config::VENDOR_ID;
 800b18c:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 800b190:	f004 f89a 	bl	800f2c8 <_ZN4rtps11PBufWrapper7reserveEt>
 800b194:	b1a0      	cbz	r0, 800b1c0 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE8sendDataERKNS_11ReaderProxyERKNS_16SequenceNumber_tE+0x7c>
		buffer.append(header.protocolName.data(), sizeof(std::array<uint8_t, 4>));
 800b196:	2204      	movs	r2, #4
 800b198:	4649      	mov	r1, r9
 800b19a:	a807      	add	r0, sp, #28
 800b19c:	f004 f862 	bl	800f264 <_ZN4rtps11PBufWrapper6appendEPKht>
		buffer.append(reinterpret_cast<uint8_t*>(&header.protocolVersion), sizeof(ProtocolVersion_t));
 800b1a0:	4641      	mov	r1, r8
 800b1a2:	2202      	movs	r2, #2
 800b1a4:	a807      	add	r0, sp, #28
 800b1a6:	f004 f85d 	bl	800f264 <_ZN4rtps11PBufWrapper6appendEPKht>
		buffer.append(header.vendorId.vendorId.data(), sizeof(VendorId_t));
 800b1aa:	2202      	movs	r2, #2
 800b1ac:	f10d 012a 	add.w	r1, sp, #42	; 0x2a
 800b1b0:	a807      	add	r0, sp, #28
 800b1b2:	f004 f857 	bl	800f264 <_ZN4rtps11PBufWrapper6appendEPKht>
		buffer.append(header.guidPrefix.id.data(), sizeof(GuidPrefix_t));
 800b1b6:	a90b      	add	r1, sp, #44	; 0x2c
 800b1b8:	220c      	movs	r2, #12
 800b1ba:	a807      	add	r0, sp, #28
 800b1bc:	f004 f852 	bl	800f264 <_ZN4rtps11PBufWrapper6appendEPKht>
            header.submessageId = SubmessageKind::INFO_TS;
 800b1c0:	2209      	movs	r2, #9
            header.flags = FLAG_LITTLE_ENDIAN;
 800b1c2:	2701      	movs	r7, #1
                header.submessageLength = sizeof(Time_t);
 800b1c4:	2308      	movs	r3, #8
        if(!buffer.reserve(Header::getRawSize())){
 800b1c6:	2114      	movs	r1, #20
 800b1c8:	a807      	add	r0, sp, #28
            header.submessageId = SubmessageKind::INFO_TS;
 800b1ca:	f88d 200c 	strb.w	r2, [sp, #12]
            header.flags = FLAG_LITTLE_ENDIAN;
 800b1ce:	f88d 700d 	strb.w	r7, [sp, #13]
                header.submessageLength = sizeof(Time_t);
 800b1d2:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b1d6:	f004 f877 	bl	800f2c8 <_ZN4rtps11PBufWrapper7reserveEt>
 800b1da:	b1a0      	cbz	r0, 800b206 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE8sendDataERKNS_11ReaderProxyERKNS_16SequenceNumber_tE+0xc2>
		buffer.reserve(SubmessageHeader::getRawSize());
 800b1dc:	2104      	movs	r1, #4
 800b1de:	a807      	add	r0, sp, #28
 800b1e0:	f004 f872 	bl	800f2c8 <_ZN4rtps11PBufWrapper7reserveEt>
		buffer.append(reinterpret_cast<uint8_t*>(&header.submessageId), sizeof(SubmessageKind));
 800b1e4:	463a      	mov	r2, r7
 800b1e6:	a903      	add	r1, sp, #12
 800b1e8:	a807      	add	r0, sp, #28
 800b1ea:	f004 f83b 	bl	800f264 <_ZN4rtps11PBufWrapper6appendEPKht>
		buffer.append(&header.flags, sizeof(uint8_t));
 800b1ee:	463a      	mov	r2, r7
 800b1f0:	f10d 010d 	add.w	r1, sp, #13
 800b1f4:	a807      	add	r0, sp, #28
 800b1f6:	f004 f835 	bl	800f264 <_ZN4rtps11PBufWrapper6appendEPKht>
		buffer.append(reinterpret_cast<uint8_t*>(&header.submessageLength), sizeof(uint16_t));
 800b1fa:	2202      	movs	r2, #2
 800b1fc:	f10d 010e 	add.w	r1, sp, #14
 800b200:	a807      	add	r0, sp, #28
 800b202:	f004 f82f 	bl	800f264 <_ZN4rtps11PBufWrapper6appendEPKht>
                buffer.reserve(header.submessageLength);
 800b206:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 800b20a:	a807      	add	r0, sp, #28
 800b20c:	f004 f85c 	bl	800f2c8 <_ZN4rtps11PBufWrapper7reserveEt>

    info.destAddr = locator.getIp4Address();
    info.destPort = (Ip4Port_t) locator.port;

    {
        Lock lock(m_mutex);
 800b210:	f104 0758 	add.w	r7, r4, #88	; 0x58
        uint32_t nowMs = sys_now();
 800b214:	f7fe fe6e 	bl	8009ef4 <sys_now>
        now.seconds = (int32_t) nowMs / 1000;
 800b218:	4a20      	ldr	r2, [pc, #128]	; (800b29c <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE8sendDataERKNS_11ReaderProxyERKNS_16SequenceNumber_tE+0x158>)
 800b21a:	17c3      	asrs	r3, r0, #31
                buffer.append(reinterpret_cast<uint8_t*>(&now.seconds), sizeof(Time_t::seconds));
 800b21c:	4649      	mov	r1, r9
 800b21e:	fb82 2000 	smull	r2, r0, r2, r0
        now.fraction = ((nowMs % 1000)/1000);
 800b222:	2200      	movs	r2, #0
        now.seconds = (int32_t) nowMs / 1000;
 800b224:	ebc3 13a0 	rsb	r3, r3, r0, asr #6
        now.fraction = ((nowMs % 1000)/1000);
 800b228:	920a      	str	r2, [sp, #40]	; 0x28
 800b22a:	a807      	add	r0, sp, #28
 800b22c:	2204      	movs	r2, #4
        now.seconds = (int32_t) nowMs / 1000;
 800b22e:	9309      	str	r3, [sp, #36]	; 0x24
 800b230:	f004 f818 	bl	800f264 <_ZN4rtps11PBufWrapper6appendEPKht>
                buffer.append(reinterpret_cast<uint8_t*>(&now.fraction), sizeof(Time_t::fraction));
 800b234:	4641      	mov	r1, r8
 800b236:	2204      	movs	r2, #4
 800b238:	a807      	add	r0, sp, #28
 800b23a:	f004 f813 	bl	800f264 <_ZN4rtps11PBufWrapper6appendEPKht>
    info.destPort = (Ip4Port_t) locator.port;
 800b23e:	696b      	ldr	r3, [r5, #20]
 800b240:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            sys_mutex_lock(&m_mutex);
 800b242:	4638      	mov	r0, r7
 800b244:	f8ad 3018 	strh.w	r3, [sp, #24]
    info.destAddr = locator.getIp4Address();
 800b248:	9205      	str	r2, [sp, #20]
 800b24a:	f7fe fc0d 	bl	8009a68 <sys_mutex_lock>
        const CacheChange* next = m_history.getChangeBySN(snMissing);
 800b24e:	f104 0084 	add.w	r0, r4, #132	; 0x84
 800b252:	e896 0006 	ldmia.w	r6, {r1, r2}
 800b256:	f004 f8df 	bl	800f418 <_ZNK4rtps18SimpleHistoryCache13getChangeBySNENS_16SequenceNumber_tE>
        if(next == nullptr){
 800b25a:	4601      	mov	r1, r0
 800b25c:	b1b8      	cbz	r0, 800b28e <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE8sendDataERKNS_11ReaderProxyERKNS_16SequenceNumber_tE+0x14a>
            log("StatefulWriter[%s]: Couldn't get a CacheChange with SN (%i,%u)\n", &this->m_attributes.topicName[0],
                                                                                       snMissing.high, snMissing.low);
#endif
            return false;
        }
        MessageFactory::addSubMessageData(info.buffer, next->data, false, next->sequenceNumber, m_attributes.endpointGuid.entityId,
 800b25e:	350c      	adds	r5, #12
 800b260:	1d02      	adds	r2, r0, #4
 800b262:	310c      	adds	r1, #12
 800b264:	f104 0310 	add.w	r3, r4, #16
 800b268:	9500      	str	r5, [sp, #0]
 800b26a:	a807      	add	r0, sp, #28
 800b26c:	f7ff fa1e 	bl	800a6ac <_ZN4rtps14MessageFactory17addSubMessageDataINS_11PBufWrapperEEEvRT_RKS3_bRKNS_16SequenceNumber_tERKNS_10EntityId_tESC_.constprop.22>
            sys_mutex_unlock(&m_mutex);
 800b270:	4638      	mov	r0, r7
 800b272:	f7fe fbff 	bl	8009a74 <sys_mutex_unlock>
                                          reader.remoteReaderGuid.entityId);
    }

    m_transport->sendPacket(info);
 800b276:	a904      	add	r1, sp, #16
 800b278:	6f60      	ldr	r0, [r4, #116]	; 0x74
    return true;
 800b27a:	2501      	movs	r5, #1
    m_transport->sendPacket(info);
 800b27c:	f000 fe10 	bl	800bea0 <_ZN4rtps9UdpDriver10sendPacketERNS_10PacketInfoE>
 800b280:	a807      	add	r0, sp, #28
 800b282:	f003 ffd7 	bl	800f234 <_ZN4rtps11PBufWrapperD1Ev>
}
 800b286:	4628      	mov	r0, r5
 800b288:	b00f      	add	sp, #60	; 0x3c
 800b28a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b28e:	4638      	mov	r0, r7
            return false;
 800b290:	460d      	mov	r5, r1
 800b292:	f7fe fbef 	bl	8009a74 <sys_mutex_unlock>
 800b296:	e7f3      	b.n	800b280 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE8sendDataERKNS_11ReaderProxyERKNS_16SequenceNumber_tE+0x13c>
 800b298:	08010d40 	.word	0x08010d40
 800b29c:	10624dd3 	.word	0x10624dd3

0800b2a0 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12onNewAckNackERKNS_17SubmessageAckNackERKNS_12GuidPrefix_tE>:
void StatefulWriterT<NetworkDriver>::onNewAckNack(const SubmessageAckNack& msg, const GuidPrefix_t& sourceGuidPrefix){
 800b2a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                memcpy(m_bitMap, m_pool.m_bitMap, sizeof(m_bitMap));
 800b2a4:	f890 a178 	ldrb.w	sl, [r0, #376]	; 0x178
 800b2a8:	b08d      	sub	sp, #52	; 0x34
            if(!(m_bitMap[0] & 1)){
 800b2aa:	f01a 0401 	ands.w	r4, sl, #1
 800b2ae:	f040 8094 	bne.w	800b3da <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12onNewAckNackERKNS_17SubmessageAckNackERKNS_12GuidPrefix_tE+0x13a>
                if(m_pool.m_numElements == 0){
 800b2b2:	f8d0 517c 	ldr.w	r5, [r0, #380]	; 0x17c
 800b2b6:	2d00      	cmp	r5, #0
 800b2b8:	d038      	beq.n	800b32c <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12onNewAckNackERKNS_17SubmessageAckNackERKNS_12GuidPrefix_tE+0x8c>
                    m_bitMap[bucket] = m_bitMap[bucket] >> 1;
 800b2ba:	ea4f 0a6a 	mov.w	sl, sl, asr #1
                    ++m_bit;
 800b2be:	3401      	adds	r4, #1
                }while(!(m_bitMap[bucket] & 1) && m_bit < SIZE);
 800b2c0:	f00a 0301 	and.w	r3, sl, #1
                    ++m_bit;
 800b2c4:	b2e4      	uxtb	r4, r4
                    m_bitMap[bucket] = m_bitMap[bucket] >> 1;
 800b2c6:	fa5f fa8a 	uxtb.w	sl, sl
 800b2ca:	2c02      	cmp	r4, #2
 800b2cc:	bf88      	it	hi
 800b2ce:	f043 0301 	orrhi.w	r3, r3, #1
                }while(!(m_bitMap[bucket] & 1) && m_bit < SIZE);
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d0f1      	beq.n	800b2ba <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12onNewAckNackERKNS_17SubmessageAckNackERKNS_12GuidPrefix_tE+0x1a>
 800b2d6:	1d0b      	adds	r3, r1, #4
 800b2d8:	4688      	mov	r8, r1
 800b2da:	4606      	mov	r6, r0
 800b2dc:	f500 7bbc 	add.w	fp, r0, #376	; 0x178
 800b2e0:	4699      	mov	r9, r3
 800b2e2:	9203      	str	r2, [sp, #12]
    for(auto& proxy : m_proxies){
 800b2e4:	2c03      	cmp	r4, #3
 800b2e6:	d021      	beq.n	800b32c <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12onNewAckNackERKNS_17SubmessageAckNackERKNS_12GuidPrefix_tE+0x8c>
 800b2e8:	eb04 0584 	add.w	r5, r4, r4, lsl #2
 800b2ec:	220c      	movs	r2, #12
 800b2ee:	9903      	ldr	r1, [sp, #12]
 800b2f0:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 800b2f4:	00ed      	lsls	r5, r5, #3
                return m_pool.m_data[m_bit];
 800b2f6:	f105 0708 	add.w	r7, r5, #8
 800b2fa:	445f      	add	r7, fp
 800b2fc:	4638      	mov	r0, r7
 800b2fe:	f004 fb19 	bl	800f934 <memcmp>
        if(proxy.remoteReaderGuid.prefix == sourceGuidPrefix && proxy.remoteReaderGuid.entityId == msg.readerId){
 800b302:	b980      	cbnz	r0, 800b326 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12onNewAckNackERKNS_17SubmessageAckNackERKNS_12GuidPrefix_tE+0x86>
 800b304:	f105 0014 	add.w	r0, r5, #20
 800b308:	2203      	movs	r2, #3
 800b30a:	4649      	mov	r1, r9
 800b30c:	4458      	add	r0, fp
 800b30e:	f004 fb11 	bl	800f934 <memcmp>
            return this->entityKey == other.entityKey &&
 800b312:	b940      	cbnz	r0, 800b326 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12onNewAckNackERKNS_17SubmessageAckNackERKNS_12GuidPrefix_tE+0x86>
                   this->entityKind == other.entityKind;
 800b314:	2358      	movs	r3, #88	; 0x58
            return this->entityKey == other.entityKey &&
 800b316:	f898 2007 	ldrb.w	r2, [r8, #7]
                   this->entityKind == other.entityKind;
 800b31a:	fb03 6304 	mla	r3, r3, r4, r6
            return this->entityKey == other.entityKey &&
 800b31e:	f893 318f 	ldrb.w	r3, [r3, #399]	; 0x18f
 800b322:	4293      	cmp	r3, r2
 800b324:	d016      	beq.n	800b354 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12onNewAckNackERKNS_17SubmessageAckNackERKNS_12GuidPrefix_tE+0xb4>
                if(m_pool.m_numElements == 0){
 800b326:	f8d6 317c 	ldr.w	r3, [r6, #380]	; 0x17c
 800b32a:	b913      	cbnz	r3, 800b332 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12onNewAckNackERKNS_17SubmessageAckNackERKNS_12GuidPrefix_tE+0x92>
}
 800b32c:	b00d      	add	sp, #52	; 0x34
 800b32e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b332:	4652      	mov	r2, sl
 800b334:	4623      	mov	r3, r4
                    m_bitMap[bucket] = m_bitMap[bucket] >> 1;
 800b336:	1052      	asrs	r2, r2, #1
                    ++m_bit;
 800b338:	3301      	adds	r3, #1
                }while(!(m_bitMap[bucket] & 1) && m_bit < SIZE);
 800b33a:	f002 0101 	and.w	r1, r2, #1
                    ++m_bit;
 800b33e:	b2db      	uxtb	r3, r3
 800b340:	b2d2      	uxtb	r2, r2
 800b342:	2b02      	cmp	r3, #2
 800b344:	bf88      	it	hi
 800b346:	f041 0101 	orrhi.w	r1, r1, #1
                }while(!(m_bitMap[bucket] & 1) && m_bit < SIZE);
 800b34a:	2900      	cmp	r1, #0
 800b34c:	d0f3      	beq.n	800b336 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12onNewAckNackERKNS_17SubmessageAckNackERKNS_12GuidPrefix_tE+0x96>
 800b34e:	4692      	mov	sl, r2
 800b350:	461c      	mov	r4, r3
 800b352:	e7c7      	b.n	800b2e4 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12onNewAckNackERKNS_17SubmessageAckNackERKNS_12GuidPrefix_tE+0x44>
 800b354:	4681      	mov	r9, r0
    if(reader == nullptr){
 800b356:	2f00      	cmp	r7, #0
 800b358:	d0e8      	beq.n	800b32c <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12onNewAckNackERKNS_17SubmessageAckNackERKNS_12GuidPrefix_tE+0x8c>
 800b35a:	4435      	add	r5, r6
    size_t size = snprintf(bfr, sizeof(bfr), "%u <= %u", msg.count.value, reader->ackNackCount.value);
 800b35c:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 800b360:	4a32      	ldr	r2, [pc, #200]	; (800b42c <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12onNewAckNackERKNS_17SubmessageAckNackERKNS_12GuidPrefix_tE+0x18c>)
 800b362:	2114      	movs	r1, #20
 800b364:	f8d5 41d4 	ldr.w	r4, [r5, #468]	; 0x1d4
 800b368:	a807      	add	r0, sp, #28
 800b36a:	9400      	str	r4, [sp, #0]
 800b36c:	f004 fb50 	bl	800fa10 <sniprintf>
    if(!(size < sizeof(bfr))){
 800b370:	2813      	cmp	r0, #19
 800b372:	dc31      	bgt.n	800b3d8 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12onNewAckNackERKNS_17SubmessageAckNackERKNS_12GuidPrefix_tE+0x138>
    if(msg.count.value <= reader->ackNackCount.value){
 800b374:	f8d8 2038 	ldr.w	r2, [r8, #56]	; 0x38
 800b378:	f8d5 31d4 	ldr.w	r3, [r5, #468]	; 0x1d4
 800b37c:	429a      	cmp	r2, r3
 800b37e:	ddd5      	ble.n	800b32c <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12onNewAckNackERKNS_17SubmessageAckNackERKNS_12GuidPrefix_tE+0x8c>
    SequenceNumber_t nextSN = msg.readerSNState.base;
 800b380:	f108 030c 	add.w	r3, r8, #12
    reader->ackNackCount = msg.count;
 800b384:	f8c5 21d4 	str.w	r2, [r5, #468]	; 0x1d4
    SequenceNumber_t nextSN = msg.readerSNState.base;
 800b388:	ac05      	add	r4, sp, #20
 800b38a:	f8d8 c014 	ldr.w	ip, [r8, #20]
            if(bit >= SNS_NUM_BITS){
                return true;
            }
            const auto bucket = static_cast<uint8_t>(bit / 32);
            const auto pos = static_cast<uint8_t>(bit % 32);
            return (bitMap[bucket] & (1 << (31 - pos))) != 0;
 800b38e:	2501      	movs	r5, #1
 800b390:	e893 0003 	ldmia.w	r3, {r0, r1}
 800b394:	e884 0003 	stmia.w	r4, {r0, r1}
 800b398:	f1c9 0e1f 	rsb	lr, r9, #31
    for(uint32_t i=0; i < msg.readerSNState.numBits; ++i, ++nextSN){
 800b39c:	45cc      	cmp	ip, r9
            sendData(*reader, nextSN);
 800b39e:	4622      	mov	r2, r4
 800b3a0:	4639      	mov	r1, r7
 800b3a2:	4630      	mov	r0, r6
 800b3a4:	fa05 fe0e 	lsl.w	lr, r5, lr
    for(uint32_t i=0; i < msg.readerSNState.numBits; ++i, ++nextSN){
 800b3a8:	d919      	bls.n	800b3de <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12onNewAckNackERKNS_17SubmessageAckNackERKNS_12GuidPrefix_tE+0x13e>
            if(bit >= SNS_NUM_BITS){
 800b3aa:	f1b9 0f1f 	cmp.w	r9, #31
 800b3ae:	f109 0901 	add.w	r9, r9, #1
 800b3b2:	d804      	bhi.n	800b3be <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12onNewAckNackERKNS_17SubmessageAckNackERKNS_12GuidPrefix_tE+0x11e>
            return (bitMap[bucket] & (1 << (31 - pos))) != 0;
 800b3b4:	f8d8 3018 	ldr.w	r3, [r8, #24]
        if(msg.readerSNState.isSet(i)){
 800b3b8:	ea1e 0f03 	tst.w	lr, r3
 800b3bc:	d003      	beq.n	800b3c6 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12onNewAckNackERKNS_17SubmessageAckNackERKNS_12GuidPrefix_tE+0x126>
            sendData(*reader, nextSN);
 800b3be:	f7ff fec1 	bl	800b144 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE8sendDataERKNS_11ReaderProxyERKNS_16SequenceNumber_tE>
 800b3c2:	f8d8 c014 	ldr.w	ip, [r8, #20]
            ++low;
 800b3c6:	9b06      	ldr	r3, [sp, #24]
 800b3c8:	3301      	adds	r3, #1
 800b3ca:	9306      	str	r3, [sp, #24]
            if(low == 0){
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d1e3      	bne.n	800b398 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12onNewAckNackERKNS_17SubmessageAckNackERKNS_12GuidPrefix_tE+0xf8>
                ++high;
 800b3d0:	9b05      	ldr	r3, [sp, #20]
 800b3d2:	3301      	adds	r3, #1
 800b3d4:	9305      	str	r3, [sp, #20]
 800b3d6:	e7df      	b.n	800b398 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12onNewAckNackERKNS_17SubmessageAckNackERKNS_12GuidPrefix_tE+0xf8>
 800b3d8:	e7fe      	b.n	800b3d8 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12onNewAckNackERKNS_17SubmessageAckNackERKNS_12GuidPrefix_tE+0x138>
            explicit MemoryPoolIterator(MemoryPool<TYPE, SIZE>& pool) : m_pool(pool){
 800b3da:	2400      	movs	r4, #0
 800b3dc:	e77b      	b.n	800b2d6 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12onNewAckNackERKNS_17SubmessageAckNackERKNS_12GuidPrefix_tE+0x36>
        Lock lock(m_mutex);
 800b3de:	f106 0558 	add.w	r5, r6, #88	; 0x58
            sys_mutex_lock(&m_mutex);
 800b3e2:	4628      	mov	r0, r5
 800b3e4:	f7fe fb40 	bl	8009a68 <sys_mutex_lock>
        maxSN = m_history.getSeqNumMax();
 800b3e8:	f106 0084 	add.w	r0, r6, #132	; 0x84
 800b3ec:	f003 ffa8 	bl	800f340 <_ZNK4rtps18SimpleHistoryCache12getSeqNumMaxEv>
 800b3f0:	4603      	mov	r3, r0
            sys_mutex_unlock(&m_mutex);
 800b3f2:	4628      	mov	r0, r5
 800b3f4:	e9d3 8500 	ldrd	r8, r5, [r3]
 800b3f8:	f7fe fb3c 	bl	8009a74 <sys_mutex_unlock>
 800b3fc:	e006      	b.n	800b40c <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12onNewAckNackERKNS_17SubmessageAckNackERKNS_12GuidPrefix_tE+0x16c>
            return high < other.high || (high == other.high && low < other.low);
 800b3fe:	dd95      	ble.n	800b32c <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12onNewAckNackERKNS_17SubmessageAckNackERKNS_12GuidPrefix_tE+0x8c>
        sendData(*reader, nextSN);
 800b400:	f7ff fea0 	bl	800b144 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE8sendDataERKNS_11ReaderProxyERKNS_16SequenceNumber_tE>
            ++low;
 800b404:	9b06      	ldr	r3, [sp, #24]
 800b406:	3301      	adds	r3, #1
 800b408:	9306      	str	r3, [sp, #24]
            if(low == 0){
 800b40a:	b153      	cbz	r3, 800b422 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12onNewAckNackERKNS_17SubmessageAckNackERKNS_12GuidPrefix_tE+0x182>
 800b40c:	9b05      	ldr	r3, [sp, #20]
            return high == other.high && low == other.low;
 800b40e:	4598      	cmp	r8, r3
 800b410:	4622      	mov	r2, r4
 800b412:	4639      	mov	r1, r7
 800b414:	4630      	mov	r0, r6
 800b416:	d1f2      	bne.n	800b3fe <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12onNewAckNackERKNS_17SubmessageAckNackERKNS_12GuidPrefix_tE+0x15e>
 800b418:	9b06      	ldr	r3, [sp, #24]
 800b41a:	42ab      	cmp	r3, r5
 800b41c:	d0f0      	beq.n	800b400 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12onNewAckNackERKNS_17SubmessageAckNackERKNS_12GuidPrefix_tE+0x160>
            return high < other.high || (high == other.high && low < other.low);
 800b41e:	d3ef      	bcc.n	800b400 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12onNewAckNackERKNS_17SubmessageAckNackERKNS_12GuidPrefix_tE+0x160>
 800b420:	e784      	b.n	800b32c <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12onNewAckNackERKNS_17SubmessageAckNackERKNS_12GuidPrefix_tE+0x8c>
                ++high;
 800b422:	9b05      	ldr	r3, [sp, #20]
 800b424:	3301      	adds	r3, #1
 800b426:	9305      	str	r3, [sp, #20]
 800b428:	e7f1      	b.n	800b40e <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE12onNewAckNackERKNS_17SubmessageAckNackERKNS_12GuidPrefix_tE+0x16e>
 800b42a:	bf00      	nop
 800b42c:	08011f8c 	.word	0x08011f8c

0800b430 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE8progressEv>:
void StatefulWriterT<NetworkDriver>::progress(){
 800b430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
                memcpy(m_bitMap, m_pool.m_bitMap, sizeof(m_bitMap));
 800b434:	f890 4178 	ldrb.w	r4, [r0, #376]	; 0x178
 800b438:	4680      	mov	r8, r0
            if(!(m_bitMap[0] & 1)){
 800b43a:	07e1      	lsls	r1, r4, #31
 800b43c:	d40f      	bmi.n	800b45e <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE8progressEv+0x2e>
                if(m_pool.m_numElements == 0){
 800b43e:	f8d0 317c 	ldr.w	r3, [r0, #380]	; 0x17c
 800b442:	bb9b      	cbnz	r3, 800b4ac <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE8progressEv+0x7c>
            ++low;
 800b444:	f8d8 3080 	ldr.w	r3, [r8, #128]	; 0x80
 800b448:	3301      	adds	r3, #1
 800b44a:	f8c8 3080 	str.w	r3, [r8, #128]	; 0x80
            if(low == 0){
 800b44e:	b923      	cbnz	r3, 800b45a <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE8progressEv+0x2a>
                ++high;
 800b450:	f8d8 307c 	ldr.w	r3, [r8, #124]	; 0x7c
 800b454:	3301      	adds	r3, #1
 800b456:	f8c8 307c 	str.w	r3, [r8, #124]	; 0x7c
}
 800b45a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            explicit MemoryPoolIterator(MemoryPool<TYPE, SIZE>& pool) : m_pool(pool){
 800b45e:	f04f 0900 	mov.w	r9, #0
        if(!sendData(proxy, m_nextSequenceNumberToSend)){
 800b462:	f108 077c 	add.w	r7, r8, #124	; 0x7c
                return m_pool.m_data[m_bit];
 800b466:	f508 76bc 	add.w	r6, r8, #376	; 0x178
 800b46a:	2558      	movs	r5, #88	; 0x58
    for(const auto& proxy : m_proxies) {
 800b46c:	f1b9 0f03 	cmp.w	r9, #3
 800b470:	d0e8      	beq.n	800b444 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE8progressEv+0x14>
 800b472:	2108      	movs	r1, #8
        if(!sendData(proxy, m_nextSequenceNumberToSend)){
 800b474:	463a      	mov	r2, r7
 800b476:	4640      	mov	r0, r8
 800b478:	fb15 1109 	smlabb	r1, r5, r9, r1
 800b47c:	4431      	add	r1, r6
 800b47e:	f7ff fe61 	bl	800b144 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE8sendDataERKNS_11ReaderProxyERKNS_16SequenceNumber_tE>
                if(m_pool.m_numElements == 0){
 800b482:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
 800b486:	2b00      	cmp	r3, #0
 800b488:	d0dc      	beq.n	800b444 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE8progressEv+0x14>
 800b48a:	f109 0301 	add.w	r3, r9, #1
 800b48e:	b2db      	uxtb	r3, r3
                    m_bitMap[bucket] = m_bitMap[bucket] >> 1;
 800b490:	1064      	asrs	r4, r4, #1
 800b492:	1c59      	adds	r1, r3, #1
 800b494:	4699      	mov	r9, r3
                }while(!(m_bitMap[bucket] & 1) && m_bit < SIZE);
 800b496:	f004 0201 	and.w	r2, r4, #1
                    m_bitMap[bucket] = m_bitMap[bucket] >> 1;
 800b49a:	b2e4      	uxtb	r4, r4
 800b49c:	2b02      	cmp	r3, #2
 800b49e:	bf88      	it	hi
 800b4a0:	f042 0201 	orrhi.w	r2, r2, #1
 800b4a4:	b2cb      	uxtb	r3, r1
                }while(!(m_bitMap[bucket] & 1) && m_bit < SIZE);
 800b4a6:	2a00      	cmp	r2, #0
 800b4a8:	d0f2      	beq.n	800b490 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE8progressEv+0x60>
 800b4aa:	e7df      	b.n	800b46c <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE8progressEv+0x3c>
                if(m_pool.m_numElements == 0){
 800b4ac:	f04f 0901 	mov.w	r9, #1
 800b4b0:	e002      	b.n	800b4b8 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE8progressEv+0x88>
                }while(!(m_bitMap[bucket] & 1) && m_bit < SIZE);
 800b4b2:	07d2      	lsls	r2, r2, #31
 800b4b4:	d4d5      	bmi.n	800b462 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE8progressEv+0x32>
 800b4b6:	4699      	mov	r9, r3
                    m_bitMap[bucket] = m_bitMap[bucket] >> 1;
 800b4b8:	1062      	asrs	r2, r4, #1
 800b4ba:	f109 0301 	add.w	r3, r9, #1
                }while(!(m_bitMap[bucket] & 1) && m_bit < SIZE);
 800b4be:	f1b9 0f02 	cmp.w	r9, #2
                    m_bitMap[bucket] = m_bitMap[bucket] >> 1;
 800b4c2:	b2d4      	uxtb	r4, r2
 800b4c4:	b2db      	uxtb	r3, r3
                }while(!(m_bitMap[bucket] & 1) && m_bit < SIZE);
 800b4c6:	d9f4      	bls.n	800b4b2 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE8progressEv+0x82>
 800b4c8:	e7cb      	b.n	800b462 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE8progressEv+0x32>
 800b4ca:	bf00      	nop

0800b4cc <_ZN4rtps16serializeMessageINS_11PBufWrapperEEEbRT_RNS_17SubmessageAckNackE>:
		buffer.append(reinterpret_cast<uint8_t*>(&msg.count.value), sizeof(msg.count.value));
        return true;
	}

	template<typename Buffer>
    bool serializeMessage(Buffer& buffer, SubmessageAckNack& msg){
 800b4cc:	b570      	push	{r4, r5, r6, lr}
 800b4ce:	460d      	mov	r5, r1
        if(!buffer.reserve(SubmessageAckNack::getRawSize(msg.readerSNState))){
 800b4d0:	6949      	ldr	r1, [r1, #20]
    bool serializeMessage(Buffer& buffer, SubmessageAckNack& msg){
 800b4d2:	4604      	mov	r4, r0
			if(set.numBits != 0){
 800b4d4:	b151      	cbz	r1, 800b4ec <_ZN4rtps16serializeMessageINS_11PBufWrapperEEEbRT_RNS_17SubmessageAckNackE+0x20>
				bitMapSize = 4*((set.numBits/32) + 1);
 800b4d6:	0949      	lsrs	r1, r1, #5
        if(!buffer.reserve(SubmessageAckNack::getRawSize(msg.readerSNState))){
 800b4d8:	4620      	mov	r0, r4
				bitMapSize = 4*((set.numBits/32) + 1);
 800b4da:	0089      	lsls	r1, r1, #2
 800b4dc:	3120      	adds	r1, #32
 800b4de:	b289      	uxth	r1, r1
        if(!buffer.reserve(SubmessageAckNack::getRawSize(msg.readerSNState))){
 800b4e0:	f003 fef2 	bl	800f2c8 <_ZN4rtps11PBufWrapper7reserveEt>
 800b4e4:	4606      	mov	r6, r0
 800b4e6:	b940      	cbnz	r0, 800b4fa <_ZN4rtps16serializeMessageINS_11PBufWrapperEEEbRT_RNS_17SubmessageAckNackE+0x2e>
		if(msg.readerSNState.numBits != 0){
			buffer.append(reinterpret_cast<uint8_t*>(msg.readerSNState.bitMap.data()), 4*((msg.readerSNState.numBits / 32) + 1));
		}
		buffer.append(reinterpret_cast<uint8_t*>(&msg.count.value), sizeof(msg.count.value));
        return true;
	}
 800b4e8:	4630      	mov	r0, r6
 800b4ea:	bd70      	pop	{r4, r5, r6, pc}
			if(set.numBits != 0){
 800b4ec:	211c      	movs	r1, #28
        if(!buffer.reserve(SubmessageAckNack::getRawSize(msg.readerSNState))){
 800b4ee:	4620      	mov	r0, r4
 800b4f0:	f003 feea 	bl	800f2c8 <_ZN4rtps11PBufWrapper7reserveEt>
 800b4f4:	4606      	mov	r6, r0
 800b4f6:	2800      	cmp	r0, #0
 800b4f8:	d0f6      	beq.n	800b4e8 <_ZN4rtps16serializeMessageINS_11PBufWrapperEEEbRT_RNS_17SubmessageAckNackE+0x1c>
        if(!buffer.reserve(Header::getRawSize())){
 800b4fa:	2114      	movs	r1, #20
 800b4fc:	4620      	mov	r0, r4
 800b4fe:	f003 fee3 	bl	800f2c8 <_ZN4rtps11PBufWrapper7reserveEt>
 800b502:	b190      	cbz	r0, 800b52a <_ZN4rtps16serializeMessageINS_11PBufWrapperEEEbRT_RNS_17SubmessageAckNackE+0x5e>
		buffer.reserve(SubmessageHeader::getRawSize());
 800b504:	2104      	movs	r1, #4
 800b506:	4620      	mov	r0, r4
 800b508:	f003 fede 	bl	800f2c8 <_ZN4rtps11PBufWrapper7reserveEt>
		buffer.append(reinterpret_cast<uint8_t*>(&header.submessageId), sizeof(SubmessageKind));
 800b50c:	2201      	movs	r2, #1
 800b50e:	4629      	mov	r1, r5
 800b510:	4620      	mov	r0, r4
 800b512:	f003 fea7 	bl	800f264 <_ZN4rtps11PBufWrapper6appendEPKht>
		buffer.append(&header.flags, sizeof(uint8_t));
 800b516:	2201      	movs	r2, #1
 800b518:	4620      	mov	r0, r4
 800b51a:	18a9      	adds	r1, r5, r2
 800b51c:	f003 fea2 	bl	800f264 <_ZN4rtps11PBufWrapper6appendEPKht>
		buffer.append(reinterpret_cast<uint8_t*>(&header.submessageLength), sizeof(uint16_t));
 800b520:	2202      	movs	r2, #2
 800b522:	4620      	mov	r0, r4
 800b524:	18a9      	adds	r1, r5, r2
 800b526:	f003 fe9d 	bl	800f264 <_ZN4rtps11PBufWrapper6appendEPKht>
		buffer.append(msg.readerId.entityKey.data(), msg.readerId.entityKey.size());
 800b52a:	2203      	movs	r2, #3
 800b52c:	1d29      	adds	r1, r5, #4
 800b52e:	4620      	mov	r0, r4
 800b530:	f003 fe98 	bl	800f264 <_ZN4rtps11PBufWrapper6appendEPKht>
		buffer.append(reinterpret_cast<uint8_t*>(&msg.readerId.entityKind), sizeof(EntityKind_t));
 800b534:	2201      	movs	r2, #1
 800b536:	1de9      	adds	r1, r5, #7
 800b538:	4620      	mov	r0, r4
 800b53a:	f003 fe93 	bl	800f264 <_ZN4rtps11PBufWrapper6appendEPKht>
		buffer.append(msg.writerId.entityKey.data(), msg.writerId.entityKey.size());
 800b53e:	2203      	movs	r2, #3
 800b540:	f105 0108 	add.w	r1, r5, #8
 800b544:	4620      	mov	r0, r4
 800b546:	f003 fe8d 	bl	800f264 <_ZN4rtps11PBufWrapper6appendEPKht>
		buffer.append(reinterpret_cast<uint8_t*>(&msg.writerId.entityKind), sizeof(EntityKind_t));
 800b54a:	2201      	movs	r2, #1
 800b54c:	f105 010b 	add.w	r1, r5, #11
 800b550:	4620      	mov	r0, r4
 800b552:	f003 fe87 	bl	800f264 <_ZN4rtps11PBufWrapper6appendEPKht>
		buffer.append(reinterpret_cast<uint8_t*>(&msg.readerSNState.base.high), sizeof(msg.readerSNState.base.high));
 800b556:	2204      	movs	r2, #4
 800b558:	f105 010c 	add.w	r1, r5, #12
 800b55c:	4620      	mov	r0, r4
 800b55e:	f003 fe81 	bl	800f264 <_ZN4rtps11PBufWrapper6appendEPKht>
		buffer.append(reinterpret_cast<uint8_t*>(&msg.readerSNState.base.low), sizeof(msg.readerSNState.base.low));
 800b562:	2204      	movs	r2, #4
 800b564:	f105 0110 	add.w	r1, r5, #16
 800b568:	4620      	mov	r0, r4
 800b56a:	f003 fe7b 	bl	800f264 <_ZN4rtps11PBufWrapper6appendEPKht>
		buffer.append(reinterpret_cast<uint8_t*>(&msg.readerSNState.numBits), sizeof(uint32_t));
 800b56e:	2204      	movs	r2, #4
 800b570:	f105 0114 	add.w	r1, r5, #20
 800b574:	4620      	mov	r0, r4
 800b576:	f003 fe75 	bl	800f264 <_ZN4rtps11PBufWrapper6appendEPKht>
		if(msg.readerSNState.numBits != 0){
 800b57a:	696a      	ldr	r2, [r5, #20]
 800b57c:	b93a      	cbnz	r2, 800b58e <_ZN4rtps16serializeMessageINS_11PBufWrapperEEEbRT_RNS_17SubmessageAckNackE+0xc2>
		buffer.append(reinterpret_cast<uint8_t*>(&msg.count.value), sizeof(msg.count.value));
 800b57e:	f105 0138 	add.w	r1, r5, #56	; 0x38
 800b582:	4620      	mov	r0, r4
 800b584:	2204      	movs	r2, #4
 800b586:	f003 fe6d 	bl	800f264 <_ZN4rtps11PBufWrapper6appendEPKht>
	}
 800b58a:	4630      	mov	r0, r6
 800b58c:	bd70      	pop	{r4, r5, r6, pc}
			buffer.append(reinterpret_cast<uint8_t*>(msg.readerSNState.bitMap.data()), 4*((msg.readerSNState.numBits / 32) + 1));
 800b58e:	0952      	lsrs	r2, r2, #5
 800b590:	f105 0118 	add.w	r1, r5, #24
 800b594:	4620      	mov	r0, r4
 800b596:	3201      	adds	r2, #1
 800b598:	0092      	lsls	r2, r2, #2
 800b59a:	b292      	uxth	r2, r2
 800b59c:	f003 fe62 	bl	800f264 <_ZN4rtps11PBufWrapper6appendEPKht>
 800b5a0:	e7ed      	b.n	800b57e <_ZN4rtps16serializeMessageINS_11PBufWrapperEEEbRT_RNS_17SubmessageAckNackE+0xb2>
 800b5a2:	bf00      	nop

0800b5a4 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE14onNewHeartbeatERKNS_19SubmessageHeartbeatERKNS_12GuidPrefix_tE>:

template <class NetworkDriver>
bool StatefulReaderT<NetworkDriver>::onNewHeartbeat(const SubmessageHeartbeat& msg, const GuidPrefix_t& sourceGuidPrefix){
    Lock lock(m_mutex);
 800b5a4:	f500 7394 	add.w	r3, r0, #296	; 0x128
bool StatefulReaderT<NetworkDriver>::onNewHeartbeat(const SubmessageHeartbeat& msg, const GuidPrefix_t& sourceGuidPrefix){
 800b5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5ac:	4607      	mov	r7, r0
 800b5ae:	b0af      	sub	sp, #188	; 0xbc
            sys_mutex_lock(&m_mutex);
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	468a      	mov	sl, r1
    Lock lock(m_mutex);
 800b5b4:	9301      	str	r3, [sp, #4]
bool StatefulReaderT<NetworkDriver>::onNewHeartbeat(const SubmessageHeartbeat& msg, const GuidPrefix_t& sourceGuidPrefix){
 800b5b6:	4691      	mov	r9, r2
 800b5b8:	f7fe fa56 	bl	8009a68 <sys_mutex_lock>
                memcpy(m_bitMap, m_pool.m_bitMap, sizeof(m_bitMap));
 800b5bc:	f897 5070 	ldrb.w	r5, [r7, #112]	; 0x70
 800b5c0:	2400      	movs	r4, #0
    PacketInfo info;
    info.srcPort = m_packetInfo.srcPort;
 800b5c2:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
            if(!(m_bitMap[0] & 1)){
 800b5c6:	07e9      	lsls	r1, r5, #31
 800b5c8:	f8ad 3010 	strh.w	r3, [sp, #16]
 800b5cc:	9407      	str	r4, [sp, #28]
 800b5ce:	f8ad 4020 	strh.w	r4, [sp, #32]
 800b5d2:	d418      	bmi.n	800b606 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE14onNewHeartbeatERKNS_19SubmessageHeartbeatERKNS_12GuidPrefix_tE+0x62>
                if(m_pool.m_numElements == 0){
 800b5d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b5d6:	b95b      	cbnz	r3, 800b5f0 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE14onNewHeartbeatERKNS_19SubmessageHeartbeatERKNS_12GuidPrefix_tE+0x4c>
#if SFR_VERBOSE
      printf("StatefulReader[%s]: Ignore heartbeat. Couldn't find a matching writer with id: ", &this->m_attributes.topicName[0]);
      printEntityId(msg.writerId);
      printf("\n");
#endif
        return false;
 800b5d8:	2600      	movs	r6, #0
 800b5da:	ad07      	add	r5, sp, #28
 800b5dc:	4628      	mov	r0, r5
 800b5de:	f003 fe29 	bl	800f234 <_ZN4rtps11PBufWrapperD1Ev>
            sys_mutex_unlock(&m_mutex);
 800b5e2:	9801      	ldr	r0, [sp, #4]
 800b5e4:	f7fe fa46 	bl	8009a74 <sys_mutex_unlock>
#if SFR_VERBOSE
    printf("StatefulReader[%s]: Sending acknack.\n", &this->m_attributes.topicName[0]);
#endif
    m_transport->sendPacket(info);
    return true;
}
 800b5e8:	4630      	mov	r0, r6
 800b5ea:	b02f      	add	sp, #188	; 0xbc
 800b5ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5f0:	2401      	movs	r4, #1
 800b5f2:	e002      	b.n	800b5fa <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE14onNewHeartbeatERKNS_19SubmessageHeartbeatERKNS_12GuidPrefix_tE+0x56>
                }while(!(m_bitMap[bucket] & 1) && m_bit < SIZE);
 800b5f4:	07d2      	lsls	r2, r2, #31
 800b5f6:	d406      	bmi.n	800b606 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE14onNewHeartbeatERKNS_19SubmessageHeartbeatERKNS_12GuidPrefix_tE+0x62>
 800b5f8:	461c      	mov	r4, r3
                    m_bitMap[bucket] = m_bitMap[bucket] >> 1;
 800b5fa:	106a      	asrs	r2, r5, #1
 800b5fc:	1c63      	adds	r3, r4, #1
                }while(!(m_bitMap[bucket] & 1) && m_bit < SIZE);
 800b5fe:	2c02      	cmp	r4, #2
                    m_bitMap[bucket] = m_bitMap[bucket] >> 1;
 800b600:	b2d5      	uxtb	r5, r2
 800b602:	b2db      	uxtb	r3, r3
                }while(!(m_bitMap[bucket] & 1) && m_bit < SIZE);
 800b604:	d9f6      	bls.n	800b5f4 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE14onNewHeartbeatERKNS_19SubmessageHeartbeatERKNS_12GuidPrefix_tE+0x50>
 800b606:	f10a 0308 	add.w	r3, sl, #8
 800b60a:	f107 0870 	add.w	r8, r7, #112	; 0x70
 800b60e:	9300      	str	r3, [sp, #0]
    for(WriterProxy& proxy : m_proxies){
 800b610:	2c03      	cmp	r4, #3
 800b612:	d0e1      	beq.n	800b5d8 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE14onNewHeartbeatERKNS_19SubmessageHeartbeatERKNS_12GuidPrefix_tE+0x34>
 800b614:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 800b618:	220c      	movs	r2, #12
 800b61a:	4649      	mov	r1, r9
 800b61c:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
                return m_pool.m_data[m_bit];
 800b620:	f10b 0608 	add.w	r6, fp, #8
 800b624:	4446      	add	r6, r8
 800b626:	4630      	mov	r0, r6
 800b628:	f004 f984 	bl	800f934 <memcmp>
        if(proxy.remoteWriterGuid.prefix == sourceGuidPrefix && proxy.remoteWriterGuid.entityId == msg.writerId){
 800b62c:	b988      	cbnz	r0, 800b652 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE14onNewHeartbeatERKNS_19SubmessageHeartbeatERKNS_12GuidPrefix_tE+0xae>
 800b62e:	f10b 0014 	add.w	r0, fp, #20
 800b632:	2203      	movs	r2, #3
 800b634:	9900      	ldr	r1, [sp, #0]
 800b636:	4440      	add	r0, r8
 800b638:	f004 f97c 	bl	800f934 <memcmp>
            return this->entityKey == other.entityKey &&
 800b63c:	b948      	cbnz	r0, 800b652 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE14onNewHeartbeatERKNS_19SubmessageHeartbeatERKNS_12GuidPrefix_tE+0xae>
                   this->entityKind == other.entityKind;
 800b63e:	00e3      	lsls	r3, r4, #3
            return this->entityKey == other.entityKey &&
 800b640:	f89a 100b 	ldrb.w	r1, [sl, #11]
                   this->entityKind == other.entityKind;
 800b644:	1b1a      	subs	r2, r3, r4
 800b646:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
            return this->entityKey == other.entityKey &&
 800b64a:	f892 c087 	ldrb.w	ip, [r2, #135]	; 0x87
 800b64e:	458c      	cmp	ip, r1
 800b650:	d00f      	beq.n	800b672 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE14onNewHeartbeatERKNS_19SubmessageHeartbeatERKNS_12GuidPrefix_tE+0xce>
                if(m_pool.m_numElements == 0){
 800b652:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b654:	2b00      	cmp	r3, #0
 800b656:	d0bf      	beq.n	800b5d8 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE14onNewHeartbeatERKNS_19SubmessageHeartbeatERKNS_12GuidPrefix_tE+0x34>
                    m_bitMap[bucket] = m_bitMap[bucket] >> 1;
 800b658:	106d      	asrs	r5, r5, #1
                    ++m_bit;
 800b65a:	3401      	adds	r4, #1
                }while(!(m_bitMap[bucket] & 1) && m_bit < SIZE);
 800b65c:	f005 0301 	and.w	r3, r5, #1
                    ++m_bit;
 800b660:	b2e4      	uxtb	r4, r4
 800b662:	b2ed      	uxtb	r5, r5
 800b664:	2c02      	cmp	r4, #2
 800b666:	bf88      	it	hi
 800b668:	f043 0301 	orrhi.w	r3, r3, #1
                }while(!(m_bitMap[bucket] & 1) && m_bit < SIZE);
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d0f3      	beq.n	800b658 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE14onNewHeartbeatERKNS_19SubmessageHeartbeatERKNS_12GuidPrefix_tE+0xb4>
 800b670:	e7ce      	b.n	800b610 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE14onNewHeartbeatERKNS_19SubmessageHeartbeatERKNS_12GuidPrefix_tE+0x6c>
    if(writer == nullptr){
 800b672:	2e00      	cmp	r6, #0
 800b674:	d0b1      	beq.n	800b5da <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE14onNewHeartbeatERKNS_19SubmessageHeartbeatERKNS_12GuidPrefix_tE+0x36>
    if(msg.count.value <= writer->hbCount.value){
 800b676:	f8da 501c 	ldr.w	r5, [sl, #28]
 800b67a:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
 800b67e:	428d      	cmp	r5, r1
 800b680:	ddaa      	ble.n	800b5d8 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE14onNewHeartbeatERKNS_19SubmessageHeartbeatERKNS_12GuidPrefix_tE+0x34>
            header.guidPrefix = guidPrefix;
 800b682:	46be      	mov	lr, r7
    writer->hbCount.value = msg.count.value;
 800b684:	f8c2 5094 	str.w	r5, [r2, #148]	; 0x94
    info.destPort = writer->remoteLocator.port;
 800b688:	f8d2 209c 	ldr.w	r2, [r2, #156]	; 0x9c
 800b68c:	f10d 0c84 	add.w	ip, sp, #132	; 0x84
 800b690:	f85e 0f04 	ldr.w	r0, [lr, #4]!
	    if(!buffer.reserve(Header::getRawSize())){
 800b694:	ad07      	add	r5, sp, #28
 800b696:	f8ad 2018 	strh.w	r2, [sp, #24]
 800b69a:	f8de 1004 	ldr.w	r1, [lr, #4]
 800b69e:	f8de 2008 	ldr.w	r2, [lr, #8]
            header.protocolName = PROTOCOL_TYPE;
 800b6a2:	f8df 8174 	ldr.w	r8, [pc, #372]	; 800b818 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE14onNewHeartbeatERKNS_19SubmessageHeartbeatERKNS_12GuidPrefix_tE+0x274>
 800b6a6:	9300      	str	r3, [sp, #0]
 800b6a8:	f8d8 3000 	ldr.w	r3, [r8]
            header.guidPrefix = guidPrefix;
 800b6ac:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 800b6b0:	6b72      	ldr	r2, [r6, #52]	; 0x34
 800b6b2:	4628      	mov	r0, r5
            header.protocolVersion = PROTOCOLVERSION;
 800b6b4:	f8b8 c004 	ldrh.w	ip, [r8, #4]
 800b6b8:	2114      	movs	r1, #20
    info.destAddr = writer->remoteLocator.getIp4Address();
 800b6ba:	9205      	str	r2, [sp, #20]
            header.vendorId = Config::VENDOR_ID;
 800b6bc:	f8b8 2008 	ldrh.w	r2, [r8, #8]
            header.protocolName = PROTOCOL_TYPE;
 800b6c0:	931f      	str	r3, [sp, #124]	; 0x7c
            header.protocolVersion = PROTOCOLVERSION;
 800b6c2:	f8ad c080 	strh.w	ip, [sp, #128]	; 0x80
            header.vendorId = Config::VENDOR_ID;
 800b6c6:	f8ad 2082 	strh.w	r2, [sp, #130]	; 0x82
 800b6ca:	f003 fdfd 	bl	800f2c8 <_ZN4rtps11PBufWrapper7reserveEt>
 800b6ce:	9b00      	ldr	r3, [sp, #0]
 800b6d0:	2800      	cmp	r0, #0
 800b6d2:	d15d      	bne.n	800b790 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE14onNewHeartbeatERKNS_19SubmessageHeartbeatERKNS_12GuidPrefix_tE+0x1ec>
 800b6d4:	f10d 087c 	add.w	r8, sp, #124	; 0x7c
                hbCount{0}, remoteLocator(loc){
        }

        // For now, we don't store any packets, so we just request all starting from the next expected
        SequenceNumberSet getMissing(const SequenceNumber_t& /*firstAvail*/, const SequenceNumber_t& lastAvail){
            SequenceNumberSet set;
 800b6d8:	f10d 0924 	add.w	r9, sp, #36	; 0x24
 800b6dc:	222c      	movs	r2, #44	; 0x2c
 800b6de:	2100      	movs	r1, #0
 800b6e0:	9300      	str	r3, [sp, #0]
 800b6e2:	4648      	mov	r0, r9
 800b6e4:	f004 f940 	bl	800f968 <memset>
            return high < other.high || (high == other.high && low < other.low);
 800b6e8:	f8da 1014 	ldr.w	r1, [sl, #20]
 800b6ec:	6932      	ldr	r2, [r6, #16]
 800b6ee:	9b00      	ldr	r3, [sp, #0]
 800b6f0:	4291      	cmp	r1, r2
 800b6f2:	db6c      	blt.n	800b7ce <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE14onNewHeartbeatERKNS_19SubmessageHeartbeatERKNS_12GuidPrefix_tE+0x22a>
 800b6f4:	d066      	beq.n	800b7c4 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE14onNewHeartbeatERKNS_19SubmessageHeartbeatERKNS_12GuidPrefix_tE+0x220>
            if(lastAvail < expectedSN){
				set.base = expectedSN;
            	set.numBits = 0;
            }else{
            	set.numBits = 1;
				set.base = expectedSN;
 800b6f6:	1b1b      	subs	r3, r3, r4
 800b6f8:	2101      	movs	r1, #1

            return set;
        }

        Count_t getNextAckNackCount(){
            const Count_t tmp = ackNackCount;
 800b6fa:	f8d6 e018 	ldr.w	lr, [r6, #24]
 800b6fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
				set.base = expectedSN;
 800b702:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
 800b706:	910b      	str	r1, [sp, #44]	; 0x2c
 800b708:	46cc      	mov	ip, r9
 800b70a:	920c      	str	r2, [sp, #48]	; 0x30
 800b70c:	f103 0188 	add.w	r1, r3, #136	; 0x88
            ++ackNackCount.value;
 800b710:	f10e 0201 	add.w	r2, lr, #1
 800b714:	ac14      	add	r4, sp, #80	; 0x50

        template <class Buffer>
        void addAckNack(Buffer& buffer, EntityId_t writerId, EntityId_t readerId, SequenceNumberSet readerSNState,
                        Count_t count){
            SubmessageAckNack subMsg;
            subMsg.header.submessageId = SubmessageKind::ACKNACK;
 800b716:	f04f 0b06 	mov.w	fp, #6
				set.base = expectedSN;
 800b71a:	c903      	ldmia	r1, {r0, r1}
 800b71c:	4626      	mov	r6, r4
            ++ackNackCount.value;
 800b71e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
				set.base = expectedSN;
 800b722:	e889 0003 	stmia.w	r9, {r0, r1}
 800b726:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b72a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800b72c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b730:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800b732:	f8da 3008 	ldr.w	r3, [sl, #8]
#if IS_LITTLE_ENDIAN
            subMsg.header.flags = FLAG_LITTLE_ENDIAN;
#else
            subMsg.header.flags = FLAG_BIG_ENDIAN;
#endif
            subMsg.header.flags |= FLAG_FINAL; // For now, we don't want any response
 800b736:	f04f 0903 	mov.w	r9, #3
 800b73a:	f8da 2004 	ldr.w	r2, [sl, #4]
 800b73e:	9302      	str	r3, [sp, #8]
 800b740:	231c      	movs	r3, #28
 800b742:	9203      	str	r2, [sp, #12]
            subMsg.header.submessageLength = SubmessageAckNack::getRawSize(readerSNState) - numBytesUntilEndOfLength;
 800b744:	f8ad 307e 	strh.w	r3, [sp, #126]	; 0x7e
            subMsg.header.submessageId = SubmessageKind::ACKNACK;
 800b748:	f88d b07c 	strb.w	fp, [sp, #124]	; 0x7c
            subMsg.header.flags |= FLAG_FINAL; // For now, we don't want any response
 800b74c:	f88d 907d 	strb.w	r9, [sp, #125]	; 0x7d
 800b750:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800b754:	e886 0007 	stmia.w	r6, {r0, r1, r2}

            subMsg.writerId = writerId;
 800b758:	9a02      	ldr	r2, [sp, #8]
            subMsg.readerId = readerId;
            subMsg.readerSNState = readerSNState;
 800b75a:	f10d 0c88 	add.w	ip, sp, #136	; 0x88
    return true;
 800b75e:	2601      	movs	r6, #1
            subMsg.writerId = writerId;
 800b760:	9221      	str	r2, [sp, #132]	; 0x84
            subMsg.readerSNState = readerSNState;
 800b762:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b764:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b768:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b76a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b76e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
            subMsg.readerId = readerId;
 800b772:	9b03      	ldr	r3, [sp, #12]
            subMsg.readerSNState = readerSNState;
 800b774:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
            subMsg.count = count;

            serializeMessage(buffer, subMsg);
 800b778:	4641      	mov	r1, r8
 800b77a:	4628      	mov	r0, r5
            subMsg.count = count;
 800b77c:	f8cd e0b4 	str.w	lr, [sp, #180]	; 0xb4
            subMsg.readerId = readerId;
 800b780:	9320      	str	r3, [sp, #128]	; 0x80
            serializeMessage(buffer, subMsg);
 800b782:	f7ff fea3 	bl	800b4cc <_ZN4rtps16serializeMessageINS_11PBufWrapperEEEbRT_RNS_17SubmessageAckNackE>
    m_transport->sendPacket(info);
 800b786:	a904      	add	r1, sp, #16
 800b788:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b78a:	f000 fb89 	bl	800bea0 <_ZN4rtps9UdpDriver10sendPacketERNS_10PacketInfoE>
    return true;
 800b78e:	e725      	b.n	800b5dc <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE14onNewHeartbeatERKNS_19SubmessageHeartbeatERKNS_12GuidPrefix_tE+0x38>
		buffer.append(header.protocolName.data(), sizeof(std::array<uint8_t, 4>));
 800b790:	f10d 087c 	add.w	r8, sp, #124	; 0x7c
 800b794:	2204      	movs	r2, #4
 800b796:	4628      	mov	r0, r5
 800b798:	9300      	str	r3, [sp, #0]
 800b79a:	4641      	mov	r1, r8
 800b79c:	f003 fd62 	bl	800f264 <_ZN4rtps11PBufWrapper6appendEPKht>
		buffer.append(reinterpret_cast<uint8_t*>(&header.protocolVersion), sizeof(ProtocolVersion_t));
 800b7a0:	2202      	movs	r2, #2
 800b7a2:	a920      	add	r1, sp, #128	; 0x80
 800b7a4:	4628      	mov	r0, r5
 800b7a6:	f003 fd5d 	bl	800f264 <_ZN4rtps11PBufWrapper6appendEPKht>
		buffer.append(header.vendorId.vendorId.data(), sizeof(VendorId_t));
 800b7aa:	2202      	movs	r2, #2
 800b7ac:	f10d 0182 	add.w	r1, sp, #130	; 0x82
 800b7b0:	4628      	mov	r0, r5
 800b7b2:	f003 fd57 	bl	800f264 <_ZN4rtps11PBufWrapper6appendEPKht>
		buffer.append(header.guidPrefix.id.data(), sizeof(GuidPrefix_t));
 800b7b6:	a921      	add	r1, sp, #132	; 0x84
 800b7b8:	220c      	movs	r2, #12
 800b7ba:	4628      	mov	r0, r5
 800b7bc:	f003 fd52 	bl	800f264 <_ZN4rtps11PBufWrapper6appendEPKht>
 800b7c0:	9b00      	ldr	r3, [sp, #0]
 800b7c2:	e789      	b.n	800b6d8 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE14onNewHeartbeatERKNS_19SubmessageHeartbeatERKNS_12GuidPrefix_tE+0x134>
 800b7c4:	f8da 1018 	ldr.w	r1, [sl, #24]
 800b7c8:	6972      	ldr	r2, [r6, #20]
 800b7ca:	4291      	cmp	r1, r2
 800b7cc:	d293      	bcs.n	800b6f6 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE14onNewHeartbeatERKNS_19SubmessageHeartbeatERKNS_12GuidPrefix_tE+0x152>
				set.base = expectedSN;
 800b7ce:	1b1b      	subs	r3, r3, r4
 800b7d0:	2200      	movs	r2, #0
            const Count_t tmp = ackNackCount;
 800b7d2:	f8d6 e018 	ldr.w	lr, [r6, #24]
 800b7d6:	46cc      	mov	ip, r9
				set.base = expectedSN;
 800b7d8:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
 800b7dc:	920b      	str	r2, [sp, #44]	; 0x2c
 800b7de:	920c      	str	r2, [sp, #48]	; 0x30
 800b7e0:	ac14      	add	r4, sp, #80	; 0x50
 800b7e2:	f103 0188 	add.w	r1, r3, #136	; 0x88
            ++ackNackCount.value;
 800b7e6:	f10e 0201 	add.w	r2, lr, #1
 800b7ea:	4626      	mov	r6, r4
            subMsg.header.submessageId = SubmessageKind::ACKNACK;
 800b7ec:	f04f 0b06 	mov.w	fp, #6
				set.base = expectedSN;
 800b7f0:	c903      	ldmia	r1, {r0, r1}
            ++ackNackCount.value;
 800b7f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
				set.base = expectedSN;
 800b7f6:	e889 0003 	stmia.w	r9, {r0, r1}
 800b7fa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b7fe:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800b800:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800b804:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800b806:	f8da 1008 	ldr.w	r1, [sl, #8]
            subMsg.header.flags |= FLAG_FINAL; // For now, we don't want any response
 800b80a:	f04f 0903 	mov.w	r9, #3
 800b80e:	f8da 2004 	ldr.w	r2, [sl, #4]
 800b812:	2318      	movs	r3, #24
 800b814:	9102      	str	r1, [sp, #8]
 800b816:	e794      	b.n	800b742 <_ZN4rtps15StatefulReaderTINS_9UdpDriverEE14onNewHeartbeatERKNS_19SubmessageHeartbeatERKNS_12GuidPrefix_tE+0x19e>
 800b818:	08010d40 	.word	0x08010d40

0800b81c <HAL_MspInit>:
 800b81c:	4b0e      	ldr	r3, [pc, #56]	; (800b858 <HAL_MspInit+0x3c>)
 800b81e:	2200      	movs	r2, #0
 800b820:	210f      	movs	r1, #15
 800b822:	f06f 0001 	mvn.w	r0, #1
 800b826:	b410      	push	{r4}
 800b828:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 800b82a:	b083      	sub	sp, #12
 800b82c:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 800b830:	641c      	str	r4, [r3, #64]	; 0x40
 800b832:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 800b834:	f004 5480 	and.w	r4, r4, #268435456	; 0x10000000
 800b838:	9400      	str	r4, [sp, #0]
 800b83a:	9c00      	ldr	r4, [sp, #0]
 800b83c:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 800b83e:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 800b842:	645c      	str	r4, [r3, #68]	; 0x44
 800b844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b846:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b84a:	9301      	str	r3, [sp, #4]
 800b84c:	9b01      	ldr	r3, [sp, #4]
 800b84e:	b003      	add	sp, #12
 800b850:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b854:	f7f4 bf20 	b.w	8000698 <HAL_NVIC_SetPriority>
 800b858:	40023800 	.word	0x40023800

0800b85c <HAL_UART_MspInit>:
 800b85c:	6802      	ldr	r2, [r0, #0]
 800b85e:	2300      	movs	r3, #0
 800b860:	4929      	ldr	r1, [pc, #164]	; (800b908 <HAL_UART_MspInit+0xac>)
 800b862:	b570      	push	{r4, r5, r6, lr}
 800b864:	428a      	cmp	r2, r1
 800b866:	b08a      	sub	sp, #40	; 0x28
 800b868:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800b86c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800b870:	9309      	str	r3, [sp, #36]	; 0x24
 800b872:	d026      	beq.n	800b8c2 <HAL_UART_MspInit+0x66>
 800b874:	4b25      	ldr	r3, [pc, #148]	; (800b90c <HAL_UART_MspInit+0xb0>)
 800b876:	429a      	cmp	r2, r3
 800b878:	d001      	beq.n	800b87e <HAL_UART_MspInit+0x22>
 800b87a:	b00a      	add	sp, #40	; 0x28
 800b87c:	bd70      	pop	{r4, r5, r6, pc}
 800b87e:	f503 3392 	add.w	r3, r3, #74752	; 0x12400
 800b882:	20c0      	movs	r0, #192	; 0xc0
 800b884:	2602      	movs	r6, #2
 800b886:	a905      	add	r1, sp, #20
 800b888:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b88a:	2503      	movs	r5, #3
 800b88c:	2408      	movs	r4, #8
 800b88e:	f042 0220 	orr.w	r2, r2, #32
 800b892:	645a      	str	r2, [r3, #68]	; 0x44
 800b894:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b896:	f002 0220 	and.w	r2, r2, #32
 800b89a:	9203      	str	r2, [sp, #12]
 800b89c:	9a03      	ldr	r2, [sp, #12]
 800b89e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b8a0:	f042 0204 	orr.w	r2, r2, #4
 800b8a4:	631a      	str	r2, [r3, #48]	; 0x30
 800b8a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8a8:	9005      	str	r0, [sp, #20]
 800b8aa:	f003 0304 	and.w	r3, r3, #4
 800b8ae:	4818      	ldr	r0, [pc, #96]	; (800b910 <HAL_UART_MspInit+0xb4>)
 800b8b0:	9606      	str	r6, [sp, #24]
 800b8b2:	9304      	str	r3, [sp, #16]
 800b8b4:	9b04      	ldr	r3, [sp, #16]
 800b8b6:	e9cd 5408 	strd	r5, r4, [sp, #32]
 800b8ba:	f7f5 fc25 	bl	8001108 <HAL_GPIO_Init>
 800b8be:	b00a      	add	sp, #40	; 0x28
 800b8c0:	bd70      	pop	{r4, r5, r6, pc}
 800b8c2:	4b14      	ldr	r3, [pc, #80]	; (800b914 <HAL_UART_MspInit+0xb8>)
 800b8c4:	f44f 7040 	mov.w	r0, #768	; 0x300
 800b8c8:	2602      	movs	r6, #2
 800b8ca:	a905      	add	r1, sp, #20
 800b8cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b8ce:	2503      	movs	r5, #3
 800b8d0:	2407      	movs	r4, #7
 800b8d2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800b8d6:	641a      	str	r2, [r3, #64]	; 0x40
 800b8d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b8da:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800b8de:	9201      	str	r2, [sp, #4]
 800b8e0:	9a01      	ldr	r2, [sp, #4]
 800b8e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b8e4:	f042 0208 	orr.w	r2, r2, #8
 800b8e8:	631a      	str	r2, [r3, #48]	; 0x30
 800b8ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8ec:	9005      	str	r0, [sp, #20]
 800b8ee:	f003 0308 	and.w	r3, r3, #8
 800b8f2:	4809      	ldr	r0, [pc, #36]	; (800b918 <HAL_UART_MspInit+0xbc>)
 800b8f4:	9606      	str	r6, [sp, #24]
 800b8f6:	9302      	str	r3, [sp, #8]
 800b8f8:	9b02      	ldr	r3, [sp, #8]
 800b8fa:	e9cd 5408 	strd	r5, r4, [sp, #32]
 800b8fe:	f7f5 fc03 	bl	8001108 <HAL_GPIO_Init>
 800b902:	b00a      	add	sp, #40	; 0x28
 800b904:	bd70      	pop	{r4, r5, r6, pc}
 800b906:	bf00      	nop
 800b908:	40004800 	.word	0x40004800
 800b90c:	40011400 	.word	0x40011400
 800b910:	40020800 	.word	0x40020800
 800b914:	40023800 	.word	0x40023800
 800b918:	40020c00 	.word	0x40020c00

0800b91c <HAL_PCD_MspInit>:
 800b91c:	6803      	ldr	r3, [r0, #0]
 800b91e:	b530      	push	{r4, r5, lr}
 800b920:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b924:	b089      	sub	sp, #36	; 0x24
 800b926:	f04f 0400 	mov.w	r4, #0
 800b92a:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800b92e:	e9cd 4405 	strd	r4, r4, [sp, #20]
 800b932:	9407      	str	r4, [sp, #28]
 800b934:	d001      	beq.n	800b93a <HAL_PCD_MspInit+0x1e>
 800b936:	b009      	add	sp, #36	; 0x24
 800b938:	bd30      	pop	{r4, r5, pc}
 800b93a:	4d1a      	ldr	r5, [pc, #104]	; (800b9a4 <HAL_PCD_MspInit+0x88>)
 800b93c:	2202      	movs	r2, #2
 800b93e:	f44f 50e8 	mov.w	r0, #7424	; 0x1d00
 800b942:	2103      	movs	r1, #3
 800b944:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800b946:	f043 0301 	orr.w	r3, r3, #1
 800b94a:	632b      	str	r3, [r5, #48]	; 0x30
 800b94c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800b94e:	9204      	str	r2, [sp, #16]
 800b950:	220a      	movs	r2, #10
 800b952:	f003 0301 	and.w	r3, r3, #1
 800b956:	9003      	str	r0, [sp, #12]
 800b958:	9106      	str	r1, [sp, #24]
 800b95a:	a903      	add	r1, sp, #12
 800b95c:	9300      	str	r3, [sp, #0]
 800b95e:	4812      	ldr	r0, [pc, #72]	; (800b9a8 <HAL_PCD_MspInit+0x8c>)
 800b960:	9b00      	ldr	r3, [sp, #0]
 800b962:	9207      	str	r2, [sp, #28]
 800b964:	f7f5 fbd0 	bl	8001108 <HAL_GPIO_Init>
 800b968:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b96c:	a903      	add	r1, sp, #12
 800b96e:	480e      	ldr	r0, [pc, #56]	; (800b9a8 <HAL_PCD_MspInit+0x8c>)
 800b970:	9303      	str	r3, [sp, #12]
 800b972:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800b976:	f7f5 fbc7 	bl	8001108 <HAL_GPIO_Init>
 800b97a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800b97c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b980:	636b      	str	r3, [r5, #52]	; 0x34
 800b982:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800b984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b988:	9301      	str	r3, [sp, #4]
 800b98a:	9b01      	ldr	r3, [sp, #4]
 800b98c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800b98e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b992:	646b      	str	r3, [r5, #68]	; 0x44
 800b994:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800b996:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b99a:	9302      	str	r3, [sp, #8]
 800b99c:	9b02      	ldr	r3, [sp, #8]
 800b99e:	b009      	add	sp, #36	; 0x24
 800b9a0:	bd30      	pop	{r4, r5, pc}
 800b9a2:	bf00      	nop
 800b9a4:	40023800 	.word	0x40023800
 800b9a8:	40020000 	.word	0x40020000

0800b9ac <HAL_InitTick>:
 800b9ac:	b530      	push	{r4, r5, lr}
 800b9ae:	4601      	mov	r1, r0
 800b9b0:	b089      	sub	sp, #36	; 0x24
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	2019      	movs	r0, #25
 800b9b6:	f7f4 fe6f 	bl	8000698 <HAL_NVIC_SetPriority>
 800b9ba:	2019      	movs	r0, #25
 800b9bc:	f7f4 fea2 	bl	8000704 <HAL_NVIC_EnableIRQ>
 800b9c0:	4b15      	ldr	r3, [pc, #84]	; (800ba18 <HAL_InitTick+0x6c>)
 800b9c2:	a901      	add	r1, sp, #4
 800b9c4:	a803      	add	r0, sp, #12
 800b9c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b9c8:	4c14      	ldr	r4, [pc, #80]	; (800ba1c <HAL_InitTick+0x70>)
 800b9ca:	f042 0201 	orr.w	r2, r2, #1
 800b9ce:	4d14      	ldr	r5, [pc, #80]	; (800ba20 <HAL_InitTick+0x74>)
 800b9d0:	645a      	str	r2, [r3, #68]	; 0x44
 800b9d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9d4:	f003 0301 	and.w	r3, r3, #1
 800b9d8:	9302      	str	r3, [sp, #8]
 800b9da:	9b02      	ldr	r3, [sp, #8]
 800b9dc:	f7f6 f894 	bl	8001b08 <HAL_RCC_GetClockConfig>
 800b9e0:	f7f6 f882 	bl	8001ae8 <HAL_RCC_GetPCLK2Freq>
 800b9e4:	4b0f      	ldr	r3, [pc, #60]	; (800ba24 <HAL_InitTick+0x78>)
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	f240 31e7 	movw	r1, #999	; 0x3e7
 800b9ec:	fba3 0300 	umull	r0, r3, r3, r0
 800b9f0:	4620      	mov	r0, r4
 800b9f2:	6025      	str	r5, [r4, #0]
 800b9f4:	0c9b      	lsrs	r3, r3, #18
 800b9f6:	3b01      	subs	r3, #1
 800b9f8:	e9c4 1203 	strd	r1, r2, [r4, #12]
 800b9fc:	e9c4 3201 	strd	r3, r2, [r4, #4]
 800ba00:	f7f6 fb6a 	bl	80020d8 <HAL_TIM_Base_Init>
 800ba04:	b110      	cbz	r0, 800ba0c <HAL_InitTick+0x60>
 800ba06:	2001      	movs	r0, #1
 800ba08:	b009      	add	sp, #36	; 0x24
 800ba0a:	bd30      	pop	{r4, r5, pc}
 800ba0c:	4620      	mov	r0, r4
 800ba0e:	f7f6 fbe7 	bl	80021e0 <HAL_TIM_Base_Start_IT>
 800ba12:	b009      	add	sp, #36	; 0x24
 800ba14:	bd30      	pop	{r4, r5, pc}
 800ba16:	bf00      	nop
 800ba18:	40023800 	.word	0x40023800
 800ba1c:	2000b744 	.word	0x2000b744
 800ba20:	40010000 	.word	0x40010000
 800ba24:	431bde83 	.word	0x431bde83

0800ba28 <NMI_Handler>:
 800ba28:	4770      	bx	lr
 800ba2a:	bf00      	nop

0800ba2c <MemManage_Handler>:
 800ba2c:	e7fe      	b.n	800ba2c <MemManage_Handler>
 800ba2e:	bf00      	nop

0800ba30 <BusFault_Handler>:
 800ba30:	e7fe      	b.n	800ba30 <BusFault_Handler>
 800ba32:	bf00      	nop

0800ba34 <UsageFault_Handler>:
 800ba34:	e7fe      	b.n	800ba34 <UsageFault_Handler>
 800ba36:	bf00      	nop

0800ba38 <DebugMon_Handler>:
 800ba38:	4770      	bx	lr
 800ba3a:	bf00      	nop

0800ba3c <TIM1_UP_TIM10_IRQHandler>:
 800ba3c:	4801      	ldr	r0, [pc, #4]	; (800ba44 <TIM1_UP_TIM10_IRQHandler+0x8>)
 800ba3e:	f7f6 bbed 	b.w	800221c <HAL_TIM_IRQHandler>
 800ba42:	bf00      	nop
 800ba44:	2000b744 	.word	0x2000b744

0800ba48 <ETH_IRQHandler>:
 800ba48:	4801      	ldr	r0, [pc, #4]	; (800ba50 <ETH_IRQHandler+0x8>)
 800ba4a:	f7f5 ba67 	b.w	8000f1c <HAL_ETH_IRQHandler>
 800ba4e:	bf00      	nop
 800ba50:	20009edc 	.word	0x20009edc

0800ba54 <_read>:
 800ba54:	b570      	push	{r4, r5, r6, lr}
 800ba56:	1e16      	subs	r6, r2, #0
 800ba58:	dd07      	ble.n	800ba6a <_read+0x16>
 800ba5a:	460c      	mov	r4, r1
 800ba5c:	198d      	adds	r5, r1, r6
 800ba5e:	f3af 8000 	nop.w
 800ba62:	f804 0b01 	strb.w	r0, [r4], #1
 800ba66:	42a5      	cmp	r5, r4
 800ba68:	d1f9      	bne.n	800ba5e <_read+0xa>
 800ba6a:	4630      	mov	r0, r6
 800ba6c:	bd70      	pop	{r4, r5, r6, pc}
 800ba6e:	bf00      	nop

0800ba70 <_write>:
 800ba70:	b570      	push	{r4, r5, r6, lr}
 800ba72:	1e16      	subs	r6, r2, #0
 800ba74:	dd07      	ble.n	800ba86 <_write+0x16>
 800ba76:	460c      	mov	r4, r1
 800ba78:	198d      	adds	r5, r1, r6
 800ba7a:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ba7e:	f7ff f8d9 	bl	800ac34 <__io_putchar>
 800ba82:	42ac      	cmp	r4, r5
 800ba84:	d1f9      	bne.n	800ba7a <_write+0xa>
 800ba86:	4630      	mov	r0, r6
 800ba88:	bd70      	pop	{r4, r5, r6, pc}
 800ba8a:	bf00      	nop

0800ba8c <_sbrk>:
 800ba8c:	4a0c      	ldr	r2, [pc, #48]	; (800bac0 <_sbrk+0x34>)
 800ba8e:	b508      	push	{r3, lr}
 800ba90:	6813      	ldr	r3, [r2, #0]
 800ba92:	b133      	cbz	r3, 800baa2 <_sbrk+0x16>
 800ba94:	4418      	add	r0, r3
 800ba96:	4669      	mov	r1, sp
 800ba98:	4288      	cmp	r0, r1
 800ba9a:	d809      	bhi.n	800bab0 <_sbrk+0x24>
 800ba9c:	6010      	str	r0, [r2, #0]
 800ba9e:	4618      	mov	r0, r3
 800baa0:	bd08      	pop	{r3, pc}
 800baa2:	4908      	ldr	r1, [pc, #32]	; (800bac4 <_sbrk+0x38>)
 800baa4:	460b      	mov	r3, r1
 800baa6:	6011      	str	r1, [r2, #0]
 800baa8:	4669      	mov	r1, sp
 800baaa:	4418      	add	r0, r3
 800baac:	4288      	cmp	r0, r1
 800baae:	d9f5      	bls.n	800ba9c <_sbrk+0x10>
 800bab0:	f003 ff16 	bl	800f8e0 <__errno>
 800bab4:	220c      	movs	r2, #12
 800bab6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800baba:	6002      	str	r2, [r0, #0]
 800babc:	4618      	mov	r0, r3
 800babe:	bd08      	pop	{r3, pc}
 800bac0:	20005934 	.word	0x20005934
 800bac4:	2000b788 	.word	0x2000b788

0800bac8 <_close>:
 800bac8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bacc:	4770      	bx	lr
 800bace:	bf00      	nop

0800bad0 <_fstat>:
 800bad0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bad4:	2000      	movs	r0, #0
 800bad6:	604b      	str	r3, [r1, #4]
 800bad8:	4770      	bx	lr
 800bada:	bf00      	nop

0800badc <_isatty>:
 800badc:	2001      	movs	r0, #1
 800bade:	4770      	bx	lr

0800bae0 <_lseek>:
 800bae0:	2000      	movs	r0, #0
 800bae2:	4770      	bx	lr

0800bae4 <SystemInit>:
 800bae4:	4a0f      	ldr	r2, [pc, #60]	; (800bb24 <SystemInit+0x40>)
 800bae6:	4b10      	ldr	r3, [pc, #64]	; (800bb28 <SystemInit+0x44>)
 800bae8:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
 800baec:	490f      	ldr	r1, [pc, #60]	; (800bb2c <SystemInit+0x48>)
 800baee:	f440 0070 	orr.w	r0, r0, #15728640	; 0xf00000
 800baf2:	b470      	push	{r4, r5, r6}
 800baf4:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
 800baf8:	2400      	movs	r4, #0
 800bafa:	6818      	ldr	r0, [r3, #0]
 800bafc:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
 800bb00:	4e0b      	ldr	r6, [pc, #44]	; (800bb30 <SystemInit+0x4c>)
 800bb02:	f040 0001 	orr.w	r0, r0, #1
 800bb06:	6018      	str	r0, [r3, #0]
 800bb08:	609c      	str	r4, [r3, #8]
 800bb0a:	6818      	ldr	r0, [r3, #0]
 800bb0c:	4001      	ands	r1, r0
 800bb0e:	6019      	str	r1, [r3, #0]
 800bb10:	605e      	str	r6, [r3, #4]
 800bb12:	6819      	ldr	r1, [r3, #0]
 800bb14:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800bb18:	6019      	str	r1, [r3, #0]
 800bb1a:	60dc      	str	r4, [r3, #12]
 800bb1c:	6095      	str	r5, [r2, #8]
 800bb1e:	bc70      	pop	{r4, r5, r6}
 800bb20:	4770      	bx	lr
 800bb22:	bf00      	nop
 800bb24:	e000ed00 	.word	0xe000ed00
 800bb28:	40023800 	.word	0x40023800
 800bb2c:	fef6ffff 	.word	0xfef6ffff
 800bb30:	24003010 	.word	0x24003010

0800bb34 <_ZN4rtps10ThreadPoolC1EPFvPvRKNS_10PacketInfoEES1_>:
using rtps::ThreadPool;

#define THREAD_POOL_VERBOSE 0


ThreadPool::ThreadPool(receiveJumppad_fp receiveCallback, void* callee)
 800bb34:	b538      	push	{r3, r4, r5, lr}
 800bb36:	4604      	mov	r4, r0
    : m_receiveJumppad(receiveCallback), m_callee(callee){
 800bb38:	2500      	movs	r5, #0
 800bb3a:	6001      	str	r1, [r0, #0]
#include <limits>

namespace rtps {

    template<typename T, uint16_t SIZE>
    class ThreadSafeCircularBuffer {
 800bb3c:	301c      	adds	r0, #28
 800bb3e:	6062      	str	r2, [r4, #4]
 800bb40:	4629      	mov	r1, r5
 800bb42:	222c      	movs	r2, #44	; 0x2c
 800bb44:	7225      	strb	r5, [r4, #8]
 800bb46:	f003 ff0f 	bl	800f968 <memset>
 800bb4a:	64a5      	str	r5, [r4, #72]	; 0x48
 800bb4c:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 800bb50:	4629      	mov	r1, r5
 800bb52:	f104 0054 	add.w	r0, r4, #84	; 0x54
 800bb56:	22dc      	movs	r2, #220	; 0xdc
 800bb58:	f003 ff06 	bl	800f968 <memset>
 800bb5c:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 800bb60:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
    template<typename T, uint16_t SIZE>
    bool ThreadSafeCircularBuffer<T, SIZE>::init(){
        if (m_initialized) {
            return true;
        }
        if (sys_mutex_new(&m_mutex) != ERR_OK) {
 800bb64:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 800bb68:	f7fd ff68 	bl	8009a3c <sys_mutex_new>
 800bb6c:	b978      	cbnz	r0, 800bb8e <_ZN4rtps10ThreadPoolC1EPFvPvRKNS_10PacketInfoEES1_+0x5a>
            return false;
        } else {
#if TSCB_VERBOSE
            printf("Successfully created mutex at %p\n", static_cast<void*>(&m_mutex));
#endif
            m_initialized = true;
 800bb6e:	2501      	movs	r5, #1
        if (m_initialized) {
 800bb70:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
            m_initialized = true;
 800bb74:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
        if (m_initialized) {
 800bb78:	b15b      	cbz	r3, 800bb92 <_ZN4rtps10ThreadPoolC1EPFvPvRKNS_10PacketInfoEES1_+0x5e>

    if(!m_queueOutgoing.init() || !m_queueIncoming.init()){
        return;
    }
    err_t inputErr = sys_sem_new(&m_readerNotificationSem, 0);
 800bb7a:	2100      	movs	r1, #0
 800bb7c:	f104 0014 	add.w	r0, r4, #20
 800bb80:	f7fd ff0a 	bl	8009998 <sys_sem_new>
    err_t outputErr = sys_sem_new(&m_writerNotificationSem, 0);
 800bb84:	2100      	movs	r1, #0
 800bb86:	f104 0018 	add.w	r0, r4, #24
 800bb8a:	f7fd ff05 	bl	8009998 <sys_sem_new>
#if THREAD_POOL_VERBOSE
    if(inputErr != ERR_OK || outputErr != ERR_OK){
        printf("ThreadPool: Failed to create Semaphores.\n");
    }
#endif
}
 800bb8e:	4620      	mov	r0, r4
 800bb90:	bd38      	pop	{r3, r4, r5, pc}
        if (sys_mutex_new(&m_mutex) != ERR_OK) {
 800bb92:	f504 709a 	add.w	r0, r4, #308	; 0x134
 800bb96:	f7fd ff51 	bl	8009a3c <sys_mutex_new>
 800bb9a:	2800      	cmp	r0, #0
 800bb9c:	d1f7      	bne.n	800bb8e <_ZN4rtps10ThreadPoolC1EPFvPvRKNS_10PacketInfoEES1_+0x5a>
            m_initialized = true;
 800bb9e:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
 800bba2:	e7ea      	b.n	800bb7a <_ZN4rtps10ThreadPoolC1EPFvPvRKNS_10PacketInfoEES1_+0x46>

0800bba4 <_ZN4rtps10ThreadPoolD1Ev>:

ThreadPool::~ThreadPool(){
    if(m_running){
 800bba4:	7a03      	ldrb	r3, [r0, #8]
ThreadPool::~ThreadPool(){
 800bba6:	b570      	push	{r4, r5, r6, lr}
 800bba8:	4605      	mov	r5, r0
    if(m_running){
 800bbaa:	bb7b      	cbnz	r3, 800bc0c <_ZN4rtps10ThreadPoolD1Ev+0x68>
        stopThreads();
        sys_msleep(500);
    }

    if(sys_sem_valid(&m_readerNotificationSem)){
 800bbac:	f105 0414 	add.w	r4, r5, #20
 800bbb0:	4620      	mov	r0, r4
 800bbb2:	f7fd ff31 	bl	8009a18 <sys_sem_valid>
 800bbb6:	bb28      	cbnz	r0, 800bc04 <_ZN4rtps10ThreadPoolD1Ev+0x60>
        sys_sem_free(&m_readerNotificationSem);
    }
    if(sys_sem_valid(&m_writerNotificationSem)){
 800bbb8:	f105 0418 	add.w	r4, r5, #24
 800bbbc:	4620      	mov	r0, r4
 800bbbe:	f7fd ff2b 	bl	8009a18 <sys_sem_valid>
 800bbc2:	b9d8      	cbnz	r0, 800bbfc <_ZN4rtps10ThreadPoolD1Ev+0x58>
        }
    }

    template<typename T, uint16_t SIZE>
    ThreadSafeCircularBuffer<T, SIZE>::~ThreadSafeCircularBuffer(){
        if (m_initialized) {
 800bbc4:	f895 3138 	ldrb.w	r3, [r5, #312]	; 0x138
ThreadPool::~ThreadPool(){
 800bbc8:	f105 0654 	add.w	r6, r5, #84	; 0x54
 800bbcc:	b98b      	cbnz	r3, 800bbf2 <_ZN4rtps10ThreadPoolD1Ev+0x4e>
 800bbce:	f505 7498 	add.w	r4, r5, #304	; 0x130
 800bbd2:	3c14      	subs	r4, #20
 800bbd4:	f104 000c 	add.w	r0, r4, #12
 800bbd8:	f003 fb2c 	bl	800f234 <_ZN4rtps11PBufWrapperD1Ev>
 800bbdc:	42a6      	cmp	r6, r4
 800bbde:	d1f8      	bne.n	800bbd2 <_ZN4rtps10ThreadPoolD1Ev+0x2e>
 800bbe0:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
 800bbe4:	b11b      	cbz	r3, 800bbee <_ZN4rtps10ThreadPoolD1Ev+0x4a>
            sys_mutex_free(&m_mutex);
 800bbe6:	f105 004c 	add.w	r0, r5, #76	; 0x4c
 800bbea:	f7fd ff39 	bl	8009a60 <sys_mutex_free>
        sys_sem_free(&m_writerNotificationSem);
    }
}
 800bbee:	4628      	mov	r0, r5
 800bbf0:	bd70      	pop	{r4, r5, r6, pc}
 800bbf2:	f505 709a 	add.w	r0, r5, #308	; 0x134
 800bbf6:	f7fd ff33 	bl	8009a60 <sys_mutex_free>
 800bbfa:	e7e8      	b.n	800bbce <_ZN4rtps10ThreadPoolD1Ev+0x2a>
        sys_sem_free(&m_writerNotificationSem);
 800bbfc:	4620      	mov	r0, r4
 800bbfe:	f7fd ff07 	bl	8009a10 <sys_sem_free>
 800bc02:	e7df      	b.n	800bbc4 <_ZN4rtps10ThreadPoolD1Ev+0x20>
        sys_sem_free(&m_readerNotificationSem);
 800bc04:	4620      	mov	r0, r4
 800bc06:	f7fd ff03 	bl	8009a10 <sys_sem_free>
 800bc0a:	e7d5      	b.n	800bbb8 <_ZN4rtps10ThreadPoolD1Ev+0x14>
    }
    return true;
}

void ThreadPool::stopThreads() {
    m_running = false;
 800bc0c:	2300      	movs	r3, #0
    // TODO make sure they have finished. Seems to be sufficient for tests.
    // Not sufficient if threads shall actually be stopped during runtime.
    sys_msleep(10);
 800bc0e:	200a      	movs	r0, #10
    m_running = false;
 800bc10:	722b      	strb	r3, [r5, #8]
    sys_msleep(10);
 800bc12:	f7fa fd2d 	bl	8006670 <sys_msleep>
        sys_msleep(500);
 800bc16:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800bc1a:	f7fa fd29 	bl	8006670 <sys_msleep>
 800bc1e:	e7c5      	b.n	800bbac <_ZN4rtps10ThreadPoolD1Ev+0x8>

0800bc20 <_ZN4rtps10ThreadPool11addWorkloadEPNS_6WriterE>:
void ThreadPool::clearQueues(){
    m_queueOutgoing.clear();
    m_queueIncoming.clear();
}

bool ThreadPool::addWorkload(Writer* workload){
 800bc20:	b570      	push	{r4, r5, r6, lr}
    }


    template<typename T, uint16_t SIZE>
    bool ThreadSafeCircularBuffer<T, SIZE>::moveElementIntoBuffer(T&& elem) {
        Lock lock(m_mutex);
 800bc22:	f100 054c 	add.w	r5, r0, #76	; 0x4c
 800bc26:	4604      	mov	r4, r0
 800bc28:	460e      	mov	r6, r1
            sys_mutex_lock(&m_mutex);
 800bc2a:	4628      	mov	r0, r5
 800bc2c:	f7fd ff1c 	bl	8009a68 <sys_mutex_lock>
        if (!isFull()){
 800bc30:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800bc34:	f8b4 004a 	ldrh.w	r0, [r4, #74]	; 0x4a
        return it == m_tail;
    }

    template<typename T, uint16_t SIZE>
    inline void ThreadSafeCircularBuffer<T,SIZE>::incrementIterator(uint16_t& iterator) {
        ++iterator;
 800bc38:	1c53      	adds	r3, r2, #1
 800bc3a:	b29b      	uxth	r3, r3
        if (iterator >= m_buffer.size()) {
 800bc3c:	2b0a      	cmp	r3, #10
 800bc3e:	d907      	bls.n	800bc50 <_ZN4rtps10ThreadPool11addWorkloadEPNS_6WriterE+0x30>
        if (!isFull()){
 800bc40:	b1b0      	cbz	r0, 800bc70 <_ZN4rtps10ThreadPool11addWorkloadEPNS_6WriterE+0x50>
            m_buffer[m_head] = std::move(elem);
 800bc42:	eb04 0282 	add.w	r2, r4, r2, lsl #2
            iterator = 0;
 800bc46:	2300      	movs	r3, #0
            m_buffer[m_head] = std::move(elem);
 800bc48:	61d6      	str	r6, [r2, #28]
            iterator = 0;
 800bc4a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 800bc4e:	e006      	b.n	800bc5e <_ZN4rtps10ThreadPool11addWorkloadEPNS_6WriterE+0x3e>
        if (!isFull()){
 800bc50:	4298      	cmp	r0, r3
 800bc52:	d00d      	beq.n	800bc70 <_ZN4rtps10ThreadPool11addWorkloadEPNS_6WriterE+0x50>
            m_buffer[m_head] = std::move(elem);
 800bc54:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800bc58:	61d6      	str	r6, [r2, #28]
        ++iterator;
 800bc5a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
            sys_mutex_unlock(&m_mutex);
 800bc5e:	4628      	mov	r0, r5
 800bc60:	f7fd ff08 	bl	8009a74 <sys_mutex_unlock>
    bool res = m_queueOutgoing.moveElementIntoBuffer(std::move(workload));
    if(res) {
        sys_sem_signal(&m_writerNotificationSem);
 800bc64:	f104 0018 	add.w	r0, r4, #24
 800bc68:	f7fd fece 	bl	8009a08 <sys_sem_signal>
 800bc6c:	2001      	movs	r0, #1
    }

    return res;
}
 800bc6e:	bd70      	pop	{r4, r5, r6, pc}
 800bc70:	4628      	mov	r0, r5
 800bc72:	f7fd feff 	bl	8009a74 <sys_mutex_unlock>
            return false;
 800bc76:	2000      	movs	r0, #0
 800bc78:	bd70      	pop	{r4, r5, r6, pc}
 800bc7a:	bf00      	nop

0800bc7c <_ZN4rtps10ThreadPool12readCallbackEPvP7udp_pcbP4pbufPK8ip4_addrt>:

        workload->progress();
    }
}

void ThreadPool::readCallback(void* args, udp_pcb* target, pbuf* pbuf, const ip_addr_t* /*addr*/, Ip4Port_t port) {
 800bc7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc7e:	b089      	sub	sp, #36	; 0x24
 800bc80:	4604      	mov	r4, r0
    auto& pool = *static_cast<ThreadPool*>(args);

    PacketInfo packet;
    packet.destAddr = {0}; // not relevant
    packet.destPort = target->local_port;
 800bc82:	8a4d      	ldrh	r5, [r1, #18]
 800bc84:	2600      	movs	r6, #0
void ThreadPool::readCallback(void* args, udp_pcb* target, pbuf* pbuf, const ip_addr_t* /*addr*/, Ip4Port_t port) {
 800bc86:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    packet.srcPort = port;
    packet.buffer = PBufWrapper{pbuf};
 800bc8a:	4611      	mov	r1, r2
 800bc8c:	a801      	add	r0, sp, #4
    packet.destPort = target->local_port;
 800bc8e:	f8ad 5014 	strh.w	r5, [sp, #20]
    packet.srcPort = port;
 800bc92:	f8ad 300c 	strh.w	r3, [sp, #12]
        Lock lock(m_mutex);
 800bc96:	f504 759a 	add.w	r5, r4, #308	; 0x134
 800bc9a:	9606      	str	r6, [sp, #24]
 800bc9c:	f8ad 601c 	strh.w	r6, [sp, #28]
    packet.destAddr = {0}; // not relevant
 800bca0:	9604      	str	r6, [sp, #16]
    packet.buffer = PBufWrapper{pbuf};
 800bca2:	f003 faa1 	bl	800f1e8 <_ZN4rtps11PBufWrapperC1EP4pbuf>
 800bca6:	a901      	add	r1, sp, #4
 800bca8:	a806      	add	r0, sp, #24
 800bcaa:	f003 fab1 	bl	800f210 <_ZN4rtps11PBufWrapperaSEOS0_>
 800bcae:	a801      	add	r0, sp, #4
 800bcb0:	f003 fac0 	bl	800f234 <_ZN4rtps11PBufWrapperD1Ev>
            sys_mutex_lock(&m_mutex);
 800bcb4:	4628      	mov	r0, r5
 800bcb6:	f7fd fed7 	bl	8009a68 <sys_mutex_lock>
        if (!isFull()){
 800bcba:	f8b4 0130 	ldrh.w	r0, [r4, #304]	; 0x130
 800bcbe:	f8b4 2132 	ldrh.w	r2, [r4, #306]	; 0x132
        ++iterator;
 800bcc2:	1c43      	adds	r3, r0, #1
 800bcc4:	b29b      	uxth	r3, r3
            iterator = 0;
 800bcc6:	2b0b      	cmp	r3, #11
 800bcc8:	bf28      	it	cs
 800bcca:	4633      	movcs	r3, r6
        if (!isFull()){
 800bccc:	429a      	cmp	r2, r3
 800bcce:	d03f      	beq.n	800bd50 <_ZN4rtps10ThreadPool12readCallbackEPvP7udp_pcbP4pbufPK8ip4_addrt+0xd4>
            this->srcPort = other.srcPort;
 800bcd0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800bcd4:	f104 0254 	add.w	r2, r4, #84	; 0x54
 800bcd8:	f8bd c00c 	ldrh.w	ip, [sp, #12]
 800bcdc:	0083      	lsls	r3, r0, #2
            this->destAddr = other.destAddr;
 800bcde:	4610      	mov	r0, r2
            this->buffer = other.buffer;
            return *this;
        }

        PacketInfo& operator=(PacketInfo&& other) noexcept{
            copyTriviallyCopyable(other);
 800bce0:	f8bd 7014 	ldrh.w	r7, [sp, #20]
            this->srcPort = other.srcPort;
 800bce4:	18e1      	adds	r1, r4, r3
            this->destAddr = other.destAddr;
 800bce6:	441a      	add	r2, r3
            this->buffer = std::move(other.buffer);
 800bce8:	330c      	adds	r3, #12
            this->srcPort = other.srcPort;
 800bcea:	f8a1 c054 	strh.w	ip, [r1, #84]	; 0x54
            this->buffer = std::move(other.buffer);
 800bcee:	4418      	add	r0, r3
 800bcf0:	9b04      	ldr	r3, [sp, #16]
            this->destPort = other.destPort;
 800bcf2:	f8a1 705c 	strh.w	r7, [r1, #92]	; 0x5c
            this->buffer = std::move(other.buffer);
 800bcf6:	a906      	add	r1, sp, #24
            this->destAddr = other.destAddr;
 800bcf8:	6053      	str	r3, [r2, #4]
            this->buffer = std::move(other.buffer);
 800bcfa:	f003 fa89 	bl	800f210 <_ZN4rtps11PBufWrapperaSEOS0_>
        ++iterator;
 800bcfe:	f8b4 3130 	ldrh.w	r3, [r4, #304]	; 0x130
 800bd02:	3301      	adds	r3, #1
 800bd04:	b29b      	uxth	r3, r3
        if (iterator >= m_buffer.size()) {
 800bd06:	2b0a      	cmp	r3, #10
        ++iterator;
 800bd08:	f8a4 3130 	strh.w	r3, [r4, #304]	; 0x130
        if (iterator >= m_buffer.size()) {
 800bd0c:	d910      	bls.n	800bd30 <_ZN4rtps10ThreadPool12readCallbackEPvP7udp_pcbP4pbufPK8ip4_addrt+0xb4>
    }

    template<typename T, uint16_t SIZE>
    inline void ThreadSafeCircularBuffer<T,SIZE>::incrementHead() {
        incrementIterator(m_head);
        if (m_head == m_tail) {
 800bd0e:	f8b4 3132 	ldrh.w	r3, [r4, #306]	; 0x132
 800bd12:	f8a4 6130 	strh.w	r6, [r4, #304]	; 0x130
 800bd16:	b31b      	cbz	r3, 800bd60 <_ZN4rtps10ThreadPool12readCallbackEPvP7udp_pcbP4pbufPK8ip4_addrt+0xe4>
            sys_mutex_unlock(&m_mutex);
 800bd18:	4628      	mov	r0, r5
 800bd1a:	f7fd feab 	bl	8009a74 <sys_mutex_unlock>
        sys_sem_signal(&m_readerNotificationSem);
 800bd1e:	f104 0014 	add.w	r0, r4, #20
 800bd22:	f7fd fe71 	bl	8009a08 <sys_sem_signal>
        ~PacketInfo() = default;
 800bd26:	a806      	add	r0, sp, #24
 800bd28:	f003 fa84 	bl	800f234 <_ZN4rtps11PBufWrapperD1Ev>
    if(!pool.addNewPacket(std::move(packet))){
#if THREAD_POOL_VERBOSE
        printf("ThreadPool: dropped packet\n");
#endif
    }
}
 800bd2c:	b009      	add	sp, #36	; 0x24
 800bd2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd30:	f8b4 2132 	ldrh.w	r2, [r4, #306]	; 0x132
 800bd34:	4293      	cmp	r3, r2
 800bd36:	d1ef      	bne.n	800bd18 <_ZN4rtps10ThreadPool12readCallbackEPvP7udp_pcbP4pbufPK8ip4_addrt+0x9c>
        ++iterator;
 800bd38:	3301      	adds	r3, #1
 800bd3a:	b29b      	uxth	r3, r3
        if (iterator >= m_buffer.size()) {
 800bd3c:	2b0b      	cmp	r3, #11
        ++iterator;
 800bd3e:	f8a4 3132 	strh.w	r3, [r4, #306]	; 0x132
        if (iterator >= m_buffer.size()) {
 800bd42:	d1e9      	bne.n	800bd18 <_ZN4rtps10ThreadPool12readCallbackEPvP7udp_pcbP4pbufPK8ip4_addrt+0x9c>
            iterator = 0;
 800bd44:	f8a4 6132 	strh.w	r6, [r4, #306]	; 0x132
 800bd48:	4628      	mov	r0, r5
 800bd4a:	f7fd fe93 	bl	8009a74 <sys_mutex_unlock>
 800bd4e:	e7e6      	b.n	800bd1e <_ZN4rtps10ThreadPool12readCallbackEPvP7udp_pcbP4pbufPK8ip4_addrt+0xa2>
 800bd50:	4628      	mov	r0, r5
 800bd52:	f7fd fe8f 	bl	8009a74 <sys_mutex_unlock>
 800bd56:	a806      	add	r0, sp, #24
 800bd58:	f003 fa6c 	bl	800f234 <_ZN4rtps11PBufWrapperD1Ev>
 800bd5c:	b009      	add	sp, #36	; 0x24
 800bd5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ++iterator;
 800bd60:	2301      	movs	r3, #1
 800bd62:	f8a4 3132 	strh.w	r3, [r4, #306]	; 0x132
 800bd66:	e7d7      	b.n	800bd18 <_ZN4rtps10ThreadPool12readCallbackEPvP7udp_pcbP4pbufPK8ip4_addrt+0x9c>

0800bd68 <_ZN4rtps9UdpDriverC1EPFvPvP7udp_pcbP4pbufPK8ip4_addrtES1_>:

using rtps::UdpDriver;

#define UDP_DRIVER_VERBOSE 0

UdpDriver::UdpDriver(rtps::UdpDriver::udpRxFunc_fp callback, void *args)
 800bd68:	b538      	push	{r3, r4, r5, lr}
 800bd6a:	460d      	mov	r5, r1
 800bd6c:	4614      	mov	r4, r2
 800bd6e:	2100      	movs	r1, #0
 800bd70:	2250      	movs	r2, #80	; 0x50
 800bd72:	f003 fdf9 	bl	800f968 <memset>
    : m_rxCallback(callback), m_callbackArgs(args){
 800bd76:	2200      	movs	r2, #0
 800bd78:	6545      	str	r5, [r0, #84]	; 0x54
 800bd7a:	6584      	str	r4, [r0, #88]	; 0x58
 800bd7c:	6502      	str	r2, [r0, #80]	; 0x50

}
 800bd7e:	bd38      	pop	{r3, r4, r5, pc}

0800bd80 <_ZN4rtps9UdpDriver19createUdpConnectionEt>:

const rtps::UdpConnection* UdpDriver::createUdpConnection(Ip4Port_t receivePort) {
    for(uint8_t i=0; i < m_numConns; ++i){
 800bd80:	6d02      	ldr	r2, [r0, #80]	; 0x50
const rtps::UdpConnection* UdpDriver::createUdpConnection(Ip4Port_t receivePort) {
 800bd82:	b570      	push	{r4, r5, r6, lr}
 800bd84:	b082      	sub	sp, #8
    for(uint8_t i=0; i < m_numConns; ++i){
 800bd86:	b17a      	cbz	r2, 800bda8 <_ZN4rtps9UdpDriver19createUdpConnectionEt+0x28>
        if(m_conns[i].port == receivePort){
 800bd88:	8883      	ldrh	r3, [r0, #4]
 800bd8a:	428b      	cmp	r3, r1
 800bd8c:	d05a      	beq.n	800be44 <_ZN4rtps9UdpDriver19createUdpConnectionEt+0xc4>
    for(uint8_t i=0; i < m_numConns; ++i){
 800bd8e:	2300      	movs	r3, #0
 800bd90:	e002      	b.n	800bd98 <_ZN4rtps9UdpDriver19createUdpConnectionEt+0x18>
        if(m_conns[i].port == receivePort){
 800bd92:	88a4      	ldrh	r4, [r4, #4]
 800bd94:	428c      	cmp	r4, r1
 800bd96:	d02a      	beq.n	800bdee <_ZN4rtps9UdpDriver19createUdpConnectionEt+0x6e>
    for(uint8_t i=0; i < m_numConns; ++i){
 800bd98:	3301      	adds	r3, #1
 800bd9a:	b2db      	uxtb	r3, r3
 800bd9c:	4293      	cmp	r3, r2
        if(m_conns[i].port == receivePort){
 800bd9e:	eb00 04c3 	add.w	r4, r0, r3, lsl #3
    for(uint8_t i=0; i < m_numConns; ++i){
 800bda2:	d3f6      	bcc.n	800bd92 <_ZN4rtps9UdpDriver19createUdpConnectionEt+0x12>
            return &m_conns[i];
        }
    }

    if(m_numConns == m_conns.size()){
 800bda4:	2a0a      	cmp	r2, #10
 800bda6:	d04f      	beq.n	800be48 <_ZN4rtps9UdpDriver19createUdpConnectionEt+0xc8>
        explicit UdpConnection(uint16_t port): port(port) {
 800bda8:	2400      	movs	r4, #0
 800bdaa:	4606      	mov	r6, r0
                LOCK_TCPIP_CORE();
 800bdac:	4827      	ldr	r0, [pc, #156]	; (800be4c <_ZN4rtps9UdpDriver19createUdpConnectionEt+0xcc>)
 800bdae:	460d      	mov	r5, r1
 800bdb0:	f8ad 1004 	strh.w	r1, [sp, #4]
 800bdb4:	9400      	str	r4, [sp, #0]
 800bdb6:	f7fd fe57 	bl	8009a68 <sys_mutex_lock>
            pcb =  udp_new();
 800bdba:	f7fb f809 	bl	8006dd0 <udp_new>
 800bdbe:	9000      	str	r0, [sp, #0]
                UNLOCK_TCPIP_CORE();
 800bdc0:	4822      	ldr	r0, [pc, #136]	; (800be4c <_ZN4rtps9UdpDriver19createUdpConnectionEt+0xcc>)
 800bdc2:	f7fd fe57 	bl	8009a74 <sys_mutex_unlock>
                LOCK_TCPIP_CORE();
 800bdc6:	4821      	ldr	r0, [pc, #132]	; (800be4c <_ZN4rtps9UdpDriver19createUdpConnectionEt+0xcc>)
 800bdc8:	f7fd fe4e 	bl	8009a68 <sys_mutex_lock>

    UdpConnection udp_conn(receivePort);

    {
        TcpipCoreLock lock;
        err_t err = udp_bind(udp_conn.pcb, IP_ADDR_ANY, receivePort); //to receive multicast
 800bdcc:	462a      	mov	r2, r5
 800bdce:	4920      	ldr	r1, [pc, #128]	; (800be50 <_ZN4rtps9UdpDriver19createUdpConnectionEt+0xd0>)
 800bdd0:	9800      	ldr	r0, [sp, #0]
 800bdd2:	f7fa ff6d 	bl	8006cb0 <udp_bind>

        if(err != ERR_OK && err != ERR_USE){
 800bdd6:	b178      	cbz	r0, 800bdf8 <_ZN4rtps9UdpDriver19createUdpConnectionEt+0x78>
 800bdd8:	3008      	adds	r0, #8
 800bdda:	d00d      	beq.n	800bdf8 <_ZN4rtps9UdpDriver19createUdpConnectionEt+0x78>
                UNLOCK_TCPIP_CORE();
 800bddc:	481b      	ldr	r0, [pc, #108]	; (800be4c <_ZN4rtps9UdpDriver19createUdpConnectionEt+0xcc>)
 800bdde:	f7fd fe49 	bl	8009a74 <sys_mutex_unlock>
    UdpConnection udp_conn(receivePort);
 800bde2:	4668      	mov	r0, sp
 800bde4:	f7fe fe72 	bl	800aacc <_ZN4rtps13UdpConnectionD1Ev>
    m_numConns++;
#if UDP_DRIVER_VERBOSE
    printf("Successfully created UDP connection on port %u \n", receivePort);
#endif
    return &m_conns[m_numConns-1];
}
 800bde8:	4620      	mov	r0, r4
 800bdea:	b002      	add	sp, #8
 800bdec:	bd70      	pop	{r4, r5, r6, pc}
 800bdee:	eb00 04c3 	add.w	r4, r0, r3, lsl #3
 800bdf2:	4620      	mov	r0, r4
 800bdf4:	b002      	add	sp, #8
 800bdf6:	bd70      	pop	{r4, r5, r6, pc}
        udp_recv(udp_conn.pcb, m_rxCallback, m_callbackArgs);
 800bdf8:	e9d6 1215 	ldrd	r1, r2, [r6, #84]	; 0x54
 800bdfc:	9800      	ldr	r0, [sp, #0]
 800bdfe:	f7fa ffc7 	bl	8006d90 <udp_recv>
 800be02:	4812      	ldr	r0, [pc, #72]	; (800be4c <_ZN4rtps9UdpDriver19createUdpConnectionEt+0xcc>)
 800be04:	f7fd fe36 	bl	8009a74 <sys_mutex_unlock>
    m_conns[m_numConns] = std::move(udp_conn);
 800be08:	6d34      	ldr	r4, [r6, #80]	; 0x50
            port = other.port;
 800be0a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 800be0e:	00e0      	lsls	r0, r4, #3
 800be10:	1833      	adds	r3, r6, r0
 800be12:	4605      	mov	r5, r0
 800be14:	809a      	strh	r2, [r3, #4]
            if (pcb != nullptr) {
 800be16:	f856 3034 	ldr.w	r3, [r6, r4, lsl #3]
 800be1a:	b15b      	cbz	r3, 800be34 <_ZN4rtps9UdpDriver19createUdpConnectionEt+0xb4>
                LOCK_TCPIP_CORE();
 800be1c:	480b      	ldr	r0, [pc, #44]	; (800be4c <_ZN4rtps9UdpDriver19createUdpConnectionEt+0xcc>)
 800be1e:	f7fd fe23 	bl	8009a68 <sys_mutex_lock>
                udp_remove(pcb);
 800be22:	f856 0034 	ldr.w	r0, [r6, r4, lsl #3]
 800be26:	f7fa ffb7 	bl	8006d98 <udp_remove>
                UNLOCK_TCPIP_CORE();
 800be2a:	4808      	ldr	r0, [pc, #32]	; (800be4c <_ZN4rtps9UdpDriver19createUdpConnectionEt+0xcc>)
 800be2c:	f7fd fe22 	bl	8009a74 <sys_mutex_unlock>
 800be30:	6d34      	ldr	r4, [r6, #80]	; 0x50
 800be32:	00e0      	lsls	r0, r4, #3
    m_numConns++;
 800be34:	1c63      	adds	r3, r4, #1
            pcb = other.pcb;
 800be36:	9900      	ldr	r1, [sp, #0]
            other.pcb = nullptr;
 800be38:	2200      	movs	r2, #0
      { return const_cast<_Tp&>(__t[__n]); }
 800be3a:	1834      	adds	r4, r6, r0
            pcb = other.pcb;
 800be3c:	5171      	str	r1, [r6, r5]
            other.pcb = nullptr;
 800be3e:	9200      	str	r2, [sp, #0]
 800be40:	6533      	str	r3, [r6, #80]	; 0x50
 800be42:	e7ce      	b.n	800bde2 <_ZN4rtps9UdpDriver19createUdpConnectionEt+0x62>
        if(m_conns[i].port == receivePort){
 800be44:	4604      	mov	r4, r0
            return &m_conns[i];
 800be46:	e7cf      	b.n	800bde8 <_ZN4rtps9UdpDriver19createUdpConnectionEt+0x68>
        return nullptr;
 800be48:	2400      	movs	r4, #0
 800be4a:	e7cd      	b.n	800bde8 <_ZN4rtps9UdpDriver19createUdpConnectionEt+0x68>
 800be4c:	20005a18 	.word	0x20005a18
 800be50:	08010d14 	.word	0x08010d14

0800be54 <_ZN4rtps9UdpDriver12isSameSubnetE8ip4_addr>:

bool UdpDriver::isSameSubnet(ip4_addr_t addr) {
	return (ip4_addr_netcmp(&addr, &(netif_default->ip_addr), &(netif_default->netmask)) != 0);
 800be54:	4b04      	ldr	r3, [pc, #16]	; (800be68 <_ZN4rtps9UdpDriver12isSameSubnetE8ip4_addr+0x14>)
 800be56:	681a      	ldr	r2, [r3, #0]
 800be58:	e9d2 3201 	ldrd	r3, r2, [r2, #4]
 800be5c:	4058      	eors	r0, r3
 800be5e:	4210      	tst	r0, r2
}
 800be60:	bf0c      	ite	eq
 800be62:	2001      	moveq	r0, #1
 800be64:	2000      	movne	r0, #0
 800be66:	4770      	bx	lr
 800be68:	20008600 	.word	0x20008600

0800be6c <_ZNK4rtps9UdpDriver18joinMultiCastGroupE8ip4_addr>:

bool UdpDriver::joinMultiCastGroup(ip4_addr_t addr) const {
 800be6c:	b530      	push	{r4, r5, lr}
 800be6e:	b083      	sub	sp, #12
                LOCK_TCPIP_CORE();
 800be70:	4d09      	ldr	r5, [pc, #36]	; (800be98 <_ZNK4rtps9UdpDriver18joinMultiCastGroupE8ip4_addr+0x2c>)
 800be72:	ac02      	add	r4, sp, #8
 800be74:	4628      	mov	r0, r5
 800be76:	f844 1d04 	str.w	r1, [r4, #-4]!
 800be7a:	f7fd fdf5 	bl	8009a68 <sys_mutex_lock>
    err_t iret;

    {
        TcpipCoreLock lock;
        iret = igmp_joingroup(IP_ADDR_ANY, (&addr));
 800be7e:	4621      	mov	r1, r4
 800be80:	4806      	ldr	r0, [pc, #24]	; (800be9c <_ZNK4rtps9UdpDriver18joinMultiCastGroupE8ip4_addr+0x30>)
 800be82:	f7fc fc05 	bl	8008690 <igmp_joingroup>
 800be86:	4604      	mov	r4, r0
                UNLOCK_TCPIP_CORE();
 800be88:	4628      	mov	r0, r5
 800be8a:	f7fd fdf3 	bl	8009a74 <sys_mutex_unlock>
#if UDP_DRIVER_VERBOSE
        printf("Succesfully joined  IGMP multicast group %s\n", ipaddr_ntoa(&addr));
#endif
    }
    return true;
}
 800be8e:	fab4 f084 	clz	r0, r4
 800be92:	0940      	lsrs	r0, r0, #5
 800be94:	b003      	add	sp, #12
 800be96:	bd30      	pop	{r4, r5, pc}
 800be98:	20005a18 	.word	0x20005a18
 800be9c:	08010d14 	.word	0x08010d14

0800bea0 <_ZN4rtps9UdpDriver10sendPacketERNS_10PacketInfoE>:
        return false;
    }
    return true;
}

void UdpDriver::sendPacket(PacketInfo &packet){
 800bea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bea2:	4604      	mov	r4, r0
    for(uint8_t i=0; i < m_numConns; ++i){
 800bea4:	6d00      	ldr	r0, [r0, #80]	; 0x50
void UdpDriver::sendPacket(PacketInfo &packet){
 800bea6:	b083      	sub	sp, #12
 800bea8:	460e      	mov	r6, r1
    auto p_conn = createUdpConnection(packet.srcPort);
 800beaa:	880d      	ldrh	r5, [r1, #0]
    for(uint8_t i=0; i < m_numConns; ++i){
 800beac:	b178      	cbz	r0, 800bece <_ZN4rtps9UdpDriver10sendPacketERNS_10PacketInfoE+0x2e>
        if(m_conns[i].port == receivePort){
 800beae:	88a3      	ldrh	r3, [r4, #4]
 800beb0:	42ab      	cmp	r3, r5
 800beb2:	d054      	beq.n	800bf5e <_ZN4rtps9UdpDriver10sendPacketERNS_10PacketInfoE+0xbe>
    for(uint8_t i=0; i < m_numConns; ++i){
 800beb4:	2300      	movs	r3, #0
 800beb6:	e002      	b.n	800bebe <_ZN4rtps9UdpDriver10sendPacketERNS_10PacketInfoE+0x1e>
        if(m_conns[i].port == receivePort){
 800beb8:	8889      	ldrh	r1, [r1, #4]
 800beba:	42a9      	cmp	r1, r5
 800bebc:	d05f      	beq.n	800bf7e <_ZN4rtps9UdpDriver10sendPacketERNS_10PacketInfoE+0xde>
    for(uint8_t i=0; i < m_numConns; ++i){
 800bebe:	3301      	adds	r3, #1
 800bec0:	b2db      	uxtb	r3, r3
 800bec2:	4283      	cmp	r3, r0
        if(m_conns[i].port == receivePort){
 800bec4:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
    for(uint8_t i=0; i < m_numConns; ++i){
 800bec8:	d3f6      	bcc.n	800beb8 <_ZN4rtps9UdpDriver10sendPacketERNS_10PacketInfoE+0x18>
    if(m_numConns == m_conns.size()){
 800beca:	280a      	cmp	r0, #10
 800becc:	d055      	beq.n	800bf7a <_ZN4rtps9UdpDriver10sendPacketERNS_10PacketInfoE+0xda>
        explicit UdpConnection(uint16_t port): port(port) {
 800bece:	2300      	movs	r3, #0
                LOCK_TCPIP_CORE();
 800bed0:	482c      	ldr	r0, [pc, #176]	; (800bf84 <_ZN4rtps9UdpDriver10sendPacketERNS_10PacketInfoE+0xe4>)
 800bed2:	f8ad 5004 	strh.w	r5, [sp, #4]
 800bed6:	9300      	str	r3, [sp, #0]
 800bed8:	f7fd fdc6 	bl	8009a68 <sys_mutex_lock>
            pcb =  udp_new();
 800bedc:	f7fa ff78 	bl	8006dd0 <udp_new>
 800bee0:	9000      	str	r0, [sp, #0]
                UNLOCK_TCPIP_CORE();
 800bee2:	4828      	ldr	r0, [pc, #160]	; (800bf84 <_ZN4rtps9UdpDriver10sendPacketERNS_10PacketInfoE+0xe4>)
 800bee4:	f7fd fdc6 	bl	8009a74 <sys_mutex_unlock>
                LOCK_TCPIP_CORE();
 800bee8:	4826      	ldr	r0, [pc, #152]	; (800bf84 <_ZN4rtps9UdpDriver10sendPacketERNS_10PacketInfoE+0xe4>)
 800beea:	f7fd fdbd 	bl	8009a68 <sys_mutex_lock>
        err_t err = udp_bind(udp_conn.pcb, IP_ADDR_ANY, receivePort); //to receive multicast
 800beee:	462a      	mov	r2, r5
 800bef0:	4925      	ldr	r1, [pc, #148]	; (800bf88 <_ZN4rtps9UdpDriver10sendPacketERNS_10PacketInfoE+0xe8>)
 800bef2:	9800      	ldr	r0, [sp, #0]
 800bef4:	f7fa fedc 	bl	8006cb0 <udp_bind>
        if(err != ERR_OK && err != ERR_USE){
 800bef8:	b148      	cbz	r0, 800bf0e <_ZN4rtps9UdpDriver10sendPacketERNS_10PacketInfoE+0x6e>
 800befa:	3008      	adds	r0, #8
 800befc:	d007      	beq.n	800bf0e <_ZN4rtps9UdpDriver10sendPacketERNS_10PacketInfoE+0x6e>
                UNLOCK_TCPIP_CORE();
 800befe:	4821      	ldr	r0, [pc, #132]	; (800bf84 <_ZN4rtps9UdpDriver10sendPacketERNS_10PacketInfoE+0xe4>)
 800bf00:	f7fd fdb8 	bl	8009a74 <sys_mutex_unlock>
    UdpConnection udp_conn(receivePort);
 800bf04:	4668      	mov	r0, sp
 800bf06:	f7fe fde1 	bl	800aacc <_ZN4rtps13UdpConnectionD1Ev>
#endif
        return;
    }

    sendPacket(*p_conn, packet.destAddr, packet.destPort, *packet.buffer.firstElement);
}
 800bf0a:	b003      	add	sp, #12
 800bf0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        udp_recv(udp_conn.pcb, m_rxCallback, m_callbackArgs);
 800bf0e:	e9d4 1215 	ldrd	r1, r2, [r4, #84]	; 0x54
 800bf12:	9800      	ldr	r0, [sp, #0]
 800bf14:	f7fa ff3c 	bl	8006d90 <udp_recv>
 800bf18:	481a      	ldr	r0, [pc, #104]	; (800bf84 <_ZN4rtps9UdpDriver10sendPacketERNS_10PacketInfoE+0xe4>)
 800bf1a:	f7fd fdab 	bl	8009a74 <sys_mutex_unlock>
    m_conns[m_numConns] = std::move(udp_conn);
 800bf1e:	6d25      	ldr	r5, [r4, #80]	; 0x50
            port = other.port;
 800bf20:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 800bf24:	00eb      	lsls	r3, r5, #3
 800bf26:	18e7      	adds	r7, r4, r3
 800bf28:	80ba      	strh	r2, [r7, #4]
            if (pcb != nullptr) {
 800bf2a:	f854 2035 	ldr.w	r2, [r4, r5, lsl #3]
 800bf2e:	b15a      	cbz	r2, 800bf48 <_ZN4rtps9UdpDriver10sendPacketERNS_10PacketInfoE+0xa8>
                LOCK_TCPIP_CORE();
 800bf30:	4814      	ldr	r0, [pc, #80]	; (800bf84 <_ZN4rtps9UdpDriver10sendPacketERNS_10PacketInfoE+0xe4>)
 800bf32:	f7fd fd99 	bl	8009a68 <sys_mutex_lock>
                udp_remove(pcb);
 800bf36:	f854 0035 	ldr.w	r0, [r4, r5, lsl #3]
 800bf3a:	f7fa ff2d 	bl	8006d98 <udp_remove>
                UNLOCK_TCPIP_CORE();
 800bf3e:	4811      	ldr	r0, [pc, #68]	; (800bf84 <_ZN4rtps9UdpDriver10sendPacketERNS_10PacketInfoE+0xe4>)
 800bf40:	f7fd fd98 	bl	8009a74 <sys_mutex_unlock>
 800bf44:	6d25      	ldr	r5, [r4, #80]	; 0x50
 800bf46:	00eb      	lsls	r3, r5, #3
            pcb = other.pcb;
 800bf48:	9900      	ldr	r1, [sp, #0]
    m_numConns++;
 800bf4a:	3501      	adds	r5, #1
            other.pcb = nullptr;
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	a802      	add	r0, sp, #8
            pcb = other.pcb;
 800bf50:	6039      	str	r1, [r7, #0]
            other.pcb = nullptr;
 800bf52:	f840 2d08 	str.w	r2, [r0, #-8]!
 800bf56:	6525      	str	r5, [r4, #80]	; 0x50
 800bf58:	441c      	add	r4, r3
    UdpConnection udp_conn(receivePort);
 800bf5a:	f7fe fdb7 	bl	800aacc <_ZN4rtps13UdpConnectionD1Ev>
    sendPacket(*p_conn, packet.destAddr, packet.destPort, *packet.buffer.firstElement);
 800bf5e:	68f5      	ldr	r5, [r6, #12]
 800bf60:	8937      	ldrh	r7, [r6, #8]
                LOCK_TCPIP_CORE();
 800bf62:	4808      	ldr	r0, [pc, #32]	; (800bf84 <_ZN4rtps9UdpDriver10sendPacketERNS_10PacketInfoE+0xe4>)
 800bf64:	f7fd fd80 	bl	8009a68 <sys_mutex_lock>
        err = udp_sendto(conn.pcb, &buffer, &destAddr, destPort);
 800bf68:	463b      	mov	r3, r7
 800bf6a:	4629      	mov	r1, r5
 800bf6c:	1d32      	adds	r2, r6, #4
 800bf6e:	6820      	ldr	r0, [r4, #0]
 800bf70:	f7fa fd9c 	bl	8006aac <udp_sendto>
                UNLOCK_TCPIP_CORE();
 800bf74:	4803      	ldr	r0, [pc, #12]	; (800bf84 <_ZN4rtps9UdpDriver10sendPacketERNS_10PacketInfoE+0xe4>)
 800bf76:	f7fd fd7d 	bl	8009a74 <sys_mutex_unlock>
}
 800bf7a:	b003      	add	sp, #12
 800bf7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf7e:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 800bf82:	e7ec      	b.n	800bf5e <_ZN4rtps9UdpDriver10sendPacketERNS_10PacketInfoE+0xbe>
 800bf84:	20005a18 	.word	0x20005a18
 800bf88:	08010d14 	.word	0x08010d14

0800bf8c <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer>:
        m_defaultUnicastLocatorList[i].setInvalid();
        m_defaultMulticastLocatorList[i].setInvalid();
    }
}

bool ParticipantProxyData::readFromUcdrBuffer(ucdrBuffer& buffer){
 800bf8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf90:	4605      	mov	r5, r0
    m_manualLivelinessCount = Count_t{1};
 800bf92:	2001      	movs	r0, #1
            locator.port = port;
            return locator;
        }

        void setInvalid(){
            kind = LocatorKind_t::LOCATOR_KIND_INVALID;
 800bf94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    m_guid = Guid{GUIDPREFIX_UNKNOWN, ENTITYID_UNKNOWN};
 800bf98:	2200      	movs	r2, #0
 800bf9a:	1cae      	adds	r6, r5, #2
bool ParticipantProxyData::readFromUcdrBuffer(ucdrBuffer& buffer){
 800bf9c:	b082      	sub	sp, #8
 800bf9e:	460c      	mov	r4, r1
                break;
            }
            case ParameterId::PID_PAD:
            {
                buffer.iterator+=length;
                buffer.last_data_size = 1;
 800bfa0:	4607      	mov	r7, r0
    m_guid = Guid{GUIDPREFIX_UNKNOWN, ENTITYID_UNKNOWN};
 800bfa2:	f8c5 2002 	str.w	r2, [r5, #2]
 800bfa6:	6072      	str	r2, [r6, #4]
 800bfa8:	60b2      	str	r2, [r6, #8]
 800bfaa:	60f2      	str	r2, [r6, #12]
    m_expectsInlineQos = false;
 800bfac:	752a      	strb	r2, [r5, #20]
    m_manualLivelinessCount = Count_t{1};
 800bfae:	f8c5 01fc 	str.w	r0, [r5, #508]	; 0x1fc
 800bfb2:	61eb      	str	r3, [r5, #28]
 800bfb4:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
 800bfb8:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
 800bfbc:	f8c5 3184 	str.w	r3, [r5, #388]	; 0x184
 800bfc0:	636b      	str	r3, [r5, #52]	; 0x34
 800bfc2:	f8c5 30ac 	str.w	r3, [r5, #172]	; 0xac
 800bfc6:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
 800bfca:	f8c5 319c 	str.w	r3, [r5, #412]	; 0x19c
 800bfce:	64eb      	str	r3, [r5, #76]	; 0x4c
 800bfd0:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
 800bfd4:	f8c5 313c 	str.w	r3, [r5, #316]	; 0x13c
 800bfd8:	f8c5 31b4 	str.w	r3, [r5, #436]	; 0x1b4
 800bfdc:	666b      	str	r3, [r5, #100]	; 0x64
 800bfde:	f8c5 30dc 	str.w	r3, [r5, #220]	; 0xdc
 800bfe2:	f8c5 3154 	str.w	r3, [r5, #340]	; 0x154
 800bfe6:	f8c5 31cc 	str.w	r3, [r5, #460]	; 0x1cc
 800bfea:	67eb      	str	r3, [r5, #124]	; 0x7c
 800bfec:	f8c5 30f4 	str.w	r3, [r5, #244]	; 0xf4
 800bff0:	f8c5 316c 	str.w	r3, [r5, #364]	; 0x16c
 800bff4:	f8c5 31e4 	str.w	r3, [r5, #484]	; 0x1e4
    while(ucdr_buffer_remaining(&buffer) >= 4){
 800bff8:	4620      	mov	r0, r4
 800bffa:	f003 faa5 	bl	800f548 <ucdr_buffer_remaining>
 800bffe:	2803      	cmp	r0, #3
 800c000:	d974      	bls.n	800c0ec <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x160>
        ucdr_deserialize_uint16_t(&buffer, reinterpret_cast<uint16_t*>(&pid));
 800c002:	a901      	add	r1, sp, #4
 800c004:	4620      	mov	r0, r4
 800c006:	f003 fbb7 	bl	800f778 <ucdr_deserialize_uint16_t>
        ucdr_deserialize_uint16_t(&buffer, &length);
 800c00a:	f10d 0106 	add.w	r1, sp, #6
 800c00e:	4620      	mov	r0, r4
 800c010:	f003 fbb2 	bl	800f778 <ucdr_deserialize_uint16_t>
        if(ucdr_buffer_remaining(&buffer) < length){
 800c014:	4620      	mov	r0, r4
 800c016:	f003 fa97 	bl	800f548 <ucdr_buffer_remaining>
 800c01a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c01e:	4290      	cmp	r0, r2
 800c020:	d360      	bcc.n	800c0e4 <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x158>
        switch(pid){
 800c022:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800c026:	2b70      	cmp	r3, #112	; 0x70
 800c028:	d85c      	bhi.n	800c0e4 <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x158>
 800c02a:	e8df f003 	tbb	[pc, r3]
 800c02e:	5f39      	.short	0x5f39
 800c030:	5b5b5bd8 	.word	0x5b5b5bd8
 800c034:	5b5b5b5b 	.word	0x5b5b5b5b
 800c038:	5b5b5b5b 	.word	0x5b5b5b5b
 800c03c:	5b5b5b5b 	.word	0x5b5b5b5b
 800c040:	cc5b5b5b 	.word	0xcc5b5b5b
 800c044:	5b5b5bc5 	.word	0x5b5b5bc5
 800c048:	5b5b5b5b 	.word	0x5b5b5b5b
 800c04c:	5b5b5b5b 	.word	0x5b5b5b5b
 800c050:	5b5b5b5b 	.word	0x5b5b5b5b
 800c054:	5b5b5b5b 	.word	0x5b5b5b5b
 800c058:	5b395b5b 	.word	0x5b395b5b
 800c05c:	475b5b5b 	.word	0x475b5b5b
 800c060:	5b5b95b1 	.word	0x5b5b95b1
 800c064:	5b5b5b5b 	.word	0x5b5b5b5b
 800c068:	5b5b5b5b 	.word	0x5b5b5b5b
 800c06c:	5b5b5b5b 	.word	0x5b5b5b5b
 800c070:	5b5b8f5b 	.word	0x5b5b8f5b
 800c074:	5b7a5b5b 	.word	0x5b7a5b5b
 800c078:	5b5b5b5b 	.word	0x5b5b5b5b
 800c07c:	5b695b5b 	.word	0x5b695b5b
 800c080:	5b5b5b5b 	.word	0x5b5b5b5b
 800c084:	39635b5b 	.word	0x39635b5b
 800c088:	5b5b5b5b 	.word	0x5b5b5b5b
 800c08c:	5b5b5b5b 	.word	0x5b5b5b5b
 800c090:	5b5b5b39 	.word	0x5b5b5b39
 800c094:	5b5b5b5b 	.word	0x5b5b5b5b
 800c098:	5b5b5b5b 	.word	0x5b5b5b5b
 800c09c:	5b5b      	.short	0x5b5b
 800c09e:	3d          	.byte	0x3d
 800c09f:	00          	.byte	0x00
                buffer.iterator+=length;
 800c0a0:	68a3      	ldr	r3, [r4, #8]
                buffer.last_data_size = 1;
 800c0a2:	6127      	str	r7, [r4, #16]
                buffer.iterator+=length;
 800c0a4:	441a      	add	r2, r3
 800c0a6:	60a2      	str	r2, [r4, #8]
                return false;
            }

        }
        // Parameter lists are 4-byte aligned
        uint32_t alignment = ucdr_buffer_alignment(&buffer, 4);
 800c0a8:	2104      	movs	r1, #4
 800c0aa:	4620      	mov	r0, r4
 800c0ac:	f003 fa36 	bl	800f51c <ucdr_buffer_alignment>
        buffer.iterator += alignment;
 800c0b0:	68a3      	ldr	r3, [r4, #8]
        buffer.last_data_size = 4;
 800c0b2:	2204      	movs	r2, #4
        buffer.iterator += alignment;
 800c0b4:	4418      	add	r0, r3
        buffer.last_data_size = 4;
 800c0b6:	6122      	str	r2, [r4, #16]
        buffer.iterator += alignment;
 800c0b8:	60a0      	str	r0, [r4, #8]
    while(ucdr_buffer_remaining(&buffer) >= 4){
 800c0ba:	e79d      	b.n	800bff8 <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x6c>
        }

        bool isValid() const{
            return kind != LocatorKind_t::LOCATOR_KIND_INVALID;
 800c0bc:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
      { return _AT_Type::_S_ptr(_M_elems); }
 800c0c0:	f505 7886 	add.w	r8, r5, #268	; 0x10c
      { return iterator(data() + _Nm); }
 800c0c4:	f505 71c2 	add.w	r1, r5, #388	; 0x184
    return true;
}

bool ParticipantProxyData::readLocatorIntoList(ucdrBuffer& buffer, std::array<Locator, Config::SPDP_MAX_NUM_LOCATORS>& list){
    for(auto& loc : list){
        if(!loc.isValid()){
 800c0c8:	3301      	adds	r3, #1
 800c0ca:	d04d      	beq.n	800c168 <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x1dc>
 800c0cc:	f505 7392 	add.w	r3, r5, #292	; 0x124
 800c0d0:	e003      	b.n	800c0da <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x14e>
 800c0d2:	f8d8 2000 	ldr.w	r2, [r8]
 800c0d6:	3201      	adds	r2, #1
 800c0d8:	d046      	beq.n	800c168 <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x1dc>
    for(auto& loc : list){
 800c0da:	4299      	cmp	r1, r3
 800c0dc:	4698      	mov	r8, r3
 800c0de:	f103 0318 	add.w	r3, r3, #24
 800c0e2:	d1f6      	bne.n	800c0d2 <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x146>
                return false;
 800c0e4:	2000      	movs	r0, #0
}
 800c0e6:	b002      	add	sp, #8
 800c0e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                return true;
 800c0ec:	2001      	movs	r0, #1
}
 800c0ee:	b002      	add	sp, #8
 800c0f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                ucdr_deserialize_uint32_t(&buffer, &m_availableBuiltInEndpoints);
 800c0f4:	f105 0118 	add.w	r1, r5, #24
 800c0f8:	4620      	mov	r0, r4
 800c0fa:	f003 fb65 	bl	800f7c8 <ucdr_deserialize_uint32_t>
                break;
 800c0fe:	e7d3      	b.n	800c0a8 <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x11c>
                ucdr_deserialize_array_uint8_t(&buffer, m_guid.prefix.id.data(), m_guid.prefix.id.size());
 800c100:	4631      	mov	r1, r6
 800c102:	220c      	movs	r2, #12
 800c104:	4620      	mov	r0, r4
 800c106:	f003 fa65 	bl	800f5d4 <ucdr_deserialize_array_uint8_t>
                ucdr_deserialize_array_uint8_t(&buffer, m_guid.entityId.entityKey.data(), m_guid.entityId.entityKey.size());
 800c10a:	f105 010e 	add.w	r1, r5, #14
 800c10e:	2203      	movs	r2, #3
 800c110:	4620      	mov	r0, r4
 800c112:	f003 fa5f 	bl	800f5d4 <ucdr_deserialize_array_uint8_t>
                ucdr_deserialize_uint8_t(&buffer, reinterpret_cast<uint8_t*>(&m_guid.entityId.entityKind));
 800c116:	f105 0111 	add.w	r1, r5, #17
 800c11a:	4620      	mov	r0, r4
 800c11c:	f003 fb18 	bl	800f750 <ucdr_deserialize_uint8_t>
                break;
 800c120:	e7c2      	b.n	800c0a8 <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x11c>
 800c122:	f8d5 3184 	ldr.w	r3, [r5, #388]	; 0x184
      { return _AT_Type::_S_ptr(_M_elems); }
 800c126:	f505 78c2 	add.w	r8, r5, #388	; 0x184
      { return iterator(data() + _Nm); }
 800c12a:	f505 71fe 	add.w	r1, r5, #508	; 0x1fc
        if(!loc.isValid()){
 800c12e:	3301      	adds	r3, #1
 800c130:	d01a      	beq.n	800c168 <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x1dc>
 800c132:	f505 73ce 	add.w	r3, r5, #412	; 0x19c
 800c136:	e003      	b.n	800c140 <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x1b4>
 800c138:	f8d8 2000 	ldr.w	r2, [r8]
 800c13c:	3201      	adds	r2, #1
 800c13e:	d013      	beq.n	800c168 <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x1dc>
    for(auto& loc : list){
 800c140:	4299      	cmp	r1, r3
 800c142:	4698      	mov	r8, r3
 800c144:	f103 0318 	add.w	r3, r3, #24
 800c148:	d1f6      	bne.n	800c138 <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x1ac>
 800c14a:	e7cb      	b.n	800c0e4 <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x158>
                ucdr_deserialize_bool(&buffer, &m_expectsInlineQos);
 800c14c:	f105 0114 	add.w	r1, r5, #20
 800c150:	4620      	mov	r0, r4
 800c152:	f003 fae9 	bl	800f728 <ucdr_deserialize_bool>
                break;
 800c156:	e7a7      	b.n	800c0a8 <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x11c>
 800c158:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
      { return _AT_Type::_S_ptr(_M_elems); }
 800c15c:	f105 0894 	add.w	r8, r5, #148	; 0x94
      { return iterator(data() + _Nm); }
 800c160:	f505 7286 	add.w	r2, r5, #268	; 0x10c
        if(!loc.isValid()){
 800c164:	3301      	adds	r3, #1
 800c166:	d10e      	bne.n	800c186 <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x1fa>
        }

        bool readFromUcdrBuffer(ucdrBuffer& buffer){
            if(ucdr_buffer_remaining(&buffer) < sizeof(Locator)){
 800c168:	4620      	mov	r0, r4
 800c16a:	f003 f9ed 	bl	800f548 <ucdr_buffer_remaining>
 800c16e:	2817      	cmp	r0, #23
 800c170:	d99a      	bls.n	800c0a8 <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x11c>
                return false;
            }else{
                ucdr_deserialize_array_uint8_t(&buffer, reinterpret_cast<uint8_t*>(this), sizeof(Locator));
 800c172:	4641      	mov	r1, r8
 800c174:	2218      	movs	r2, #24
 800c176:	4620      	mov	r0, r4
 800c178:	f003 fa2c 	bl	800f5d4 <ucdr_deserialize_array_uint8_t>
 800c17c:	e794      	b.n	800c0a8 <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x11c>
            return kind != LocatorKind_t::LOCATOR_KIND_INVALID;
 800c17e:	f8d8 3000 	ldr.w	r3, [r8]
 800c182:	3301      	adds	r3, #1
 800c184:	d0f0      	beq.n	800c168 <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x1dc>
    for(auto& loc : list){
 800c186:	f108 0818 	add.w	r8, r8, #24
 800c18a:	4542      	cmp	r2, r8
 800c18c:	d1f7      	bne.n	800c17e <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x1f2>
 800c18e:	e7a9      	b.n	800c0e4 <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x158>
 800c190:	69eb      	ldr	r3, [r5, #28]
      { return _AT_Type::_S_ptr(_M_elems); }
 800c192:	f105 081c 	add.w	r8, r5, #28
      { return iterator(data() + _Nm); }
 800c196:	f105 0294 	add.w	r2, r5, #148	; 0x94
        if(!loc.isValid()){
 800c19a:	3301      	adds	r3, #1
 800c19c:	d0e4      	beq.n	800c168 <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x1dc>
    for(auto& loc : list){
 800c19e:	f108 0818 	add.w	r8, r8, #24
 800c1a2:	4542      	cmp	r2, r8
 800c1a4:	d09e      	beq.n	800c0e4 <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x158>
 800c1a6:	f8d8 3000 	ldr.w	r3, [r8]
        if(!loc.isValid()){
 800c1aa:	3301      	adds	r3, #1
 800c1ac:	d0dc      	beq.n	800c168 <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x1dc>
    for(auto& loc : list){
 800c1ae:	f108 0818 	add.w	r8, r8, #24
 800c1b2:	4542      	cmp	r2, r8
 800c1b4:	d1f7      	bne.n	800c1a6 <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x21a>
 800c1b6:	e795      	b.n	800c0e4 <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x158>
                ucdr_deserialize_array_uint8_t(&buffer, m_vendorId.vendorId.data(), m_vendorId.vendorId.size());
 800c1b8:	2202      	movs	r2, #2
 800c1ba:	f105 0112 	add.w	r1, r5, #18
 800c1be:	4620      	mov	r0, r4
 800c1c0:	f003 fa08 	bl	800f5d4 <ucdr_deserialize_array_uint8_t>
                break;
 800c1c4:	e770      	b.n	800c0a8 <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x11c>
                ucdr_deserialize_uint8_t(&buffer, &m_protocolVersion.major);
 800c1c6:	4629      	mov	r1, r5
 800c1c8:	4620      	mov	r0, r4
 800c1ca:	f003 fac1 	bl	800f750 <ucdr_deserialize_uint8_t>
                if(m_protocolVersion.major < PROTOCOLVERSION.major){
 800c1ce:	782b      	ldrb	r3, [r5, #0]
 800c1d0:	2b01      	cmp	r3, #1
 800c1d2:	d987      	bls.n	800c0e4 <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x158>
                    ucdr_deserialize_uint8_t(&buffer, &m_protocolVersion.minor);
 800c1d4:	1c69      	adds	r1, r5, #1
 800c1d6:	4620      	mov	r0, r4
 800c1d8:	f003 faba 	bl	800f750 <ucdr_deserialize_uint8_t>
                break;
 800c1dc:	e764      	b.n	800c0a8 <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x11c>
                ucdr_deserialize_int32_t(&buffer, &m_leaseDuration.seconds);
 800c1de:	f505 7100 	add.w	r1, r5, #512	; 0x200
 800c1e2:	4620      	mov	r0, r4
 800c1e4:	f003 fb1e 	bl	800f824 <ucdr_deserialize_int32_t>
                ucdr_deserialize_uint32_t(&buffer, &m_leaseDuration.fraction);
 800c1e8:	f505 7101 	add.w	r1, r5, #516	; 0x204
 800c1ec:	4620      	mov	r0, r4
 800c1ee:	f003 faeb 	bl	800f7c8 <ucdr_deserialize_uint32_t>
                break;
 800c1f2:	e759      	b.n	800c0a8 <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer+0x11c>

0800c1f4 <_ZN4rtps9SEDPAgent4initERNS_11ParticipantERKNS_16BuiltInEndpointsE>:
		line_ = (line_+1)%30; 							 \
		}

#endif

void SEDPAgent::init(Participant& part, const BuiltInEndpoints& endpoints){
 800c1f4:	b570      	push	{r4, r5, r6, lr}
 800c1f6:	4606      	mov	r6, r0
    // TODO move
    if(sys_mutex_new(&m_mutex) != ERR_OK){
 800c1f8:	3004      	adds	r0, #4
void SEDPAgent::init(Participant& part, const BuiltInEndpoints& endpoints){
 800c1fa:	460d      	mov	r5, r1
 800c1fc:	4614      	mov	r4, r2
    if(sys_mutex_new(&m_mutex) != ERR_OK){
 800c1fe:	f7fd fc1d 	bl	8009a3c <sys_mutex_new>
 800c202:	b9d0      	cbnz	r0, 800c23a <_ZN4rtps9SEDPAgent4initERNS_11ParticipantERKNS_16BuiltInEndpointsE+0x46>
        printf("SEDPAgent failed to create mutex\n");
#endif
        return;
    }

    m_part = &part;
 800c204:	6035      	str	r5, [r6, #0]
    m_endpoints = endpoints;
 800c206:	f506 759a 	add.w	r5, r6, #308	; 0x134
 800c20a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c20c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c20e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c212:	e885 0003 	stmia.w	r5, {r0, r1}
    if(m_endpoints.sedpPubReader != nullptr){
 800c216:	f8d6 0140 	ldr.w	r0, [r6, #320]	; 0x140
 800c21a:	b120      	cbz	r0, 800c226 <_ZN4rtps9SEDPAgent4initERNS_11ParticipantERKNS_16BuiltInEndpointsE+0x32>
        m_endpoints.sedpPubReader->registerCallback(receiveCallbackPublisher, this);
 800c21c:	6803      	ldr	r3, [r0, #0]
 800c21e:	4632      	mov	r2, r6
 800c220:	4906      	ldr	r1, [pc, #24]	; (800c23c <_ZN4rtps9SEDPAgent4initERNS_11ParticipantERKNS_16BuiltInEndpointsE+0x48>)
 800c222:	685b      	ldr	r3, [r3, #4]
 800c224:	4798      	blx	r3
    }
    if(m_endpoints.sedpSubReader != nullptr){
 800c226:	f8d6 0148 	ldr.w	r0, [r6, #328]	; 0x148
 800c22a:	b130      	cbz	r0, 800c23a <_ZN4rtps9SEDPAgent4initERNS_11ParticipantERKNS_16BuiltInEndpointsE+0x46>
        m_endpoints.sedpSubReader->registerCallback(receiveCallbackSubscriber, this);
 800c22c:	6803      	ldr	r3, [r0, #0]
 800c22e:	4632      	mov	r2, r6
 800c230:	4903      	ldr	r1, [pc, #12]	; (800c240 <_ZN4rtps9SEDPAgent4initERNS_11ParticipantERKNS_16BuiltInEndpointsE+0x4c>)
 800c232:	685b      	ldr	r3, [r3, #4]
    }
}
 800c234:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_endpoints.sedpSubReader->registerCallback(receiveCallbackSubscriber, this);
 800c238:	4718      	bx	r3
}
 800c23a:	bd70      	pop	{r4, r5, r6, pc}
 800c23c:	0800c2d5 	.word	0x0800c2d5
 800c240:	0800c3bd 	.word	0x0800c3bd

0800c244 <_ZN4rtps9SEDPAgent37registerOnNewPublisherMatchedCallbackEPFvPvES1_>:


void SEDPAgent::registerOnNewPublisherMatchedCallback(void (*callback)(void* arg), void* args){
    mfp_onNewPublisherCallback = callback;
 800c244:	f8c0 114c 	str.w	r1, [r0, #332]	; 0x14c
    m_onNewPublisherArgs = args;
 800c248:	f8c0 2150 	str.w	r2, [r0, #336]	; 0x150
}
 800c24c:	4770      	bx	lr
 800c24e:	bf00      	nop

0800c250 <_ZN4rtps9SEDPAgent38registerOnNewSubscriberMatchedCallbackEPFvPvES1_>:

void SEDPAgent::registerOnNewSubscriberMatchedCallback(void (*callback)(void* arg), void* args){
    mfp_onNewSubscriberCallback = callback;
 800c250:	f8c0 1154 	str.w	r1, [r0, #340]	; 0x154
    m_onNewSubscriberArgs = args;
 800c254:	f8c0 2158 	str.w	r2, [r0, #344]	; 0x158
}
 800c258:	4770      	bx	lr
 800c25a:	bf00      	nop

0800c25c <_ZN4rtps9SEDPAgent14onNewPublisherERKNS_9TopicDataE>:
    if(topicData.readFromUcdrBuffer(cdrBuffer)){
        onNewPublisher(topicData);
    }
}

void SEDPAgent::onNewPublisher(const TopicData& writerData) {
 800c25c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c260:	4606      	mov	r6, r0
 800c262:	b08f      	sub	sp, #60	; 0x3c
	// TODO Is it okay to add Endpoint if the respective participant is unknown participant?
	if(!m_part->findRemoteParticipant(writerData.endpointGuid.prefix)){
 800c264:	6800      	ldr	r0, [r0, #0]
void SEDPAgent::onNewPublisher(const TopicData& writerData) {
 800c266:	460d      	mov	r5, r1
	if(!m_part->findRemoteParticipant(writerData.endpointGuid.prefix)){
 800c268:	f002 fd06 	bl	800ec78 <_ZN4rtps11Participant21findRemoteParticipantERKNS_12GuidPrefix_tE>
 800c26c:	b370      	cbz	r0, 800c2cc <_ZN4rtps9SEDPAgent14onNewPublisherERKNS_9TopicDataE+0x70>
		return;
	}
#if SEDP_VERBOSE
    SEDP_LOG("PUB T/D %s/%s", writerData.topicName, writerData.typeName);
#endif
	Reader* reader = m_part->getMatchingReader(writerData);
 800c26e:	4629      	mov	r1, r5
 800c270:	6830      	ldr	r0, [r6, #0]
 800c272:	f002 fca1 	bl	800ebb8 <_ZNK4rtps11Participant17getMatchingReaderERKNS_9TopicDataE>
    if(reader == nullptr){
 800c276:	4680      	mov	r8, r0
 800c278:	b340      	cbz	r0, 800c2cc <_ZN4rtps9SEDPAgent14onNewPublisherERKNS_9TopicDataE+0x70>
        }else{
            SEDP_LOG("best-effort ");
        }
        SEDP_LOG("publisher\n");
#endif
    reader->addNewMatchedWriter(WriterProxy{writerData.endpointGuid, writerData.unicastLocator});
 800c27a:	6807      	ldr	r7, [r0, #0]
                hbCount{0}, remoteLocator(loc){
 800c27c:	46ac      	mov	ip, r5
 800c27e:	6828      	ldr	r0, [r5, #0]
 800c280:	46ee      	mov	lr, sp
 800c282:	6869      	ldr	r1, [r5, #4]
 800c284:	ac08      	add	r4, sp, #32
 800c286:	68aa      	ldr	r2, [r5, #8]
 800c288:	68eb      	ldr	r3, [r5, #12]
 800c28a:	2501      	movs	r5, #1
 800c28c:	f8d7 900c 	ldr.w	r9, [r7, #12]
 800c290:	2700      	movs	r7, #0
 800c292:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c296:	f85c 0f3c 	ldr.w	r0, [ip, #60]!
 800c29a:	9704      	str	r7, [sp, #16]
 800c29c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c2a0:	f8dc 300c 	ldr.w	r3, [ip, #12]
 800c2a4:	f8dc 2008 	ldr.w	r2, [ip, #8]
 800c2a8:	9707      	str	r7, [sp, #28]
 800c2aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c2ac:	f8dc 0010 	ldr.w	r0, [ip, #16]
 800c2b0:	f8dc 1014 	ldr.w	r1, [ip, #20]
 800c2b4:	e9cd 5505 	strd	r5, r5, [sp, #20]
 800c2b8:	c403      	stmia	r4!, {r0, r1}
 800c2ba:	4640      	mov	r0, r8
 800c2bc:	4669      	mov	r1, sp
 800c2be:	47c8      	blx	r9
    if(mfp_onNewPublisherCallback != nullptr) {
 800c2c0:	f8d6 314c 	ldr.w	r3, [r6, #332]	; 0x14c
 800c2c4:	b113      	cbz	r3, 800c2cc <_ZN4rtps9SEDPAgent14onNewPublisherERKNS_9TopicDataE+0x70>
        mfp_onNewPublisherCallback(m_onNewPublisherArgs);
 800c2c6:	f8d6 0150 	ldr.w	r0, [r6, #336]	; 0x150
 800c2ca:	4798      	blx	r3
    }
}
 800c2cc:	b00f      	add	sp, #60	; 0x3c
 800c2ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c2d2:	bf00      	nop

0800c2d4 <_ZN4rtps9SEDPAgent24receiveCallbackPublisherEPvRKNS_17ReaderCacheChangeE>:
void SEDPAgent::receiveCallbackPublisher(void* callee, const ReaderCacheChange& cacheChange){
 800c2d4:	b570      	push	{r4, r5, r6, lr}
    Lock lock{m_mutex};
 800c2d6:	1d04      	adds	r4, r0, #4
void SEDPAgent::receiveCallbackPublisher(void* callee, const ReaderCacheChange& cacheChange){
 800c2d8:	460e      	mov	r6, r1
 800c2da:	b09c      	sub	sp, #112	; 0x70
 800c2dc:	4605      	mov	r5, r0
            sys_mutex_lock(&m_mutex);
 800c2de:	4620      	mov	r0, r4
 800c2e0:	f7fd fbc2 	bl	8009a68 <sys_mutex_lock>
    if(!change.copyInto(m_buffer, sizeof(m_buffer)/sizeof(m_buffer[0]))){
 800c2e4:	88f2      	ldrh	r2, [r6, #6]
            if(destSize < size){
 800c2e6:	f5b2 7f96 	cmp.w	r2, #300	; 0x12c
 800c2ea:	d819      	bhi.n	800c320 <_ZN4rtps9SEDPAgent24receiveCallbackPublisherEPvRKNS_17ReaderCacheChangeE+0x4c>
 800c2ec:	f105 0308 	add.w	r3, r5, #8
                memcpy(buffer, data, size);
 800c2f0:	6831      	ldr	r1, [r6, #0]
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	f003 fb2d 	bl	800f952 <memcpy>
    ucdr_init_buffer(&cdrBuffer, m_buffer, sizeof(m_buffer));
 800c2f8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800c2fc:	4601      	mov	r1, r0
 800c2fe:	a801      	add	r0, sp, #4
 800c300:	f003 f8e0 	bl	800f4c4 <ucdr_init_buffer>
    struct Locator{
 800c304:	2300      	movs	r3, #0
 800c306:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    if(topicData.readFromUcdrBuffer(cdrBuffer)){
 800c30a:	a901      	add	r1, sp, #4
 800c30c:	a807      	add	r0, sp, #28
 800c30e:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800c312:	e9cd 3318 	strd	r3, r3, [sp, #96]	; 0x60
 800c316:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
 800c31a:	f000 fc09 	bl	800cb30 <_ZN4rtps9TopicData18readFromUcdrBufferER10ucdrBuffer>
 800c31e:	b920      	cbnz	r0, 800c32a <_ZN4rtps9SEDPAgent24receiveCallbackPublisherEPvRKNS_17ReaderCacheChangeE+0x56>
            sys_mutex_unlock(&m_mutex);
 800c320:	4620      	mov	r0, r4
 800c322:	f7fd fba7 	bl	8009a74 <sys_mutex_unlock>
}
 800c326:	b01c      	add	sp, #112	; 0x70
 800c328:	bd70      	pop	{r4, r5, r6, pc}
        onNewPublisher(topicData);
 800c32a:	a907      	add	r1, sp, #28
 800c32c:	4628      	mov	r0, r5
 800c32e:	f7ff ff95 	bl	800c25c <_ZN4rtps9SEDPAgent14onNewPublisherERKNS_9TopicDataE>
 800c332:	4620      	mov	r0, r4
 800c334:	f7fd fb9e 	bl	8009a74 <sys_mutex_unlock>
}
 800c338:	b01c      	add	sp, #112	; 0x70
 800c33a:	bd70      	pop	{r4, r5, r6, pc}

0800c33c <_ZN4rtps9SEDPAgent15onNewSubscriberERKNS_9TopicDataE>:
    if(topicData.readFromUcdrBuffer(cdrBuffer)){
        onNewSubscriber(topicData);
    }
}

void SEDPAgent::onNewSubscriber(const TopicData& readerData) {
 800c33c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c340:	4606      	mov	r6, r0
 800c342:	b097      	sub	sp, #92	; 0x5c
    if(!m_part->findRemoteParticipant(readerData.endpointGuid.prefix)){
 800c344:	6800      	ldr	r0, [r0, #0]
void SEDPAgent::onNewSubscriber(const TopicData& readerData) {
 800c346:	460d      	mov	r5, r1
    if(!m_part->findRemoteParticipant(readerData.endpointGuid.prefix)){
 800c348:	f002 fc96 	bl	800ec78 <_ZN4rtps11Participant21findRemoteParticipantERKNS_12GuidPrefix_tE>
 800c34c:	b398      	cbz	r0, 800c3b6 <_ZN4rtps9SEDPAgent15onNewSubscriberERKNS_9TopicDataE+0x7a>
		return;
	}
    Writer* writer = m_part->getMatchingWriter(readerData);
 800c34e:	4629      	mov	r1, r5
 800c350:	6830      	ldr	r0, [r6, #0]
 800c352:	f002 fc13 	bl	800eb7c <_ZNK4rtps11Participant17getMatchingWriterERKNS_9TopicDataE>
#if SEDP_VERBOSE
    SEDP_LOG("SUB T/D %s/%s", readerData.topicName, readerData.typeName);
#endif
    if(writer == nullptr) {
 800c356:	4680      	mov	r8, r0
 800c358:	b368      	cbz	r0, 800c3b6 <_ZN4rtps9SEDPAgent15onNewSubscriberERKNS_9TopicDataE+0x7a>
        }else{
            SEDP_LOG("best-effort ");
        }
        SEDP_LOG("Subscriber\n");
#endif
    writer->addNewMatchedReader(ReaderProxy{readerData.endpointGuid, readerData.unicastLocator});
 800c35a:	6807      	ldr	r7, [r0, #0]
        Count_t ackNackCount;

        ReaderProxy() : remoteReaderGuid({GUIDPREFIX_UNKNOWN, ENTITYID_UNKNOWN}){};
        ReaderProxy(const Guid& guid, const Locator& loc)
            : remoteReaderGuid(guid), remoteLocator(loc),
              ackNackSet(), ackNackCount{0}{};
 800c35c:	46ac      	mov	ip, r5
 800c35e:	6828      	ldr	r0, [r5, #0]
 800c360:	46ee      	mov	lr, sp
 800c362:	6869      	ldr	r1, [r5, #4]
 800c364:	ac04      	add	r4, sp, #16
 800c366:	68aa      	ldr	r2, [r5, #8]
 800c368:	68eb      	ldr	r3, [r5, #12]
 800c36a:	2500      	movs	r5, #0
 800c36c:	f8d7 9000 	ldr.w	r9, [r7]
        SequenceNumberSet() = default;
 800c370:	2720      	movs	r7, #32
 800c372:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c376:	f85c 0f3c 	ldr.w	r0, [ip, #60]!
 800c37a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800c37e:	f8dc 2008 	ldr.w	r2, [ip, #8]
 800c382:	f8dc 300c 	ldr.w	r3, [ip, #12]
 800c386:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c388:	f8dc 0010 	ldr.w	r0, [ip, #16]
 800c38c:	463a      	mov	r2, r7
 800c38e:	f8dc 1014 	ldr.w	r1, [ip, #20]
 800c392:	c403      	stmia	r4!, {r0, r1}
 800c394:	4629      	mov	r1, r5
 800c396:	a80d      	add	r0, sp, #52	; 0x34
 800c398:	970c      	str	r7, [sp, #48]	; 0x30
 800c39a:	e9cd 550a 	strd	r5, r5, [sp, #40]	; 0x28
 800c39e:	f003 fae3 	bl	800f968 <memset>
 800c3a2:	9515      	str	r5, [sp, #84]	; 0x54
 800c3a4:	4640      	mov	r0, r8
 800c3a6:	4669      	mov	r1, sp
 800c3a8:	47c8      	blx	r9
    if(mfp_onNewSubscriberCallback != nullptr){
 800c3aa:	f8d6 3154 	ldr.w	r3, [r6, #340]	; 0x154
 800c3ae:	b113      	cbz	r3, 800c3b6 <_ZN4rtps9SEDPAgent15onNewSubscriberERKNS_9TopicDataE+0x7a>
        mfp_onNewSubscriberCallback(m_onNewSubscriberArgs);
 800c3b0:	f8d6 0158 	ldr.w	r0, [r6, #344]	; 0x158
 800c3b4:	4798      	blx	r3
    }
}
 800c3b6:	b017      	add	sp, #92	; 0x5c
 800c3b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800c3bc <_ZN4rtps9SEDPAgent25receiveCallbackSubscriberEPvRKNS_17ReaderCacheChangeE>:
void SEDPAgent::receiveCallbackSubscriber(void* callee, const ReaderCacheChange& cacheChange){
 800c3bc:	b570      	push	{r4, r5, r6, lr}
	Lock lock{m_mutex};
 800c3be:	1d04      	adds	r4, r0, #4
void SEDPAgent::receiveCallbackSubscriber(void* callee, const ReaderCacheChange& cacheChange){
 800c3c0:	460e      	mov	r6, r1
 800c3c2:	b09c      	sub	sp, #112	; 0x70
 800c3c4:	4605      	mov	r5, r0
            sys_mutex_lock(&m_mutex);
 800c3c6:	4620      	mov	r0, r4
 800c3c8:	f7fd fb4e 	bl	8009a68 <sys_mutex_lock>
    if(!change.copyInto(m_buffer, sizeof(m_buffer)/sizeof(m_buffer[0]))){
 800c3cc:	88f2      	ldrh	r2, [r6, #6]
            if(destSize < size){
 800c3ce:	f5b2 7f96 	cmp.w	r2, #300	; 0x12c
 800c3d2:	d819      	bhi.n	800c408 <_ZN4rtps9SEDPAgent25receiveCallbackSubscriberEPvRKNS_17ReaderCacheChangeE+0x4c>
 800c3d4:	f105 0308 	add.w	r3, r5, #8
                memcpy(buffer, data, size);
 800c3d8:	6831      	ldr	r1, [r6, #0]
 800c3da:	4618      	mov	r0, r3
 800c3dc:	f003 fab9 	bl	800f952 <memcpy>
    ucdr_init_buffer(&cdrBuffer, m_buffer, sizeof(m_buffer));
 800c3e0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800c3e4:	4601      	mov	r1, r0
 800c3e6:	a801      	add	r0, sp, #4
 800c3e8:	f003 f86c 	bl	800f4c4 <ucdr_init_buffer>
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    if(topicData.readFromUcdrBuffer(cdrBuffer)){
 800c3f2:	a901      	add	r1, sp, #4
 800c3f4:	a807      	add	r0, sp, #28
 800c3f6:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800c3fa:	e9cd 3318 	strd	r3, r3, [sp, #96]	; 0x60
 800c3fe:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
 800c402:	f000 fb95 	bl	800cb30 <_ZN4rtps9TopicData18readFromUcdrBufferER10ucdrBuffer>
 800c406:	b920      	cbnz	r0, 800c412 <_ZN4rtps9SEDPAgent25receiveCallbackSubscriberEPvRKNS_17ReaderCacheChangeE+0x56>
            sys_mutex_unlock(&m_mutex);
 800c408:	4620      	mov	r0, r4
 800c40a:	f7fd fb33 	bl	8009a74 <sys_mutex_unlock>
}
 800c40e:	b01c      	add	sp, #112	; 0x70
 800c410:	bd70      	pop	{r4, r5, r6, pc}
        onNewSubscriber(topicData);
 800c412:	a907      	add	r1, sp, #28
 800c414:	4628      	mov	r0, r5
 800c416:	f7ff ff91 	bl	800c33c <_ZN4rtps9SEDPAgent15onNewSubscriberERKNS_9TopicDataE>
 800c41a:	4620      	mov	r0, r4
 800c41c:	f7fd fb2a 	bl	8009a74 <sys_mutex_unlock>
}
 800c420:	b01c      	add	sp, #112	; 0x70
 800c422:	bd70      	pop	{r4, r5, r6, pc}

0800c424 <_ZN4rtps9SEDPAgent9addWriterERNS_6WriterE>:

void SEDPAgent::addWriter(Writer& writer){
    if(m_endpoints.sedpPubWriter == nullptr){
 800c424:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
 800c428:	b123      	cbz	r3, 800c434 <_ZN4rtps9SEDPAgent9addWriterERNS_6WriterE+0x10>
        return;
    }
    EntityKind_t writerKind = writer.m_attributes.endpointGuid.entityId.entityKind;
    if(writerKind == EntityKind_t::BUILD_IN_WRITER_WITH_KEY || writerKind == EntityKind_t::BUILD_IN_WRITER_WITHOUT_KEY){
 800c42a:	7ccb      	ldrb	r3, [r1, #19]
 800c42c:	333e      	adds	r3, #62	; 0x3e
 800c42e:	b2db      	uxtb	r3, r3
 800c430:	2b01      	cmp	r3, #1
 800c432:	d800      	bhi.n	800c436 <_ZN4rtps9SEDPAgent9addWriterERNS_6WriterE+0x12>
 800c434:	4770      	bx	lr
void SEDPAgent::addWriter(Writer& writer){
 800c436:	b5f0      	push	{r4, r5, r6, r7, lr}
        return; // No need to announce builtin endpoints
    }

    Lock lock{m_mutex};
 800c438:	1d06      	adds	r6, r0, #4
void SEDPAgent::addWriter(Writer& writer){
 800c43a:	b087      	sub	sp, #28
    ucdrBuffer microbuffer;
    ucdr_init_buffer(&microbuffer, m_buffer, sizeof(m_buffer)/sizeof(m_buffer[0]));
 800c43c:	f100 0708 	add.w	r7, r0, #8
 800c440:	4604      	mov	r4, r0
            sys_mutex_lock(&m_mutex);
 800c442:	4630      	mov	r0, r6
 800c444:	460d      	mov	r5, r1
 800c446:	f7fd fb0f 	bl	8009a68 <sys_mutex_lock>
 800c44a:	4639      	mov	r1, r7
 800c44c:	4668      	mov	r0, sp
 800c44e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800c452:	f003 f837 	bl	800f4c4 <ucdr_init_buffer>
    const uint16_t zero_options = 0;

    ucdr_serialize_array_uint8_t(&microbuffer, rtps::SMElement::SCHEME_PL_CDR_LE.data(), rtps::SMElement::SCHEME_PL_CDR_LE.size());
 800c456:	2202      	movs	r2, #2
 800c458:	4668      	mov	r0, sp
 800c45a:	490e      	ldr	r1, [pc, #56]	; (800c494 <_ZN4rtps9SEDPAgent9addWriterERNS_6WriterE+0x70>)
 800c45c:	f003 f88e 	bl	800f57c <ucdr_serialize_array_uint8_t>
    ucdr_serialize_uint16_t(&microbuffer, zero_options);
 800c460:	4668      	mov	r0, sp
 800c462:	2100      	movs	r1, #0
 800c464:	f003 f8de 	bl	800f624 <ucdr_serialize_uint16_t>
    writer.m_attributes.serializeIntoUcdrBuffer(microbuffer);
 800c468:	4669      	mov	r1, sp
 800c46a:	1d28      	adds	r0, r5, #4
 800c46c:	f000 fbe2 	bl	800cc34 <_ZNK4rtps9TopicData23serializeIntoUcdrBufferER10ucdrBuffer>
    m_endpoints.sedpPubWriter->newChange(ChangeKind_t::ALIVE, m_buffer, ucdr_buffer_length(&microbuffer));
 800c470:	f8d4 413c 	ldr.w	r4, [r4, #316]	; 0x13c
 800c474:	4668      	mov	r0, sp
 800c476:	6823      	ldr	r3, [r4, #0]
 800c478:	68dd      	ldr	r5, [r3, #12]
 800c47a:	f003 f861 	bl	800f540 <ucdr_buffer_length>
 800c47e:	463a      	mov	r2, r7
 800c480:	b283      	uxth	r3, r0
 800c482:	2101      	movs	r1, #1
 800c484:	4620      	mov	r0, r4
 800c486:	47a8      	blx	r5
            sys_mutex_unlock(&m_mutex);
 800c488:	4630      	mov	r0, r6
 800c48a:	f7fd faf3 	bl	8009a74 <sys_mutex_unlock>
#if SEDP_VERBOSE
    SEDP_LOG("Added new change to sedpPubWriter.\n");
#endif
}
 800c48e:	b007      	add	sp, #28
 800c490:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c492:	bf00      	nop
 800c494:	08010d78 	.word	0x08010d78

0800c498 <_ZN4rtps9SEDPAgent9addReaderERNS_6ReaderE>:

void SEDPAgent::addReader(Reader& reader){
    if(m_endpoints.sedpSubWriter == nullptr){
 800c498:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d038      	beq.n	800c512 <_ZN4rtps9SEDPAgent9addReaderERNS_6ReaderE+0x7a>
        return;
    }

    EntityKind_t readerKind = reader.m_attributes.endpointGuid.entityId.entityKind;
 800c4a0:	7ccb      	ldrb	r3, [r1, #19]
    if(readerKind == EntityKind_t::BUILD_IN_READER_WITH_KEY || readerKind == EntityKind_t::BUILD_IN_READER_WITHOUT_KEY){
 800c4a2:	2bc7      	cmp	r3, #199	; 0xc7
 800c4a4:	d035      	beq.n	800c512 <_ZN4rtps9SEDPAgent9addReaderERNS_6ReaderE+0x7a>
void SEDPAgent::addReader(Reader& reader){
 800c4a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if(readerKind == EntityKind_t::BUILD_IN_READER_WITH_KEY || readerKind == EntityKind_t::BUILD_IN_READER_WITHOUT_KEY){
 800c4aa:	f1a3 05c4 	sub.w	r5, r3, #196	; 0xc4
void SEDPAgent::addReader(Reader& reader){
 800c4ae:	b086      	sub	sp, #24
    if(readerKind == EntityKind_t::BUILD_IN_READER_WITH_KEY || readerKind == EntityKind_t::BUILD_IN_READER_WITHOUT_KEY){
 800c4b0:	fab5 f585 	clz	r5, r5
 800c4b4:	096d      	lsrs	r5, r5, #5
 800c4b6:	bb4d      	cbnz	r5, 800c50c <_ZN4rtps9SEDPAgent9addReaderERNS_6ReaderE+0x74>
        return; // No need to announce builtin endpoints
    }

    Lock lock{m_mutex};
 800c4b8:	1d07      	adds	r7, r0, #4
    ucdrBuffer microbuffer;
    ucdr_init_buffer(&microbuffer, m_buffer, sizeof(m_buffer)/sizeof(m_buffer[0]));
 800c4ba:	f100 0808 	add.w	r8, r0, #8
 800c4be:	4604      	mov	r4, r0
 800c4c0:	460e      	mov	r6, r1
            sys_mutex_lock(&m_mutex);
 800c4c2:	4638      	mov	r0, r7
 800c4c4:	f7fd fad0 	bl	8009a68 <sys_mutex_lock>
 800c4c8:	4641      	mov	r1, r8
 800c4ca:	4668      	mov	r0, sp
 800c4cc:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800c4d0:	f002 fff8 	bl	800f4c4 <ucdr_init_buffer>
    const uint16_t zero_options = 0;

    ucdr_serialize_array_uint8_t(&microbuffer, rtps::SMElement::SCHEME_PL_CDR_LE.data(), rtps::SMElement::SCHEME_PL_CDR_LE.size());
 800c4d4:	2202      	movs	r2, #2
 800c4d6:	490f      	ldr	r1, [pc, #60]	; (800c514 <_ZN4rtps9SEDPAgent9addReaderERNS_6ReaderE+0x7c>)
 800c4d8:	4668      	mov	r0, sp
 800c4da:	f003 f84f 	bl	800f57c <ucdr_serialize_array_uint8_t>
    ucdr_serialize_uint16_t(&microbuffer, zero_options);
 800c4de:	4629      	mov	r1, r5
 800c4e0:	4668      	mov	r0, sp
 800c4e2:	f003 f89f 	bl	800f624 <ucdr_serialize_uint16_t>
    reader.m_attributes.serializeIntoUcdrBuffer(microbuffer);
 800c4e6:	4669      	mov	r1, sp
 800c4e8:	1d30      	adds	r0, r6, #4
 800c4ea:	f000 fba3 	bl	800cc34 <_ZNK4rtps9TopicData23serializeIntoUcdrBufferER10ucdrBuffer>
    m_endpoints.sedpSubWriter->newChange(ChangeKind_t::ALIVE, m_buffer, ucdr_buffer_length(&microbuffer));
 800c4ee:	f8d4 4144 	ldr.w	r4, [r4, #324]	; 0x144
 800c4f2:	4668      	mov	r0, sp
 800c4f4:	6823      	ldr	r3, [r4, #0]
 800c4f6:	68dd      	ldr	r5, [r3, #12]
 800c4f8:	f003 f822 	bl	800f540 <ucdr_buffer_length>
 800c4fc:	4642      	mov	r2, r8
 800c4fe:	b283      	uxth	r3, r0
 800c500:	2101      	movs	r1, #1
 800c502:	4620      	mov	r0, r4
 800c504:	47a8      	blx	r5
            sys_mutex_unlock(&m_mutex);
 800c506:	4638      	mov	r0, r7
 800c508:	f7fd fab4 	bl	8009a74 <sys_mutex_unlock>

#if SEDP_VERBOSE
    SEDP_LOG("Added new change to sedpSubWriter.\n");
#endif
}
 800c50c:	b006      	add	sp, #24
 800c50e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c512:	4770      	bx	lr
 800c514:	08010d78 	.word	0x08010d78

0800c518 <_ZN4rtps9SPDPAgent12runBroadcastEPv>:
void SPDPAgent::stop(){
    m_running = false;
}


void SPDPAgent::runBroadcast(void *args){
 800c518:	b538      	push	{r3, r4, r5, lr}
 800c51a:	4604      	mov	r4, r0
    SPDPAgent& agent = *static_cast<SPDPAgent*>(args);
    const DataSize_t size = ucdr_buffer_length(&agent.m_microbuffer);
 800c51c:	f500 60a9 	add.w	r0, r0, #1352	; 0x548
 800c520:	f003 f80e 	bl	800f540 <ucdr_buffer_length>
    agent.m_buildInEndpoints.spdpWriter->newChange(ChangeKind_t::ALIVE, agent.m_microbuffer.init, size);
 800c524:	6861      	ldr	r1, [r4, #4]
 800c526:	b283      	uxth	r3, r0
 800c528:	f8d4 2548 	ldr.w	r2, [r4, #1352]	; 0x548
 800c52c:	680d      	ldr	r5, [r1, #0]
 800c52e:	4608      	mov	r0, r1
 800c530:	2101      	movs	r1, #1
 800c532:	68ed      	ldr	r5, [r5, #12]
 800c534:	47a8      	blx	r5
    while(agent.m_running){
 800c536:	7f23      	ldrb	r3, [r4, #28]
 800c538:	b153      	cbz	r3, 800c550 <_ZN4rtps9SPDPAgent12runBroadcastEPv+0x38>
        sys_msleep(Config::SPDP_RESEND_PERIOD_MS);
 800c53a:	f242 7010 	movw	r0, #10000	; 0x2710
 800c53e:	f7fa f897 	bl	8006670 <sys_msleep>
        agent.m_buildInEndpoints.spdpWriter->setAllChangesToUnsent();
 800c542:	6860      	ldr	r0, [r4, #4]
 800c544:	6803      	ldr	r3, [r0, #0]
 800c546:	691b      	ldr	r3, [r3, #16]
 800c548:	4798      	blx	r3
    while(agent.m_running){
 800c54a:	7f23      	ldrb	r3, [r4, #28]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d1f4      	bne.n	800c53a <_ZN4rtps9SPDPAgent12runBroadcastEPv+0x22>
    }
}
 800c550:	bd38      	pop	{r3, r4, r5, pc}
 800c552:	bf00      	nop

0800c554 <_ZN4rtps9SPDPAgentD1Ev>:
SPDPAgent::~SPDPAgent(){
 800c554:	b510      	push	{r4, lr}
    if(initialized){
 800c556:	f890 3564 	ldrb.w	r3, [r0, #1380]	; 0x564
SPDPAgent::~SPDPAgent(){
 800c55a:	4604      	mov	r4, r0
    if(initialized){
 800c55c:	b11b      	cbz	r3, 800c566 <_ZN4rtps9SPDPAgentD1Ev+0x12>
        sys_mutex_free(&m_mutex);
 800c55e:	f500 60ac 	add.w	r0, r0, #1376	; 0x560
 800c562:	f7fd fa7d 	bl	8009a60 <sys_mutex_free>
}
 800c566:	4620      	mov	r0, r4
 800c568:	bd10      	pop	{r4, pc}
 800c56a:	bf00      	nop

0800c56c <_ZN4rtps9SPDPAgent5startEv>:
    if(m_running){
 800c56c:	7f03      	ldrb	r3, [r0, #28]
 800c56e:	b103      	cbz	r3, 800c572 <_ZN4rtps9SPDPAgent5startEv+0x6>
 800c570:	4770      	bx	lr
void SPDPAgent::start(){
 800c572:	b510      	push	{r4, lr}
    sys_thread_new("SPDPThread", runBroadcast, this, Config::SPDP_WRITER_STACKSIZE, Config::SPDP_WRITER_PRIO);
 800c574:	2103      	movs	r1, #3
void SPDPAgent::start(){
 800c576:	b082      	sub	sp, #8
    m_running = true;
 800c578:	2401      	movs	r4, #1
    sys_thread_new("SPDPThread", runBroadcast, this, Config::SPDP_WRITER_STACKSIZE, Config::SPDP_WRITER_PRIO);
 800c57a:	4602      	mov	r2, r0
 800c57c:	f240 2326 	movw	r3, #550	; 0x226
    m_running = true;
 800c580:	7704      	strb	r4, [r0, #28]
    sys_thread_new("SPDPThread", runBroadcast, this, Config::SPDP_WRITER_STACKSIZE, Config::SPDP_WRITER_PRIO);
 800c582:	9100      	str	r1, [sp, #0]
 800c584:	4902      	ldr	r1, [pc, #8]	; (800c590 <_ZN4rtps9SPDPAgent5startEv+0x24>)
 800c586:	4803      	ldr	r0, [pc, #12]	; (800c594 <_ZN4rtps9SPDPAgent5startEv+0x28>)
 800c588:	f7fd fa78 	bl	8009a7c <sys_thread_new>
}
 800c58c:	b002      	add	sp, #8
 800c58e:	bd10      	pop	{r4, pc}
 800c590:	0800c519 	.word	0x0800c519
 800c594:	08012034 	.word	0x08012034

0800c598 <_ZN4rtps9SPDPAgent4stopEv>:
    m_running = false;
 800c598:	2300      	movs	r3, #0
 800c59a:	7703      	strb	r3, [r0, #28]
}
 800c59c:	4770      	bx	lr
 800c59e:	bf00      	nop

0800c5a0 <_ZN4rtps9SPDPAgent29addProxiesForBuiltInEndpointsEv>:
        printf("Failed to add new participant");
#endif
    }
}

bool SPDPAgent::addProxiesForBuiltInEndpoints(){
 800c5a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
            return kind != LocatorKind_t::LOCATOR_KIND_INVALID;
 800c5a4:	f8d0 335c 	ldr.w	r3, [r0, #860]	; 0x35c
 800c5a8:	b09b      	sub	sp, #108	; 0x6c
 800c5aa:	4604      	mov	r4, r0
	Locator* locator = nullptr;

	// Check if the remote participants has a locator in our subnet
	for(unsigned int i = 0; i < m_proxyDataBuffer.m_metatrafficUnicastLocatorList.size(); i++){
		Locator* l = &(m_proxyDataBuffer.m_metatrafficUnicastLocatorList[i]);
		if(l->isValid() && l->isSameSubnet()){
 800c5ac:	3301      	adds	r3, #1
 800c5ae:	d133      	bne.n	800c618 <_ZN4rtps9SPDPAgent29addProxiesForBuiltInEndpointsEv+0x78>
 800c5b0:	f8d4 3374 	ldr.w	r3, [r4, #884]	; 0x374
 800c5b4:	3301      	adds	r3, #1
 800c5b6:	d10f      	bne.n	800c5d8 <_ZN4rtps9SPDPAgent29addProxiesForBuiltInEndpointsEv+0x38>
 800c5b8:	f8d4 338c 	ldr.w	r3, [r4, #908]	; 0x38c
 800c5bc:	3301      	adds	r3, #1
 800c5be:	d113      	bne.n	800c5e8 <_ZN4rtps9SPDPAgent29addProxiesForBuiltInEndpointsEv+0x48>
 800c5c0:	f8d4 33a4 	ldr.w	r3, [r4, #932]	; 0x3a4
 800c5c4:	3301      	adds	r3, #1
 800c5c6:	d117      	bne.n	800c5f8 <_ZN4rtps9SPDPAgent29addProxiesForBuiltInEndpointsEv+0x58>
 800c5c8:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 800c5cc:	3301      	adds	r3, #1
 800c5ce:	d11b      	bne.n	800c608 <_ZN4rtps9SPDPAgent29addProxiesForBuiltInEndpointsEv+0x68>
	        break;
		}
	}

	if(!locator){
		return false;
 800c5d0:	2000      	movs	r0, #0
        const ReaderProxy proxy{{m_proxyDataBuffer.m_guid.prefix, ENTITYID_SEDP_BUILTIN_SUBSCRIPTIONS_READER}, *locator};
        m_buildInEndpoints.sedpSubWriter->addNewMatchedReader(proxy);
    }

    return true;
}
 800c5d2:	b01b      	add	sp, #108	; 0x6c
 800c5d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        ip4_addr_t getIp4Address() const{
            return transformIP4ToU32(address[12], address[13], address[14], address[15]);
        }

        inline bool isSameSubnet() const{
        	return UdpDriver::isSameSubnet(getIp4Address());
 800c5d8:	f8d4 0388 	ldr.w	r0, [r4, #904]	; 0x388
 800c5dc:	f7ff fc3a 	bl	800be54 <_ZN4rtps9UdpDriver12isSameSubnetE8ip4_addr>
		if(l->isValid() && l->isSameSubnet()){
 800c5e0:	2800      	cmp	r0, #0
 800c5e2:	d0e9      	beq.n	800c5b8 <_ZN4rtps9SPDPAgent29addProxiesForBuiltInEndpointsEv+0x18>
	for(unsigned int i = 0; i < m_proxyDataBuffer.m_metatrafficUnicastLocatorList.size(); i++){
 800c5e4:	2501      	movs	r5, #1
 800c5e6:	e01e      	b.n	800c626 <_ZN4rtps9SPDPAgent29addProxiesForBuiltInEndpointsEv+0x86>
 800c5e8:	f8d4 03a0 	ldr.w	r0, [r4, #928]	; 0x3a0
 800c5ec:	f7ff fc32 	bl	800be54 <_ZN4rtps9UdpDriver12isSameSubnetE8ip4_addr>
		if(l->isValid() && l->isSameSubnet()){
 800c5f0:	2800      	cmp	r0, #0
 800c5f2:	d0e5      	beq.n	800c5c0 <_ZN4rtps9SPDPAgent29addProxiesForBuiltInEndpointsEv+0x20>
	for(unsigned int i = 0; i < m_proxyDataBuffer.m_metatrafficUnicastLocatorList.size(); i++){
 800c5f4:	2502      	movs	r5, #2
 800c5f6:	e016      	b.n	800c626 <_ZN4rtps9SPDPAgent29addProxiesForBuiltInEndpointsEv+0x86>
 800c5f8:	f8d4 03b8 	ldr.w	r0, [r4, #952]	; 0x3b8
 800c5fc:	f7ff fc2a 	bl	800be54 <_ZN4rtps9UdpDriver12isSameSubnetE8ip4_addr>
		if(l->isValid() && l->isSameSubnet()){
 800c600:	2800      	cmp	r0, #0
 800c602:	d0e1      	beq.n	800c5c8 <_ZN4rtps9SPDPAgent29addProxiesForBuiltInEndpointsEv+0x28>
	for(unsigned int i = 0; i < m_proxyDataBuffer.m_metatrafficUnicastLocatorList.size(); i++){
 800c604:	2503      	movs	r5, #3
 800c606:	e00e      	b.n	800c626 <_ZN4rtps9SPDPAgent29addProxiesForBuiltInEndpointsEv+0x86>
 800c608:	f8d4 03d0 	ldr.w	r0, [r4, #976]	; 0x3d0
 800c60c:	f7ff fc22 	bl	800be54 <_ZN4rtps9UdpDriver12isSameSubnetE8ip4_addr>
		if(l->isValid() && l->isSameSubnet()){
 800c610:	2800      	cmp	r0, #0
 800c612:	d0dd      	beq.n	800c5d0 <_ZN4rtps9SPDPAgent29addProxiesForBuiltInEndpointsEv+0x30>
	for(unsigned int i = 0; i < m_proxyDataBuffer.m_metatrafficUnicastLocatorList.size(); i++){
 800c614:	2504      	movs	r5, #4
 800c616:	e006      	b.n	800c626 <_ZN4rtps9SPDPAgent29addProxiesForBuiltInEndpointsEv+0x86>
 800c618:	f8d0 0370 	ldr.w	r0, [r0, #880]	; 0x370
 800c61c:	f7ff fc1a 	bl	800be54 <_ZN4rtps9UdpDriver12isSameSubnetE8ip4_addr>
		if(l->isValid() && l->isSameSubnet()){
 800c620:	2800      	cmp	r0, #0
 800c622:	d0c5      	beq.n	800c5b0 <_ZN4rtps9SPDPAgent29addProxiesForBuiltInEndpointsEv+0x10>
	for(unsigned int i = 0; i < m_proxyDataBuffer.m_metatrafficUnicastLocatorList.size(); i++){
 800c624:	2500      	movs	r5, #0
    if (m_proxyDataBuffer.hasPublicationWriter()){
 800c626:	f8d4 3358 	ldr.w	r3, [r4, #856]	; 0x358
 800c62a:	075a      	lsls	r2, r3, #29
 800c62c:	d539      	bpl.n	800c6a2 <_ZN4rtps9SPDPAgent29addProxiesForBuiltInEndpointsEv+0x102>
 800c62e:	2700      	movs	r7, #0
        const WriterProxy proxy{{m_proxyDataBuffer.m_guid.prefix, ENTITYID_SEDP_BUILTIN_PUBLICATIONS_WRITER}, *locator};
 800c630:	f8d4 0342 	ldr.w	r0, [r4, #834]	; 0x342
 800c634:	f8d4 1346 	ldr.w	r1, [r4, #838]	; 0x346
 800c638:	f04f 0e03 	mov.w	lr, #3
 800c63c:	f8d4 234a 	ldr.w	r2, [r4, #842]	; 0x34a
 800c640:	eb05 0645 	add.w	r6, r5, r5, lsl #1
 800c644:	466b      	mov	r3, sp
 800c646:	f04f 09c2 	mov.w	r9, #194	; 0xc2
 800c64a:	46e8      	mov	r8, sp
 800c64c:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 800c650:	f10d 0c10 	add.w	ip, sp, #16
 800c654:	9708      	str	r7, [sp, #32]
 800c656:	970b      	str	r7, [sp, #44]	; 0x2c
 800c658:	c307      	stmia	r3!, {r0, r1, r2}
 800c65a:	f8ad 700c 	strh.w	r7, [sp, #12]
 800c65e:	af0c      	add	r7, sp, #48	; 0x30
 800c660:	f88d e00e 	strb.w	lr, [sp, #14]
 800c664:	f04f 0e01 	mov.w	lr, #1
 800c668:	f88d 900f 	strb.w	r9, [sp, #15]
 800c66c:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800c670:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800c674:	f8d6 035c 	ldr.w	r0, [r6, #860]	; 0x35c
 800c678:	f8d6 1360 	ldr.w	r1, [r6, #864]	; 0x360
 800c67c:	f8d6 2364 	ldr.w	r2, [r6, #868]	; 0x364
 800c680:	f8d6 3368 	ldr.w	r3, [r6, #872]	; 0x368
 800c684:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800c686:	f8d6 036c 	ldr.w	r0, [r6, #876]	; 0x36c
 800c68a:	f8d6 1370 	ldr.w	r1, [r6, #880]	; 0x370
 800c68e:	e9cd ee09 	strd	lr, lr, [sp, #36]	; 0x24
 800c692:	c703      	stmia	r7!, {r0, r1}
        m_buildInEndpoints.sedpPubReader->addNewMatchedWriter(proxy);
 800c694:	6920      	ldr	r0, [r4, #16]
 800c696:	4661      	mov	r1, ip
 800c698:	6803      	ldr	r3, [r0, #0]
 800c69a:	68db      	ldr	r3, [r3, #12]
 800c69c:	4798      	blx	r3
 800c69e:	f8d4 3358 	ldr.w	r3, [r4, #856]	; 0x358
    if (m_proxyDataBuffer.hasSubscriptionWriter()){
 800c6a2:	06de      	lsls	r6, r3, #27
 800c6a4:	d53b      	bpl.n	800c71e <_ZN4rtps9SPDPAgent29addProxiesForBuiltInEndpointsEv+0x17e>
 800c6a6:	f04f 0e00 	mov.w	lr, #0
        const WriterProxy proxy{{m_proxyDataBuffer.m_guid.prefix, ENTITYID_SEDP_BUILTIN_SUBSCRIPTIONS_WRITER}, *locator};
 800c6aa:	f8d4 0342 	ldr.w	r0, [r4, #834]	; 0x342
 800c6ae:	f8d4 1346 	ldr.w	r1, [r4, #838]	; 0x346
 800c6b2:	eb05 0645 	add.w	r6, r5, r5, lsl #1
 800c6b6:	f8d4 234a 	ldr.w	r2, [r4, #842]	; 0x34a
 800c6ba:	466f      	mov	r7, sp
 800c6bc:	f04f 0804 	mov.w	r8, #4
 800c6c0:	f04f 09c2 	mov.w	r9, #194	; 0xc2
 800c6c4:	466b      	mov	r3, sp
 800c6c6:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 800c6ca:	f10d 0c10 	add.w	ip, sp, #16
 800c6ce:	f8cd e020 	str.w	lr, [sp, #32]
 800c6d2:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 800c6d6:	c707      	stmia	r7!, {r0, r1, r2}
 800c6d8:	f8ad e00c 	strh.w	lr, [sp, #12]
 800c6dc:	af0c      	add	r7, sp, #48	; 0x30
 800c6de:	f88d 800e 	strb.w	r8, [sp, #14]
 800c6e2:	f04f 0e01 	mov.w	lr, #1
 800c6e6:	f88d 900f 	strb.w	r9, [sp, #15]
 800c6ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c6ec:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800c6f0:	f8d6 035c 	ldr.w	r0, [r6, #860]	; 0x35c
 800c6f4:	f8d6 1360 	ldr.w	r1, [r6, #864]	; 0x360
 800c6f8:	f8d6 2364 	ldr.w	r2, [r6, #868]	; 0x364
 800c6fc:	f8d6 3368 	ldr.w	r3, [r6, #872]	; 0x368
 800c700:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800c702:	f8d6 036c 	ldr.w	r0, [r6, #876]	; 0x36c
 800c706:	f8d6 1370 	ldr.w	r1, [r6, #880]	; 0x370
 800c70a:	e9cd ee09 	strd	lr, lr, [sp, #36]	; 0x24
 800c70e:	c703      	stmia	r7!, {r0, r1}
        m_buildInEndpoints.sedpSubReader->addNewMatchedWriter(proxy);
 800c710:	69a0      	ldr	r0, [r4, #24]
 800c712:	4661      	mov	r1, ip
 800c714:	6803      	ldr	r3, [r0, #0]
 800c716:	68db      	ldr	r3, [r3, #12]
 800c718:	4798      	blx	r3
 800c71a:	f8d4 3358 	ldr.w	r3, [r4, #856]	; 0x358
    if(m_proxyDataBuffer.hasPublicationReader()){
 800c71e:	0718      	lsls	r0, r3, #28
 800c720:	d540      	bpl.n	800c7a4 <_ZN4rtps9SPDPAgent29addProxiesForBuiltInEndpointsEv+0x204>
 800c722:	f04f 0800 	mov.w	r8, #0
        const ReaderProxy proxy{{m_proxyDataBuffer.m_guid.prefix, ENTITYID_SEDP_BUILTIN_PUBLICATIONS_READER}, *locator};
 800c726:	f8d4 0342 	ldr.w	r0, [r4, #834]	; 0x342
 800c72a:	f04f 0e03 	mov.w	lr, #3
 800c72e:	f8d4 1346 	ldr.w	r1, [r4, #838]	; 0x346
 800c732:	f8d4 234a 	ldr.w	r2, [r4, #842]	; 0x34a
 800c736:	f04f 0cc7 	mov.w	ip, #199	; 0xc7
 800c73a:	eb05 0645 	add.w	r6, r5, r5, lsl #1
 800c73e:	466f      	mov	r7, sp
 800c740:	466b      	mov	r3, sp
 800c742:	f10d 0910 	add.w	r9, sp, #16
 800c746:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 800c74a:	c707      	stmia	r7!, {r0, r1, r2}
 800c74c:	f88d e00e 	strb.w	lr, [sp, #14]
 800c750:	af08      	add	r7, sp, #32
 800c752:	f88d c00f 	strb.w	ip, [sp, #15]
 800c756:	f04f 0c20 	mov.w	ip, #32
 800c75a:	f8ad 800c 	strh.w	r8, [sp, #12]
 800c75e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c760:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
 800c764:	f8d6 035c 	ldr.w	r0, [r6, #860]	; 0x35c
 800c768:	f8d6 1360 	ldr.w	r1, [r6, #864]	; 0x360
 800c76c:	f8d6 2364 	ldr.w	r2, [r6, #868]	; 0x364
 800c770:	f8d6 3368 	ldr.w	r3, [r6, #872]	; 0x368
 800c774:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800c776:	f8d6 036c 	ldr.w	r0, [r6, #876]	; 0x36c
 800c77a:	4662      	mov	r2, ip
 800c77c:	f8d6 1370 	ldr.w	r1, [r6, #880]	; 0x370
 800c780:	c703      	stmia	r7!, {r0, r1}
 800c782:	4641      	mov	r1, r8
 800c784:	a811      	add	r0, sp, #68	; 0x44
 800c786:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 800c78a:	e9cd 880e 	strd	r8, r8, [sp, #56]	; 0x38
 800c78e:	f003 f8eb 	bl	800f968 <memset>
        m_buildInEndpoints.sedpPubWriter->addNewMatchedReader(proxy);
 800c792:	68e0      	ldr	r0, [r4, #12]
 800c794:	f8cd 8064 	str.w	r8, [sp, #100]	; 0x64
 800c798:	4649      	mov	r1, r9
 800c79a:	6803      	ldr	r3, [r0, #0]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	4798      	blx	r3
 800c7a0:	f8d4 3358 	ldr.w	r3, [r4, #856]	; 0x358
    if(m_proxyDataBuffer.hasSubscriptionReader()){
 800c7a4:	0699      	lsls	r1, r3, #26
 800c7a6:	d403      	bmi.n	800c7b0 <_ZN4rtps9SPDPAgent29addProxiesForBuiltInEndpointsEv+0x210>
    return true;
 800c7a8:	2001      	movs	r0, #1
}
 800c7aa:	b01b      	add	sp, #108	; 0x6c
 800c7ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c7b0:	2700      	movs	r7, #0
        const ReaderProxy proxy{{m_proxyDataBuffer.m_guid.prefix, ENTITYID_SEDP_BUILTIN_SUBSCRIPTIONS_READER}, *locator};
 800c7b2:	f8d4 0342 	ldr.w	r0, [r4, #834]	; 0x342
 800c7b6:	f8d4 1346 	ldr.w	r1, [r4, #838]	; 0x346
 800c7ba:	46ec      	mov	ip, sp
 800c7bc:	f8d4 234a 	ldr.w	r2, [r4, #842]	; 0x34a
 800c7c0:	466b      	mov	r3, sp
 800c7c2:	2604      	movs	r6, #4
 800c7c4:	f04f 0ec7 	mov.w	lr, #199	; 0xc7
 800c7c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c7cc:	f10d 0810 	add.w	r8, sp, #16
 800c7d0:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800c7d4:	c307      	stmia	r3!, {r0, r1, r2}
 800c7d6:	f88d 600e 	strb.w	r6, [sp, #14]
 800c7da:	ae08      	add	r6, sp, #32
 800c7dc:	f88d e00f 	strb.w	lr, [sp, #15]
 800c7e0:	f04f 0e20 	mov.w	lr, #32
 800c7e4:	f8ad 700c 	strh.w	r7, [sp, #12]
 800c7e8:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800c7ec:	e888 000f 	stmia.w	r8, {r0, r1, r2, r3}
 800c7f0:	f8d5 035c 	ldr.w	r0, [r5, #860]	; 0x35c
 800c7f4:	f8d5 1360 	ldr.w	r1, [r5, #864]	; 0x360
 800c7f8:	f8d5 2364 	ldr.w	r2, [r5, #868]	; 0x364
 800c7fc:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
 800c800:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800c802:	f8d5 036c 	ldr.w	r0, [r5, #876]	; 0x36c
 800c806:	4672      	mov	r2, lr
 800c808:	f8d5 1370 	ldr.w	r1, [r5, #880]	; 0x370
 800c80c:	c603      	stmia	r6!, {r0, r1}
 800c80e:	4639      	mov	r1, r7
 800c810:	a811      	add	r0, sp, #68	; 0x44
 800c812:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
 800c816:	e9cd 770e 	strd	r7, r7, [sp, #56]	; 0x38
 800c81a:	f003 f8a5 	bl	800f968 <memset>
        m_buildInEndpoints.sedpSubWriter->addNewMatchedReader(proxy);
 800c81e:	6960      	ldr	r0, [r4, #20]
 800c820:	9719      	str	r7, [sp, #100]	; 0x64
 800c822:	4641      	mov	r1, r8
 800c824:	6803      	ldr	r3, [r0, #0]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	4798      	blx	r3
    return true;
 800c82a:	2001      	movs	r0, #1
}
 800c82c:	b01b      	add	sp, #108	; 0x6c
 800c82e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c832:	bf00      	nop

0800c834 <_ZN4rtps9SPDPAgent15receiveCallbackEPvRKNS_17ReaderCacheChangeE>:
    if(!initialized){
 800c834:	f890 3564 	ldrb.w	r3, [r0, #1380]	; 0x564
 800c838:	b903      	cbnz	r3, 800c83c <_ZN4rtps9SPDPAgent15receiveCallbackEPvRKNS_17ReaderCacheChangeE+0x8>
 800c83a:	4770      	bx	lr
void SPDPAgent::receiveCallback(void *callee, const ReaderCacheChange& cacheChange) {
 800c83c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    Lock lock{m_mutex};
 800c840:	f500 66ac 	add.w	r6, r0, #1376	; 0x560
 800c844:	460d      	mov	r5, r1
void SPDPAgent::receiveCallback(void *callee, const ReaderCacheChange& cacheChange) {
 800c846:	b088      	sub	sp, #32
 800c848:	4604      	mov	r4, r0
            sys_mutex_lock(&m_mutex);
 800c84a:	4630      	mov	r0, r6
 800c84c:	f7fd f90c 	bl	8009a68 <sys_mutex_lock>
    if(cacheChange.size > m_inputBuffer.size()){
 800c850:	88ea      	ldrh	r2, [r5, #6]
 800c852:	f5b2 7fc8 	cmp.w	r2, #400	; 0x190
 800c856:	d905      	bls.n	800c864 <_ZN4rtps9SPDPAgent15receiveCallbackEPvRKNS_17ReaderCacheChangeE+0x30>
            sys_mutex_unlock(&m_mutex);
 800c858:	4630      	mov	r0, r6
 800c85a:	f7fd f90b 	bl	8009a74 <sys_mutex_unlock>
}
 800c85e:	b008      	add	sp, #32
 800c860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      { return _AT_Type::_S_ptr(_M_elems); }
 800c864:	f204 13ad 	addw	r3, r4, #429	; 0x1ad
 800c868:	6829      	ldr	r1, [r5, #0]
 800c86a:	4618      	mov	r0, r3
 800c86c:	f003 f871 	bl	800f952 <memcpy>
    ucdr_init_buffer(&buffer, m_inputBuffer.data(), m_inputBuffer.size());
 800c870:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800c874:	4601      	mov	r1, r0
 800c876:	a802      	add	r0, sp, #8
 800c878:	f002 fe24 	bl	800f4c4 <ucdr_init_buffer>
    if(cacheChange.kind == ChangeKind_t::ALIVE){
 800c87c:	792b      	ldrb	r3, [r5, #4]
 800c87e:	2b01      	cmp	r3, #1
 800c880:	d1ea      	bne.n	800c858 <_ZN4rtps9SPDPAgent15receiveCallbackEPvRKNS_17ReaderCacheChangeE+0x24>
    std::array<uint8_t,2> encapsulation{};
 800c882:	2300      	movs	r3, #0
 800c884:	ad08      	add	r5, sp, #32
    ucdr_deserialize_array_uint8_t(&buffer, encapsulation.data(), encapsulation.size());
 800c886:	2202      	movs	r2, #2
 800c888:	a802      	add	r0, sp, #8
    std::array<uint8_t,2> encapsulation{};
 800c88a:	f825 3d1c 	strh.w	r3, [r5, #-28]!
    ucdr_deserialize_array_uint8_t(&buffer, encapsulation.data(), encapsulation.size());
 800c88e:	4629      	mov	r1, r5
 800c890:	f002 fea0 	bl	800f5d4 <ucdr_deserialize_array_uint8_t>
 800c894:	4b1c      	ldr	r3, [pc, #112]	; (800c908 <_ZN4rtps9SPDPAgent15receiveCallbackEPvRKNS_17ReaderCacheChangeE+0xd4>)
        buffer.endianness = UCDR_LITTLE_ENDIANNESS;
 800c896:	f8bd 0004 	ldrh.w	r0, [sp, #4]
        volatile bool success = m_proxyDataBuffer.readFromUcdrBuffer(buffer);
 800c89a:	f504 7750 	add.w	r7, r4, #832	; 0x340
        buffer.endianness = UCDR_LITTLE_ENDIANNESS;
 800c89e:	881b      	ldrh	r3, [r3, #0]
    ucdr_deserialize_array_uint8_t(&buffer, encapsulation.data(), encapsulation.size());
 800c8a0:	4629      	mov	r1, r5
 800c8a2:	2202      	movs	r2, #2
        buffer.endianness = UCDR_LITTLE_ENDIANNESS;
 800c8a4:	1a1b      	subs	r3, r3, r0
    ucdr_deserialize_array_uint8_t(&buffer, encapsulation.data(), encapsulation.size());
 800c8a6:	a802      	add	r0, sp, #8
        buffer.endianness = UCDR_LITTLE_ENDIANNESS;
 800c8a8:	fab3 f383 	clz	r3, r3
 800c8ac:	095b      	lsrs	r3, r3, #5
 800c8ae:	f88d 3014 	strb.w	r3, [sp, #20]
    ucdr_deserialize_array_uint8_t(&buffer, encapsulation.data(), encapsulation.size());
 800c8b2:	f002 fe8f 	bl	800f5d4 <ucdr_deserialize_array_uint8_t>
        volatile bool success = m_proxyDataBuffer.readFromUcdrBuffer(buffer);
 800c8b6:	a902      	add	r1, sp, #8
 800c8b8:	4638      	mov	r0, r7
 800c8ba:	f7ff fb67 	bl	800bf8c <_ZN4rtps20ParticipantProxyData18readFromUcdrBufferER10ucdrBuffer>
 800c8be:	f88d 0004 	strb.w	r0, [sp, #4]
        if(success){
 800c8c2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d0c6      	beq.n	800c858 <_ZN4rtps9SPDPAgent15receiveCallbackEPvRKNS_17ReaderCacheChangeE+0x24>
      { return const_iterator(data() + _Nm); }
 800c8ca:	f204 3842 	addw	r8, r4, #834	; 0x342
    if(m_proxyDataBuffer.m_guid.prefix.id == mp_participant->m_guidPrefix.id){
 800c8ce:	6825      	ldr	r5, [r4, #0]
	  if (const size_t __len = (__last1 - __first1))
 800c8d0:	220c      	movs	r2, #12
	    return !__builtin_memcmp(__first1, __first2, sizeof(_Tp) * __len);
 800c8d2:	4640      	mov	r0, r8
 800c8d4:	4629      	mov	r1, r5
 800c8d6:	f003 f82d 	bl	800f934 <memcmp>
 800c8da:	2800      	cmp	r0, #0
 800c8dc:	d0bc      	beq.n	800c858 <_ZN4rtps9SPDPAgent15receiveCallbackEPvRKNS_17ReaderCacheChangeE+0x24>
    if(mp_participant->findRemoteParticipant(m_proxyDataBuffer.m_guid.prefix) != nullptr){
 800c8de:	4641      	mov	r1, r8
 800c8e0:	4628      	mov	r0, r5
 800c8e2:	f002 f9c9 	bl	800ec78 <_ZN4rtps11Participant21findRemoteParticipantERKNS_12GuidPrefix_tE>
 800c8e6:	b120      	cbz	r0, 800c8f2 <_ZN4rtps9SPDPAgent15receiveCallbackEPvRKNS_17ReaderCacheChangeE+0xbe>
        m_buildInEndpoints.spdpWriter->setAllChangesToUnsent();
 800c8e8:	6860      	ldr	r0, [r4, #4]
 800c8ea:	6803      	ldr	r3, [r0, #0]
 800c8ec:	691b      	ldr	r3, [r3, #16]
 800c8ee:	4798      	blx	r3
 800c8f0:	e7b2      	b.n	800c858 <_ZN4rtps9SPDPAgent15receiveCallbackEPvRKNS_17ReaderCacheChangeE+0x24>
    if(mp_participant->addNewRemoteParticipant(m_proxyDataBuffer)) {
 800c8f2:	4639      	mov	r1, r7
 800c8f4:	6820      	ldr	r0, [r4, #0]
 800c8f6:	f002 f97d 	bl	800ebf4 <_ZN4rtps11Participant23addNewRemoteParticipantERKNS_20ParticipantProxyDataE>
 800c8fa:	2800      	cmp	r0, #0
 800c8fc:	d0ac      	beq.n	800c858 <_ZN4rtps9SPDPAgent15receiveCallbackEPvRKNS_17ReaderCacheChangeE+0x24>
    	addProxiesForBuiltInEndpoints();
 800c8fe:	4620      	mov	r0, r4
 800c900:	f7ff fe4e 	bl	800c5a0 <_ZN4rtps9SPDPAgent29addProxiesForBuiltInEndpointsEv>
 800c904:	e7f0      	b.n	800c8e8 <_ZN4rtps9SPDPAgent15receiveCallbackEPvRKNS_17ReaderCacheChangeE+0xb4>
 800c906:	bf00      	nop
 800c908:	08010d7c 	.word	0x08010d7c

0800c90c <_ZN4rtps9SPDPAgent24addParticipantParametersEv>:
void SPDPAgent::endCurrentList(){
    ucdr_serialize_uint16_t(&m_microbuffer, ParameterId::PID_SENTINEL);
    ucdr_serialize_uint16_t(&m_microbuffer, 0);
}

void SPDPAgent::addParticipantParameters(){
 800c90c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
            locator.address = {0,0,0,0,0,0,0,0,0,0,0,0,a,b,c,d};
 800c910:	4965      	ldr	r1, [pc, #404]	; (800caa8 <_ZN4rtps9SPDPAgent24addParticipantParametersEv+0x19c>)
 800c912:	b093      	sub	sp, #76	; 0x4c
    struct Locator{
 800c914:	2500      	movs	r5, #0
    const uint16_t entityKeySize = 3;
    const uint16_t entityKindSize = 1;
    const uint16_t entityIdSize = entityKeySize + entityKindSize;
    const uint16_t guidSize = sizeof(GuidPrefix_t::id) + entityIdSize;

    const Locator userUniCastLocator = getUserUnicastLocator(mp_participant->m_participantId);
 800c916:	6803      	ldr	r3, [r0, #0]
    const Locator builtInUniCastLocator = getBuiltInUnicastLocator(mp_participant->m_participantId);
    const Locator builtInMultiCastLocator = getBuiltInMulticastLocator();

    ucdr_serialize_array_uint8_t(&m_microbuffer, rtps::SMElement::SCHEME_PL_CDR_LE.data(), rtps::SMElement::SCHEME_PL_CDR_LE.size());
 800c918:	f500 64a9 	add.w	r4, r0, #1352	; 0x548
void SPDPAgent::addParticipantParameters(){
 800c91c:	4606      	mov	r6, r0

    constexpr Ip4Port_t getUserUnicastPort(ParticipantId_t participantId) {
        return PB +
               DG * Config::DOMAIN_ID +
               D3 +
               PG * participantId;
 800c91e:	f993 000c 	ldrsb.w	r0, [r3, #12]
 800c922:	f641 42f3 	movw	r2, #7411	; 0x1cf3
            locator.kind = LocatorKind_t::LOCATOR_KIND_UDPv4;
 800c926:	2701      	movs	r7, #1
    ucdr_serialize_array_uint8_t(&m_microbuffer, rtps::SMElement::SCHEME_PL_CDR_LE.data(), rtps::SMElement::SCHEME_PL_CDR_LE.size());
 800c928:	f8df 8180 	ldr.w	r8, [pc, #384]	; 800caac <_ZN4rtps9SPDPAgent24addParticipantParametersEv+0x1a0>
 800c92c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
            locator.port = port;
 800c930:	f641 4ce8 	movw	ip, #7400	; 0x1ce8
            locator.address = {0,0,0,0,0,0,0,0,0,0,0,0,a,b,c,d};
 800c934:	f8df e178 	ldr.w	lr, [pc, #376]	; 800cab0 <_ZN4rtps9SPDPAgent24addParticipantParametersEv+0x1a4>
 800c938:	4620      	mov	r0, r4
    }

    inline Locator getUserUnicastLocator(ParticipantId_t participantId) {
        return Locator::createUDPv4Locator(Config::IP_ADDRESS[0], Config::IP_ADDRESS[1],
                                           Config::IP_ADDRESS[2], Config::IP_ADDRESS[3],
                                           getUserUnicastPort(participantId));
 800c93a:	b292      	uxth	r2, r2
            locator.port = port;
 800c93c:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
    ucdr_serialize_uint16_t(&m_microbuffer, ParameterId::PID_PROTOCOL_VERSION);
    ucdr_serialize_uint16_t(&m_microbuffer, protocolVersionSize + 2);
    ucdr_serialize_uint8_t(&m_microbuffer,  PROTOCOLVERSION.major);
    ucdr_serialize_uint8_t(&m_microbuffer,  PROTOCOLVERSION.minor);
    m_microbuffer.iterator += 2;      // padding
    m_microbuffer.last_data_size = 4; // to 4 byte
 800c940:	f04f 0904 	mov.w	r9, #4
            locator.kind = LocatorKind_t::LOCATOR_KIND_UDPv4;
 800c944:	9700      	str	r7, [sp, #0]
            locator.port = port;
 800c946:	9201      	str	r2, [sp, #4]
    ucdr_serialize_array_uint8_t(&m_microbuffer, rtps::SMElement::SCHEME_PL_CDR_LE.data(), rtps::SMElement::SCHEME_PL_CDR_LE.size());
 800c948:	2202      	movs	r2, #2
            locator.kind = LocatorKind_t::LOCATOR_KIND_UDPv4;
 800c94a:	9706      	str	r7, [sp, #24]
 800c94c:	970c      	str	r7, [sp, #48]	; 0x30
            locator.address = {0,0,0,0,0,0,0,0,0,0,0,0,a,b,c,d};
 800c94e:	e9cd 5104 	strd	r5, r1, [sp, #16]
    struct Locator{
 800c952:	e9cd 5502 	strd	r5, r5, [sp, #8]
               D1 +
 800c956:	f993 300c 	ldrsb.w	r3, [r3, #12]
            locator.address = {0,0,0,0,0,0,0,0,0,0,0,0,a,b,c,d};
 800c95a:	910b      	str	r1, [sp, #44]	; 0x2c
 800c95c:	4641      	mov	r1, r8
 800c95e:	f603 6379 	addw	r3, r3, #3705	; 0xe79
 800c962:	f8cd e044 	str.w	lr, [sp, #68]	; 0x44
    struct Locator{
 800c966:	9508      	str	r5, [sp, #32]
               PG * participantId;
 800c968:	40bb      	lsls	r3, r7
 800c96a:	950e      	str	r5, [sp, #56]	; 0x38
 800c96c:	9509      	str	r5, [sp, #36]	; 0x24
                                           getBuiltInUnicastPort(participantId));
 800c96e:	b29b      	uxth	r3, r3
    struct Locator{
 800c970:	950a      	str	r5, [sp, #40]	; 0x28
            locator.port = port;
 800c972:	9307      	str	r3, [sp, #28]
    struct Locator{
 800c974:	e9cd 550f 	strd	r5, r5, [sp, #60]	; 0x3c
 800c978:	f002 fe00 	bl	800f57c <ucdr_serialize_array_uint8_t>
    ucdr_serialize_uint16_t(&m_microbuffer, zero_options);
 800c97c:	4629      	mov	r1, r5
 800c97e:	4620      	mov	r0, r4
 800c980:	f002 fe50 	bl	800f624 <ucdr_serialize_uint16_t>
    ucdr_serialize_uint16_t(&m_microbuffer, ParameterId::PID_PROTOCOL_VERSION);
 800c984:	4620      	mov	r0, r4
 800c986:	2115      	movs	r1, #21
 800c988:	f002 fe4c 	bl	800f624 <ucdr_serialize_uint16_t>
    ucdr_serialize_uint16_t(&m_microbuffer, protocolVersionSize + 2);
 800c98c:	4649      	mov	r1, r9
 800c98e:	4620      	mov	r0, r4
 800c990:	f002 fe48 	bl	800f624 <ucdr_serialize_uint16_t>
    ucdr_serialize_uint8_t(&m_microbuffer,  PROTOCOLVERSION.major);
 800c994:	4620      	mov	r0, r4
 800c996:	2102      	movs	r1, #2
 800c998:	f002 fe32 	bl	800f600 <ucdr_serialize_uint8_t>
    ucdr_serialize_uint8_t(&m_microbuffer,  PROTOCOLVERSION.minor);
 800c99c:	4620      	mov	r0, r4
 800c99e:	2102      	movs	r1, #2
 800c9a0:	f002 fe2e 	bl	800f600 <ucdr_serialize_uint8_t>
    m_microbuffer.iterator += 2;      // padding
 800c9a4:	f8d6 3550 	ldr.w	r3, [r6, #1360]	; 0x550

    ucdr_serialize_uint16_t(&m_microbuffer,      ParameterId::PID_VENDORID);
 800c9a8:	4620      	mov	r0, r4
    m_microbuffer.last_data_size = 4; // to 4 byte
 800c9aa:	f8c6 9558 	str.w	r9, [r6, #1368]	; 0x558
    m_microbuffer.iterator += 2;      // padding
 800c9ae:	3302      	adds	r3, #2
    ucdr_serialize_uint16_t(&m_microbuffer,      ParameterId::PID_VENDORID);
 800c9b0:	2116      	movs	r1, #22
    m_microbuffer.iterator += 2;      // padding
 800c9b2:	f8c6 3550 	str.w	r3, [r6, #1360]	; 0x550
    ucdr_serialize_uint16_t(&m_microbuffer,      ParameterId::PID_VENDORID);
 800c9b6:	f002 fe35 	bl	800f624 <ucdr_serialize_uint16_t>
    ucdr_serialize_uint16_t(&m_microbuffer,      vendorIdSize + 2);
 800c9ba:	4649      	mov	r1, r9
 800c9bc:	4620      	mov	r0, r4
 800c9be:	f002 fe31 	bl	800f624 <ucdr_serialize_uint16_t>
    ucdr_serialize_array_uint8_t(&m_microbuffer, Config::VENDOR_ID.vendorId.data(), vendorIdSize);
 800c9c2:	2202      	movs	r2, #2
 800c9c4:	f108 0108 	add.w	r1, r8, #8
 800c9c8:	4620      	mov	r0, r4
 800c9ca:	f002 fdd7 	bl	800f57c <ucdr_serialize_array_uint8_t>
    m_microbuffer.iterator += 2;      // padding
 800c9ce:	f8d6 3550 	ldr.w	r3, [r6, #1360]	; 0x550
    m_microbuffer.last_data_size = 4; // to 4 byte
 800c9d2:	f8c6 9558 	str.w	r9, [r6, #1368]	; 0x558

    ucdr_serialize_uint16_t(&m_microbuffer,      ParameterId::PID_DEFAULT_UNICAST_LOCATOR);
 800c9d6:	4620      	mov	r0, r4
    m_microbuffer.iterator += 2;      // padding
 800c9d8:	3302      	adds	r3, #2
    ucdr_serialize_uint16_t(&m_microbuffer,      ParameterId::PID_DEFAULT_UNICAST_LOCATOR);
 800c9da:	2131      	movs	r1, #49	; 0x31
    m_microbuffer.iterator += 2;      // padding
 800c9dc:	f8c6 3550 	str.w	r3, [r6, #1360]	; 0x550
    ucdr_serialize_uint16_t(&m_microbuffer,      ParameterId::PID_DEFAULT_UNICAST_LOCATOR);
 800c9e0:	f002 fe20 	bl	800f624 <ucdr_serialize_uint16_t>
    ucdr_serialize_uint16_t(&m_microbuffer,      locatorSize);
 800c9e4:	4620      	mov	r0, r4
 800c9e6:	2118      	movs	r1, #24
 800c9e8:	f002 fe1c 	bl	800f624 <ucdr_serialize_uint16_t>
    ucdr_serialize_array_uint8_t(&m_microbuffer, reinterpret_cast<const uint8_t*>(&userUniCastLocator), locatorSize);
 800c9ec:	2218      	movs	r2, #24
 800c9ee:	4669      	mov	r1, sp
 800c9f0:	4620      	mov	r0, r4
 800c9f2:	f002 fdc3 	bl	800f57c <ucdr_serialize_array_uint8_t>

    ucdr_serialize_uint16_t(&m_microbuffer,      ParameterId::PID_METATRAFFIC_UNICAST_LOCATOR);
 800c9f6:	4620      	mov	r0, r4
 800c9f8:	2132      	movs	r1, #50	; 0x32
 800c9fa:	f002 fe13 	bl	800f624 <ucdr_serialize_uint16_t>
    ucdr_serialize_uint16_t(&m_microbuffer,      locatorSize);
 800c9fe:	4620      	mov	r0, r4
 800ca00:	2118      	movs	r1, #24
 800ca02:	f002 fe0f 	bl	800f624 <ucdr_serialize_uint16_t>
    ucdr_serialize_array_uint8_t(&m_microbuffer, reinterpret_cast<const uint8_t*>(&builtInUniCastLocator), locatorSize);
 800ca06:	2218      	movs	r2, #24
 800ca08:	4620      	mov	r0, r4
 800ca0a:	eb0d 0102 	add.w	r1, sp, r2
 800ca0e:	f002 fdb5 	bl	800f57c <ucdr_serialize_array_uint8_t>

    ucdr_serialize_uint16_t(&m_microbuffer,      ParameterId::PID_METATRAFFIC_MULTICAST_LOCATOR);
 800ca12:	4620      	mov	r0, r4
 800ca14:	2133      	movs	r1, #51	; 0x33
 800ca16:	f002 fe05 	bl	800f624 <ucdr_serialize_uint16_t>
    ucdr_serialize_uint16_t(&m_microbuffer,      locatorSize);
 800ca1a:	4620      	mov	r0, r4
 800ca1c:	2118      	movs	r1, #24
 800ca1e:	f002 fe01 	bl	800f624 <ucdr_serialize_uint16_t>
    ucdr_serialize_array_uint8_t(&m_microbuffer, reinterpret_cast<const uint8_t*>(&builtInMultiCastLocator), locatorSize);
 800ca22:	2218      	movs	r2, #24
 800ca24:	a90c      	add	r1, sp, #48	; 0x30
 800ca26:	4620      	mov	r0, r4
 800ca28:	f002 fda8 	bl	800f57c <ucdr_serialize_array_uint8_t>

    ucdr_serialize_uint16_t(&m_microbuffer,      ParameterId::PID_PARTICIPANT_LEASE_DURATION);
 800ca2c:	4620      	mov	r0, r4
 800ca2e:	2102      	movs	r1, #2
 800ca30:	f002 fdf8 	bl	800f624 <ucdr_serialize_uint16_t>
    ucdr_serialize_uint16_t(&m_microbuffer,      durationSize);
 800ca34:	4620      	mov	r0, r4
 800ca36:	2108      	movs	r1, #8
 800ca38:	f002 fdf4 	bl	800f624 <ucdr_serialize_uint16_t>
    ucdr_serialize_int32_t(&m_microbuffer,       Config::SPDP_LEASE_DURATION.seconds);
 800ca3c:	4620      	mov	r0, r4
 800ca3e:	2164      	movs	r1, #100	; 0x64
 800ca40:	f002 fe44 	bl	800f6cc <ucdr_serialize_int32_t>
    ucdr_serialize_uint32_t(&m_microbuffer,      Config::SPDP_LEASE_DURATION.fraction);
 800ca44:	4629      	mov	r1, r5
 800ca46:	4620      	mov	r0, r4
 800ca48:	f002 fe12 	bl	800f670 <ucdr_serialize_uint32_t>

    ucdr_serialize_uint16_t(&m_microbuffer,      ParameterId::PID_PARTICIPANT_GUID);
 800ca4c:	4620      	mov	r0, r4
 800ca4e:	2150      	movs	r1, #80	; 0x50
 800ca50:	f002 fde8 	bl	800f624 <ucdr_serialize_uint16_t>
    ucdr_serialize_uint16_t(&m_microbuffer,      guidSize);
 800ca54:	4620      	mov	r0, r4
 800ca56:	2110      	movs	r1, #16
 800ca58:	f002 fde4 	bl	800f624 <ucdr_serialize_uint16_t>
    ucdr_serialize_array_uint8_t(&m_microbuffer, mp_participant->m_guidPrefix.id.data(), sizeof(GuidPrefix_t::id));
 800ca5c:	6831      	ldr	r1, [r6, #0]
 800ca5e:	4620      	mov	r0, r4
 800ca60:	220c      	movs	r2, #12
 800ca62:	f002 fd8b 	bl	800f57c <ucdr_serialize_array_uint8_t>
    ucdr_serialize_array_uint8_t(&m_microbuffer, ENTITYID_BUILD_IN_PARTICIPANT.entityKey.data(), entityKeySize);
 800ca66:	2203      	movs	r2, #3
 800ca68:	eb08 0109 	add.w	r1, r8, r9
 800ca6c:	4620      	mov	r0, r4
 800ca6e:	f002 fd85 	bl	800f57c <ucdr_serialize_array_uint8_t>
    ucdr_serialize_uint8_t(&m_microbuffer,       static_cast<uint8_t>(ENTITYID_BUILD_IN_PARTICIPANT.entityKind));
 800ca72:	4620      	mov	r0, r4
 800ca74:	21c1      	movs	r1, #193	; 0xc1
 800ca76:	f002 fdc3 	bl	800f600 <ucdr_serialize_uint8_t>

    ucdr_serialize_uint16_t(&m_microbuffer,      ParameterId::PID_BUILTIN_ENDPOINT_SET);
 800ca7a:	4620      	mov	r0, r4
 800ca7c:	2158      	movs	r1, #88	; 0x58
 800ca7e:	f002 fdd1 	bl	800f624 <ucdr_serialize_uint16_t>
    ucdr_serialize_uint16_t(&m_microbuffer,      sizeof(BuildInEndpointSet));
 800ca82:	4649      	mov	r1, r9
 800ca84:	4620      	mov	r0, r4
 800ca86:	f002 fdcd 	bl	800f624 <ucdr_serialize_uint16_t>
    ucdr_serialize_uint32_t(&m_microbuffer,      BuildInEndpointSet::DISC_BIE_PARTICIPANT_ANNOUNCER |
 800ca8a:	4620      	mov	r0, r4
 800ca8c:	213f      	movs	r1, #63	; 0x3f
 800ca8e:	f002 fdef 	bl	800f670 <ucdr_serialize_uint32_t>
    ucdr_serialize_uint16_t(&m_microbuffer, ParameterId::PID_SENTINEL);
 800ca92:	4639      	mov	r1, r7
 800ca94:	4620      	mov	r0, r4
 800ca96:	f002 fdc5 	bl	800f624 <ucdr_serialize_uint16_t>
    ucdr_serialize_uint16_t(&m_microbuffer, 0);
 800ca9a:	4629      	mov	r1, r5
 800ca9c:	4620      	mov	r0, r4
 800ca9e:	f002 fdc1 	bl	800f624 <ucdr_serialize_uint16_t>
                                                 BuildInEndpointSet::DISC_BIE_PUBLICATION_DETECTOR |
                                                 BuildInEndpointSet::DISC_BIE_SUBSCRIPTION_ANNOUNCER |
                                                 BuildInEndpointSet::DISC_BIE_SUBSCRIPTION_DETECTOR);

    endCurrentList();
}
 800caa2:	b013      	add	sp, #76	; 0x4c
 800caa4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800caa8:	2f00a8c0 	.word	0x2f00a8c0
 800caac:	08010d7c 	.word	0x08010d7c
 800cab0:	0100ffef 	.word	0x0100ffef

0800cab4 <_ZN4rtps9SPDPAgent4initERNS_11ParticipantERNS_16BuiltInEndpointsE>:
void SPDPAgent::init(Participant& participant, BuiltInEndpoints& endpoints){
 800cab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cab6:	4605      	mov	r5, r0
    if(sys_mutex_new(&m_mutex) != ERR_OK){
 800cab8:	f500 60ac 	add.w	r0, r0, #1376	; 0x560
void SPDPAgent::init(Participant& participant, BuiltInEndpoints& endpoints){
 800cabc:	460f      	mov	r7, r1
 800cabe:	4614      	mov	r4, r2
    if(sys_mutex_new(&m_mutex) != ERR_OK){
 800cac0:	f7fc ffbc 	bl	8009a3c <sys_mutex_new>
 800cac4:	b100      	cbz	r0, 800cac8 <_ZN4rtps9SPDPAgent4initERNS_11ParticipantERNS_16BuiltInEndpointsE+0x14>
}
 800cac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    mp_participant = &participant;
 800cac8:	462e      	mov	r6, r5
 800caca:	f846 7b04 	str.w	r7, [r6], #4
    m_buildInEndpoints = endpoints;
 800cace:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cad0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800cad2:	e894 0003 	ldmia.w	r4, {r0, r1}
    m_buildInEndpoints.spdpReader->registerCallback(receiveCallback, this);
 800cad6:	462a      	mov	r2, r5
    m_buildInEndpoints = endpoints;
 800cad8:	e886 0003 	stmia.w	r6, {r0, r1}
    m_buildInEndpoints.spdpReader->registerCallback(receiveCallback, this);
 800cadc:	68a8      	ldr	r0, [r5, #8]
 800cade:	4909      	ldr	r1, [pc, #36]	; (800cb04 <_ZN4rtps9SPDPAgent4initERNS_11ParticipantERNS_16BuiltInEndpointsE+0x50>)
 800cae0:	6803      	ldr	r3, [r0, #0]
 800cae2:	685b      	ldr	r3, [r3, #4]
 800cae4:	4798      	blx	r3
    ucdr_init_buffer(&m_microbuffer, m_outputBuffer.data(), m_outputBuffer.size());
 800cae6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800caea:	f105 011d 	add.w	r1, r5, #29
 800caee:	f505 60a9 	add.w	r0, r5, #1352	; 0x548
 800caf2:	f002 fce7 	bl	800f4c4 <ucdr_init_buffer>
    addParticipantParameters();
 800caf6:	4628      	mov	r0, r5
 800caf8:	f7ff ff08 	bl	800c90c <_ZN4rtps9SPDPAgent24addParticipantParametersEv>
    initialized = true;
 800cafc:	2301      	movs	r3, #1
 800cafe:	f885 3564 	strb.w	r3, [r5, #1380]	; 0x564
}
 800cb02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb04:	0800c835 	.word	0x0800c835

0800cb08 <_ZN4rtps9TopicData14matchesTopicOfERKS0_>:

using rtps::TopicData;
using rtps::SMElement::ParameterId;


bool TopicData::matchesTopicOf(const TopicData& other){
 800cb08:	b538      	push	{r3, r4, r5, lr}
 800cb0a:	4604      	mov	r4, r0
 800cb0c:	460d      	mov	r5, r1
	return strcmp(this->topicName, other.topicName) == 0 && strcmp(this->typeName, other.typeName) == 0;
 800cb0e:	3024      	adds	r0, #36	; 0x24
 800cb10:	3124      	adds	r1, #36	; 0x24
 800cb12:	f7f3 fb95 	bl	8000240 <strcmp>
 800cb16:	b948      	cbnz	r0, 800cb2c <_ZN4rtps9TopicData14matchesTopicOfERKS0_+0x24>
 800cb18:	f105 0110 	add.w	r1, r5, #16
 800cb1c:	f104 0010 	add.w	r0, r4, #16
 800cb20:	f7f3 fb8e 	bl	8000240 <strcmp>
 800cb24:	fab0 f080 	clz	r0, r0
 800cb28:	0940      	lsrs	r0, r0, #5
}
 800cb2a:	bd38      	pop	{r3, r4, r5, pc}
	return strcmp(this->topicName, other.topicName) == 0 && strcmp(this->typeName, other.typeName) == 0;
 800cb2c:	2000      	movs	r0, #0
}
 800cb2e:	bd38      	pop	{r3, r4, r5, pc}

0800cb30 <_ZN4rtps9TopicData18readFromUcdrBufferER10ucdrBuffer>:

bool TopicData::readFromUcdrBuffer(ucdrBuffer& buffer){
 800cb30:	b530      	push	{r4, r5, lr}
 800cb32:	460c      	mov	r4, r1
 800cb34:	b083      	sub	sp, #12
 800cb36:	4605      	mov	r5, r0

    while(ucdr_buffer_remaining(&buffer) >= 4){
 800cb38:	4620      	mov	r0, r4
 800cb3a:	f002 fd05 	bl	800f548 <ucdr_buffer_remaining>
 800cb3e:	2803      	cmp	r0, #3
 800cb40:	d92d      	bls.n	800cb9e <_ZN4rtps9TopicData18readFromUcdrBufferER10ucdrBuffer+0x6e>
        ParameterId pid;
        uint16_t length;
        ucdr_deserialize_uint16_t(&buffer, reinterpret_cast<uint16_t*>(&pid));
 800cb42:	4669      	mov	r1, sp
 800cb44:	4620      	mov	r0, r4
 800cb46:	f002 fe17 	bl	800f778 <ucdr_deserialize_uint16_t>
        ucdr_deserialize_uint16_t(&buffer, &length);
 800cb4a:	f10d 0102 	add.w	r1, sp, #2
 800cb4e:	4620      	mov	r0, r4
 800cb50:	f002 fe12 	bl	800f778 <ucdr_deserialize_uint16_t>

        if(ucdr_buffer_remaining(&buffer) < length){
 800cb54:	4620      	mov	r0, r4
 800cb56:	f002 fcf7 	bl	800f548 <ucdr_buffer_remaining>
 800cb5a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800cb5e:	4298      	cmp	r0, r3
 800cb60:	d365      	bcc.n	800cc2e <_ZN4rtps9TopicData18readFromUcdrBufferER10ucdrBuffer+0xfe>
            return false;
        }

        switch(pid){
 800cb62:	f8bd 0000 	ldrh.w	r0, [sp]
 800cb66:	2807      	cmp	r0, #7
 800cb68:	d030      	beq.n	800cbcc <_ZN4rtps9TopicData18readFromUcdrBufferER10ucdrBuffer+0x9c>
 800cb6a:	d920      	bls.n	800cbae <_ZN4rtps9TopicData18readFromUcdrBufferER10ucdrBuffer+0x7e>
 800cb6c:	282f      	cmp	r0, #47	; 0x2f
 800cb6e:	d052      	beq.n	800cc16 <_ZN4rtps9TopicData18readFromUcdrBufferER10ucdrBuffer+0xe6>
 800cb70:	285a      	cmp	r0, #90	; 0x5a
 800cb72:	d03f      	beq.n	800cbf4 <_ZN4rtps9TopicData18readFromUcdrBufferER10ucdrBuffer+0xc4>
 800cb74:	281a      	cmp	r0, #26
 800cb76:	d034      	beq.n	800cbe2 <_ZN4rtps9TopicData18readFromUcdrBufferER10ucdrBuffer+0xb2>
                break;
            case ParameterId::PID_UNICAST_LOCATOR:
                unicastLocator.readFromUcdrBuffer(buffer);
                break;
            default:
                buffer.iterator+=length;
 800cb78:	68a2      	ldr	r2, [r4, #8]
                buffer.last_data_size = 1;
 800cb7a:	2101      	movs	r1, #1
                buffer.iterator+=length;
 800cb7c:	4413      	add	r3, r2
                buffer.last_data_size = 1;
 800cb7e:	6121      	str	r1, [r4, #16]
                buffer.iterator+=length;
 800cb80:	60a3      	str	r3, [r4, #8]
        }

        uint32_t alignment = ucdr_buffer_alignment(&buffer, 4);
 800cb82:	2104      	movs	r1, #4
 800cb84:	4620      	mov	r0, r4
 800cb86:	f002 fcc9 	bl	800f51c <ucdr_buffer_alignment>
        buffer.iterator += alignment;
 800cb8a:	68a3      	ldr	r3, [r4, #8]
        buffer.last_data_size = 4; // 4 Byte alignment per element
 800cb8c:	2204      	movs	r2, #4
        buffer.iterator += alignment;
 800cb8e:	4418      	add	r0, r3
        buffer.last_data_size = 4; // 4 Byte alignment per element
 800cb90:	6122      	str	r2, [r4, #16]
        buffer.iterator += alignment;
 800cb92:	60a0      	str	r0, [r4, #8]
    while(ucdr_buffer_remaining(&buffer) >= 4){
 800cb94:	4620      	mov	r0, r4
 800cb96:	f002 fcd7 	bl	800f548 <ucdr_buffer_remaining>
 800cb9a:	2803      	cmp	r0, #3
 800cb9c:	d8d1      	bhi.n	800cb42 <_ZN4rtps9TopicData18readFromUcdrBufferER10ucdrBuffer+0x12>
    }
    return ucdr_buffer_remaining(&buffer) == 0;
 800cb9e:	4620      	mov	r0, r4
 800cba0:	f002 fcd2 	bl	800f548 <ucdr_buffer_remaining>
 800cba4:	fab0 f080 	clz	r0, r0
 800cba8:	0940      	lsrs	r0, r0, #5
}
 800cbaa:	b003      	add	sp, #12
 800cbac:	bd30      	pop	{r4, r5, pc}
        switch(pid){
 800cbae:	2801      	cmp	r0, #1
 800cbb0:	d0fb      	beq.n	800cbaa <_ZN4rtps9TopicData18readFromUcdrBufferER10ucdrBuffer+0x7a>
 800cbb2:	2805      	cmp	r0, #5
 800cbb4:	d1e0      	bne.n	800cb78 <_ZN4rtps9TopicData18readFromUcdrBufferER10ucdrBuffer+0x48>
                ucdr_deserialize_uint32_t(&buffer, &topicNameLength);
 800cbb6:	a901      	add	r1, sp, #4
 800cbb8:	4620      	mov	r0, r4
 800cbba:	f002 fe05 	bl	800f7c8 <ucdr_deserialize_uint32_t>
                ucdr_deserialize_array_char(&buffer, topicName, topicNameLength);
 800cbbe:	9a01      	ldr	r2, [sp, #4]
 800cbc0:	f105 0124 	add.w	r1, r5, #36	; 0x24
 800cbc4:	4620      	mov	r0, r4
 800cbc6:	f002 fcef 	bl	800f5a8 <ucdr_deserialize_array_char>
                break;
 800cbca:	e7da      	b.n	800cb82 <_ZN4rtps9TopicData18readFromUcdrBufferER10ucdrBuffer+0x52>
                ucdr_deserialize_uint32_t(&buffer, &typeNameLength);
 800cbcc:	a901      	add	r1, sp, #4
 800cbce:	4620      	mov	r0, r4
 800cbd0:	f002 fdfa 	bl	800f7c8 <ucdr_deserialize_uint32_t>
                ucdr_deserialize_array_char(&buffer, typeName, typeNameLength);
 800cbd4:	9a01      	ldr	r2, [sp, #4]
 800cbd6:	f105 0110 	add.w	r1, r5, #16
 800cbda:	4620      	mov	r0, r4
 800cbdc:	f002 fce4 	bl	800f5a8 <ucdr_deserialize_array_char>
                break;
 800cbe0:	e7cf      	b.n	800cb82 <_ZN4rtps9TopicData18readFromUcdrBufferER10ucdrBuffer+0x52>
                ucdr_deserialize_uint32_t(&buffer, reinterpret_cast<uint32_t*>(&reliabilityKind));
 800cbe2:	f105 0138 	add.w	r1, r5, #56	; 0x38
 800cbe6:	4620      	mov	r0, r4
 800cbe8:	f002 fdee 	bl	800f7c8 <ucdr_deserialize_uint32_t>
                buffer.iterator+=8;
 800cbec:	68a3      	ldr	r3, [r4, #8]
 800cbee:	3308      	adds	r3, #8
 800cbf0:	60a3      	str	r3, [r4, #8]
                break;
 800cbf2:	e7c6      	b.n	800cb82 <_ZN4rtps9TopicData18readFromUcdrBufferER10ucdrBuffer+0x52>
                ucdr_deserialize_array_uint8_t(&buffer, endpointGuid.prefix.id.data(), endpointGuid.prefix.id.size());
 800cbf4:	4629      	mov	r1, r5
 800cbf6:	220c      	movs	r2, #12
 800cbf8:	4620      	mov	r0, r4
 800cbfa:	f002 fceb 	bl	800f5d4 <ucdr_deserialize_array_uint8_t>
                ucdr_deserialize_array_uint8_t(&buffer, endpointGuid.entityId.entityKey.data(), endpointGuid.entityId.entityKey.size());
 800cbfe:	f105 010c 	add.w	r1, r5, #12
 800cc02:	2203      	movs	r2, #3
 800cc04:	4620      	mov	r0, r4
 800cc06:	f002 fce5 	bl	800f5d4 <ucdr_deserialize_array_uint8_t>
                ucdr_deserialize_uint8_t(&buffer, reinterpret_cast<uint8_t*>(&endpointGuid.entityId.entityKind));
 800cc0a:	f105 010f 	add.w	r1, r5, #15
 800cc0e:	4620      	mov	r0, r4
 800cc10:	f002 fd9e 	bl	800f750 <ucdr_deserialize_uint8_t>
                break;
 800cc14:	e7b5      	b.n	800cb82 <_ZN4rtps9TopicData18readFromUcdrBufferER10ucdrBuffer+0x52>
            if(ucdr_buffer_remaining(&buffer) < sizeof(Locator)){
 800cc16:	4620      	mov	r0, r4
 800cc18:	f002 fc96 	bl	800f548 <ucdr_buffer_remaining>
 800cc1c:	2817      	cmp	r0, #23
 800cc1e:	d9b0      	bls.n	800cb82 <_ZN4rtps9TopicData18readFromUcdrBufferER10ucdrBuffer+0x52>
                ucdr_deserialize_array_uint8_t(&buffer, reinterpret_cast<uint8_t*>(this), sizeof(Locator));
 800cc20:	2218      	movs	r2, #24
 800cc22:	f105 013c 	add.w	r1, r5, #60	; 0x3c
 800cc26:	4620      	mov	r0, r4
 800cc28:	f002 fcd4 	bl	800f5d4 <ucdr_deserialize_array_uint8_t>
 800cc2c:	e7a9      	b.n	800cb82 <_ZN4rtps9TopicData18readFromUcdrBufferER10ucdrBuffer+0x52>
            return false;
 800cc2e:	2000      	movs	r0, #0
}
 800cc30:	b003      	add	sp, #12
 800cc32:	bd30      	pop	{r4, r5, pc}

0800cc34 <_ZNK4rtps9TopicData23serializeIntoUcdrBufferER10ucdrBuffer>:

bool TopicData::serializeIntoUcdrBuffer(ucdrBuffer& buffer) const{
 800cc34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc38:	460c      	mov	r4, r1
 800cc3a:	4605      	mov	r5, r0
	// TODO Check if buffer length is sufficient
	const uint16_t guidSize = sizeof(GuidPrefix_t::id) + 4;

	ucdr_serialize_uint16_t(&buffer, ParameterId::PID_UNICAST_LOCATOR);
 800cc3c:	212f      	movs	r1, #47	; 0x2f
 800cc3e:	4620      	mov	r0, r4
	ucdr_serialize_uint16_t(&buffer, sizeof(Locator));
	ucdr_serialize_array_uint8_t(&buffer, reinterpret_cast<const uint8_t*>(&unicastLocator), sizeof(Locator));

	// It's a 32 bit instead of 16 because it seems like the field is padded.
	const auto lenTopicName = static_cast<uint32_t>(strlen(topicName) + 1); // + \0
 800cc40:	f105 0824 	add.w	r8, r5, #36	; 0x24
	ucdr_serialize_uint16_t(&buffer, ParameterId::PID_UNICAST_LOCATOR);
 800cc44:	f002 fcee 	bl	800f624 <ucdr_serialize_uint16_t>
	ucdr_serialize_uint16_t(&buffer, sizeof(Locator));
 800cc48:	2118      	movs	r1, #24
 800cc4a:	4620      	mov	r0, r4
 800cc4c:	f002 fcea 	bl	800f624 <ucdr_serialize_uint16_t>
	ucdr_serialize_array_uint8_t(&buffer, reinterpret_cast<const uint8_t*>(&unicastLocator), sizeof(Locator));
 800cc50:	f105 013c 	add.w	r1, r5, #60	; 0x3c
 800cc54:	2218      	movs	r2, #24
 800cc56:	4620      	mov	r0, r4
 800cc58:	f002 fc90 	bl	800f57c <ucdr_serialize_array_uint8_t>
	const auto lenTopicName = static_cast<uint32_t>(strlen(topicName) + 1); // + \0
 800cc5c:	4640      	mov	r0, r8
 800cc5e:	f7f3 faf9 	bl	8000254 <strlen>
 800cc62:	f100 0901 	add.w	r9, r0, #1
	uint16_t topicAlignment = 0;
	if(lenTopicName % 4 != 0){
 800cc66:	f019 0603 	ands.w	r6, r9, #3
 800cc6a:	d002      	beq.n	800cc72 <_ZNK4rtps9TopicData23serializeIntoUcdrBufferER10ucdrBuffer+0x3e>
		topicAlignment = static_cast<uint8_t>(4 - (lenTopicName % 4));
 800cc6c:	f1c6 0604 	rsb	r6, r6, #4
 800cc70:	b2f6      	uxtb	r6, r6
	}
	const auto totalLengthTopicNameField = static_cast<uint16_t>(sizeof(lenTopicName) + lenTopicName + topicAlignment);
 800cc72:	f109 0304 	add.w	r3, r9, #4
	ucdr_serialize_uint16_t(&buffer, ParameterId::PID_TOPIC_NAME);
 800cc76:	2105      	movs	r1, #5
 800cc78:	4620      	mov	r0, r4
	ucdr_serialize_uint32_t(&buffer, lenTopicName);
	ucdr_serialize_array_char(&buffer, topicName, lenTopicName);
	ucdr_align_to(&buffer,4);

	// It's a 32 bit instead of 16 because it seems like the field is padded.
	const auto lenTypeName = static_cast<uint32_t>(strlen(typeName) + 1); // + \0
 800cc7a:	f105 0710 	add.w	r7, r5, #16
	const auto totalLengthTopicNameField = static_cast<uint16_t>(sizeof(lenTopicName) + lenTopicName + topicAlignment);
 800cc7e:	441e      	add	r6, r3
	ucdr_serialize_uint16_t(&buffer, ParameterId::PID_TOPIC_NAME);
 800cc80:	f002 fcd0 	bl	800f624 <ucdr_serialize_uint16_t>
	ucdr_serialize_uint16_t(&buffer, totalLengthTopicNameField);
 800cc84:	4620      	mov	r0, r4
	const auto totalLengthTopicNameField = static_cast<uint16_t>(sizeof(lenTopicName) + lenTopicName + topicAlignment);
 800cc86:	b2b6      	uxth	r6, r6
	ucdr_serialize_uint16_t(&buffer, totalLengthTopicNameField);
 800cc88:	4631      	mov	r1, r6
 800cc8a:	f002 fccb 	bl	800f624 <ucdr_serialize_uint16_t>
	ucdr_serialize_uint32_t(&buffer, lenTopicName);
 800cc8e:	4649      	mov	r1, r9
 800cc90:	4620      	mov	r0, r4
 800cc92:	f002 fced 	bl	800f670 <ucdr_serialize_uint32_t>
	ucdr_serialize_array_char(&buffer, topicName, lenTopicName);
 800cc96:	464a      	mov	r2, r9
 800cc98:	4641      	mov	r1, r8
 800cc9a:	4620      	mov	r0, r4
 800cc9c:	f002 fc58 	bl	800f550 <ucdr_serialize_array_char>
	ucdr_align_to(&buffer,4);
 800cca0:	2104      	movs	r1, #4
 800cca2:	4620      	mov	r0, r4
 800cca4:	f002 fc1c 	bl	800f4e0 <ucdr_align_to>
	const auto lenTypeName = static_cast<uint32_t>(strlen(typeName) + 1); // + \0
 800cca8:	4638      	mov	r0, r7
 800ccaa:	f7f3 fad3 	bl	8000254 <strlen>
 800ccae:	f100 0801 	add.w	r8, r0, #1
	uint16_t typeAlignment = 0;
	if(lenTypeName % 4 != 0){
 800ccb2:	f018 0603 	ands.w	r6, r8, #3
 800ccb6:	d002      	beq.n	800ccbe <_ZNK4rtps9TopicData23serializeIntoUcdrBufferER10ucdrBuffer+0x8a>
		typeAlignment = static_cast<uint8_t>(4 - (lenTypeName % 4));
 800ccb8:	f1c6 0604 	rsb	r6, r6, #4
 800ccbc:	b2f6      	uxtb	r6, r6
	}
	const auto totalLengthTypeNameField = static_cast<uint16_t>(sizeof(lenTypeName) + lenTypeName + typeAlignment);
 800ccbe:	f108 0304 	add.w	r3, r8, #4

	ucdr_serialize_uint16_t(&buffer, ParameterId::PID_TYPE_NAME);
 800ccc2:	2107      	movs	r1, #7
 800ccc4:	4620      	mov	r0, r4

      _GLIBCXX17_CONSTEXPR const_pointer
      data() const noexcept
      { return _AT_Type::_S_ptr(_M_elems); }
 800ccc6:	f105 090c 	add.w	r9, r5, #12
	const auto totalLengthTypeNameField = static_cast<uint16_t>(sizeof(lenTypeName) + lenTypeName + typeAlignment);
 800ccca:	441e      	add	r6, r3
	ucdr_serialize_uint16_t(&buffer, ParameterId::PID_TYPE_NAME);
 800cccc:	f002 fcaa 	bl	800f624 <ucdr_serialize_uint16_t>
	ucdr_serialize_uint16_t(&buffer, totalLengthTypeNameField);
 800ccd0:	4620      	mov	r0, r4
	const auto totalLengthTypeNameField = static_cast<uint16_t>(sizeof(lenTypeName) + lenTypeName + typeAlignment);
 800ccd2:	b2b6      	uxth	r6, r6
	ucdr_serialize_uint16_t(&buffer, totalLengthTypeNameField);
 800ccd4:	4631      	mov	r1, r6
 800ccd6:	f002 fca5 	bl	800f624 <ucdr_serialize_uint16_t>
	ucdr_serialize_uint32_t(&buffer, lenTypeName);
 800ccda:	4641      	mov	r1, r8
 800ccdc:	4620      	mov	r0, r4
 800ccde:	f002 fcc7 	bl	800f670 <ucdr_serialize_uint32_t>
	ucdr_serialize_array_char(&buffer, typeName, lenTypeName);
 800cce2:	4642      	mov	r2, r8
 800cce4:	4639      	mov	r1, r7
 800cce6:	4620      	mov	r0, r4
 800cce8:	f002 fc32 	bl	800f550 <ucdr_serialize_array_char>
	ucdr_align_to(&buffer,4);
 800ccec:	4620      	mov	r0, r4
 800ccee:	2104      	movs	r1, #4
 800ccf0:	f002 fbf6 	bl	800f4e0 <ucdr_align_to>

	ucdr_serialize_uint16_t(&buffer, ParameterId::PID_KEY_HASH);
 800ccf4:	2170      	movs	r1, #112	; 0x70
 800ccf6:	4620      	mov	r0, r4
 800ccf8:	f002 fc94 	bl	800f624 <ucdr_serialize_uint16_t>
	ucdr_serialize_uint16_t(&buffer, guidSize);
 800ccfc:	2110      	movs	r1, #16
 800ccfe:	4620      	mov	r0, r4
 800cd00:	f002 fc90 	bl	800f624 <ucdr_serialize_uint16_t>
	ucdr_serialize_array_uint8_t(&buffer, endpointGuid.prefix.id.data(), endpointGuid.prefix.id.size());
 800cd04:	4629      	mov	r1, r5
 800cd06:	220c      	movs	r2, #12
 800cd08:	4620      	mov	r0, r4
 800cd0a:	f002 fc37 	bl	800f57c <ucdr_serialize_array_uint8_t>
	ucdr_serialize_array_uint8_t(&buffer, endpointGuid.entityId.entityKey.data(), endpointGuid.entityId.entityKey.size());
 800cd0e:	2203      	movs	r2, #3
 800cd10:	4649      	mov	r1, r9
 800cd12:	4620      	mov	r0, r4
 800cd14:	f002 fc32 	bl	800f57c <ucdr_serialize_array_uint8_t>
	ucdr_serialize_uint8_t(&buffer, static_cast<uint8_t>(endpointGuid.entityId.entityKind));
 800cd18:	7be9      	ldrb	r1, [r5, #15]
 800cd1a:	4620      	mov	r0, r4
 800cd1c:	f002 fc70 	bl	800f600 <ucdr_serialize_uint8_t>

	ucdr_serialize_uint16_t(&buffer, ParameterId::PID_ENDPOINT_GUID);
 800cd20:	215a      	movs	r1, #90	; 0x5a
 800cd22:	4620      	mov	r0, r4
 800cd24:	f002 fc7e 	bl	800f624 <ucdr_serialize_uint16_t>
	ucdr_serialize_uint16_t(&buffer, guidSize);
 800cd28:	2110      	movs	r1, #16
 800cd2a:	4620      	mov	r0, r4
 800cd2c:	f002 fc7a 	bl	800f624 <ucdr_serialize_uint16_t>
	ucdr_serialize_array_uint8_t(&buffer, endpointGuid.prefix.id.data(), endpointGuid.prefix.id.size());
 800cd30:	4629      	mov	r1, r5
 800cd32:	220c      	movs	r2, #12
 800cd34:	4620      	mov	r0, r4
 800cd36:	f002 fc21 	bl	800f57c <ucdr_serialize_array_uint8_t>
	ucdr_serialize_array_uint8_t(&buffer, endpointGuid.entityId.entityKey.data(), endpointGuid.entityId.entityKey.size());
 800cd3a:	2203      	movs	r2, #3
 800cd3c:	4649      	mov	r1, r9
 800cd3e:	4620      	mov	r0, r4
 800cd40:	f002 fc1c 	bl	800f57c <ucdr_serialize_array_uint8_t>
	ucdr_serialize_uint8_t(&buffer, static_cast<uint8_t>(endpointGuid.entityId.entityKind));
 800cd44:	7be9      	ldrb	r1, [r5, #15]
 800cd46:	4620      	mov	r0, r4
 800cd48:	f002 fc5a 	bl	800f600 <ucdr_serialize_uint8_t>

	const uint8_t unidentifiedOffset = 8;
	ucdr_serialize_uint16_t(&buffer, ParameterId::PID_RELIABILITY);
 800cd4c:	211a      	movs	r1, #26
 800cd4e:	4620      	mov	r0, r4
 800cd50:	f002 fc68 	bl	800f624 <ucdr_serialize_uint16_t>
	ucdr_serialize_uint16_t(&buffer, sizeof(ReliabilityKind_t) + unidentifiedOffset);
 800cd54:	210c      	movs	r1, #12
 800cd56:	4620      	mov	r0, r4
 800cd58:	f002 fc64 	bl	800f624 <ucdr_serialize_uint16_t>
	ucdr_serialize_uint32_t(&buffer, static_cast<uint32_t>(reliabilityKind));
 800cd5c:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 800cd5e:	4620      	mov	r0, r4
 800cd60:	f002 fc86 	bl	800f670 <ucdr_serialize_uint32_t>
	ucdr_serialize_uint32_t(&buffer, 0); // unidentified additional value
 800cd64:	2100      	movs	r1, #0
 800cd66:	4620      	mov	r0, r4
 800cd68:	f002 fc82 	bl	800f670 <ucdr_serialize_uint32_t>
	ucdr_serialize_uint32_t(&buffer, 0); // unidentified additional value
 800cd6c:	2100      	movs	r1, #0
 800cd6e:	4620      	mov	r0, r4
 800cd70:	f002 fc7e 	bl	800f670 <ucdr_serialize_uint32_t>


	ucdr_serialize_uint16_t(&buffer, ParameterId::PID_SENTINEL);
 800cd74:	2101      	movs	r1, #1
 800cd76:	4620      	mov	r0, r4
 800cd78:	f002 fc54 	bl	800f624 <ucdr_serialize_uint16_t>
	ucdr_serialize_uint16_t(&buffer, 0);
 800cd7c:	4620      	mov	r0, r4
 800cd7e:	2100      	movs	r1, #0
 800cd80:	f002 fc50 	bl	800f624 <ucdr_serialize_uint16_t>

	return true;
}
 800cd84:	2001      	movs	r0, #1
 800cd86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd8a:	bf00      	nop

0800cd8c <_ZN4rtps6Domain14receiveJumppadEPvRKNS_10PacketInfoE>:
    constexpr bool isUserPort(Ip4Port_t port){
        return (port & 1) == 1;
    }

    inline bool isMultiCastPort(Ip4Port_t port){
        const auto idWithoutBase = port - PB - DG*Config::DOMAIN_ID;
 800cd8c:	4b2c      	ldr	r3, [pc, #176]	; (800ce40 <_ZN4rtps6Domain14receiveJumppadEPvRKNS_10PacketInfoE+0xb4>)
#if DOMAIN_VERBOSE
        Log::printLine("Domain: Cannot handle multiple elements chained. You might want to increase PBUF_POOL_BUFSIZE\n");
#endif
    }

    if(isMultiCastPort(packet.destPort)){
 800cd8e:	890a      	ldrh	r2, [r1, #8]
 800cd90:	4413      	add	r3, r2
 800cd92:	2b01      	cmp	r3, #1
void Domain::receiveJumppad(void* callee, const PacketInfo& packet){
 800cd94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if(packet.buffer.firstElement->next != nullptr){
 800cd98:	68cc      	ldr	r4, [r1, #12]
    if(isMultiCastPort(packet.destPort)){
 800cd9a:	d916      	bls.n	800cdca <_ZN4rtps6Domain14receiveJumppadEPvRKNS_10PacketInfoE+0x3e>

        const auto basePart = PB + DG*Config::DOMAIN_ID;
        ParticipantId_t participantPart = port - basePart;

        uint16_t offset = 0;
        if(isUserPort){
 800cd9c:	07d1      	lsls	r1, r2, #31
        ParticipantId_t participantPart = port - basePart;
 800cd9e:	f102 0318 	add.w	r3, r2, #24
        if(isUserPort){
 800cda2:	bf4c      	ite	mi
 800cda4:	210b      	movmi	r1, #11
 800cda6:	210a      	movpl	r1, #10
        ParticipantId_t participantPart = port - basePart;
 800cda8:	b2db      	uxtb	r3, r3
            offset = D3;
        }else{
            offset = D1;
        }

        participantPart -= offset;
 800cdaa:	1a5b      	subs	r3, r3, r1

        auto id = static_cast<ParticipantId_t>(participantPart / PG);
 800cdac:	b25b      	sxtb	r3, r3
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	bfb8      	it	lt
 800cdb2:	3301      	addlt	r3, #1
 800cdb4:	105b      	asrs	r3, r3, #1
        if(id*PG + basePart + offset == port){
 800cdb6:	f603 6574 	addw	r5, r3, #3700	; 0xe74
 800cdba:	eb01 0145 	add.w	r1, r1, r5, lsl #1
            m_participants[i].newMessage(static_cast<uint8_t*>(packet.buffer.firstElement->payload), packet.buffer.firstElement->len);
        }
    }else{
        // Pass to addressed one only
        ParticipantId_t id = getParticipantIdFromUnicastPort(packet.destPort, isUserPort(packet.destPort));
        if(id != PARTICIPANT_ID_INVALID){
 800cdbe:	4291      	cmp	r1, r2
 800cdc0:	d101      	bne.n	800cdc6 <_ZN4rtps6Domain14receiveJumppadEPvRKNS_10PacketInfoE+0x3a>
 800cdc2:	1c5a      	adds	r2, r3, #1
 800cdc4:	d126      	bne.n	800ce14 <_ZN4rtps6Domain14receiveJumppadEPvRKNS_10PacketInfoE+0x88>
}
 800cdc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        for(auto i=0; i < m_nextParticipantId - PARTICIPANT_START_ID; ++i) {
 800cdca:	f241 23e1 	movw	r3, #4833	; 0x12e1
 800cdce:	f500 5897 	add.w	r8, r0, #4832	; 0x12e0
 800cdd2:	56c3      	ldrsb	r3, [r0, r3]
 800cdd4:	f898 2000 	ldrb.w	r2, [r8]
 800cdd8:	1a9b      	subs	r3, r3, r2
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	ddf3      	ble.n	800cdc6 <_ZN4rtps6Domain14receiveJumppadEPvRKNS_10PacketInfoE+0x3a>
 800cdde:	f241 27e1 	movw	r7, #4833	; 0x12e1
 800cde2:	460e      	mov	r6, r1
 800cde4:	f500 7acc 	add.w	sl, r0, #408	; 0x198
 800cde8:	2500      	movs	r5, #0
 800cdea:	f241 1948 	movw	r9, #4424	; 0x1148
 800cdee:	4407      	add	r7, r0
 800cdf0:	e000      	b.n	800cdf4 <_ZN4rtps6Domain14receiveJumppadEPvRKNS_10PacketInfoE+0x68>
 800cdf2:	68f4      	ldr	r4, [r6, #12]
            m_participants[i].newMessage(static_cast<uint8_t*>(packet.buffer.firstElement->payload), packet.buffer.firstElement->len);
 800cdf4:	8962      	ldrh	r2, [r4, #10]
 800cdf6:	4650      	mov	r0, sl
 800cdf8:	6861      	ldr	r1, [r4, #4]
        for(auto i=0; i < m_nextParticipantId - PARTICIPANT_START_ID; ++i) {
 800cdfa:	3501      	adds	r5, #1
            m_participants[i].newMessage(static_cast<uint8_t*>(packet.buffer.firstElement->payload), packet.buffer.firstElement->len);
 800cdfc:	f002 f808 	bl	800ee10 <_ZN4rtps11Participant10newMessageEPKht>
        for(auto i=0; i < m_nextParticipantId - PARTICIPANT_START_ID; ++i) {
 800ce00:	f997 3000 	ldrsb.w	r3, [r7]
 800ce04:	f898 2000 	ldrb.w	r2, [r8]
 800ce08:	44ca      	add	sl, r9
 800ce0a:	1a9b      	subs	r3, r3, r2
 800ce0c:	42ab      	cmp	r3, r5
 800ce0e:	dcf0      	bgt.n	800cdf2 <_ZN4rtps6Domain14receiveJumppadEPvRKNS_10PacketInfoE+0x66>
}
 800ce10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#if DOMAIN_VERBOSE
            printf("Domain: Got unicast message on port %u\n", packet.destPort);
#endif
            if(id < m_nextParticipantId) {
 800ce14:	f241 22e1 	movw	r2, #4833	; 0x12e1
 800ce18:	5682      	ldrsb	r2, [r0, r2]
 800ce1a:	429a      	cmp	r2, r3
 800ce1c:	ddd3      	ble.n	800cdc6 <_ZN4rtps6Domain14receiveJumppadEPvRKNS_10PacketInfoE+0x3a>
                m_participants[id - PARTICIPANT_START_ID].newMessage(
 800ce1e:	f500 5197 	add.w	r1, r0, #4832	; 0x12e0
      { return const_cast<_Tp&>(__t[__n]); }
 800ce22:	f500 75cc 	add.w	r5, r0, #408	; 0x198
 800ce26:	f241 1048 	movw	r0, #4424	; 0x1148
 800ce2a:	8962      	ldrh	r2, [r4, #10]
 800ce2c:	780e      	ldrb	r6, [r1, #0]
 800ce2e:	6861      	ldr	r1, [r4, #4]
 800ce30:	1b9b      	subs	r3, r3, r6
 800ce32:	fb00 5003 	mla	r0, r0, r3, r5
}
 800ce36:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
                m_participants[id - PARTICIPANT_START_ID].newMessage(
 800ce3a:	f001 bfe9 	b.w	800ee10 <_ZN4rtps11Participant10newMessageEPKht>
 800ce3e:	bf00      	nop
 800ce40:	ffffe318 	.word	0xffffe318

0800ce44 <_ZN4rtps6DomainC1Ev>:
Domain::Domain() : m_threadPool(receiveJumppad, this), m_transport(ThreadPool::readCallback, &m_threadPool){
 800ce44:	f500 739e 	add.w	r3, r0, #316	; 0x13c
 800ce48:	49f7      	ldr	r1, [pc, #988]	; (800d228 <_ZN4rtps6DomainC1Ev+0x3e4>)
 800ce4a:	4602      	mov	r2, r0
 800ce4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce50:	4680      	mov	r8, r0
 800ce52:	461d      	mov	r5, r3
 800ce54:	b085      	sub	sp, #20
    struct array
 800ce56:	f241 24e4 	movw	r4, #4836	; 0x12e4
    struct Locator{
 800ce5a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
namespace rtps {

    struct PBufWrapper;

    template <typename NetworkDriver>
    class StatelessWriterT : public Writer{
 800ce5e:	f04f 0a01 	mov.w	sl, #1
 800ce62:	9303      	str	r3, [sp, #12]
 800ce64:	4444      	add	r4, r8
 800ce66:	f7fe fe65 	bl	800bb34 <_ZN4rtps10ThreadPoolC1EPFvPvRKNS_10PacketInfoEES1_>
 800ce6a:	4642      	mov	r2, r8
 800ce6c:	49ef      	ldr	r1, [pc, #956]	; (800d22c <_ZN4rtps6DomainC1Ev+0x3e8>)
 800ce6e:	4628      	mov	r0, r5
 800ce70:	f7fe ff7a 	bl	800bd68 <_ZN4rtps9UdpDriverC1EPFvPvP7udp_pcbP4pbufPK8ip4_addrtES1_>
 800ce74:	f508 70cc 	add.w	r0, r8, #408	; 0x198
 800ce78:	f001 f96a 	bl	800e150 <_ZN4rtps11ParticipantC1Ev>
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	f504 619f 	add.w	r1, r4, #1272	; 0x4f8
 800ce82:	f508 5297 	add.w	r2, r8, #4832	; 0x12e0
 800ce86:	f8cd 8008 	str.w	r8, [sp, #8]
 800ce8a:	461d      	mov	r5, r3
 800ce8c:	4688      	mov	r8, r1
 800ce8e:	8013      	strh	r3, [r2, #0]
     * the ChangeKind and dropping it when passing it during deleting of other sequence numbers
     */

    class SimpleHistoryCache{
    public:
        SimpleHistoryCache() = default;
 800ce90:	f104 03d4 	add.w	r3, r4, #212	; 0xd4
 800ce94:	f04f 0700 	mov.w	r7, #0
 800ce98:	f04f 0920 	mov.w	r9, #32
 800ce9c:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
 800cea0:	9301      	str	r3, [sp, #4]
 800cea2:	2100      	movs	r1, #0
 800cea4:	4be2      	ldr	r3, [pc, #904]	; (800d230 <_ZN4rtps6DomainC1Ev+0x3ec>)
 800cea6:	464a      	mov	r2, r9
 800cea8:	f8c4 5094 	str.w	r5, [r4, #148]	; 0x94
 800ceac:	f504 70d4 	add.w	r0, r4, #424	; 0x1a8
 800ceb0:	6023      	str	r3, [r4, #0]
 800ceb2:	f8c4 5098 	str.w	r5, [r4, #152]	; 0x98
 800ceb6:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
 800ceba:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
 800cebe:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
 800cec2:	f884 6043 	strb.w	r6, [r4, #67]	; 0x43
 800cec6:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
 800ceca:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 800cece:	f884 5046 	strb.w	r5, [r4, #70]	; 0x46
 800ced2:	f884 5047 	strb.w	r5, [r4, #71]	; 0x47
 800ced6:	64a5      	str	r5, [r4, #72]	; 0x48
 800ced8:	64e5      	str	r5, [r4, #76]	; 0x4c
 800ceda:	6525      	str	r5, [r4, #80]	; 0x50
 800cedc:	6565      	str	r5, [r4, #84]	; 0x54
 800cede:	65e5      	str	r5, [r4, #92]	; 0x5c
 800cee0:	66e5      	str	r5, [r4, #108]	; 0x6c
 800cee2:	f8a4 5070 	strh.w	r5, [r4, #112]	; 0x70
 800cee6:	f884 a078 	strb.w	sl, [r4, #120]	; 0x78
        ChangeKind_t kind = ChangeKind_t::INVALID;
        SequenceNumber_t sequenceNumber = SEQUENCENUMBER_UNKNOWN;
        PBufWrapper data{};

        CacheChange() = default;
 800ceea:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
 800ceee:	f8a4 5094 	strh.w	r5, [r4, #148]	; 0x94
 800cef2:	f884 7084 	strb.w	r7, [r4, #132]	; 0x84
 800cef6:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
 800cefa:	f884 5098 	strb.w	r5, [r4, #152]	; 0x98
 800cefe:	e9c4 5a1f 	strd	r5, sl, [r4, #124]	; 0x7c
 800cf02:	e9c4 6522 	strd	r6, r5, [r4, #136]	; 0x88
 800cf06:	e9c4 6527 	strd	r6, r5, [r4, #156]	; 0x9c
 800cf0a:	f8c4 50a4 	str.w	r5, [r4, #164]	; 0xa4
 800cf0e:	9b01      	ldr	r3, [sp, #4]
 800cf10:	f8c4 50ac 	str.w	r5, [r4, #172]	; 0xac
 800cf14:	f8c4 50bc 	str.w	r5, [r4, #188]	; 0xbc
 800cf18:	f8c4 50c0 	str.w	r5, [r4, #192]	; 0xc0
 800cf1c:	f8c4 50d0 	str.w	r5, [r4, #208]	; 0xd0
 800cf20:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
 800cf24:	f8a4 50a8 	strh.w	r5, [r4, #168]	; 0xa8
 800cf28:	f884 50ac 	strb.w	r5, [r4, #172]	; 0xac
 800cf2c:	f8c4 50b8 	str.w	r5, [r4, #184]	; 0xb8
 800cf30:	f8a4 50bc 	strh.w	r5, [r4, #188]	; 0xbc
 800cf34:	f884 50c0 	strb.w	r5, [r4, #192]	; 0xc0
 800cf38:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
 800cf3c:	f8a4 50d0 	strh.w	r5, [r4, #208]	; 0xd0
 800cf40:	e9c4 652c 	strd	r6, r5, [r4, #176]	; 0xb0
 800cf44:	e9c4 6531 	strd	r6, r5, [r4, #196]	; 0xc4
 800cf48:	611d      	str	r5, [r3, #16]
 800cf4a:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
 800cf4e:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
 800cf52:	f884 50d4 	strb.w	r5, [r4, #212]	; 0xd4
 800cf56:	f8c4 50e0 	str.w	r5, [r4, #224]	; 0xe0
 800cf5a:	f8a4 50e4 	strh.w	r5, [r4, #228]	; 0xe4
 800cf5e:	f884 50e8 	strb.w	r5, [r4, #232]	; 0xe8
 800cf62:	f8c4 50f4 	str.w	r5, [r4, #244]	; 0xf4
 800cf66:	f8a4 50f8 	strh.w	r5, [r4, #248]	; 0xf8
 800cf6a:	f8c4 50fc 	str.w	r5, [r4, #252]	; 0xfc
 800cf6e:	f8c4 510c 	str.w	r5, [r4, #268]	; 0x10c
 800cf72:	e9c4 6536 	strd	r6, r5, [r4, #216]	; 0xd8
 800cf76:	e9c4 653b 	strd	r6, r5, [r4, #236]	; 0xec
 800cf7a:	f884 50fc 	strb.w	r5, [r4, #252]	; 0xfc
 800cf7e:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
 800cf82:	f8c4 5120 	str.w	r5, [r4, #288]	; 0x120
 800cf86:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
 800cf8a:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
 800cf8e:	f8c4 5138 	str.w	r5, [r4, #312]	; 0x138
 800cf92:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
 800cf96:	f8c4 514c 	str.w	r5, [r4, #332]	; 0x14c
 800cf9a:	f8c4 515c 	str.w	r5, [r4, #348]	; 0x15c
 800cf9e:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 800cfa2:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
 800cfa6:	f8c4 5108 	str.w	r5, [r4, #264]	; 0x108
 800cfaa:	f8a4 510c 	strh.w	r5, [r4, #268]	; 0x10c
 800cfae:	f884 5110 	strb.w	r5, [r4, #272]	; 0x110
 800cfb2:	f8c4 6114 	str.w	r6, [r4, #276]	; 0x114
 800cfb6:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
 800cfba:	f8c4 511c 	str.w	r5, [r4, #284]	; 0x11c
 800cfbe:	f8a4 5120 	strh.w	r5, [r4, #288]	; 0x120
 800cfc2:	f884 5124 	strb.w	r5, [r4, #292]	; 0x124
 800cfc6:	f8c4 6128 	str.w	r6, [r4, #296]	; 0x128
 800cfca:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 800cfce:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 800cfd2:	f8a4 5134 	strh.w	r5, [r4, #308]	; 0x134
 800cfd6:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
 800cfda:	f8c4 613c 	str.w	r6, [r4, #316]	; 0x13c
 800cfde:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
 800cfe2:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
 800cfe6:	f8a4 5148 	strh.w	r5, [r4, #328]	; 0x148
 800cfea:	f884 514c 	strb.w	r5, [r4, #332]	; 0x14c
 800cfee:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
 800cff2:	f8c4 5154 	str.w	r5, [r4, #340]	; 0x154
 800cff6:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
 800cffa:	f8a4 515c 	strh.w	r5, [r4, #348]	; 0x15c
 800cffe:	f8a4 5160 	strh.w	r5, [r4, #352]	; 0x160
        ReaderProxy() : remoteReaderGuid({GUIDPREFIX_UNKNOWN, ENTITYID_UNKNOWN}){};
 800d002:	f8c4 5180 	str.w	r5, [r4, #384]	; 0x180
 800d006:	f884 6184 	strb.w	r6, [r4, #388]	; 0x184
 800d00a:	f884 6185 	strb.w	r6, [r4, #389]	; 0x185
 800d00e:	f884 6186 	strb.w	r6, [r4, #390]	; 0x186
 800d012:	f884 6187 	strb.w	r6, [r4, #391]	; 0x187
 800d016:	f884 5188 	strb.w	r5, [r4, #392]	; 0x188
 800d01a:	f884 5189 	strb.w	r5, [r4, #393]	; 0x189
 800d01e:	f884 518a 	strb.w	r5, [r4, #394]	; 0x18a
 800d022:	f884 518b 	strb.w	r5, [r4, #395]	; 0x18b
 800d026:	f8c4 518c 	str.w	r5, [r4, #396]	; 0x18c
 800d02a:	f8c4 5190 	str.w	r5, [r4, #400]	; 0x190
 800d02e:	f8c4 5194 	str.w	r5, [r4, #404]	; 0x194
 800d032:	f8c4 5198 	str.w	r5, [r4, #408]	; 0x198
 800d036:	f8c4 519c 	str.w	r5, [r4, #412]	; 0x19c
 800d03a:	f8c4 51a0 	str.w	r5, [r4, #416]	; 0x1a0
 800d03e:	f8c4 91a4 	str.w	r9, [r4, #420]	; 0x1a4
 800d042:	f8a4 5162 	strh.w	r5, [r4, #354]	; 0x162
 800d046:	f8c4 5164 	str.w	r5, [r4, #356]	; 0x164
 800d04a:	f8c4 5168 	str.w	r5, [r4, #360]	; 0x168
    class MemoryPool{
 800d04e:	f884 516c 	strb.w	r5, [r4, #364]	; 0x16c
 800d052:	f8c4 5170 	str.w	r5, [r4, #368]	; 0x170
 800d056:	f8c4 5174 	str.w	r5, [r4, #372]	; 0x174
 800d05a:	f8c4 5178 	str.w	r5, [r4, #376]	; 0x178
 800d05e:	f8c4 517c 	str.w	r5, [r4, #380]	; 0x17c
 800d062:	f002 fc81 	bl	800f968 <memset>
 800d066:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
 800d06a:	f8c4 51d0 	str.w	r5, [r4, #464]	; 0x1d0
 800d06e:	464a      	mov	r2, r9
 800d070:	f8c4 51d4 	str.w	r5, [r4, #468]	; 0x1d4
 800d074:	2100      	movs	r1, #0
 800d076:	f8c4 51d8 	str.w	r5, [r4, #472]	; 0x1d8
 800d07a:	f504 7000 	add.w	r0, r4, #512	; 0x200
 800d07e:	f884 61dc 	strb.w	r6, [r4, #476]	; 0x1dc
 800d082:	f884 61dd 	strb.w	r6, [r4, #477]	; 0x1dd
 800d086:	f884 61de 	strb.w	r6, [r4, #478]	; 0x1de
 800d08a:	f884 61df 	strb.w	r6, [r4, #479]	; 0x1df
 800d08e:	f884 51e0 	strb.w	r5, [r4, #480]	; 0x1e0
 800d092:	f884 51e1 	strb.w	r5, [r4, #481]	; 0x1e1
 800d096:	f884 51e2 	strb.w	r5, [r4, #482]	; 0x1e2
 800d09a:	f884 51e3 	strb.w	r5, [r4, #483]	; 0x1e3
 800d09e:	f8c4 51e4 	str.w	r5, [r4, #484]	; 0x1e4
 800d0a2:	f8c4 51e8 	str.w	r5, [r4, #488]	; 0x1e8
 800d0a6:	f8c4 51ec 	str.w	r5, [r4, #492]	; 0x1ec
 800d0aa:	f8c4 51f0 	str.w	r5, [r4, #496]	; 0x1f0
 800d0ae:	f8c4 91fc 	str.w	r9, [r4, #508]	; 0x1fc
 800d0b2:	f8c4 51f4 	str.w	r5, [r4, #500]	; 0x1f4
 800d0b6:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
 800d0ba:	f002 fc55 	bl	800f968 <memset>
 800d0be:	f8c4 5224 	str.w	r5, [r4, #548]	; 0x224
 800d0c2:	f8c4 5228 	str.w	r5, [r4, #552]	; 0x228
 800d0c6:	f504 7016 	add.w	r0, r4, #600	; 0x258
 800d0ca:	f8c4 522c 	str.w	r5, [r4, #556]	; 0x22c
 800d0ce:	f504 741f 	add.w	r4, r4, #636	; 0x27c
 800d0d2:	f844 5c4c 	str.w	r5, [r4, #-76]
 800d0d6:	464a      	mov	r2, r9
 800d0d8:	f804 6c48 	strb.w	r6, [r4, #-72]
 800d0dc:	2100      	movs	r1, #0
 800d0de:	f804 6c47 	strb.w	r6, [r4, #-71]
 800d0e2:	f804 6c46 	strb.w	r6, [r4, #-70]
 800d0e6:	f804 6c45 	strb.w	r6, [r4, #-69]
 800d0ea:	f804 5c44 	strb.w	r5, [r4, #-68]
 800d0ee:	f804 5c43 	strb.w	r5, [r4, #-67]
 800d0f2:	f804 5c42 	strb.w	r5, [r4, #-66]
 800d0f6:	f804 5c41 	strb.w	r5, [r4, #-65]
 800d0fa:	f844 5c40 	str.w	r5, [r4, #-64]
 800d0fe:	f844 5c3c 	str.w	r5, [r4, #-60]
 800d102:	f844 5c38 	str.w	r5, [r4, #-56]
 800d106:	f844 5c34 	str.w	r5, [r4, #-52]
 800d10a:	f844 9c28 	str.w	r9, [r4, #-40]
 800d10e:	f844 5c30 	str.w	r5, [r4, #-48]
 800d112:	f844 5c2c 	str.w	r5, [r4, #-44]
 800d116:	f002 fc27 	bl	800f968 <memset>
 800d11a:	4544      	cmp	r4, r8
 800d11c:	f47f aeb8 	bne.w	800ce90 <_ZN4rtps6DomainC1Ev+0x4c>
 800d120:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800d124:	f241 7cdc 	movw	ip, #6108	; 0x17dc
 800d128:	f641 09e4 	movw	r9, #6372	; 0x18e4
 800d12c:	f641 1a08 	movw	sl, #6408	; 0x1908
 800d130:	f508 53c1 	add.w	r3, r8, #6176	; 0x1820
 800d134:	f808 700c 	strb.w	r7, [r8, ip]
 800d138:	f641 103c 	movw	r0, #6460	; 0x193c
 800d13c:	f641 1174 	movw	r1, #6516	; 0x1974
 800d140:	f103 0c08 	add.w	ip, r3, #8
 800d144:	701e      	strb	r6, [r3, #0]
 800d146:	705e      	strb	r6, [r3, #1]
 800d148:	f641 12ac 	movw	r2, #6572	; 0x19ac
 800d14c:	709e      	strb	r6, [r3, #2]
 800d14e:	f641 2410 	movw	r4, #6672	; 0x1a10
 800d152:	70de      	strb	r6, [r3, #3]
 800d154:	f641 2e68 	movw	lr, #6760	; 0x1a68
 800d158:	711f      	strb	r7, [r3, #4]
 800d15a:	715f      	strb	r7, [r3, #5]
 800d15c:	719f      	strb	r7, [r3, #6]
 800d15e:	71df      	strb	r7, [r3, #7]
 800d160:	609d      	str	r5, [r3, #8]

#include "rtps/entities/Reader.h"
#include "rtps/storages/HistoryCache.h"

namespace rtps{
    class StatelessReader final: public Reader{
 800d162:	f508 53bf 	add.w	r3, r8, #6112	; 0x17e0
 800d166:	f8cc 5004 	str.w	r5, [ip, #4]
 800d16a:	f8cc 5008 	str.w	r5, [ip, #8]
 800d16e:	f8cc 500c 	str.w	r5, [ip, #12]
 800d172:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 800d234 <_ZN4rtps6DomainC1Ev+0x3f0>
 800d176:	e9c3 5516 	strd	r5, r5, [r3, #88]	; 0x58
 800d17a:	f8c3 c000 	str.w	ip, [r3]
 800d17e:	f508 53c4 	add.w	r3, r8, #6272	; 0x1880
 800d182:	701e      	strb	r6, [r3, #0]
 800d184:	705e      	strb	r6, [r3, #1]
 800d186:	709e      	strb	r6, [r3, #2]
 800d188:	70de      	strb	r6, [r3, #3]
 800d18a:	711f      	strb	r7, [r3, #4]
 800d18c:	715f      	strb	r7, [r3, #5]
 800d18e:	719f      	strb	r7, [r3, #6]
 800d190:	71df      	strb	r7, [r3, #7]
 800d192:	609d      	str	r5, [r3, #8]
 800d194:	60dd      	str	r5, [r3, #12]
 800d196:	611d      	str	r5, [r3, #16]
 800d198:	615d      	str	r5, [r3, #20]
 800d19a:	f508 53c2 	add.w	r3, r8, #6208	; 0x1840
 800d19e:	f8c3 c000 	str.w	ip, [r3]
 800d1a2:	eb08 0c09 	add.w	ip, r8, r9
 800d1a6:	e9c3 5516 	strd	r5, r5, [r3, #88]	; 0x58
 800d1aa:	f508 53c5 	add.w	r3, r8, #6304	; 0x18a0
 800d1ae:	701f      	strb	r7, [r3, #0]

namespace rtps{
    struct SubmessageHeartbeat;

    template <class NetworkDriver>
    class StatefulReaderT final: public Reader{
 800d1b0:	f641 03a4 	movw	r3, #6308	; 0x18a4
 800d1b4:	f808 6009 	strb.w	r6, [r8, r9]
 800d1b8:	f88c 6001 	strb.w	r6, [ip, #1]
 800d1bc:	f88c 6002 	strb.w	r6, [ip, #2]
 800d1c0:	f88c 6003 	strb.w	r6, [ip, #3]
 800d1c4:	f88c 7004 	strb.w	r7, [ip, #4]
 800d1c8:	f88c 7005 	strb.w	r7, [ip, #5]
 800d1cc:	f88c 7006 	strb.w	r7, [ip, #6]
 800d1d0:	f88c 7007 	strb.w	r7, [ip, #7]
 800d1d4:	f8cc 5008 	str.w	r5, [ip, #8]
 800d1d8:	f8cc 500c 	str.w	r5, [ip, #12]
 800d1dc:	f8cc 5010 	str.w	r5, [ip, #16]
 800d1e0:	f8cc 5014 	str.w	r5, [ip, #20]
 800d1e4:	f641 1c14 	movw	ip, #6420	; 0x1914
 800d1e8:	f848 500a 	str.w	r5, [r8, sl]
 800d1ec:	44c2      	add	sl, r8
 800d1ee:	f8df 9048 	ldr.w	r9, [pc, #72]	; 800d238 <_ZN4rtps6DomainC1Ev+0x3f4>
 800d1f2:	f848 9003 	str.w	r9, [r8, r3]
 800d1f6:	4443      	add	r3, r8
 800d1f8:	f8aa 5004 	strh.w	r5, [sl, #4]
 800d1fc:	eb08 0a04 	add.w	sl, r8, r4
 800d200:	f808 700c 	strb.w	r7, [r8, ip]
 800d204:	44c4      	add	ip, r8
 800d206:	f8cc 5004 	str.w	r5, [ip, #4]
 800d20a:	eb08 0c00 	add.w	ip, r8, r0
 800d20e:	f808 6000 	strb.w	r6, [r8, r0]
 800d212:	eb08 0001 	add.w	r0, r8, r1
 800d216:	f88c 6001 	strb.w	r6, [ip, #1]
 800d21a:	f88c 6002 	strb.w	r6, [ip, #2]
 800d21e:	f88c 6003 	strb.w	r6, [ip, #3]
 800d222:	f88c 7004 	strb.w	r7, [ip, #4]
 800d226:	e009      	b.n	800d23c <_ZN4rtps6DomainC1Ev+0x3f8>
 800d228:	0800cd8d 	.word	0x0800cd8d
 800d22c:	0800bc7d 	.word	0x0800bc7d
 800d230:	08011f20 	.word	0x08011f20
 800d234:	08010db4 	.word	0x08010db4
 800d238:	08011f48 	.word	0x08011f48
 800d23c:	f88c 7005 	strb.w	r7, [ip, #5]
 800d240:	f88c 7006 	strb.w	r7, [ip, #6]
 800d244:	f88c 7007 	strb.w	r7, [ip, #7]
 800d248:	f8cc 5008 	str.w	r5, [ip, #8]
 800d24c:	f8cc 500c 	str.w	r5, [ip, #12]
 800d250:	f8cc 5010 	str.w	r5, [ip, #16]
 800d254:	f8cc 5014 	str.w	r5, [ip, #20]
 800d258:	eb08 0c02 	add.w	ip, r8, r2
 800d25c:	f808 6001 	strb.w	r6, [r8, r1]
 800d260:	f641 11d0 	movw	r1, #6608	; 0x19d0
 800d264:	7046      	strb	r6, [r0, #1]
 800d266:	7086      	strb	r6, [r0, #2]
 800d268:	70c6      	strb	r6, [r0, #3]
 800d26a:	7107      	strb	r7, [r0, #4]
 800d26c:	7147      	strb	r7, [r0, #5]
 800d26e:	7187      	strb	r7, [r0, #6]
 800d270:	71c7      	strb	r7, [r0, #7]
 800d272:	6085      	str	r5, [r0, #8]
 800d274:	60c5      	str	r5, [r0, #12]
 800d276:	6105      	str	r5, [r0, #16]
 800d278:	6145      	str	r5, [r0, #20]
 800d27a:	f641 2034 	movw	r0, #6708	; 0x1a34
 800d27e:	f808 6002 	strb.w	r6, [r8, r2]
 800d282:	eb08 020e 	add.w	r2, r8, lr
 800d286:	f88c 6001 	strb.w	r6, [ip, #1]
 800d28a:	f88c 6002 	strb.w	r6, [ip, #2]
 800d28e:	f88c 6003 	strb.w	r6, [ip, #3]
 800d292:	f88c 7004 	strb.w	r7, [ip, #4]
 800d296:	f88c 7005 	strb.w	r7, [ip, #5]
 800d29a:	f88c 7006 	strb.w	r7, [ip, #6]
 800d29e:	f88c 7007 	strb.w	r7, [ip, #7]
 800d2a2:	f8cc 5008 	str.w	r5, [ip, #8]
 800d2a6:	f8cc 500c 	str.w	r5, [ip, #12]
 800d2aa:	f8cc 5010 	str.w	r5, [ip, #16]
 800d2ae:	f8cc 5014 	str.w	r5, [ip, #20]
 800d2b2:	f641 2cd8 	movw	ip, #6872	; 0x1ad8
 800d2b6:	f8c3 5120 	str.w	r5, [r3, #288]	; 0x120
 800d2ba:	f8c3 5124 	str.w	r5, [r3, #292]	; 0x124
 800d2be:	f508 53d5 	add.w	r3, r8, #6816	; 0x1aa0
 800d2c2:	f808 6004 	strb.w	r6, [r8, r4]
 800d2c6:	f508 54d8 	add.w	r4, r8, #6912	; 0x1b00
 800d2ca:	f88a 6001 	strb.w	r6, [sl, #1]
 800d2ce:	f88a 6002 	strb.w	r6, [sl, #2]
 800d2d2:	f88a 6003 	strb.w	r6, [sl, #3]
 800d2d6:	f88a 7004 	strb.w	r7, [sl, #4]
 800d2da:	f88a 7005 	strb.w	r7, [sl, #5]
 800d2de:	f88a 7006 	strb.w	r7, [sl, #6]
 800d2e2:	f88a 7007 	strb.w	r7, [sl, #7]
 800d2e6:	f8ca 5008 	str.w	r5, [sl, #8]
 800d2ea:	f8ca 500c 	str.w	r5, [sl, #12]
 800d2ee:	f8ca 5010 	str.w	r5, [sl, #16]
 800d2f2:	f8ca 5014 	str.w	r5, [sl, #20]
#include "rtps/storages/SimpleHistoryCache.h"

namespace rtps{

    template <class NetworkDriver>
    class StatefulWriterT final : public Writer{
 800d2f6:	f04f 0a01 	mov.w	sl, #1
 800d2fa:	f848 9001 	str.w	r9, [r8, r1]
 800d2fe:	4441      	add	r1, r8
 800d300:	f848 5000 	str.w	r5, [r8, r0]
 800d304:	4440      	add	r0, r8
 800d306:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800d30a:	8085      	strh	r5, [r0, #4]
 800d30c:	f508 50d2 	add.w	r0, r8, #6720	; 0x1a40
 800d310:	7007      	strb	r7, [r0, #0]
 800d312:	6045      	str	r5, [r0, #4]
 800d314:	f103 0008 	add.w	r0, r3, #8
 800d318:	f808 600e 	strb.w	r6, [r8, lr]
 800d31c:	7056      	strb	r6, [r2, #1]
 800d31e:	7096      	strb	r6, [r2, #2]
 800d320:	70d6      	strb	r6, [r2, #3]
 800d322:	7117      	strb	r7, [r2, #4]
 800d324:	7157      	strb	r7, [r2, #5]
 800d326:	7197      	strb	r7, [r2, #6]
 800d328:	71d7      	strb	r7, [r2, #7]
 800d32a:	6095      	str	r5, [r2, #8]
 800d32c:	60d5      	str	r5, [r2, #12]
 800d32e:	6115      	str	r5, [r2, #16]
 800d330:	6155      	str	r5, [r2, #20]
 800d332:	eb08 020c 	add.w	r2, r8, ip
 800d336:	701e      	strb	r6, [r3, #0]
 800d338:	705e      	strb	r6, [r3, #1]
 800d33a:	709e      	strb	r6, [r3, #2]
 800d33c:	70de      	strb	r6, [r3, #3]
 800d33e:	711f      	strb	r7, [r3, #4]
 800d340:	715f      	strb	r7, [r3, #5]
 800d342:	719f      	strb	r7, [r3, #6]
 800d344:	71df      	strb	r7, [r3, #7]
 800d346:	609d      	str	r5, [r3, #8]
 800d348:	f508 53d7 	add.w	r3, r8, #6880	; 0x1ae0
 800d34c:	6045      	str	r5, [r0, #4]
 800d34e:	6085      	str	r5, [r0, #8]
 800d350:	60c5      	str	r5, [r0, #12]
 800d352:	f504 60a2 	add.w	r0, r4, #1296	; 0x510
 800d356:	f808 600c 	strb.w	r6, [r8, ip]
 800d35a:	9002      	str	r0, [sp, #8]
 800d35c:	f641 20fc 	movw	r0, #6908	; 0x1afc
 800d360:	7056      	strb	r6, [r2, #1]
 800d362:	7096      	strb	r6, [r2, #2]
 800d364:	70d6      	strb	r6, [r2, #3]
 800d366:	2600      	movs	r6, #0
 800d368:	7117      	strb	r7, [r2, #4]
 800d36a:	7157      	strb	r7, [r2, #5]
 800d36c:	7197      	strb	r7, [r2, #6]
 800d36e:	71d7      	strb	r7, [r2, #7]
 800d370:	601d      	str	r5, [r3, #0]
 800d372:	605d      	str	r5, [r3, #4]
 800d374:	609d      	str	r5, [r3, #8]
 800d376:	60dd      	str	r5, [r3, #12]
 800d378:	f8c1 5120 	str.w	r5, [r1, #288]	; 0x120
 800d37c:	f8c1 5124 	str.w	r5, [r1, #292]	; 0x124
 800d380:	f808 7000 	strb.w	r7, [r8, r0]
 800d384:	f104 03d4 	add.w	r3, r4, #212	; 0xd4
 800d388:	f04f 0b00 	mov.w	fp, #0
 800d38c:	2520      	movs	r5, #32
 800d38e:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
 800d392:	9301      	str	r3, [sp, #4]
 800d394:	2100      	movs	r1, #0
 800d396:	4baf      	ldr	r3, [pc, #700]	; (800d654 <_ZN4rtps6DomainC1Ev+0x810>)
 800d398:	462a      	mov	r2, r5
 800d39a:	f8c4 6094 	str.w	r6, [r4, #148]	; 0x94
 800d39e:	f504 70da 	add.w	r0, r4, #436	; 0x1b4
 800d3a2:	6023      	str	r3, [r4, #0]
 800d3a4:	f8c4 6098 	str.w	r6, [r4, #152]	; 0x98
 800d3a8:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 800d3ac:	f884 9041 	strb.w	r9, [r4, #65]	; 0x41
 800d3b0:	f884 9042 	strb.w	r9, [r4, #66]	; 0x42
 800d3b4:	f884 9043 	strb.w	r9, [r4, #67]	; 0x43
 800d3b8:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
 800d3bc:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
 800d3c0:	f884 6046 	strb.w	r6, [r4, #70]	; 0x46
 800d3c4:	f884 6047 	strb.w	r6, [r4, #71]	; 0x47
 800d3c8:	64a6      	str	r6, [r4, #72]	; 0x48
 800d3ca:	64e6      	str	r6, [r4, #76]	; 0x4c
 800d3cc:	6526      	str	r6, [r4, #80]	; 0x50
 800d3ce:	6566      	str	r6, [r4, #84]	; 0x54
 800d3d0:	65e6      	str	r6, [r4, #92]	; 0x5c
 800d3d2:	66e6      	str	r6, [r4, #108]	; 0x6c
 800d3d4:	f8a4 6070 	strh.w	r6, [r4, #112]	; 0x70
 800d3d8:	f884 a078 	strb.w	sl, [r4, #120]	; 0x78
 800d3dc:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
 800d3e0:	f8a4 6094 	strh.w	r6, [r4, #148]	; 0x94
 800d3e4:	f884 b084 	strb.w	fp, [r4, #132]	; 0x84
 800d3e8:	f8c4 60a8 	str.w	r6, [r4, #168]	; 0xa8
 800d3ec:	f884 6098 	strb.w	r6, [r4, #152]	; 0x98
 800d3f0:	e9c4 6a1f 	strd	r6, sl, [r4, #124]	; 0x7c
 800d3f4:	e9c4 9622 	strd	r9, r6, [r4, #136]	; 0x88
 800d3f8:	e9c4 9627 	strd	r9, r6, [r4, #156]	; 0x9c
 800d3fc:	f8c4 60a4 	str.w	r6, [r4, #164]	; 0xa4
 800d400:	9b01      	ldr	r3, [sp, #4]
 800d402:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
 800d406:	f8c4 60bc 	str.w	r6, [r4, #188]	; 0xbc
 800d40a:	f8c4 60c0 	str.w	r6, [r4, #192]	; 0xc0
 800d40e:	f8c4 60d0 	str.w	r6, [r4, #208]	; 0xd0
 800d412:	f8c4 60d4 	str.w	r6, [r4, #212]	; 0xd4
 800d416:	f8a4 60a8 	strh.w	r6, [r4, #168]	; 0xa8
 800d41a:	f884 60ac 	strb.w	r6, [r4, #172]	; 0xac
 800d41e:	f8c4 60b8 	str.w	r6, [r4, #184]	; 0xb8
 800d422:	f8a4 60bc 	strh.w	r6, [r4, #188]	; 0xbc
 800d426:	f884 60c0 	strb.w	r6, [r4, #192]	; 0xc0
 800d42a:	f8c4 60cc 	str.w	r6, [r4, #204]	; 0xcc
 800d42e:	f8a4 60d0 	strh.w	r6, [r4, #208]	; 0xd0
 800d432:	e9c4 962c 	strd	r9, r6, [r4, #176]	; 0xb0
 800d436:	e9c4 9631 	strd	r9, r6, [r4, #196]	; 0xc4
 800d43a:	611e      	str	r6, [r3, #16]
 800d43c:	f8c4 60e8 	str.w	r6, [r4, #232]	; 0xe8
 800d440:	f8c4 60f8 	str.w	r6, [r4, #248]	; 0xf8
 800d444:	f884 60d4 	strb.w	r6, [r4, #212]	; 0xd4
 800d448:	f8c4 60e0 	str.w	r6, [r4, #224]	; 0xe0
 800d44c:	f8a4 60e4 	strh.w	r6, [r4, #228]	; 0xe4
 800d450:	f884 60e8 	strb.w	r6, [r4, #232]	; 0xe8
 800d454:	f8c4 60f4 	str.w	r6, [r4, #244]	; 0xf4
 800d458:	f8a4 60f8 	strh.w	r6, [r4, #248]	; 0xf8
 800d45c:	f8c4 60fc 	str.w	r6, [r4, #252]	; 0xfc
 800d460:	f8c4 610c 	str.w	r6, [r4, #268]	; 0x10c
 800d464:	e9c4 9636 	strd	r9, r6, [r4, #216]	; 0xd8
 800d468:	e9c4 963b 	strd	r9, r6, [r4, #236]	; 0xec
 800d46c:	f884 60fc 	strb.w	r6, [r4, #252]	; 0xfc
 800d470:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
 800d474:	f8c4 6120 	str.w	r6, [r4, #288]	; 0x120
 800d478:	f8c4 6124 	str.w	r6, [r4, #292]	; 0x124
 800d47c:	f8c4 6134 	str.w	r6, [r4, #308]	; 0x134
 800d480:	f8c4 6138 	str.w	r6, [r4, #312]	; 0x138
 800d484:	f8c4 6148 	str.w	r6, [r4, #328]	; 0x148
 800d488:	f8c4 614c 	str.w	r6, [r4, #332]	; 0x14c
 800d48c:	f8c4 615c 	str.w	r6, [r4, #348]	; 0x15c
 800d490:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
 800d494:	f8c4 6104 	str.w	r6, [r4, #260]	; 0x104
 800d498:	f8c4 6108 	str.w	r6, [r4, #264]	; 0x108
 800d49c:	f8a4 610c 	strh.w	r6, [r4, #268]	; 0x10c
 800d4a0:	f884 6110 	strb.w	r6, [r4, #272]	; 0x110
 800d4a4:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 800d4a8:	f8c4 6118 	str.w	r6, [r4, #280]	; 0x118
 800d4ac:	f8c4 611c 	str.w	r6, [r4, #284]	; 0x11c
 800d4b0:	f8a4 6120 	strh.w	r6, [r4, #288]	; 0x120
 800d4b4:	f884 6124 	strb.w	r6, [r4, #292]	; 0x124
 800d4b8:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
 800d4bc:	f8c4 612c 	str.w	r6, [r4, #300]	; 0x12c
 800d4c0:	f8c4 6130 	str.w	r6, [r4, #304]	; 0x130
 800d4c4:	f8a4 6134 	strh.w	r6, [r4, #308]	; 0x134
 800d4c8:	f884 6138 	strb.w	r6, [r4, #312]	; 0x138
 800d4cc:	f8c4 913c 	str.w	r9, [r4, #316]	; 0x13c
 800d4d0:	f8c4 6140 	str.w	r6, [r4, #320]	; 0x140
 800d4d4:	f8c4 6144 	str.w	r6, [r4, #324]	; 0x144
 800d4d8:	f8a4 6148 	strh.w	r6, [r4, #328]	; 0x148
 800d4dc:	f884 614c 	strb.w	r6, [r4, #332]	; 0x14c
 800d4e0:	f8c4 9150 	str.w	r9, [r4, #336]	; 0x150
 800d4e4:	f8c4 6154 	str.w	r6, [r4, #340]	; 0x154
 800d4e8:	f8c4 6158 	str.w	r6, [r4, #344]	; 0x158
 800d4ec:	f8a4 615c 	strh.w	r6, [r4, #348]	; 0x15c
 800d4f0:	f8a4 6160 	strh.w	r6, [r4, #352]	; 0x160
 800d4f4:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
 800d4f8:	f884 9190 	strb.w	r9, [r4, #400]	; 0x190
 800d4fc:	f884 9191 	strb.w	r9, [r4, #401]	; 0x191
 800d500:	f884 9192 	strb.w	r9, [r4, #402]	; 0x192
 800d504:	f884 9193 	strb.w	r9, [r4, #403]	; 0x193
 800d508:	f884 6194 	strb.w	r6, [r4, #404]	; 0x194
 800d50c:	f884 6195 	strb.w	r6, [r4, #405]	; 0x195
 800d510:	f884 6196 	strb.w	r6, [r4, #406]	; 0x196
 800d514:	f884 6197 	strb.w	r6, [r4, #407]	; 0x197
 800d518:	f8c4 6198 	str.w	r6, [r4, #408]	; 0x198
 800d51c:	f8c4 619c 	str.w	r6, [r4, #412]	; 0x19c
 800d520:	f8c4 61a0 	str.w	r6, [r4, #416]	; 0x1a0
 800d524:	f8c4 61a4 	str.w	r6, [r4, #420]	; 0x1a4
 800d528:	f8c4 61a8 	str.w	r6, [r4, #424]	; 0x1a8
 800d52c:	f8c4 61ac 	str.w	r6, [r4, #428]	; 0x1ac
 800d530:	f8c4 51b0 	str.w	r5, [r4, #432]	; 0x1b0
 800d534:	f8a4 6162 	strh.w	r6, [r4, #354]	; 0x162
 800d538:	f8c4 6164 	str.w	r6, [r4, #356]	; 0x164
 800d53c:	f8c4 6168 	str.w	r6, [r4, #360]	; 0x168
 800d540:	f8c4 a170 	str.w	sl, [r4, #368]	; 0x170
 800d544:	f884 a174 	strb.w	sl, [r4, #372]	; 0x174
 800d548:	f884 6178 	strb.w	r6, [r4, #376]	; 0x178
 800d54c:	f8c4 617c 	str.w	r6, [r4, #380]	; 0x17c
 800d550:	f8c4 6180 	str.w	r6, [r4, #384]	; 0x180
 800d554:	f8c4 6184 	str.w	r6, [r4, #388]	; 0x184
 800d558:	f8c4 6188 	str.w	r6, [r4, #392]	; 0x188
 800d55c:	f002 fa04 	bl	800f968 <memset>
 800d560:	f8c4 61d8 	str.w	r6, [r4, #472]	; 0x1d8
 800d564:	f8c4 61dc 	str.w	r6, [r4, #476]	; 0x1dc
 800d568:	462a      	mov	r2, r5
 800d56a:	f8c4 61e0 	str.w	r6, [r4, #480]	; 0x1e0
 800d56e:	2100      	movs	r1, #0
 800d570:	f8c4 61e4 	str.w	r6, [r4, #484]	; 0x1e4
 800d574:	f504 7003 	add.w	r0, r4, #524	; 0x20c
 800d578:	f884 91e8 	strb.w	r9, [r4, #488]	; 0x1e8
 800d57c:	f884 91e9 	strb.w	r9, [r4, #489]	; 0x1e9
 800d580:	f884 91ea 	strb.w	r9, [r4, #490]	; 0x1ea
 800d584:	f884 91eb 	strb.w	r9, [r4, #491]	; 0x1eb
 800d588:	f884 61ec 	strb.w	r6, [r4, #492]	; 0x1ec
 800d58c:	f884 61ed 	strb.w	r6, [r4, #493]	; 0x1ed
 800d590:	f884 61ee 	strb.w	r6, [r4, #494]	; 0x1ee
 800d594:	f884 61ef 	strb.w	r6, [r4, #495]	; 0x1ef
 800d598:	f8c4 61f0 	str.w	r6, [r4, #496]	; 0x1f0
 800d59c:	f8c4 61f4 	str.w	r6, [r4, #500]	; 0x1f4
 800d5a0:	f8c4 61f8 	str.w	r6, [r4, #504]	; 0x1f8
 800d5a4:	f8c4 61fc 	str.w	r6, [r4, #508]	; 0x1fc
 800d5a8:	f8c4 5208 	str.w	r5, [r4, #520]	; 0x208
 800d5ac:	f8c4 6200 	str.w	r6, [r4, #512]	; 0x200
 800d5b0:	f8c4 6204 	str.w	r6, [r4, #516]	; 0x204
 800d5b4:	f002 f9d8 	bl	800f968 <memset>
 800d5b8:	f8c4 6230 	str.w	r6, [r4, #560]	; 0x230
 800d5bc:	f8c4 6234 	str.w	r6, [r4, #564]	; 0x234
 800d5c0:	f504 7019 	add.w	r0, r4, #612	; 0x264
 800d5c4:	f8c4 6238 	str.w	r6, [r4, #568]	; 0x238
 800d5c8:	462a      	mov	r2, r5
 800d5ca:	f8c4 623c 	str.w	r6, [r4, #572]	; 0x23c
 800d5ce:	2100      	movs	r1, #0
 800d5d0:	f884 9240 	strb.w	r9, [r4, #576]	; 0x240
 800d5d4:	f504 7422 	add.w	r4, r4, #648	; 0x288
 800d5d8:	f804 9c47 	strb.w	r9, [r4, #-71]
 800d5dc:	f804 9c46 	strb.w	r9, [r4, #-70]
 800d5e0:	f804 9c45 	strb.w	r9, [r4, #-69]
 800d5e4:	f804 6c44 	strb.w	r6, [r4, #-68]
 800d5e8:	f804 6c43 	strb.w	r6, [r4, #-67]
 800d5ec:	f804 6c42 	strb.w	r6, [r4, #-66]
 800d5f0:	f804 6c41 	strb.w	r6, [r4, #-65]
 800d5f4:	f844 6c40 	str.w	r6, [r4, #-64]
 800d5f8:	f844 6c3c 	str.w	r6, [r4, #-60]
 800d5fc:	f844 6c38 	str.w	r6, [r4, #-56]
 800d600:	f844 6c34 	str.w	r6, [r4, #-52]
 800d604:	f844 5c28 	str.w	r5, [r4, #-40]
 800d608:	f844 6c30 	str.w	r6, [r4, #-48]
 800d60c:	f844 6c2c 	str.w	r6, [r4, #-44]
 800d610:	f002 f9aa 	bl	800f968 <memset>
 800d614:	9b02      	ldr	r3, [sp, #8]
 800d616:	429c      	cmp	r4, r3
 800d618:	f47f aeb4 	bne.w	800d384 <_ZN4rtps6DomainC1Ev+0x540>
 800d61c:	f242 0210 	movw	r2, #8208	; 0x2010
 800d620:	f242 0311 	movw	r3, #8209	; 0x2011
    m_transport.createUdpConnection(getUserMulticastPort());
 800d624:	9c03      	ldr	r4, [sp, #12]
 800d626:	f641 41e9 	movw	r1, #7401	; 0x1ce9
Domain::Domain() : m_threadPool(receiveJumppad, this), m_transport(ThreadPool::readCallback, &m_threadPool){
 800d62a:	f808 6002 	strb.w	r6, [r8, r2]
    m_transport.createUdpConnection(getUserMulticastPort());
 800d62e:	4620      	mov	r0, r4
Domain::Domain() : m_threadPool(receiveJumppad, this), m_transport(ThreadPool::readCallback, &m_threadPool){
 800d630:	f808 b003 	strb.w	fp, [r8, r3]
    m_transport.createUdpConnection(getUserMulticastPort());
 800d634:	f7fe fba4 	bl	800bd80 <_ZN4rtps9UdpDriver19createUdpConnectionEt>
    m_transport.createUdpConnection(getBuiltInMulticastPort());
 800d638:	f641 41e8 	movw	r1, #7400	; 0x1ce8
 800d63c:	4620      	mov	r0, r4
 800d63e:	f7fe fb9f 	bl	800bd80 <_ZN4rtps9UdpDriver19createUdpConnectionEt>
    m_transport.joinMultiCastGroup(transformIP4ToU32(239, 255, 0, 1));
 800d642:	4620      	mov	r0, r4
 800d644:	4904      	ldr	r1, [pc, #16]	; (800d658 <_ZN4rtps6DomainC1Ev+0x814>)
 800d646:	f7fe fc11 	bl	800be6c <_ZNK4rtps9UdpDriver18joinMultiCastGroupE8ip4_addr>
}
 800d64a:	4640      	mov	r0, r8
 800d64c:	b005      	add	sp, #20
 800d64e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d652:	bf00      	nop
 800d654:	08011f6c 	.word	0x08011f6c
 800d658:	0100ffef 	.word	0x0100ffef

0800d65c <_ZN4rtps6Domain12createReaderERNS_11ParticipantEPKcS4_b>:
        return &writer;
    }
}


rtps::Reader* Domain::createReader(Participant& part, const char* topicName, const char* typeName, bool reliable){
 800d65c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d660:	b09d      	sub	sp, #116	; 0x74
 800d662:	f89d 9098 	ldrb.w	r9, [sp, #152]	; 0x98
	if((reliable && m_statefulReaders.size() <= m_numStatefulReaders) ||
       (!reliable && m_statelessReaders.size() <= m_numStatelessReaders) ||
 800d666:	f1b9 0f00 	cmp.w	r9, #0
 800d66a:	f000 809b 	beq.w	800d7a4 <_ZN4rtps6Domain12createReaderERNS_11ParticipantEPKcS4_b+0x148>
	if((reliable && m_statefulReaders.size() <= m_numStatefulReaders) ||
 800d66e:	f641 24fc 	movw	r4, #6908	; 0x1afc
 800d672:	5d04      	ldrb	r4, [r0, r4]
 800d674:	2c01      	cmp	r4, #1
 800d676:	f200 8090 	bhi.w	800d79a <_ZN4rtps6Domain12createReaderERNS_11ParticipantEPKcS4_b+0x13e>
 800d67a:	4606      	mov	r6, r0
	    part.isReadersFull()){
 800d67c:	4608      	mov	r0, r1
 800d67e:	4698      	mov	r8, r3
 800d680:	4617      	mov	r7, r2
 800d682:	460d      	mov	r5, r1
 800d684:	f001 f95a 	bl	800e93c <_ZN4rtps11Participant13isReadersFullEv>
       (!reliable && m_statelessReaders.size() <= m_numStatelessReaders) ||
 800d688:	4604      	mov	r4, r0
 800d68a:	2800      	cmp	r0, #0
 800d68c:	f040 8085 	bne.w	800d79a <_ZN4rtps6Domain12createReaderERNS_11ParticipantEPKcS4_b+0x13e>
 800d690:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d694:	9017      	str	r0, [sp, #92]	; 0x5c
    }

    // TODO Distinguish WithKey and NoKey (Also changes EntityKind)
    TopicData attributes;

    if(strlen(topicName) > Config::MAX_TOPICNAME_LENGTH || strlen(typeName) > Config::MAX_TYPENAME_LENGTH){
 800d696:	4638      	mov	r0, r7
 800d698:	9418      	str	r4, [sp, #96]	; 0x60
 800d69a:	9316      	str	r3, [sp, #88]	; 0x58
 800d69c:	941b      	str	r4, [sp, #108]	; 0x6c
 800d69e:	e9cd 4419 	strd	r4, r4, [sp, #100]	; 0x64
 800d6a2:	f7f2 fdd7 	bl	8000254 <strlen>
 800d6a6:	2814      	cmp	r0, #20
 800d6a8:	4682      	mov	sl, r0
 800d6aa:	d876      	bhi.n	800d79a <_ZN4rtps6Domain12createReaderERNS_11ParticipantEPKcS4_b+0x13e>
 800d6ac:	4640      	mov	r0, r8
 800d6ae:	f7f2 fdd1 	bl	8000254 <strlen>
 800d6b2:	2814      	cmp	r0, #20
 800d6b4:	4683      	mov	fp, r0
 800d6b6:	d870      	bhi.n	800d79a <_ZN4rtps6Domain12createReaderERNS_11ParticipantEPKcS4_b+0x13e>
        return nullptr;
    }
    strcpy(attributes.topicName, topicName);
 800d6b8:	f10a 0201 	add.w	r2, sl, #1
 800d6bc:	4639      	mov	r1, r7
 800d6be:	a810      	add	r0, sp, #64	; 0x40
 800d6c0:	f10d 0a1c 	add.w	sl, sp, #28
 800d6c4:	f002 f945 	bl	800f952 <memcpy>
    strcpy(attributes.typeName, typeName);
 800d6c8:	4641      	mov	r1, r8
 800d6ca:	f10b 0201 	add.w	r2, fp, #1
 800d6ce:	a80b      	add	r0, sp, #44	; 0x2c
 800d6d0:	f002 f93f 	bl	800f952 <memcpy>
               PG * participantId;
 800d6d4:	f641 48f3 	movw	r8, #7411	; 0x1cf3
    attributes.endpointGuid.prefix = part.m_guidPrefix;
    attributes.endpointGuid.entityId = {part.getNextUserEntityKey(), EntityKind_t::USER_DEFINED_READER_WITHOUT_KEY};
    attributes.unicastLocator = getUserUnicastLocator(part.m_participantId);
 800d6d8:	af16      	add	r7, sp, #88	; 0x58
    attributes.endpointGuid.prefix = part.m_guidPrefix;
 800d6da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d6de:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
    attributes.endpointGuid.entityId = {part.getNextUserEntityKey(), EntityKind_t::USER_DEFINED_READER_WITHOUT_KEY};
 800d6e2:	4628      	mov	r0, r5
 800d6e4:	f001 f8b2 	bl	800e84c <_ZN4rtps11Participant20getNextUserEntityKeyEv>
 800d6e8:	f995 300c 	ldrsb.w	r3, [r5, #12]
 800d6ec:	f3c0 2207 	ubfx	r2, r0, #8, #8
 800d6f0:	f3c0 4107 	ubfx	r1, r0, #16, #8
 800d6f4:	eb08 0843 	add.w	r8, r8, r3, lsl #1
    attributes.unicastLocator = getUserUnicastLocator(part.m_participantId);
 800d6f8:	f04f 0e01 	mov.w	lr, #1
 800d6fc:	4b3b      	ldr	r3, [pc, #236]	; (800d7ec <_ZN4rtps6Domain12createReaderERNS_11ParticipantEPKcS4_b+0x190>)
 800d6fe:	f10d 0c04 	add.w	ip, sp, #4
    attributes.endpointGuid.entityId = {part.getNextUserEntityKey(), EntityKind_t::USER_DEFINED_READER_WITHOUT_KEY};
 800d702:	f88d 2001 	strb.w	r2, [sp, #1]
 800d706:	fa1f f888 	uxth.w	r8, r8
 800d70a:	2204      	movs	r2, #4
 800d70c:	f88d 0000 	strb.w	r0, [sp]
 800d710:	f88d 1002 	strb.w	r1, [sp, #2]
    attributes.unicastLocator = getUserUnicastLocator(part.m_participantId);
 800d714:	9306      	str	r3, [sp, #24]
 800d716:	f8cd e004 	str.w	lr, [sp, #4]
    attributes.endpointGuid.entityId = {part.getNextUserEntityKey(), EntityKind_t::USER_DEFINED_READER_WITHOUT_KEY};
 800d71a:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
                                           getUserUnicastPort(participantId));
 800d71e:	e9cd 8402 	strd	r8, r4, [sp, #8]
    struct Locator{
 800d722:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800d726:	9c00      	ldr	r4, [sp, #0]
    attributes.unicastLocator = getUserUnicastLocator(part.m_participantId);
 800d728:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    attributes.endpointGuid.entityId = {part.getNextUserEntityKey(), EntityKind_t::USER_DEFINED_READER_WITHOUT_KEY};
 800d72c:	f8ad 4028 	strh.w	r4, [sp, #40]	; 0x28
 800d730:	0c24      	lsrs	r4, r4, #16
    attributes.unicastLocator = getUserUnicastLocator(part.m_participantId);
 800d732:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800d734:	e89c 0003 	ldmia.w	ip, {r0, r1}
    attributes.endpointGuid.entityId = {part.getNextUserEntityKey(), EntityKind_t::USER_DEFINED_READER_WITHOUT_KEY};
 800d738:	f88d 402a 	strb.w	r4, [sp, #42]	; 0x2a
    attributes.unicastLocator = getUserUnicastLocator(part.m_participantId);
 800d73c:	e887 0003 	stmia.w	r7, {r0, r1}

#if DOMAIN_VERBOSE
    printf("Creating reader[%s, %s]\n", topicName, typeName);
#endif

    if(reliable){
 800d740:	f1b9 0f00 	cmp.w	r9, #0
 800d744:	d035      	beq.n	800d7b2 <_ZN4rtps6Domain12createReaderERNS_11ParticipantEPKcS4_b+0x156>
        if(m_numStatefulReaders == m_statefulReaders.size()){
 800d746:	f641 23fc 	movw	r3, #6908	; 0x1afc
 800d74a:	5cf0      	ldrb	r0, [r6, r3]
 800d74c:	2802      	cmp	r0, #2
 800d74e:	d024      	beq.n	800d79a <_ZN4rtps6Domain12createReaderERNS_11ParticipantEPKcS4_b+0x13e>
    m_attributes = attributes;
 800d750:	f641 0ba4 	movw	fp, #6308	; 0x18a4
 800d754:	f44f 7796 	mov.w	r7, #300	; 0x12c
            return nullptr;
        }

        attributes.reliabilityKind = ReliabilityKind_t::RELIABLE;

        StatefulReader& reader = m_statefulReaders[m_numStatefulReaders++];
 800d758:	eb00 020e 	add.w	r2, r0, lr
 800d75c:	4651      	mov	r1, sl
 800d75e:	44b3      	add	fp, r6
 800d760:	fb07 f700 	mul.w	r7, r7, r0
        attributes.reliabilityKind = ReliabilityKind_t::RELIABLE;
 800d764:	2002      	movs	r0, #2
        StatefulReader& reader = m_statefulReaders[m_numStatefulReaders++];
 800d766:	54f2      	strb	r2, [r6, r3]
 800d768:	eb0b 0907 	add.w	r9, fp, r7
 800d76c:	2254      	movs	r2, #84	; 0x54
        attributes.reliabilityKind = ReliabilityKind_t::RELIABLE;
 800d76e:	9015      	str	r0, [sp, #84]	; 0x54
        reader.init(attributes, m_transport);
 800d770:	f506 769e 	add.w	r6, r6, #316	; 0x13c
 800d774:	f109 0004 	add.w	r0, r9, #4

        if(!part.addReader(&reader)){
 800d778:	464c      	mov	r4, r9
 800d77a:	f002 f8ea 	bl	800f952 <memcpy>
    sys_mutex_new(&m_mutex);
 800d77e:	f507 7094 	add.w	r0, r7, #296	; 0x128
    m_packetInfo.srcPort = attributes.unicastLocator.port;
 800d782:	f8a9 8058 	strh.w	r8, [r9, #88]	; 0x58
    sys_mutex_new(&m_mutex);
 800d786:	4458      	add	r0, fp
    m_transport = &driver;
 800d788:	f8c9 606c 	str.w	r6, [r9, #108]	; 0x6c
    sys_mutex_new(&m_mutex);
 800d78c:	f7fc f956 	bl	8009a3c <sys_mutex_new>
 800d790:	4628      	mov	r0, r5
 800d792:	4649      	mov	r1, r9
 800d794:	f001 f8ba 	bl	800e90c <_ZN4rtps11Participant9addReaderEPNS_6ReaderE>
 800d798:	b900      	cbnz	r0, 800d79c <_ZN4rtps6Domain12createReaderERNS_11ParticipantEPKcS4_b+0x140>
        return nullptr;
 800d79a:	2400      	movs	r4, #0
        if(!part.addReader(&reader)){
        	return nullptr;
        }
        return &reader;
    }
}
 800d79c:	4620      	mov	r0, r4
 800d79e:	b01d      	add	sp, #116	; 0x74
 800d7a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
       (!reliable && m_statelessReaders.size() <= m_numStatelessReaders) ||
 800d7a4:	f500 54c5 	add.w	r4, r0, #6304	; 0x18a0
 800d7a8:	7824      	ldrb	r4, [r4, #0]
 800d7aa:	2c01      	cmp	r4, #1
 800d7ac:	f67f af65 	bls.w	800d67a <_ZN4rtps6Domain12createReaderERNS_11ParticipantEPKcS4_b+0x1e>
 800d7b0:	e7f3      	b.n	800d79a <_ZN4rtps6Domain12createReaderERNS_11ParticipantEPKcS4_b+0x13e>
        if(m_numStatelessReaders == m_statelessReaders.size()){
 800d7b2:	f506 52c5 	add.w	r2, r6, #6304	; 0x18a0
 800d7b6:	7813      	ldrb	r3, [r2, #0]
 800d7b8:	2b02      	cmp	r3, #2
 800d7ba:	d0ee      	beq.n	800d79a <_ZN4rtps6Domain12createReaderERNS_11ParticipantEPKcS4_b+0x13e>
      { return const_cast<_Tp&>(__t[__n]); }
 800d7bc:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 800d7c0:	f506 56bf 	add.w	r6, r6, #6112	; 0x17e0
        StatelessReader& reader = m_statelessReaders[m_numStatelessReaders++];
 800d7c4:	3301      	adds	r3, #1
        reader.init(attributes);
 800d7c6:	4651      	mov	r1, sl
 800d7c8:	eb06 1444 	add.w	r4, r6, r4, lsl #5
        attributes.reliabilityKind = ReliabilityKind_t::BEST_EFFORT;
 800d7cc:	f8cd e054 	str.w	lr, [sp, #84]	; 0x54
        StatelessReader& reader = m_statelessReaders[m_numStatelessReaders++];
 800d7d0:	7013      	strb	r3, [r2, #0]
        reader.init(attributes);
 800d7d2:	4620      	mov	r0, r4
 800d7d4:	f001 fb38 	bl	800ee48 <_ZN4rtps15StatelessReader4initERKNS_9TopicDataE>
        if(!part.addReader(&reader)){
 800d7d8:	4621      	mov	r1, r4
 800d7da:	4628      	mov	r0, r5
 800d7dc:	f001 f896 	bl	800e90c <_ZN4rtps11Participant9addReaderEPNS_6ReaderE>
 800d7e0:	2800      	cmp	r0, #0
 800d7e2:	d0da      	beq.n	800d79a <_ZN4rtps6Domain12createReaderERNS_11ParticipantEPKcS4_b+0x13e>
}
 800d7e4:	4620      	mov	r0, r4
 800d7e6:	b01d      	add	sp, #116	; 0x74
 800d7e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7ec:	2f00a8c0 	.word	0x2f00a8c0

0800d7f0 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE4initENS_9TopicDataENS_11TopicKind_tEPNS_10ThreadPoolERS1_>:
bool StatefulWriterT<NetworkDriver>::init(TopicData attributes, TopicKind_t topicKind, ThreadPool* /*threadPool*/, NetworkDriver& driver){
 800d7f0:	b084      	sub	sp, #16
 800d7f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d7f4:	b083      	sub	sp, #12
 800d7f6:	4604      	mov	r4, r0
    if (sys_mutex_new(&m_mutex) != ERR_OK) {
 800d7f8:	3058      	adds	r0, #88	; 0x58
bool StatefulWriterT<NetworkDriver>::init(TopicData attributes, TopicKind_t topicKind, ThreadPool* /*threadPool*/, NetworkDriver& driver){
 800d7fa:	ad09      	add	r5, sp, #36	; 0x24
 800d7fc:	f89d 6078 	ldrb.w	r6, [sp, #120]	; 0x78
 800d800:	e885 000e 	stmia.w	r5, {r1, r2, r3}
    if (sys_mutex_new(&m_mutex) != ERR_OK) {
 800d804:	f7fc f91a 	bl	8009a3c <sys_mutex_new>
 800d808:	bb20      	cbnz	r0, 800d854 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE4initENS_9TopicDataENS_11TopicKind_tEPNS_10ThreadPoolERS1_+0x64>
    m_transport = &driver;
 800d80a:	9b20      	ldr	r3, [sp, #128]	; 0x80
    m_attributes = attributes;
 800d80c:	4629      	mov	r1, r5
 800d80e:	2254      	movs	r2, #84	; 0x54
 800d810:	1d20      	adds	r0, r4, #4
    m_transport = &driver;
 800d812:	6763      	str	r3, [r4, #116]	; 0x74
      { return const_iterator(data() + _Nm); }
 800d814:	f104 0510 	add.w	r5, r4, #16
    m_attributes = attributes;
 800d818:	f002 f89b 	bl	800f952 <memcpy>
	  if (const size_t __len = (__last1 - __first1))
 800d81c:	2703      	movs	r7, #3
    m_packetInfo.srcPort = attributes.unicastLocator.port;
 800d81e:	9b19      	ldr	r3, [sp, #100]	; 0x64
	    return !__builtin_memcmp(__first1, __first2, sizeof(_Tp) * __len);
 800d820:	4628      	mov	r0, r5
    m_topicKind = topicKind;
 800d822:	f884 6078 	strb.w	r6, [r4, #120]	; 0x78
 800d826:	463a      	mov	r2, r7
    m_packetInfo.srcPort = attributes.unicastLocator.port;
 800d828:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
 800d82c:	491f      	ldr	r1, [pc, #124]	; (800d8ac <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE4initENS_9TopicDataENS_11TopicKind_tEPNS_10ThreadPoolERS1_+0xbc>)
 800d82e:	f002 f881 	bl	800f934 <memcmp>
            return this->entityKey == other.entityKey &&
 800d832:	b9b0      	cbnz	r0, 800d862 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE4initENS_9TopicDataENS_11TopicKind_tEPNS_10ThreadPoolERS1_+0x72>
 800d834:	7ce3      	ldrb	r3, [r4, #19]
 800d836:	2bc2      	cmp	r3, #194	; 0xc2
 800d838:	d02a      	beq.n	800d890 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE4initENS_9TopicDataENS_11TopicKind_tEPNS_10ThreadPoolERS1_+0xa0>
    	 m_heartbeatThread = sys_thread_new("HBThread", hbFunctionJumppad, this, Config::HEARTBEAT_STACKSIZE, Config::THREAD_POOL_WRITER_PRIO);
 800d83a:	2003      	movs	r0, #3
 800d83c:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 800d840:	4622      	mov	r2, r4
 800d842:	491b      	ldr	r1, [pc, #108]	; (800d8b0 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE4initENS_9TopicDataENS_11TopicKind_tEPNS_10ThreadPoolERS1_+0xc0>)
 800d844:	9000      	str	r0, [sp, #0]
 800d846:	481b      	ldr	r0, [pc, #108]	; (800d8b4 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE4initENS_9TopicDataENS_11TopicKind_tEPNS_10ThreadPoolERS1_+0xc4>)
 800d848:	f7fc f918 	bl	8009a7c <sys_thread_new>
    return true;
 800d84c:	2301      	movs	r3, #1
    	 m_heartbeatThread = sys_thread_new("HBThread", hbFunctionJumppad, this, Config::HEARTBEAT_STACKSIZE, Config::THREAD_POOL_WRITER_PRIO);
 800d84e:	f8c4 016c 	str.w	r0, [r4, #364]	; 0x16c
 800d852:	e000      	b.n	800d856 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE4initENS_9TopicDataENS_11TopicKind_tEPNS_10ThreadPoolERS1_+0x66>
        return false;
 800d854:	2300      	movs	r3, #0
}
 800d856:	4618      	mov	r0, r3
 800d858:	b003      	add	sp, #12
 800d85a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d85e:	b004      	add	sp, #16
 800d860:	4770      	bx	lr
 800d862:	463a      	mov	r2, r7
 800d864:	4628      	mov	r0, r5
 800d866:	4914      	ldr	r1, [pc, #80]	; (800d8b8 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE4initENS_9TopicDataENS_11TopicKind_tEPNS_10ThreadPoolERS1_+0xc8>)
 800d868:	f002 f864 	bl	800f934 <memcmp>
 800d86c:	2800      	cmp	r0, #0
 800d86e:	d1e4      	bne.n	800d83a <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE4initENS_9TopicDataENS_11TopicKind_tEPNS_10ThreadPoolERS1_+0x4a>
 800d870:	7ce3      	ldrb	r3, [r4, #19]
 800d872:	2bc2      	cmp	r3, #194	; 0xc2
 800d874:	d1e1      	bne.n	800d83a <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE4initENS_9TopicDataENS_11TopicKind_tEPNS_10ThreadPoolERS1_+0x4a>
    	m_heartbeatThread = sys_thread_new("HBThreadSub", hbFunctionJumppad, this, Config::HEARTBEAT_STACKSIZE, Config::THREAD_POOL_WRITER_PRIO);
 800d876:	2003      	movs	r0, #3
 800d878:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 800d87c:	4622      	mov	r2, r4
 800d87e:	490c      	ldr	r1, [pc, #48]	; (800d8b0 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE4initENS_9TopicDataENS_11TopicKind_tEPNS_10ThreadPoolERS1_+0xc0>)
 800d880:	9000      	str	r0, [sp, #0]
 800d882:	480e      	ldr	r0, [pc, #56]	; (800d8bc <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE4initENS_9TopicDataENS_11TopicKind_tEPNS_10ThreadPoolERS1_+0xcc>)
 800d884:	f7fc f8fa 	bl	8009a7c <sys_thread_new>
    return true;
 800d888:	2301      	movs	r3, #1
    	m_heartbeatThread = sys_thread_new("HBThreadSub", hbFunctionJumppad, this, Config::HEARTBEAT_STACKSIZE, Config::THREAD_POOL_WRITER_PRIO);
 800d88a:	f8c4 016c 	str.w	r0, [r4, #364]	; 0x16c
 800d88e:	e7e2      	b.n	800d856 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE4initENS_9TopicDataENS_11TopicKind_tEPNS_10ThreadPoolERS1_+0x66>
    	m_heartbeatThread = sys_thread_new("HBThreadPub", hbFunctionJumppad, this, Config::HEARTBEAT_STACKSIZE, Config::THREAD_POOL_WRITER_PRIO);
 800d890:	2003      	movs	r0, #3
 800d892:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 800d896:	4622      	mov	r2, r4
 800d898:	4905      	ldr	r1, [pc, #20]	; (800d8b0 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE4initENS_9TopicDataENS_11TopicKind_tEPNS_10ThreadPoolERS1_+0xc0>)
 800d89a:	9000      	str	r0, [sp, #0]
 800d89c:	4808      	ldr	r0, [pc, #32]	; (800d8c0 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE4initENS_9TopicDataENS_11TopicKind_tEPNS_10ThreadPoolERS1_+0xd0>)
 800d89e:	f7fc f8ed 	bl	8009a7c <sys_thread_new>
    return true;
 800d8a2:	2301      	movs	r3, #1
    	m_heartbeatThread = sys_thread_new("HBThreadPub", hbFunctionJumppad, this, Config::HEARTBEAT_STACKSIZE, Config::THREAD_POOL_WRITER_PRIO);
 800d8a4:	f8c4 016c 	str.w	r0, [r4, #364]	; 0x16c
 800d8a8:	e7d5      	b.n	800d856 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE4initENS_9TopicDataENS_11TopicKind_tEPNS_10ThreadPoolERS1_+0x66>
 800d8aa:	bf00      	nop
 800d8ac:	08010d94 	.word	0x08010d94
 800d8b0:	0800e12d 	.word	0x0800e12d
 800d8b4:	0801204c 	.word	0x0801204c
 800d8b8:	08010d98 	.word	0x08010d98
 800d8bc:	08012058 	.word	0x08012058
 800d8c0:	08012040 	.word	0x08012040

0800d8c4 <_ZN4rtps6Domain30createBuiltinWritersAndReadersERNS_11ParticipantE>:
    StatelessWriter& spdpWriter = m_statelessWriters[m_numStatelessWriters++];
 800d8c4:	f241 73dc 	movw	r3, #6108	; 0x17dc
    StatelessReader& spdpReader = m_statelessReaders[m_numStatelessReaders++];
 800d8c8:	f500 52c5 	add.w	r2, r0, #6304	; 0x18a0
    spdpWriterAttributes.unicastLocator = getBuiltInMulticastLocator();
 800d8cc:	f04f 0c01 	mov.w	ip, #1
void Domain::createBuiltinWritersAndReaders(Participant &part) {
 800d8d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8d4:	b0f7      	sub	sp, #476	; 0x1dc
    StatelessWriter& spdpWriter = m_statelessWriters[m_numStatelessWriters++];
 800d8d6:	f810 a003 	ldrb.w	sl, [r0, r3]
void Domain::createBuiltinWritersAndReaders(Participant &part) {
 800d8da:	4688      	mov	r8, r1
 800d8dc:	4605      	mov	r5, r0
 800d8de:	9117      	str	r1, [sp, #92]	; 0x5c
    StatelessWriter& spdpWriter = m_statelessWriters[m_numStatelessWriters++];
 800d8e0:	f10a 0101 	add.w	r1, sl, #1
    spdpWriterAttributes.endpointGuid.prefix = part.m_guidPrefix;
 800d8e4:	ac36      	add	r4, sp, #216	; 0xd8
    spdpWriterAttributes.unicastLocator = getBuiltInMulticastLocator();
 800d8e6:	f8df e374 	ldr.w	lr, [pc, #884]	; 800dc5c <_ZN4rtps6Domain30createBuiltinWritersAndReadersERNS_11ParticipantE+0x398>
    StatelessWriter& spdpWriter = m_statelessWriters[m_numStatelessWriters++];
 800d8ea:	54c1      	strb	r1, [r0, r3]
    spdpWriterAttributes.unicastLocator = getBuiltInMulticastLocator();
 800d8ec:	f641 4be8 	movw	fp, #7400	; 0x1ce8
    StatelessReader& spdpReader = m_statelessReaders[m_numStatelessReaders++];
 800d8f0:	7813      	ldrb	r3, [r2, #0]
    spdpWriterAttributes.unicastLocator = getBuiltInMulticastLocator();
 800d8f2:	af30      	add	r7, sp, #192	; 0xc0
 800d8f4:	f8cd c0c0 	str.w	ip, [sp, #192]	; 0xc0
 800d8f8:	ae45      	add	r6, sp, #276	; 0x114
    StatelessReader& spdpReader = m_statelessReaders[m_numStatelessReaders++];
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	9319      	str	r3, [sp, #100]	; 0x64
 800d8fe:	2300      	movs	r3, #0
    spdpWriterAttributes.unicastLocator = getBuiltInMulticastLocator();
 800d900:	f8cd e0d4 	str.w	lr, [sp, #212]	; 0xd4
    StatelessReader& spdpReader = m_statelessReaders[m_numStatelessReaders++];
 800d904:	eb00 010c 	add.w	r1, r0, ip
    spdpWriterAttributes.unicastLocator = getBuiltInMulticastLocator();
 800d908:	f8cd b0c4 	str.w	fp, [sp, #196]	; 0xc4
 800d90c:	9334      	str	r3, [sp, #208]	; 0xd0
 800d90e:	f44f 791f 	mov.w	r9, #636	; 0x27c
 800d912:	f88d 30e8 	strb.w	r3, [sp, #232]	; 0xe8
 800d916:	f88d 30fc 	strb.w	r3, [sp, #252]	; 0xfc
    StatelessReader& spdpReader = m_statelessReaders[m_numStatelessReaders++];
 800d91a:	7011      	strb	r1, [r2, #0]
 800d91c:	fb09 f90a 	mul.w	r9, r9, sl
 800d920:	e9cd 3332 	strd	r3, r3, [sp, #200]	; 0xc8
    spdpWriterAttributes.endpointGuid.entityId = ENTITYID_SPDP_BUILTIN_PARTICIPANT_WRITER;
 800d924:	4bcc      	ldr	r3, [pc, #816]	; (800dc58 <_ZN4rtps6Domain30createBuiltinWritersAndReadersERNS_11ParticipantE+0x394>)
    spdpWriterAttributes.endpointGuid.prefix = part.m_guidPrefix;
 800d926:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
    spdpWriterAttributes.endpointGuid.entityId = ENTITYID_SPDP_BUILTIN_PARTICIPANT_WRITER;
 800d92a:	695b      	ldr	r3, [r3, #20]
 800d92c:	f241 28e4 	movw	r8, #4836	; 0x12e4
 800d930:	9318      	str	r3, [sp, #96]	; 0x60
 800d932:	44a8      	add	r8, r5
    spdpWriterAttributes.endpointGuid.prefix = part.m_guidPrefix;
 800d934:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    spdpWriterAttributes.unicastLocator = getBuiltInMulticastLocator();
 800d938:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d93a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    spdpWriterAttributes.endpointGuid.entityId = ENTITYID_SPDP_BUILTIN_PARTICIPANT_WRITER;
 800d93c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800d93e:	2254      	movs	r2, #84	; 0x54
 800d940:	60e3      	str	r3, [r4, #12]
 800d942:	f8c4 c038 	str.w	ip, [r4, #56]	; 0x38
 800d946:	f8c4 c03c 	str.w	ip, [r4, #60]	; 0x3c
 800d94a:	f8c4 b040 	str.w	fp, [r4, #64]	; 0x40
    spdpWriterAttributes.unicastLocator = getBuiltInMulticastLocator();
 800d94e:	e897 0003 	ldmia.w	r7, {r0, r1}
    spdpWriter.init(spdpWriterAttributes, TopicKind_t::WITH_KEY, &m_threadPool, m_transport);
 800d952:	f505 779e 	add.w	r7, r5, #316	; 0x13c
    spdpWriterAttributes.unicastLocator = getBuiltInMulticastLocator();
 800d956:	e886 0003 	stmia.w	r6, {r0, r1}
      { return const_cast<_Tp&>(__t[__n]); }
 800d95a:	eb08 0609 	add.w	r6, r8, r9
 800d95e:	4621      	mov	r1, r4
 800d960:	a84b      	add	r0, sp, #300	; 0x12c
    spdpWriter.init(spdpWriterAttributes, TopicKind_t::WITH_KEY, &m_threadPool, m_transport);
 800d962:	971a      	str	r7, [sp, #104]	; 0x68
 800d964:	961b      	str	r6, [sp, #108]	; 0x6c
 800d966:	f8c4 e050 	str.w	lr, [r4, #80]	; 0x50
 800d96a:	f001 fff2 	bl	800f952 <memcpy>
    if (sys_mutex_new(&m_mutex) != ERR_OK) {
 800d96e:	f109 0058 	add.w	r0, r9, #88	; 0x58
 800d972:	4440      	add	r0, r8
 800d974:	f7fc f862 	bl	8009a3c <sys_mutex_new>
 800d978:	b958      	cbnz	r0, 800d992 <_ZN4rtps6Domain30createBuiltinWritersAndReadersERNS_11ParticipantE+0xce>
    m_attributes = attributes;
 800d97a:	a94b      	add	r1, sp, #300	; 0x12c
 800d97c:	2254      	movs	r2, #84	; 0x54
 800d97e:	1d30      	adds	r0, r6, #4
 800d980:	f001 ffe7 	bl	800f952 <memcpy>
    m_topicKind = topicKind;
 800d984:	2302      	movs	r3, #2
    m_packetInfo.srcPort = attributes.unicastLocator.port;
 800d986:	f8a6 b060 	strh.w	fp, [r6, #96]	; 0x60
    mp_threadPool = threadPool;
 800d98a:	65f5      	str	r5, [r6, #92]	; 0x5c
    m_transport = &driver;
 800d98c:	6777      	str	r7, [r6, #116]	; 0x74
    m_topicKind = topicKind;
 800d98e:	f886 3078 	strb.w	r3, [r6, #120]	; 0x78
    spdpWriter.addNewMatchedReader(ReaderProxy{{part.m_guidPrefix, ENTITYID_SPDP_BUILTIN_PARTICIPANT_READER}, getBuiltInMulticastLocator()});
 800d992:	f44f 731f 	mov.w	r3, #636	; 0x27c
              ackNackSet(), ackNackCount{0}{};
 800d996:	f641 41e8 	movw	r1, #7400	; 0x1ce8
 800d99a:	4ab0      	ldr	r2, [pc, #704]	; (800dc5c <_ZN4rtps6Domain30createBuiltinWritersAndReadersERNS_11ParticipantE+0x398>)
 800d99c:	2600      	movs	r6, #0
 800d99e:	fb03 f30a 	mul.w	r3, r3, sl
 800d9a2:	ac24      	add	r4, sp, #144	; 0x90
 800d9a4:	912b      	str	r1, [sp, #172]	; 0xac
 800d9a6:	f44f 7c80 	mov.w	ip, #256	; 0x100
 800d9aa:	f858 0003 	ldr.w	r0, [r8, r3]
 800d9ae:	4443      	add	r3, r8
 800d9b0:	922f      	str	r2, [sp, #188]	; 0xbc
 800d9b2:	27c7      	movs	r7, #199	; 0xc7
 800d9b4:	9318      	str	r3, [sp, #96]	; 0x60
 800d9b6:	2301      	movs	r3, #1
 800d9b8:	f8d0 b000 	ldr.w	fp, [r0]
 800d9bc:	f10d 0ea8 	add.w	lr, sp, #168	; 0xa8
 800d9c0:	932a      	str	r3, [sp, #168]	; 0xa8
 800d9c2:	f50d 79c0 	add.w	r9, sp, #384	; 0x180
 800d9c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d9c8:	f8a4 c00c 	strh.w	ip, [r4, #12]
 800d9cc:	f50d 7cc8 	add.w	ip, sp, #400	; 0x190
 800d9d0:	73e7      	strb	r7, [r4, #15]
        SequenceNumberSet() = default;
 800d9d2:	2720      	movs	r7, #32
 800d9d4:	73a6      	strb	r6, [r4, #14]
 800d9d6:	962e      	str	r6, [sp, #184]	; 0xb8
 800d9d8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d9dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d9e0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800d9e4:	e9cd 662c 	strd	r6, r6, [sp, #176]	; 0xb0
 800d9e8:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
 800d9ec:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d9f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d9f4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800d9f8:	463a      	mov	r2, r7
 800d9fa:	e88c 0003 	stmia.w	ip, {r0, r1}
 800d9fe:	4631      	mov	r1, r6
 800da00:	a86d      	add	r0, sp, #436	; 0x1b4
 800da02:	966a      	str	r6, [sp, #424]	; 0x1a8
 800da04:	966b      	str	r6, [sp, #428]	; 0x1ac
 800da06:	976c      	str	r7, [sp, #432]	; 0x1b0
 800da08:	f001 ffae 	bl	800f968 <memset>
 800da0c:	4b94      	ldr	r3, [pc, #592]	; (800dc60 <_ZN4rtps6Domain30createBuiltinWritersAndReadersERNS_11ParticipantE+0x39c>)
 800da0e:	9675      	str	r6, [sp, #468]	; 0x1d4
 800da10:	459b      	cmp	fp, r3
 800da12:	f040 8102 	bne.w	800dc1a <_ZN4rtps6Domain30createBuiltinWritersAndReadersERNS_11ParticipantE+0x356>
            if(isFull()){
 800da16:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800da18:	f8d3 6170 	ldr.w	r6, [r3, #368]	; 0x170
 800da1c:	2e03      	cmp	r6, #3
 800da1e:	d01b      	beq.n	800da58 <_ZN4rtps6Domain30createBuiltinWritersAndReadersERNS_11ParticipantE+0x194>
                    uint8_t byte = m_bitMap[bucket];
 800da20:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800da22:	f893 316c 	ldrb.w	r3, [r3, #364]	; 0x16c
                        if(!(byte & 1)){
 800da26:	f013 0001 	ands.w	r0, r3, #1
 800da2a:	f000 80fa 	beq.w	800dc22 <_ZN4rtps6Domain30createBuiltinWritersAndReadersERNS_11ParticipantE+0x35e>
 800da2e:	0798      	lsls	r0, r3, #30
 800da30:	f140 811a 	bpl.w	800dc68 <_ZN4rtps6Domain30createBuiltinWritersAndReadersERNS_11ParticipantE+0x3a4>
 800da34:	0759      	lsls	r1, r3, #29
 800da36:	f140 811a 	bpl.w	800dc6e <_ZN4rtps6Domain30createBuiltinWritersAndReadersERNS_11ParticipantE+0x3aa>
 800da3a:	071a      	lsls	r2, r3, #28
 800da3c:	f140 811a 	bpl.w	800dc74 <_ZN4rtps6Domain30createBuiltinWritersAndReadersERNS_11ParticipantE+0x3b0>
 800da40:	06d8      	lsls	r0, r3, #27
 800da42:	f140 811a 	bpl.w	800dc7a <_ZN4rtps6Domain30createBuiltinWritersAndReadersERNS_11ParticipantE+0x3b6>
 800da46:	0699      	lsls	r1, r3, #26
 800da48:	f140 811a 	bpl.w	800dc80 <_ZN4rtps6Domain30createBuiltinWritersAndReadersERNS_11ParticipantE+0x3bc>
 800da4c:	065a      	lsls	r2, r3, #25
 800da4e:	f140 8119 	bpl.w	800dc84 <_ZN4rtps6Domain30createBuiltinWritersAndReadersERNS_11ParticipantE+0x3c0>
 800da52:	09da      	lsrs	r2, r3, #7
 800da54:	f000 80fb 	beq.w	800dc4e <_ZN4rtps6Domain30createBuiltinWritersAndReadersERNS_11ParticipantE+0x38a>
    spdpReader.m_attributes.endpointGuid = {part.m_guidPrefix, ENTITYID_SPDP_BUILTIN_PARTICIPANT_READER};
 800da58:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800da5a:	f505 53bf 	add.w	r3, r5, #6112	; 0x17e0
    sedpAttributes.unicastLocator = getBuiltInUnicastLocator(part.m_participantId);
 800da5e:	2101      	movs	r1, #1
    spdpReader.m_attributes.endpointGuid = {part.m_guidPrefix, ENTITYID_SPDP_BUILTIN_PARTICIPANT_READER};
 800da60:	f10d 0c84 	add.w	ip, sp, #132	; 0x84
 800da64:	eb02 0642 	add.w	r6, r2, r2, lsl #1
 800da68:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    sedpAttributes.unicastLocator = getBuiltInUnicastLocator(part.m_participantId);
 800da6a:	912a      	str	r1, [sp, #168]	; 0xa8
    spdpReader.m_attributes.endpointGuid = {part.m_guidPrefix, ENTITYID_SPDP_BUILTIN_PARTICIPANT_READER};
 800da6c:	f04f 0800 	mov.w	r8, #0
 800da70:	eb03 1646 	add.w	r6, r3, r6, lsl #5
 800da74:	931d      	str	r3, [sp, #116]	; 0x74
    StatefulReader& sedpPubReader = m_statefulReaders[m_numStatefulReaders++];
 800da76:	f641 27fc 	movw	r7, #6908	; 0x1afc
    StatefulWriter& sedpPubWriter = m_statefulWriters[m_numStatefulWriters++];
 800da7a:	f242 0310 	movw	r3, #8208	; 0x2010
    spdpReader.m_attributes.endpointGuid = {part.m_guidPrefix, ENTITYID_SPDP_BUILTIN_PARTICIPANT_READER};
 800da7e:	f106 0904 	add.w	r9, r6, #4
 800da82:	f04f 0ac7 	mov.w	sl, #199	; 0xc7
 800da86:	f8cd 80b8 	str.w	r8, [sp, #184]	; 0xb8
    sedpAttributes.unicastLocator = getBuiltInUnicastLocator(part.m_participantId);
 800da8a:	f10d 0ea8 	add.w	lr, sp, #168	; 0xa8
    m_attributes = attributes;
 800da8e:	f44f 7b96 	mov.w	fp, #300	; 0x12c
    spdpReader.m_attributes.endpointGuid = {part.m_guidPrefix, ENTITYID_SPDP_BUILTIN_PARTICIPANT_READER};
 800da92:	ca07      	ldmia	r2, {r0, r1, r2}
 800da94:	e889 0007 	stmia.w	r9, {r0, r1, r2}
 800da98:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 800da9c:	f04f 0101 	mov.w	r1, #1
 800daa0:	f886 8010 	strb.w	r8, [r6, #16]
 800daa4:	f886 8012 	strb.w	r8, [r6, #18]
    sedpAttributes.unicastLocator = getBuiltInUnicastLocator(part.m_participantId);
 800daa8:	f50d 7cde 	add.w	ip, sp, #444	; 0x1bc
    spdpReader.m_attributes.endpointGuid = {part.m_guidPrefix, ENTITYID_SPDP_BUILTIN_PARTICIPANT_READER};
 800daac:	7471      	strb	r1, [r6, #17]
 800daae:	f641 09a4 	movw	r9, #6308	; 0x18a4
 800dab2:	f886 a013 	strb.w	sl, [r6, #19]
    StatefulWriter& sedpPubWriter = m_statefulWriters[m_numStatefulWriters++];
 800dab6:	f815 a003 	ldrb.w	sl, [r5, r3]
 800daba:	44a9      	add	r9, r5
    StatefulReader& sedpPubReader = m_statefulReaders[m_numStatefulReaders++];
 800dabc:	5dee      	ldrb	r6, [r5, r7]
    StatefulWriter& sedpSubWriter = m_statefulWriters[m_numStatefulWriters++];
 800dabe:	f10a 0202 	add.w	r2, sl, #2
    StatefulReader& sedpSubReader = m_statefulReaders[m_numStatefulReaders++];
 800dac2:	1cb1      	adds	r1, r6, #2
 800dac4:	55e9      	strb	r1, [r5, r7]
    StatefulWriter& sedpSubWriter = m_statefulWriters[m_numStatefulWriters++];
 800dac6:	54ea      	strb	r2, [r5, r3]
               D1 +
 800dac8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800daca:	f993 700c 	ldrsb.w	r7, [r3, #12]
 800dace:	f607 6779 	addw	r7, r7, #3705	; 0xe79
               PG * participantId;
 800dad2:	007f      	lsls	r7, r7, #1
    sedpAttributes.endpointGuid.prefix = part.m_guidPrefix;
 800dad4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800dad8:	b2bf      	uxth	r7, r7
 800dada:	ab60      	add	r3, sp, #384	; 0x180
 800dadc:	e9cd 882c 	strd	r8, r8, [sp, #176]	; 0xb0
    sedpAttributes.unicastLocator = getBuiltInUnicastLocator(part.m_participantId);
 800dae0:	972b      	str	r7, [sp, #172]	; 0xac
    sedpAttributes.endpointGuid.prefix = part.m_guidPrefix;
 800dae2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    sedpAttributes.unicastLocator = getBuiltInUnicastLocator(part.m_participantId);
 800dae6:	495f      	ldr	r1, [pc, #380]	; (800dc64 <_ZN4rtps6Domain30createBuiltinWritersAndReadersERNS_11ParticipantE+0x3a0>)
 800dae8:	912f      	str	r1, [sp, #188]	; 0xbc
 800daea:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800daee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800daf2:	fb0b f006 	mul.w	r0, fp, r6
    StatefulReader& sedpPubReader = m_statefulReaders[m_numStatefulReaders++];
 800daf6:	3601      	adds	r6, #1
    StatefulWriter& sedpPubWriter = m_statefulWriters[m_numStatefulWriters++];
 800daf8:	f10a 0301 	add.w	r3, sl, #1
 800dafc:	eb09 0200 	add.w	r2, r9, r0
 800db00:	901f      	str	r0, [sp, #124]	; 0x7c
    StatefulReader& sedpSubReader = m_statefulReaders[m_numStatefulReaders++];
 800db02:	b2f6      	uxtb	r6, r6
    StatefulWriter& sedpSubWriter = m_statefulWriters[m_numStatefulWriters++];
 800db04:	b2db      	uxtb	r3, r3
 800db06:	9218      	str	r2, [sp, #96]	; 0x60
 800db08:	fb0b f606 	mul.w	r6, fp, r6
 800db0c:	f44f 7b22 	mov.w	fp, #648	; 0x288
    sedpAttributes.unicastLocator = getBuiltInUnicastLocator(part.m_participantId);
 800db10:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800db14:	f505 5ed8 	add.w	lr, r5, #6912	; 0x1b00
 800db18:	e88c 0003 	stmia.w	ip, {r0, r1}
    sedpAttributes.endpointGuid.entityId = ENTITYID_SEDP_BUILTIN_PUBLICATIONS_READER;
 800db1c:	494e      	ldr	r1, [pc, #312]	; (800dc58 <_ZN4rtps6Domain30createBuiltinWritersAndReadersERNS_11ParticipantE+0x394>)
 800db1e:	f04f 0c02 	mov.w	ip, #2
 800db22:	f88d 8190 	strb.w	r8, [sp, #400]	; 0x190
 800db26:	1d10      	adds	r0, r2, #4
 800db28:	6989      	ldr	r1, [r1, #24]
 800db2a:	2254      	movs	r2, #84	; 0x54
 800db2c:	f88d 81a4 	strb.w	r8, [sp, #420]	; 0x1a4
 800db30:	911e      	str	r1, [sp, #120]	; 0x78
 800db32:	fb0b e803 	mla	r8, fp, r3, lr
 800db36:	494b      	ldr	r1, [pc, #300]	; (800dc64 <_ZN4rtps6Domain30createBuiltinWritersAndReadersERNS_11ParticipantE+0x3a0>)
 800db38:	fb0b eb0a 	mla	fp, fp, sl, lr
 800db3c:	f50d 7ec0 	add.w	lr, sp, #384	; 0x180
 800db40:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    sedpAttributes.endpointGuid.entityId = ENTITYID_SEDP_BUILTIN_PUBLICATIONS_WRITER;
 800db42:	f50d 7aec 	add.w	sl, sp, #472	; 0x1d8
 800db46:	9174      	str	r1, [sp, #464]	; 0x1d0
 800db48:	4671      	mov	r1, lr
 800db4a:	f8cd c1b8 	str.w	ip, [sp, #440]	; 0x1b8
 800db4e:	9770      	str	r7, [sp, #448]	; 0x1c0
 800db50:	f8cd 8070 	str.w	r8, [sp, #112]	; 0x70
 800db54:	eb09 0806 	add.w	r8, r9, r6
    sedpAttributes.endpointGuid.entityId = ENTITYID_SEDP_BUILTIN_PUBLICATIONS_READER;
 800db58:	9363      	str	r3, [sp, #396]	; 0x18c
 800db5a:	f001 fefa 	bl	800f952 <memcpy>
    sys_mutex_new(&m_mutex);
 800db5e:	981f      	ldr	r0, [sp, #124]	; 0x7c
    m_packetInfo.srcPort = attributes.unicastLocator.port;
 800db60:	9a18      	ldr	r2, [sp, #96]	; 0x60
    m_transport = &driver;
 800db62:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    sys_mutex_new(&m_mutex);
 800db64:	f500 7094 	add.w	r0, r0, #296	; 0x128
    m_packetInfo.srcPort = attributes.unicastLocator.port;
 800db68:	f8a2 7058 	strh.w	r7, [r2, #88]	; 0x58
    m_transport = &driver;
 800db6c:	66d3      	str	r3, [r2, #108]	; 0x6c
    sys_mutex_new(&m_mutex);
 800db6e:	4448      	add	r0, r9
 800db70:	f7fb ff64 	bl	8009a3c <sys_mutex_new>
    sedpAttributes.endpointGuid.entityId = ENTITYID_SEDP_BUILTIN_SUBSCRIPTIONS_READER;
 800db74:	4938      	ldr	r1, [pc, #224]	; (800dc58 <_ZN4rtps6Domain30createBuiltinWritersAndReadersERNS_11ParticipantE+0x394>)
    m_attributes = attributes;
 800db76:	f50d 7cc0 	add.w	ip, sp, #384	; 0x180
 800db7a:	2254      	movs	r2, #84	; 0x54
 800db7c:	69cb      	ldr	r3, [r1, #28]
 800db7e:	f108 0004 	add.w	r0, r8, #4
 800db82:	4661      	mov	r1, ip
 800db84:	9363      	str	r3, [sp, #396]	; 0x18c
 800db86:	f001 fee4 	bl	800f952 <memcpy>
    m_packetInfo.srcPort = attributes.unicastLocator.port;
 800db8a:	f8a8 7058 	strh.w	r7, [r8, #88]	; 0x58
    sys_mutex_new(&m_mutex);
 800db8e:	f506 7094 	add.w	r0, r6, #296	; 0x128
    m_transport = &driver;
 800db92:	9f1a      	ldr	r7, [sp, #104]	; 0x68
    sedpAttributes.endpointGuid.entityId = ENTITYID_SEDP_BUILTIN_PUBLICATIONS_WRITER;
 800db94:	4e30      	ldr	r6, [pc, #192]	; (800dc58 <_ZN4rtps6Domain30createBuiltinWritersAndReadersERNS_11ParticipantE+0x394>)
    sys_mutex_new(&m_mutex);
 800db96:	4448      	add	r0, r9
    m_transport = &driver;
 800db98:	f8c8 706c 	str.w	r7, [r8, #108]	; 0x6c
    sys_mutex_new(&m_mutex);
 800db9c:	f7fb ff4e 	bl	8009a3c <sys_mutex_new>
 800dba0:	68f3      	ldr	r3, [r6, #12]
    sedpPubWriter.init(sedpAttributes, TopicKind_t::NO_KEY, &m_threadPool, m_transport);
 800dba2:	f04f 0c01 	mov.w	ip, #1
 800dba6:	2248      	movs	r2, #72	; 0x48
    sedpAttributes.endpointGuid.entityId = ENTITYID_SEDP_BUILTIN_PUBLICATIONS_WRITER;
 800dba8:	f84a 3d4c 	str.w	r3, [sl, #-76]!
    sedpPubWriter.init(sedpAttributes, TopicKind_t::NO_KEY, &m_threadPool, m_transport);
 800dbac:	4668      	mov	r0, sp
 800dbae:	4651      	mov	r1, sl
 800dbb0:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 800dbb4:	e9cd 5713 	strd	r5, r7, [sp, #76]	; 0x4c
 800dbb8:	f001 fecb 	bl	800f952 <memcpy>
 800dbbc:	f50d 7cc0 	add.w	ip, sp, #384	; 0x180
 800dbc0:	4658      	mov	r0, fp
 800dbc2:	e89c 000e 	ldmia.w	ip, {r1, r2, r3}
 800dbc6:	f7ff fe13 	bl	800d7f0 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE4initENS_9TopicDataENS_11TopicKind_tEPNS_10ThreadPoolERS1_>
    sedpAttributes.endpointGuid.entityId = ENTITYID_SEDP_BUILTIN_SUBSCRIPTIONS_WRITER;
 800dbca:	6933      	ldr	r3, [r6, #16]
    sedpSubWriter.init(sedpAttributes, TopicKind_t::NO_KEY, &m_threadPool, m_transport);
 800dbcc:	2601      	movs	r6, #1
 800dbce:	4651      	mov	r1, sl
 800dbd0:	2248      	movs	r2, #72	; 0x48
 800dbd2:	4668      	mov	r0, sp
 800dbd4:	9612      	str	r6, [sp, #72]	; 0x48
    sedpAttributes.endpointGuid.entityId = ENTITYID_SEDP_BUILTIN_SUBSCRIPTIONS_WRITER;
 800dbd6:	9363      	str	r3, [sp, #396]	; 0x18c
    sedpSubWriter.init(sedpAttributes, TopicKind_t::NO_KEY, &m_threadPool, m_transport);
 800dbd8:	e9cd 5713 	strd	r5, r7, [sp, #76]	; 0x4c
 800dbdc:	f001 feb9 	bl	800f952 <memcpy>
 800dbe0:	af60      	add	r7, sp, #384	; 0x180
 800dbe2:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800dbe4:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800dbe8:	4630      	mov	r0, r6
 800dbea:	f7ff fe01 	bl	800d7f0 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE4initENS_9TopicDataENS_11TopicKind_tEPNS_10ThreadPoolERS1_>
    endpoints.spdpReader = &spdpReader;
 800dbee:	9d19      	ldr	r5, [sp, #100]	; 0x64
    endpoints.sedpPubReader = &sedpPubReader;
 800dbf0:	9a18      	ldr	r2, [sp, #96]	; 0x60
    part.addBuiltInEndpoints(endpoints);
 800dbf2:	4621      	mov	r1, r4
    endpoints.spdpReader = &spdpReader;
 800dbf4:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800dbf8:	9d1d      	ldr	r5, [sp, #116]	; 0x74
    part.addBuiltInEndpoints(endpoints);
 800dbfa:	9817      	ldr	r0, [sp, #92]	; 0x5c
    endpoints.spdpReader = &spdpReader;
 800dbfc:	eb05 1343 	add.w	r3, r5, r3, lsl #5
    endpoints.sedpSubReader = &sedpSubReader;
 800dc00:	f8c4 8014 	str.w	r8, [r4, #20]
    endpoints.sedpSubWriter = &sedpSubWriter;
 800dc04:	6126      	str	r6, [r4, #16]
    endpoints.spdpReader = &spdpReader;
 800dc06:	6063      	str	r3, [r4, #4]
    endpoints.spdpWriter = &spdpWriter;
 800dc08:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    endpoints.sedpPubWriter = &sedpPubWriter;
 800dc0a:	e9c4 b202 	strd	fp, r2, [r4, #8]
    endpoints.spdpWriter = &spdpWriter;
 800dc0e:	6023      	str	r3, [r4, #0]
    part.addBuiltInEndpoints(endpoints);
 800dc10:	f001 f878 	bl	800ed04 <_ZN4rtps11Participant19addBuiltInEndpointsERNS_16BuiltInEndpointsE>
}
 800dc14:	b077      	add	sp, #476	; 0x1dc
 800dc16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    spdpWriter.addNewMatchedReader(ReaderProxy{{part.m_guidPrefix, ENTITYID_SPDP_BUILTIN_PARTICIPANT_READER}, getBuiltInMulticastLocator()});
 800dc1a:	a960      	add	r1, sp, #384	; 0x180
 800dc1c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800dc1e:	47d8      	blx	fp
 800dc20:	e71a      	b.n	800da58 <_ZN4rtps6Domain30createBuiltinWritersAndReadersERNS_11ParticipantE+0x194>
 800dc22:	2701      	movs	r7, #1
                            m_bitMap[bucket] |= 1 << bit;
 800dc24:	f44f 711f 	mov.w	r1, #636	; 0x27c
                            m_data[bucket*8+bit] = data;
 800dc28:	2258      	movs	r2, #88	; 0x58
                            m_bitMap[bucket] |= 1 << bit;
 800dc2a:	431f      	orrs	r7, r3
                            ++m_numElements;
 800dc2c:	3601      	adds	r6, #1
                            m_bitMap[bucket] |= 1 << bit;
 800dc2e:	fb01 fa0a 	mul.w	sl, r1, sl
                            m_data[bucket*8+bit] = data;
 800dc32:	a960      	add	r1, sp, #384	; 0x180
 800dc34:	fb02 a000 	mla	r0, r2, r0, sl
                            m_bitMap[bucket] |= 1 << bit;
 800dc38:	44c2      	add	sl, r8
                            m_data[bucket*8+bit] = data;
 800dc3a:	4440      	add	r0, r8
                            m_bitMap[bucket] |= 1 << bit;
 800dc3c:	f88a 716c 	strb.w	r7, [sl, #364]	; 0x16c
                            m_data[bucket*8+bit] = data;
 800dc40:	f500 70ba 	add.w	r0, r0, #372	; 0x174
 800dc44:	f001 fe85 	bl	800f952 <memcpy>
                            ++m_numElements;
 800dc48:	f8ca 6170 	str.w	r6, [sl, #368]	; 0x170
 800dc4c:	e704      	b.n	800da58 <_ZN4rtps6Domain30createBuiltinWritersAndReadersERNS_11ParticipantE+0x194>
                        if(!(byte & 1)){
 800dc4e:	f06f 077f 	mvn.w	r7, #127	; 0x7f
 800dc52:	2007      	movs	r0, #7
 800dc54:	e7e6      	b.n	800dc24 <_ZN4rtps6Domain30createBuiltinWritersAndReadersERNS_11ParticipantE+0x360>
 800dc56:	bf00      	nop
 800dc58:	08010d88 	.word	0x08010d88
 800dc5c:	0100ffef 	.word	0x0100ffef
 800dc60:	0800a341 	.word	0x0800a341
 800dc64:	2f00a8c0 	.word	0x2f00a8c0
 800dc68:	2001      	movs	r0, #1
 800dc6a:	2702      	movs	r7, #2
 800dc6c:	e7da      	b.n	800dc24 <_ZN4rtps6Domain30createBuiltinWritersAndReadersERNS_11ParticipantE+0x360>
 800dc6e:	2704      	movs	r7, #4
 800dc70:	2002      	movs	r0, #2
 800dc72:	e7d7      	b.n	800dc24 <_ZN4rtps6Domain30createBuiltinWritersAndReadersERNS_11ParticipantE+0x360>
 800dc74:	2708      	movs	r7, #8
 800dc76:	2003      	movs	r0, #3
 800dc78:	e7d4      	b.n	800dc24 <_ZN4rtps6Domain30createBuiltinWritersAndReadersERNS_11ParticipantE+0x360>
 800dc7a:	2710      	movs	r7, #16
 800dc7c:	2004      	movs	r0, #4
 800dc7e:	e7d1      	b.n	800dc24 <_ZN4rtps6Domain30createBuiltinWritersAndReadersERNS_11ParticipantE+0x360>
 800dc80:	2005      	movs	r0, #5
 800dc82:	e7cf      	b.n	800dc24 <_ZN4rtps6Domain30createBuiltinWritersAndReadersERNS_11ParticipantE+0x360>
 800dc84:	2740      	movs	r7, #64	; 0x40
 800dc86:	2006      	movs	r0, #6
 800dc88:	e7cc      	b.n	800dc24 <_ZN4rtps6Domain30createBuiltinWritersAndReadersERNS_11ParticipantE+0x360>
 800dc8a:	bf00      	nop

0800dc8c <_ZN4rtps6Domain17createParticipantEv>:
rtps::Participant* Domain::createParticipant(){
 800dc8c:	b5f0      	push	{r4, r5, r6, r7, lr}
    auto nextSlot = static_cast<uint8_t>(m_nextParticipantId - PARTICIPANT_START_ID);
 800dc8e:	f241 25e1 	movw	r5, #4833	; 0x12e1
 800dc92:	f500 5397 	add.w	r3, r0, #4832	; 0x12e0
rtps::Participant* Domain::createParticipant(){
 800dc96:	b085      	sub	sp, #20
    auto nextSlot = static_cast<uint8_t>(m_nextParticipantId - PARTICIPANT_START_ID);
 800dc98:	5742      	ldrsb	r2, [r0, r5]
    if(m_initComplete || m_participants.size() <= nextSlot){
 800dc9a:	7819      	ldrb	r1, [r3, #0]
    auto nextSlot = static_cast<uint8_t>(m_nextParticipantId - PARTICIPANT_START_ID);
 800dc9c:	b2d3      	uxtb	r3, r2
    if(m_initComplete || m_participants.size() <= nextSlot){
 800dc9e:	4299      	cmp	r1, r3
 800dca0:	d136      	bne.n	800dd10 <_ZN4rtps6Domain17createParticipantEv+0x84>
 800dca2:	f242 0111 	movw	r1, #8209	; 0x2011
 800dca6:	5c41      	ldrb	r1, [r0, r1]
 800dca8:	bb91      	cbnz	r1, 800dd10 <_ZN4rtps6Domain17createParticipantEv+0x84>

rtps::GuidPrefix_t Domain::generateGuidPrefix(ParticipantId_t id) const{
    GuidPrefix_t prefix = Config::BASE_GUID_PREFIX;
 800dcaa:	491b      	ldr	r1, [pc, #108]	; (800dd18 <_ZN4rtps6Domain17createParticipantEv+0x8c>)
 800dcac:	f500 76cc 	add.w	r6, r0, #408	; 0x198
 800dcb0:	4604      	mov	r4, r0
    prefix.id[prefix.id.size()-1] = *reinterpret_cast<uint8_t*>(&id);
 800dcb2:	f88d 300f 	strb.w	r3, [sp, #15]
    GuidPrefix_t prefix = Config::BASE_GUID_PREFIX;
 800dcb6:	9101      	str	r1, [sp, #4]
 800dcb8:	f640 2109 	movw	r1, #2569	; 0xa09
 800dcbc:	230c      	movs	r3, #12
 800dcbe:	4f17      	ldr	r7, [pc, #92]	; (800dd1c <_ZN4rtps6Domain17createParticipantEv+0x90>)
    entry.reuse(generateGuidPrefix(m_nextParticipantId), m_nextParticipantId);
 800dcc0:	4630      	mov	r0, r6
    GuidPrefix_t prefix = Config::BASE_GUID_PREFIX;
 800dcc2:	f8ad 100c 	strh.w	r1, [sp, #12]
    entry.reuse(generateGuidPrefix(m_nextParticipantId), m_nextParticipantId);
 800dcc6:	a901      	add	r1, sp, #4
    GuidPrefix_t prefix = Config::BASE_GUID_PREFIX;
 800dcc8:	9702      	str	r7, [sp, #8]
 800dcca:	f88d 300e 	strb.w	r3, [sp, #14]
    entry.reuse(generateGuidPrefix(m_nextParticipantId), m_nextParticipantId);
 800dcce:	f000 fdb1 	bl	800e834 <_ZN4rtps11Participant5reuseERKNS_12GuidPrefix_tEa>
               PG * participantId;
 800dcd2:	f994 31a4 	ldrsb.w	r3, [r4, #420]	; 0x1a4
 800dcd6:	f641 41f3 	movw	r1, #7411	; 0x1cf3
    m_transport.createUdpConnection(getUserUnicastPort(part.m_participantId));
 800dcda:	f504 779e 	add.w	r7, r4, #316	; 0x13c
 800dcde:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 800dce2:	4638      	mov	r0, r7
 800dce4:	b289      	uxth	r1, r1
 800dce6:	f7fe f84b 	bl	800bd80 <_ZN4rtps9UdpDriver19createUdpConnectionEt>
               D1 +
 800dcea:	f994 11a4 	ldrsb.w	r1, [r4, #420]	; 0x1a4
    m_transport.createUdpConnection(getBuiltInUnicastPort(part.m_participantId));
 800dcee:	4638      	mov	r0, r7
 800dcf0:	f601 6179 	addw	r1, r1, #3705	; 0xe79
               PG * participantId;
 800dcf4:	0049      	lsls	r1, r1, #1
 800dcf6:	b289      	uxth	r1, r1
 800dcf8:	f7fe f842 	bl	800bd80 <_ZN4rtps9UdpDriver19createUdpConnectionEt>
    createBuiltinWritersAndReaders(entry);
 800dcfc:	4620      	mov	r0, r4
 800dcfe:	4631      	mov	r1, r6
 800dd00:	f7ff fde0 	bl	800d8c4 <_ZN4rtps6Domain30createBuiltinWritersAndReadersERNS_11ParticipantE>
    ++m_nextParticipantId;
 800dd04:	5d63      	ldrb	r3, [r4, r5]
}
 800dd06:	4630      	mov	r0, r6
    ++m_nextParticipantId;
 800dd08:	3301      	adds	r3, #1
 800dd0a:	5563      	strb	r3, [r4, r5]
}
 800dd0c:	b005      	add	sp, #20
 800dd0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return nullptr;
 800dd10:	2600      	movs	r6, #0
}
 800dd12:	4630      	mov	r0, r6
 800dd14:	b005      	add	sp, #20
 800dd16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd18:	04030201 	.word	0x04030201
 800dd1c:	08070605 	.word	0x08070605

0800dd20 <_ZN4rtps6Domain12createWriterERNS_11ParticipantEPKcS4_b>:
rtps::Writer* Domain::createWriter(Participant& part, const char* topicName, const char* typeName, bool reliable){
 800dd20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd24:	b0c9      	sub	sp, #292	; 0x124
 800dd26:	f89d b148 	ldrb.w	fp, [sp, #328]	; 0x148
       (!reliable && m_statelessWriters.size() <= m_numStatelessWriters) ||
 800dd2a:	f1bb 0f00 	cmp.w	fp, #0
 800dd2e:	f000 8093 	beq.w	800de58 <_ZN4rtps6Domain12createWriterERNS_11ParticipantEPKcS4_b+0x138>
    if((reliable && m_statefulWriters.size() <= m_numStatefulWriters) ||
 800dd32:	f242 0410 	movw	r4, #8208	; 0x2010
 800dd36:	5d04      	ldrb	r4, [r0, r4]
 800dd38:	2c01      	cmp	r4, #1
 800dd3a:	f200 8093 	bhi.w	800de64 <_ZN4rtps6Domain12createWriterERNS_11ParticipantEPKcS4_b+0x144>
 800dd3e:	4606      	mov	r6, r0
	    part.isWritersFull()){
 800dd40:	4608      	mov	r0, r1
 800dd42:	4699      	mov	r9, r3
 800dd44:	4617      	mov	r7, r2
 800dd46:	460d      	mov	r5, r1
 800dd48:	f000 fdd8 	bl	800e8fc <_ZN4rtps11Participant13isWritersFullEv>
       (!reliable && m_statelessWriters.size() <= m_numStatelessWriters) ||
 800dd4c:	4604      	mov	r4, r0
 800dd4e:	2800      	cmp	r0, #0
 800dd50:	f040 8088 	bne.w	800de64 <_ZN4rtps6Domain12createWriterERNS_11ParticipantEPKcS4_b+0x144>
 800dd54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dd58:	902e      	str	r0, [sp, #184]	; 0xb8
    if(strlen(topicName) > Config::MAX_TOPICNAME_LENGTH || strlen(typeName) > Config::MAX_TYPENAME_LENGTH){
 800dd5a:	4638      	mov	r0, r7
 800dd5c:	942f      	str	r4, [sp, #188]	; 0xbc
 800dd5e:	932d      	str	r3, [sp, #180]	; 0xb4
 800dd60:	9432      	str	r4, [sp, #200]	; 0xc8
 800dd62:	e9cd 4430 	strd	r4, r4, [sp, #192]	; 0xc0
 800dd66:	f7f2 fa75 	bl	8000254 <strlen>
 800dd6a:	2814      	cmp	r0, #20
 800dd6c:	4680      	mov	r8, r0
 800dd6e:	d879      	bhi.n	800de64 <_ZN4rtps6Domain12createWriterERNS_11ParticipantEPKcS4_b+0x144>
 800dd70:	4648      	mov	r0, r9
 800dd72:	f7f2 fa6f 	bl	8000254 <strlen>
 800dd76:	2814      	cmp	r0, #20
 800dd78:	4682      	mov	sl, r0
 800dd7a:	d873      	bhi.n	800de64 <_ZN4rtps6Domain12createWriterERNS_11ParticipantEPKcS4_b+0x144>
    strcpy(attributes.topicName, topicName);
 800dd7c:	f108 0201 	add.w	r2, r8, #1
 800dd80:	4639      	mov	r1, r7
 800dd82:	a827      	add	r0, sp, #156	; 0x9c
 800dd84:	f10d 0878 	add.w	r8, sp, #120	; 0x78
 800dd88:	f001 fde3 	bl	800f952 <memcpy>
    strcpy(attributes.typeName, typeName);
 800dd8c:	f10a 0201 	add.w	r2, sl, #1
 800dd90:	4649      	mov	r1, r9
 800dd92:	a822      	add	r0, sp, #136	; 0x88
 800dd94:	f001 fddd 	bl	800f952 <memcpy>
    attributes.unicastLocator = getUserUnicastLocator(part.m_participantId);
 800dd98:	f04f 0901 	mov.w	r9, #1
 800dd9c:	af2d      	add	r7, sp, #180	; 0xb4
 800dd9e:	f506 7a9e 	add.w	sl, r6, #316	; 0x13c
    attributes.endpointGuid.prefix = part.m_guidPrefix;
 800dda2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800dda6:	e888 0007 	stmia.w	r8, {r0, r1, r2}
    attributes.endpointGuid.entityId = {part.getNextUserEntityKey(), EntityKind_t::USER_DEFINED_WRITER_WITHOUT_KEY};
 800ddaa:	4628      	mov	r0, r5
 800ddac:	f000 fd4e 	bl	800e84c <_ZN4rtps11Participant20getNextUserEntityKeyEv>
               PG * participantId;
 800ddb0:	f995 200c 	ldrsb.w	r2, [r5, #12]
 800ddb4:	f641 43f3 	movw	r3, #7411	; 0x1cf3
 800ddb8:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800ddbc:	f88d 005c 	strb.w	r0, [sp, #92]	; 0x5c
 800ddc0:	f3c0 4007 	ubfx	r0, r0, #16, #8
 800ddc4:	eb03 0342 	add.w	r3, r3, r2, lsl #1
    attributes.unicastLocator = getUserUnicastLocator(part.m_participantId);
 800ddc8:	f10d 0c60 	add.w	ip, sp, #96	; 0x60
 800ddcc:	4a42      	ldr	r2, [pc, #264]	; (800ded8 <_ZN4rtps6Domain12createWriterERNS_11ParticipantEPKcS4_b+0x1b8>)
                                           getUserUnicastPort(participantId));
 800ddce:	b29b      	uxth	r3, r3
    attributes.endpointGuid.entityId = {part.getNextUserEntityKey(), EntityKind_t::USER_DEFINED_WRITER_WITHOUT_KEY};
 800ddd0:	f88d 105d 	strb.w	r1, [sp, #93]	; 0x5d
 800ddd4:	f88d 005e 	strb.w	r0, [sp, #94]	; 0x5e
    attributes.unicastLocator = getUserUnicastLocator(part.m_participantId);
 800ddd8:	921d      	str	r2, [sp, #116]	; 0x74
 800ddda:	f8cd 9060 	str.w	r9, [sp, #96]	; 0x60
 800ddde:	e9cd 3419 	strd	r3, r4, [sp, #100]	; 0x64
    struct Locator{
 800dde2:	e9cd 441b 	strd	r4, r4, [sp, #108]	; 0x6c
    attributes.endpointGuid.entityId = {part.getNextUserEntityKey(), EntityKind_t::USER_DEFINED_WRITER_WITHOUT_KEY};
 800dde6:	9c17      	ldr	r4, [sp, #92]	; 0x5c
    attributes.unicastLocator = getUserUnicastLocator(part.m_participantId);
 800dde8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ddec:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    attributes.endpointGuid.entityId = {part.getNextUserEntityKey(), EntityKind_t::USER_DEFINED_WRITER_WITHOUT_KEY};
 800ddee:	0c22      	lsrs	r2, r4, #16
 800ddf0:	2303      	movs	r3, #3
 800ddf2:	f8ad 4084 	strh.w	r4, [sp, #132]	; 0x84
 800ddf6:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
 800ddfa:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
    attributes.unicastLocator = getUserUnicastLocator(part.m_participantId);
 800ddfe:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800de02:	e887 0003 	stmia.w	r7, {r0, r1}
    if(reliable){
 800de06:	f1bb 0f00 	cmp.w	fp, #0
 800de0a:	d130      	bne.n	800de6e <_ZN4rtps6Domain12createWriterERNS_11ParticipantEPKcS4_b+0x14e>
        StatelessWriter& writer = m_statelessWriters[m_numStatelessWriters++];
 800de0c:	f241 73dc 	movw	r3, #6108	; 0x17dc
 800de10:	f44f 771f 	mov.w	r7, #636	; 0x27c
 800de14:	4641      	mov	r1, r8
 800de16:	2254      	movs	r2, #84	; 0x54
 800de18:	f816 b003 	ldrb.w	fp, [r6, r3]
 800de1c:	a833      	add	r0, sp, #204	; 0xcc
        attributes.reliabilityKind = ReliabilityKind_t::BEST_EFFORT;
 800de1e:	f8cd 90b0 	str.w	r9, [sp, #176]	; 0xb0
        StatelessWriter& writer = m_statelessWriters[m_numStatelessWriters++];
 800de22:	f10b 0401 	add.w	r4, fp, #1
 800de26:	fb07 f70b 	mul.w	r7, r7, fp
 800de2a:	54f4      	strb	r4, [r6, r3]
 800de2c:	f241 24e4 	movw	r4, #4836	; 0x12e4
 800de30:	f001 fd8f 	bl	800f952 <memcpy>
    if (sys_mutex_new(&m_mutex) != ERR_OK) {
 800de34:	f107 0058 	add.w	r0, r7, #88	; 0x58
 800de38:	4434      	add	r4, r6
 800de3a:	f8dd 80b8 	ldr.w	r8, [sp, #184]	; 0xb8
 800de3e:	4420      	add	r0, r4
 800de40:	443c      	add	r4, r7
 800de42:	f7fb fdfb 	bl	8009a3c <sys_mutex_new>
 800de46:	b3b0      	cbz	r0, 800deb6 <_ZN4rtps6Domain12createWriterERNS_11ParticipantEPKcS4_b+0x196>
        part.addWriter(&writer);
 800de48:	4628      	mov	r0, r5
 800de4a:	4621      	mov	r1, r4
 800de4c:	f000 fd3e 	bl	800e8cc <_ZN4rtps11Participant9addWriterEPNS_6WriterE>
}
 800de50:	4620      	mov	r0, r4
 800de52:	b049      	add	sp, #292	; 0x124
 800de54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
       (!reliable && m_statelessWriters.size() <= m_numStatelessWriters) ||
 800de58:	f241 74dc 	movw	r4, #6108	; 0x17dc
 800de5c:	5d04      	ldrb	r4, [r0, r4]
 800de5e:	2c01      	cmp	r4, #1
 800de60:	f67f af6d 	bls.w	800dd3e <_ZN4rtps6Domain12createWriterERNS_11ParticipantEPKcS4_b+0x1e>
        return nullptr;
 800de64:	2400      	movs	r4, #0
}
 800de66:	4620      	mov	r0, r4
 800de68:	b049      	add	sp, #292	; 0x124
 800de6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        StatefulWriter& writer = m_statefulWriters[m_numStatefulWriters++];
 800de6e:	f242 0210 	movw	r2, #8208	; 0x2010
        writer.init(attributes, TopicKind_t::NO_KEY, &m_threadPool, m_transport);
 800de72:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
 800de76:	f506 51d8 	add.w	r1, r6, #6912	; 0x1b00
 800de7a:	f44f 7422 	mov.w	r4, #648	; 0x288
        StatefulWriter& writer = m_statefulWriters[m_numStatefulWriters++];
 800de7e:	5cb3      	ldrb	r3, [r6, r2]
        attributes.reliabilityKind = ReliabilityKind_t::RELIABLE;
 800de80:	2702      	movs	r7, #2
        writer.init(attributes, TopicKind_t::NO_KEY, &m_threadPool, m_transport);
 800de82:	9613      	str	r6, [sp, #76]	; 0x4c
 800de84:	4668      	mov	r0, sp
 800de86:	fb04 1403 	mla	r4, r4, r3, r1
        StatefulWriter& writer = m_statefulWriters[m_numStatefulWriters++];
 800de8a:	444b      	add	r3, r9
        writer.init(attributes, TopicKind_t::NO_KEY, &m_threadPool, m_transport);
 800de8c:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 800de90:	a921      	add	r1, sp, #132	; 0x84
        StatefulWriter& writer = m_statefulWriters[m_numStatefulWriters++];
 800de92:	54b3      	strb	r3, [r6, r2]
        writer.init(attributes, TopicKind_t::NO_KEY, &m_threadPool, m_transport);
 800de94:	2248      	movs	r2, #72	; 0x48
        attributes.reliabilityKind = ReliabilityKind_t::RELIABLE;
 800de96:	972c      	str	r7, [sp, #176]	; 0xb0
        writer.init(attributes, TopicKind_t::NO_KEY, &m_threadPool, m_transport);
 800de98:	f001 fd5b 	bl	800f952 <memcpy>
 800de9c:	4620      	mov	r0, r4
 800de9e:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 800dea2:	f7ff fca5 	bl	800d7f0 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE4initENS_9TopicDataENS_11TopicKind_tEPNS_10ThreadPoolERS1_>
        part.addWriter(&writer);
 800dea6:	4621      	mov	r1, r4
 800dea8:	4628      	mov	r0, r5
 800deaa:	f000 fd0f 	bl	800e8cc <_ZN4rtps11Participant9addWriterEPNS_6WriterE>
}
 800deae:	4620      	mov	r0, r4
 800deb0:	b049      	add	sp, #292	; 0x124
 800deb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_attributes = attributes;
 800deb6:	a933      	add	r1, sp, #204	; 0xcc
 800deb8:	2254      	movs	r2, #84	; 0x54
 800deba:	1d20      	adds	r0, r4, #4
 800debc:	f001 fd49 	bl	800f952 <memcpy>
    m_packetInfo.srcPort = attributes.unicastLocator.port;
 800dec0:	f8a4 8060 	strh.w	r8, [r4, #96]	; 0x60
    m_topicKind = topicKind;
 800dec4:	f884 9078 	strb.w	r9, [r4, #120]	; 0x78
        part.addWriter(&writer);
 800dec8:	4628      	mov	r0, r5
    mp_threadPool = threadPool;
 800deca:	65e6      	str	r6, [r4, #92]	; 0x5c
 800decc:	4621      	mov	r1, r4
    m_transport = &driver;
 800dece:	f8c4 a074 	str.w	sl, [r4, #116]	; 0x74
 800ded2:	f000 fcfb 	bl	800e8cc <_ZN4rtps11Participant9addWriterEPNS_6WriterE>
 800ded6:	e7bb      	b.n	800de50 <_ZN4rtps6Domain12createWriterERNS_11ParticipantEPKcS4_b+0x130>
 800ded8:	2f00a8c0 	.word	0x2f00a8c0

0800dedc <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE13sendHeartBeatEv>:
    }
}

template <class NetworkDriver>
void StatefulWriterT<NetworkDriver>::sendHeartBeat() {
    if(m_proxies.isEmpty()){
 800dedc:	f8d0 317c 	ldr.w	r3, [r0, #380]	; 0x17c
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	f000 810a 	beq.w	800e0fa <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE13sendHeartBeatEv+0x21e>
void StatefulWriterT<NetworkDriver>::sendHeartBeat() {
 800dee6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                memcpy(m_bitMap, m_pool.m_bitMap, sizeof(m_bitMap));
 800deea:	f890 4178 	ldrb.w	r4, [r0, #376]	; 0x178
 800deee:	b093      	sub	sp, #76	; 0x4c
            if(!(m_bitMap[0] & 1)){
 800def0:	07e5      	lsls	r5, r4, #31
 800def2:	f140 8109 	bpl.w	800e108 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE13sendHeartBeatEv+0x22c>
            explicit MemoryPoolIterator(MemoryPool<TYPE, SIZE>& pool) : m_pool(pool){
 800def6:	f04f 0800 	mov.w	r8, #0
 800defa:	4605      	mov	r5, r0
 800defc:	2700      	movs	r7, #0
            header.protocolName = PROTOCOL_TYPE;
 800defe:	4e8a      	ldr	r6, [pc, #552]	; (800e128 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE13sendHeartBeatEv+0x24c>)
        log("StatefulWriter[%s]: Skipping heartbeat. No proxies.\n", this->m_attributes.topicName);
#endif
        return;
    }

    for(auto& proxy : m_proxies) {
 800df00:	f1b8 0f03 	cmp.w	r8, #3
 800df04:	f000 8096 	beq.w	800e034 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE13sendHeartBeatEv+0x158>
            header.guidPrefix = guidPrefix;
 800df08:	462b      	mov	r3, r5

        PacketInfo info;
        info.srcPort = m_packetInfo.srcPort;
 800df0a:	f8b5 e060 	ldrh.w	lr, [r5, #96]	; 0x60
 800df0e:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 800df12:	9708      	str	r7, [sp, #32]
 800df14:	f853 0f04 	ldr.w	r0, [r3, #4]!
 800df18:	f8ad e014 	strh.w	lr, [sp, #20]
 800df1c:	6859      	ldr	r1, [r3, #4]
 800df1e:	689a      	ldr	r2, [r3, #8]
            header.protocolName = PROTOCOL_TYPE;
 800df20:	6833      	ldr	r3, [r6, #0]
            header.protocolVersion = PROTOCOLVERSION;
 800df22:	f8b6 e004 	ldrh.w	lr, [r6, #4]
            header.protocolName = PROTOCOL_TYPE;
 800df26:	930a      	str	r3, [sp, #40]	; 0x28
            header.vendorId = Config::VENDOR_ID;
 800df28:	8933      	ldrh	r3, [r6, #8]
 800df2a:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
            header.protocolVersion = PROTOCOLVERSION;
 800df2e:	f8ad e02c 	strh.w	lr, [sp, #44]	; 0x2c
            header.vendorId = Config::VENDOR_ID;
 800df32:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            header.guidPrefix = guidPrefix;
 800df36:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
	    if(!buffer.reserve(Header::getRawSize())){
 800df3a:	a808      	add	r0, sp, #32
 800df3c:	2114      	movs	r1, #20
 800df3e:	f001 f9c3 	bl	800f2c8 <_ZN4rtps11PBufWrapper7reserveEt>
 800df42:	b1a0      	cbz	r0, 800df6e <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE13sendHeartBeatEv+0x92>
		buffer.append(header.protocolName.data(), sizeof(std::array<uint8_t, 4>));
 800df44:	2204      	movs	r2, #4
 800df46:	a90a      	add	r1, sp, #40	; 0x28
 800df48:	a808      	add	r0, sp, #32
 800df4a:	f001 f98b 	bl	800f264 <_ZN4rtps11PBufWrapper6appendEPKht>
		buffer.append(reinterpret_cast<uint8_t*>(&header.protocolVersion), sizeof(ProtocolVersion_t));
 800df4e:	2202      	movs	r2, #2
 800df50:	a90b      	add	r1, sp, #44	; 0x2c
 800df52:	a808      	add	r0, sp, #32
 800df54:	f001 f986 	bl	800f264 <_ZN4rtps11PBufWrapper6appendEPKht>
		buffer.append(header.vendorId.vendorId.data(), sizeof(VendorId_t));
 800df58:	2202      	movs	r2, #2
 800df5a:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 800df5e:	a808      	add	r0, sp, #32
 800df60:	f001 f980 	bl	800f264 <_ZN4rtps11PBufWrapper6appendEPKht>
		buffer.append(header.guidPrefix.id.data(), sizeof(GuidPrefix_t));
 800df64:	220c      	movs	r2, #12
 800df66:	a90c      	add	r1, sp, #48	; 0x30
 800df68:	a808      	add	r0, sp, #32
 800df6a:	f001 f97b 	bl	800f264 <_ZN4rtps11PBufWrapper6appendEPKht>

        SequenceNumber_t firstSN;
        SequenceNumber_t lastSN;
        MessageFactory::addHeader(info.buffer, m_attributes.endpointGuid.prefix);
        {
            Lock lock(m_mutex);
 800df6e:	f105 0958 	add.w	r9, r5, #88	; 0x58
            firstSN = m_history.getSeqNumMin();
 800df72:	f105 0a84 	add.w	sl, r5, #132	; 0x84
            sys_mutex_lock(&m_mutex);
 800df76:	4648      	mov	r0, r9
 800df78:	f7fb fd76 	bl	8009a68 <sys_mutex_lock>
 800df7c:	4650      	mov	r0, sl
 800df7e:	f001 f9cf 	bl	800f320 <_ZNK4rtps18SimpleHistoryCache12getSeqNumMinEv>
 800df82:	4602      	mov	r2, r0
            lastSN = m_history.getSeqNumMax();
 800df84:	4650      	mov	r0, sl
            firstSN = m_history.getSeqNumMin();
 800df86:	6813      	ldr	r3, [r2, #0]
 800df88:	f8d2 a004 	ldr.w	sl, [r2, #4]
 800df8c:	9301      	str	r3, [sp, #4]
            lastSN = m_history.getSeqNumMax();
 800df8e:	f001 f9d7 	bl	800f340 <_ZNK4rtps18SimpleHistoryCache12getSeqNumMaxEv>
 800df92:	4602      	mov	r2, r0
            sys_mutex_unlock(&m_mutex);
 800df94:	4648      	mov	r0, r9
 800df96:	e9d2 9b00 	ldrd	r9, fp, [r2]
 800df9a:	f7fb fd6b 	bl	8009a74 <sys_mutex_unlock>
            return high == other.high && low == other.low;
 800df9e:	9b01      	ldr	r3, [sp, #4]
 800dfa0:	f1ba 0f00 	cmp.w	sl, #0
 800dfa4:	d102      	bne.n	800dfac <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE13sendHeartBeatEv+0xd0>
 800dfa6:	1c5a      	adds	r2, r3, #1
 800dfa8:	f000 80a8 	beq.w	800e0fc <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE13sendHeartBeatEv+0x220>
 800dfac:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 800dfb0:	d103      	bne.n	800dfba <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE13sendHeartBeatEv+0xde>
 800dfb2:	f1bb 0f00 	cmp.w	fp, #0
 800dfb6:	f000 80a1 	beq.w	800e0fc <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE13sendHeartBeatEv+0x220>
 800dfba:	2158      	movs	r1, #88	; 0x58
 800dfbc:	692a      	ldr	r2, [r5, #16]
            subMsg.firstSN = firstSN;
 800dfbe:	930d      	str	r3, [sp, #52]	; 0x34
            subMsg.header.submessageId = SubmessageKind::HEARTBEAT;
 800dfc0:	f04f 0c07 	mov.w	ip, #7
 800dfc4:	fb01 5108 	mla	r1, r1, r8, r5
 800dfc8:	f8d5 3170 	ldr.w	r3, [r5, #368]	; 0x170
            subMsg.firstSN = firstSN;
 800dfcc:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
            subMsg.header.submessageLength = SubmessageHeartbeat::getRawSize() - numBytesUntilEndOfLength;
 800dfd0:	f04f 0e1c 	mov.w	lr, #28
 800dfd4:	f8d1 018c 	ldr.w	r0, [r1, #396]	; 0x18c
        if(!buffer.reserve(SubmessageHeartbeat::getRawSize())){
 800dfd8:	2120      	movs	r1, #32
            subMsg.header.flags = FLAG_LITTLE_ENDIAN;
 800dfda:	f04f 0a01 	mov.w	sl, #1
 800dfde:	9203      	str	r2, [sp, #12]
 800dfe0:	9004      	str	r0, [sp, #16]
            subMsg.readerId = readerId;
 800dfe2:	900b      	str	r0, [sp, #44]	; 0x2c
 800dfe4:	eb0d 0001 	add.w	r0, sp, r1
            subMsg.writerId = writerId;
 800dfe8:	920c      	str	r2, [sp, #48]	; 0x30
            subMsg.count = count;
 800dfea:	9311      	str	r3, [sp, #68]	; 0x44
            subMsg.header.submessageId = SubmessageKind::HEARTBEAT;
 800dfec:	f88d c028 	strb.w	ip, [sp, #40]	; 0x28
            subMsg.header.submessageLength = SubmessageHeartbeat::getRawSize() - numBytesUntilEndOfLength;
 800dff0:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
            subMsg.header.flags = FLAG_LITTLE_ENDIAN;
 800dff4:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
            subMsg.lastSN = lastSN;
 800dff8:	e9cd 9b0f 	strd	r9, fp, [sp, #60]	; 0x3c
 800dffc:	f001 f964 	bl	800f2c8 <_ZN4rtps11PBufWrapper7reserveEt>
 800e000:	bb00      	cbnz	r0, 800e044 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE13sendHeartBeatEv+0x168>
        }

        MessageFactory::addHeartbeat(info.buffer, m_attributes.endpointGuid.entityId,
                                     proxy.remoteReaderGuid.entityId, firstSN, lastSN, m_hbCount);

        info.destAddr = proxy.remoteLocator.getIp4Address();
 800e002:	2258      	movs	r2, #88	; 0x58
 800e004:	2318      	movs	r3, #24
        info.destPort = proxy.remoteLocator.port;

        m_transport->sendPacket(info);
 800e006:	a905      	add	r1, sp, #20
 800e008:	6f68      	ldr	r0, [r5, #116]	; 0x74
        info.destAddr = proxy.remoteLocator.getIp4Address();
 800e00a:	fb12 3308 	smlabb	r3, r2, r8, r3
        info.destPort = proxy.remoteLocator.port;
 800e00e:	fb02 5208 	mla	r2, r2, r8, r5
                ((uint32_t) (p2 << 8)) |
 800e012:	442b      	add	r3, r5
 800e014:	f8d2 2194 	ldr.w	r2, [r2, #404]	; 0x194
 800e018:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 800e01c:	f8ad 201c 	strh.w	r2, [sp, #28]
        info.destAddr = proxy.remoteLocator.getIp4Address();
 800e020:	9306      	str	r3, [sp, #24]
        m_transport->sendPacket(info);
 800e022:	f7fd ff3d 	bl	800bea0 <_ZN4rtps9UdpDriver10sendPacketERNS_10PacketInfoE>
 800e026:	a808      	add	r0, sp, #32
 800e028:	f001 f904 	bl	800f234 <_ZN4rtps11PBufWrapperD1Ev>
                if(m_pool.m_numElements == 0){
 800e02c:	f8d5 317c 	ldr.w	r3, [r5, #380]	; 0x17c
 800e030:	2b00      	cmp	r3, #0
 800e032:	d151      	bne.n	800e0d8 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE13sendHeartBeatEv+0x1fc>
    }
    m_hbCount.value++;
 800e034:	f8d5 3170 	ldr.w	r3, [r5, #368]	; 0x170
 800e038:	3301      	adds	r3, #1
 800e03a:	f8c5 3170 	str.w	r3, [r5, #368]	; 0x170
}
 800e03e:	b013      	add	sp, #76	; 0x4c
 800e040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(!buffer.reserve(Header::getRawSize())){
 800e044:	2114      	movs	r1, #20
 800e046:	a808      	add	r0, sp, #32
 800e048:	f001 f93e 	bl	800f2c8 <_ZN4rtps11PBufWrapper7reserveEt>
 800e04c:	b1a0      	cbz	r0, 800e078 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE13sendHeartBeatEv+0x19c>
		buffer.reserve(SubmessageHeader::getRawSize());
 800e04e:	2104      	movs	r1, #4
 800e050:	a808      	add	r0, sp, #32
 800e052:	f001 f939 	bl	800f2c8 <_ZN4rtps11PBufWrapper7reserveEt>
		buffer.append(reinterpret_cast<uint8_t*>(&header.submessageId), sizeof(SubmessageKind));
 800e056:	4652      	mov	r2, sl
 800e058:	a90a      	add	r1, sp, #40	; 0x28
 800e05a:	a808      	add	r0, sp, #32
 800e05c:	f001 f902 	bl	800f264 <_ZN4rtps11PBufWrapper6appendEPKht>
		buffer.append(&header.flags, sizeof(uint8_t));
 800e060:	4652      	mov	r2, sl
 800e062:	f10d 0129 	add.w	r1, sp, #41	; 0x29
 800e066:	a808      	add	r0, sp, #32
 800e068:	f001 f8fc 	bl	800f264 <_ZN4rtps11PBufWrapper6appendEPKht>
		buffer.append(reinterpret_cast<uint8_t*>(&header.submessageLength), sizeof(uint16_t));
 800e06c:	2202      	movs	r2, #2
 800e06e:	f10d 012a 	add.w	r1, sp, #42	; 0x2a
 800e072:	a808      	add	r0, sp, #32
 800e074:	f001 f8f6 	bl	800f264 <_ZN4rtps11PBufWrapper6appendEPKht>
		buffer.append(msg.readerId.entityKey.data(), msg.readerId.entityKey.size());
 800e078:	a90b      	add	r1, sp, #44	; 0x2c
 800e07a:	2203      	movs	r2, #3
 800e07c:	a808      	add	r0, sp, #32
 800e07e:	f001 f8f1 	bl	800f264 <_ZN4rtps11PBufWrapper6appendEPKht>
		buffer.append(reinterpret_cast<uint8_t*>(&msg.readerId.entityKind), sizeof(EntityKind_t));
 800e082:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
 800e086:	2201      	movs	r2, #1
 800e088:	a808      	add	r0, sp, #32
 800e08a:	f001 f8eb 	bl	800f264 <_ZN4rtps11PBufWrapper6appendEPKht>
		buffer.append(msg.writerId.entityKey.data(), msg.writerId.entityKey.size());
 800e08e:	a90c      	add	r1, sp, #48	; 0x30
 800e090:	2203      	movs	r2, #3
 800e092:	a808      	add	r0, sp, #32
 800e094:	f001 f8e6 	bl	800f264 <_ZN4rtps11PBufWrapper6appendEPKht>
		buffer.append(reinterpret_cast<uint8_t*>(&msg.writerId.entityKind), sizeof(EntityKind_t));
 800e098:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 800e09c:	2201      	movs	r2, #1
 800e09e:	a808      	add	r0, sp, #32
 800e0a0:	f001 f8e0 	bl	800f264 <_ZN4rtps11PBufWrapper6appendEPKht>
		buffer.append(reinterpret_cast<uint8_t*>(&msg.firstSN.high), sizeof(msg.firstSN.high));
 800e0a4:	a90d      	add	r1, sp, #52	; 0x34
 800e0a6:	2204      	movs	r2, #4
 800e0a8:	a808      	add	r0, sp, #32
 800e0aa:	f001 f8db 	bl	800f264 <_ZN4rtps11PBufWrapper6appendEPKht>
		buffer.append(reinterpret_cast<uint8_t*>(&msg.firstSN.low), sizeof(msg.firstSN.low));
 800e0ae:	a90e      	add	r1, sp, #56	; 0x38
 800e0b0:	2204      	movs	r2, #4
 800e0b2:	a808      	add	r0, sp, #32
 800e0b4:	f001 f8d6 	bl	800f264 <_ZN4rtps11PBufWrapper6appendEPKht>
		buffer.append(reinterpret_cast<uint8_t*>(&msg.lastSN.high), sizeof(msg.lastSN.high));
 800e0b8:	a90f      	add	r1, sp, #60	; 0x3c
 800e0ba:	2204      	movs	r2, #4
 800e0bc:	a808      	add	r0, sp, #32
 800e0be:	f001 f8d1 	bl	800f264 <_ZN4rtps11PBufWrapper6appendEPKht>
		buffer.append(reinterpret_cast<uint8_t*>(&msg.lastSN.low), sizeof(msg.lastSN.low));
 800e0c2:	a910      	add	r1, sp, #64	; 0x40
 800e0c4:	2204      	movs	r2, #4
 800e0c6:	a808      	add	r0, sp, #32
 800e0c8:	f001 f8cc 	bl	800f264 <_ZN4rtps11PBufWrapper6appendEPKht>
		buffer.append(reinterpret_cast<uint8_t*>(&msg.count.value), sizeof(msg.count.value));
 800e0cc:	2204      	movs	r2, #4
 800e0ce:	a911      	add	r1, sp, #68	; 0x44
 800e0d0:	a808      	add	r0, sp, #32
 800e0d2:	f001 f8c7 	bl	800f264 <_ZN4rtps11PBufWrapper6appendEPKht>
 800e0d6:	e794      	b.n	800e002 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE13sendHeartBeatEv+0x126>
 800e0d8:	f108 0301 	add.w	r3, r8, #1
 800e0dc:	b2db      	uxtb	r3, r3
                    m_bitMap[bucket] = m_bitMap[bucket] >> 1;
 800e0de:	1064      	asrs	r4, r4, #1
 800e0e0:	1c59      	adds	r1, r3, #1
 800e0e2:	4698      	mov	r8, r3
                }while(!(m_bitMap[bucket] & 1) && m_bit < SIZE);
 800e0e4:	f004 0201 	and.w	r2, r4, #1
                    m_bitMap[bucket] = m_bitMap[bucket] >> 1;
 800e0e8:	b2e4      	uxtb	r4, r4
 800e0ea:	2b02      	cmp	r3, #2
 800e0ec:	bf88      	it	hi
 800e0ee:	f042 0201 	orrhi.w	r2, r2, #1
 800e0f2:	b2cb      	uxtb	r3, r1
                }while(!(m_bitMap[bucket] & 1) && m_bit < SIZE);
 800e0f4:	2a00      	cmp	r2, #0
 800e0f6:	d0f2      	beq.n	800e0de <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE13sendHeartBeatEv+0x202>
 800e0f8:	e702      	b.n	800df00 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE13sendHeartBeatEv+0x24>
 800e0fa:	4770      	bx	lr
 800e0fc:	a808      	add	r0, sp, #32
 800e0fe:	f001 f899 	bl	800f234 <_ZN4rtps11PBufWrapperD1Ev>
 800e102:	b013      	add	sp, #76	; 0x4c
 800e104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if(!(m_bitMap[0] & 1)){
 800e108:	f04f 0801 	mov.w	r8, #1
 800e10c:	e003      	b.n	800e116 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE13sendHeartBeatEv+0x23a>
                }while(!(m_bitMap[bucket] & 1) && m_bit < SIZE);
 800e10e:	07d1      	lsls	r1, r2, #31
 800e110:	f53f aef3 	bmi.w	800defa <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE13sendHeartBeatEv+0x1e>
 800e114:	4698      	mov	r8, r3
                    m_bitMap[bucket] = m_bitMap[bucket] >> 1;
 800e116:	1062      	asrs	r2, r4, #1
 800e118:	f108 0301 	add.w	r3, r8, #1
                }while(!(m_bitMap[bucket] & 1) && m_bit < SIZE);
 800e11c:	f1b8 0f02 	cmp.w	r8, #2
                    m_bitMap[bucket] = m_bitMap[bucket] >> 1;
 800e120:	b2d4      	uxtb	r4, r2
 800e122:	b2db      	uxtb	r3, r3
                }while(!(m_bitMap[bucket] & 1) && m_bit < SIZE);
 800e124:	d9f3      	bls.n	800e10e <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE13sendHeartBeatEv+0x232>
 800e126:	e6e8      	b.n	800defa <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE13sendHeartBeatEv+0x1e>
 800e128:	08010d88 	.word	0x08010d88

0800e12c <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE17hbFunctionJumppadEPv>:
    while(m_running){
 800e12c:	f890 3174 	ldrb.w	r3, [r0, #372]	; 0x174
 800e130:	b16b      	cbz	r3, 800e14e <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE17hbFunctionJumppadEPv+0x22>
void StatefulWriterT<NetworkDriver>::hbFunctionJumppad(void* thisPointer){
 800e132:	b510      	push	{r4, lr}
 800e134:	4604      	mov	r4, r0
        sendHeartBeat();
 800e136:	4620      	mov	r0, r4
 800e138:	f7ff fed0 	bl	800dedc <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE13sendHeartBeatEv>
        sys_msleep(Config::SF_WRITER_HB_PERIOD_MS);
 800e13c:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800e140:	f7f8 fa96 	bl	8006670 <sys_msleep>
    while(m_running){
 800e144:	f894 3174 	ldrb.w	r3, [r4, #372]	; 0x174
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d1f4      	bne.n	800e136 <_ZN4rtps15StatefulWriterTINS_9UdpDriverEE17hbFunctionJumppadEPv+0xa>
}
 800e14c:	bd10      	pop	{r4, pc}
 800e14e:	4770      	bx	lr

0800e150 <_ZN4rtps11ParticipantC1Ev>:
#include "rtps/entities/Reader.h"
#include "rtps/messages/MessageReceiver.h"

using rtps::Participant;

Participant::Participant() : m_guidPrefix(GUIDPREFIX_UNKNOWN), m_participantId(PARTICIPANT_ID_INVALID),
 800e150:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e154:	4606      	mov	r6, r0
                             m_receiver(this){
 800e156:	2700      	movs	r7, #0
 800e158:	23ff      	movs	r3, #255	; 0xff
 800e15a:	4601      	mov	r1, r0
 800e15c:	6007      	str	r7, [r0, #0]
 800e15e:	3010      	adds	r0, #16
 800e160:	f800 3c04 	strb.w	r3, [r0, #-4]
 800e164:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800e168:	6077      	str	r7, [r6, #4]
    typedef uint32_t BuiltinEndpointSet_t;

    class ParticipantProxyData{
    public:

        ParticipantProxyData() = default;
 800e16a:	463c      	mov	r4, r7
 800e16c:	60b7      	str	r7, [r6, #8]
 800e16e:	f606 2a84 	addw	sl, r6, #2692	; 0xa84
 800e172:	f000 fe6f 	bl	800ee54 <_ZN4rtps15MessageReceiverC1EPNS_11ParticipantE>
 800e176:	4b0f      	ldr	r3, [pc, #60]	; (800e1b4 <_ZN4rtps11ParticipantC1Ev+0x64>)
 800e178:	2001      	movs	r0, #1
 800e17a:	f886 7028 	strb.w	r7, [r6, #40]	; 0x28
 800e17e:	f8b3 b000 	ldrh.w	fp, [r3]
    class MemoryPool{
 800e182:	f106 035c 	add.w	r3, r6, #92	; 0x5c
 800e186:	f886 7029 	strb.w	r7, [r6, #41]	; 0x29
 800e18a:	f886 702a 	strb.w	r7, [r6, #42]	; 0x2a
 800e18e:	62f7      	str	r7, [r6, #44]	; 0x2c
 800e190:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
 800e194:	63b7      	str	r7, [r6, #56]	; 0x38
 800e196:	f886 703c 	strb.w	r7, [r6, #60]	; 0x3c
 800e19a:	f886 7050 	strb.w	r7, [r6, #80]	; 0x50
 800e19e:	f886 7054 	strb.w	r7, [r6, #84]	; 0x54
 800e1a2:	65b7      	str	r7, [r6, #88]	; 0x58
 800e1a4:	e9c6 770c 	strd	r7, r7, [r6, #48]	; 0x30
 800e1a8:	e9c6 7710 	strd	r7, r7, [r6, #64]	; 0x40
 800e1ac:	e9c6 7712 	strd	r7, r7, [r6, #72]	; 0x48
 800e1b0:	e002      	b.n	800e1b8 <_ZN4rtps11ParticipantC1Ev+0x68>
 800e1b2:	bf00      	nop
 800e1b4:	08010da8 	.word	0x08010da8
 800e1b8:	461a      	mov	r2, r3
 800e1ba:	f822 bb02 	strh.w	fp, [r2], #2
 800e1be:	f8c3 4002 	str.w	r4, [r3, #2]
 800e1c2:	6054      	str	r4, [r2, #4]
 800e1c4:	6094      	str	r4, [r2, #8]
 800e1c6:	60d4      	str	r4, [r2, #12]
 800e1c8:	2201      	movs	r2, #1
 800e1ca:	825c      	strh	r4, [r3, #18]
 800e1cc:	751c      	strb	r4, [r3, #20]
    struct array
 800e1ce:	621c      	str	r4, [r3, #32]
 800e1d0:	771d      	strb	r5, [r3, #28]
 800e1d2:	775d      	strb	r5, [r3, #29]
 800e1d4:	779d      	strb	r5, [r3, #30]
 800e1d6:	77dd      	strb	r5, [r3, #31]
 800e1d8:	625c      	str	r4, [r3, #36]	; 0x24
 800e1da:	629c      	str	r4, [r3, #40]	; 0x28
 800e1dc:	62dc      	str	r4, [r3, #44]	; 0x2c
 800e1de:	631c      	str	r4, [r3, #48]	; 0x30
 800e1e0:	639c      	str	r4, [r3, #56]	; 0x38
 800e1e2:	f883 5034 	strb.w	r5, [r3, #52]	; 0x34
 800e1e6:	f883 5035 	strb.w	r5, [r3, #53]	; 0x35
 800e1ea:	f883 5036 	strb.w	r5, [r3, #54]	; 0x36
 800e1ee:	f883 5037 	strb.w	r5, [r3, #55]	; 0x37
 800e1f2:	63dc      	str	r4, [r3, #60]	; 0x3c
 800e1f4:	641c      	str	r4, [r3, #64]	; 0x40
 800e1f6:	645c      	str	r4, [r3, #68]	; 0x44
 800e1f8:	649c      	str	r4, [r3, #72]	; 0x48
 800e1fa:	651c      	str	r4, [r3, #80]	; 0x50
 800e1fc:	f883 504c 	strb.w	r5, [r3, #76]	; 0x4c
 800e200:	f883 504d 	strb.w	r5, [r3, #77]	; 0x4d
 800e204:	f883 504e 	strb.w	r5, [r3, #78]	; 0x4e
 800e208:	f883 504f 	strb.w	r5, [r3, #79]	; 0x4f
 800e20c:	655c      	str	r4, [r3, #84]	; 0x54
 800e20e:	659c      	str	r4, [r3, #88]	; 0x58
 800e210:	65dc      	str	r4, [r3, #92]	; 0x5c
 800e212:	661c      	str	r4, [r3, #96]	; 0x60
 800e214:	669c      	str	r4, [r3, #104]	; 0x68
 800e216:	f883 5064 	strb.w	r5, [r3, #100]	; 0x64
 800e21a:	f883 5065 	strb.w	r5, [r3, #101]	; 0x65
 800e21e:	f883 5066 	strb.w	r5, [r3, #102]	; 0x66
 800e222:	f883 5067 	strb.w	r5, [r3, #103]	; 0x67
 800e226:	66dc      	str	r4, [r3, #108]	; 0x6c
 800e228:	671c      	str	r4, [r3, #112]	; 0x70
 800e22a:	675c      	str	r4, [r3, #116]	; 0x74
 800e22c:	679c      	str	r4, [r3, #120]	; 0x78
 800e22e:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
 800e232:	f883 507c 	strb.w	r5, [r3, #124]	; 0x7c
 800e236:	f883 507d 	strb.w	r5, [r3, #125]	; 0x7d
 800e23a:	f883 507e 	strb.w	r5, [r3, #126]	; 0x7e
 800e23e:	f883 507f 	strb.w	r5, [r3, #127]	; 0x7f
 800e242:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
 800e246:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
 800e24a:	f8c3 408c 	str.w	r4, [r3, #140]	; 0x8c
 800e24e:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
 800e252:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98
 800e256:	f883 5094 	strb.w	r5, [r3, #148]	; 0x94
 800e25a:	f883 5095 	strb.w	r5, [r3, #149]	; 0x95
 800e25e:	f883 5096 	strb.w	r5, [r3, #150]	; 0x96
 800e262:	f883 5097 	strb.w	r5, [r3, #151]	; 0x97
 800e266:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
 800e26a:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
 800e26e:	f8c3 40a4 	str.w	r4, [r3, #164]	; 0xa4
 800e272:	f8c3 40a8 	str.w	r4, [r3, #168]	; 0xa8
 800e276:	f8c3 40b0 	str.w	r4, [r3, #176]	; 0xb0
 800e27a:	f883 50ac 	strb.w	r5, [r3, #172]	; 0xac
 800e27e:	f883 50ad 	strb.w	r5, [r3, #173]	; 0xad
 800e282:	f883 50ae 	strb.w	r5, [r3, #174]	; 0xae
 800e286:	f883 50af 	strb.w	r5, [r3, #175]	; 0xaf
 800e28a:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
 800e28e:	f8c3 40b4 	str.w	r4, [r3, #180]	; 0xb4
 800e292:	f8c3 40b8 	str.w	r4, [r3, #184]	; 0xb8
 800e296:	f8c3 40bc 	str.w	r4, [r3, #188]	; 0xbc
 800e29a:	f8c3 40c0 	str.w	r4, [r3, #192]	; 0xc0
 800e29e:	f8c3 40c8 	str.w	r4, [r3, #200]	; 0xc8
 800e2a2:	f883 50c4 	strb.w	r5, [r3, #196]	; 0xc4
 800e2a6:	f883 50c5 	strb.w	r5, [r3, #197]	; 0xc5
 800e2aa:	f883 50c6 	strb.w	r5, [r3, #198]	; 0xc6
 800e2ae:	f883 50c7 	strb.w	r5, [r3, #199]	; 0xc7
 800e2b2:	f8c3 40cc 	str.w	r4, [r3, #204]	; 0xcc
 800e2b6:	f8c3 40d0 	str.w	r4, [r3, #208]	; 0xd0
 800e2ba:	f8c3 40d4 	str.w	r4, [r3, #212]	; 0xd4
 800e2be:	f8c3 40d8 	str.w	r4, [r3, #216]	; 0xd8
 800e2c2:	f8c3 40e0 	str.w	r4, [r3, #224]	; 0xe0
 800e2c6:	f883 50dc 	strb.w	r5, [r3, #220]	; 0xdc
 800e2ca:	f883 50dd 	strb.w	r5, [r3, #221]	; 0xdd
 800e2ce:	f883 50de 	strb.w	r5, [r3, #222]	; 0xde
 800e2d2:	f883 50df 	strb.w	r5, [r3, #223]	; 0xdf
 800e2d6:	f8c3 40e4 	str.w	r4, [r3, #228]	; 0xe4
 800e2da:	f8c3 40e8 	str.w	r4, [r3, #232]	; 0xe8
 800e2de:	f8c3 40ec 	str.w	r4, [r3, #236]	; 0xec
 800e2e2:	f8c3 40f0 	str.w	r4, [r3, #240]	; 0xf0
 800e2e6:	f8c3 40f8 	str.w	r4, [r3, #248]	; 0xf8
 800e2ea:	f883 50f4 	strb.w	r5, [r3, #244]	; 0xf4
 800e2ee:	f883 50f5 	strb.w	r5, [r3, #245]	; 0xf5
 800e2f2:	f883 50f6 	strb.w	r5, [r3, #246]	; 0xf6
 800e2f6:	f883 50f7 	strb.w	r5, [r3, #247]	; 0xf7
 800e2fa:	f8c3 40fc 	str.w	r4, [r3, #252]	; 0xfc
 800e2fe:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
 800e302:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
 800e306:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
 800e30a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800e30e:	f803 5cfc 	strb.w	r5, [r3, #-252]
 800e312:	f803 5cfb 	strb.w	r5, [r3, #-251]
 800e316:	f803 5cfa 	strb.w	r5, [r3, #-250]
 800e31a:	f803 5cf9 	strb.w	r5, [r3, #-249]
 800e31e:	f843 4cf4 	str.w	r4, [r3, #-244]
 800e322:	f843 4cf0 	str.w	r4, [r3, #-240]
 800e326:	f843 4cec 	str.w	r4, [r3, #-236]
 800e32a:	f843 4ce8 	str.w	r4, [r3, #-232]
 800e32e:	f843 4ce0 	str.w	r4, [r3, #-224]
 800e332:	f803 5ce4 	strb.w	r5, [r3, #-228]
 800e336:	f803 5ce3 	strb.w	r5, [r3, #-227]
 800e33a:	f803 5ce2 	strb.w	r5, [r3, #-226]
 800e33e:	f803 5ce1 	strb.w	r5, [r3, #-225]
 800e342:	f843 4cdc 	str.w	r4, [r3, #-220]
 800e346:	f843 4cd8 	str.w	r4, [r3, #-216]
 800e34a:	f843 4cd4 	str.w	r4, [r3, #-212]
 800e34e:	f843 4cd0 	str.w	r4, [r3, #-208]
 800e352:	f843 4cc8 	str.w	r4, [r3, #-200]
 800e356:	f803 5ccc 	strb.w	r5, [r3, #-204]
 800e35a:	f803 5ccb 	strb.w	r5, [r3, #-203]
 800e35e:	f803 5cca 	strb.w	r5, [r3, #-202]
 800e362:	f803 5cc9 	strb.w	r5, [r3, #-201]
 800e366:	f843 4cc4 	str.w	r4, [r3, #-196]
 800e36a:	f843 4cc0 	str.w	r4, [r3, #-192]
 800e36e:	f843 4cbc 	str.w	r4, [r3, #-188]
 800e372:	f843 4cb8 	str.w	r4, [r3, #-184]
 800e376:	f843 4cb0 	str.w	r4, [r3, #-176]
 800e37a:	f803 5cb4 	strb.w	r5, [r3, #-180]
 800e37e:	f803 5cb3 	strb.w	r5, [r3, #-179]
 800e382:	f803 5cb2 	strb.w	r5, [r3, #-178]
 800e386:	f803 5cb1 	strb.w	r5, [r3, #-177]
 800e38a:	f843 4cac 	str.w	r4, [r3, #-172]
 800e38e:	f843 4ca8 	str.w	r4, [r3, #-168]
 800e392:	f843 4ca4 	str.w	r4, [r3, #-164]
 800e396:	f843 4ca0 	str.w	r4, [r3, #-160]
 800e39a:	f843 4c98 	str.w	r4, [r3, #-152]
 800e39e:	f803 5c9c 	strb.w	r5, [r3, #-156]
 800e3a2:	f803 5c9b 	strb.w	r5, [r3, #-155]
 800e3a6:	f803 5c9a 	strb.w	r5, [r3, #-154]
 800e3aa:	f803 5c99 	strb.w	r5, [r3, #-153]
 800e3ae:	f843 4c94 	str.w	r4, [r3, #-148]
 800e3b2:	f843 4c90 	str.w	r4, [r3, #-144]
 800e3b6:	f843 4c8c 	str.w	r4, [r3, #-140]
 800e3ba:	f843 4c88 	str.w	r4, [r3, #-136]
 800e3be:	f843 4c80 	str.w	r4, [r3, #-128]
 800e3c2:	f803 5c84 	strb.w	r5, [r3, #-132]
 800e3c6:	f803 5c83 	strb.w	r5, [r3, #-131]
 800e3ca:	f803 5c82 	strb.w	r5, [r3, #-130]
 800e3ce:	f803 5c81 	strb.w	r5, [r3, #-129]
 800e3d2:	f843 4c7c 	str.w	r4, [r3, #-124]
 800e3d6:	f843 4c78 	str.w	r4, [r3, #-120]
 800e3da:	f843 4c74 	str.w	r4, [r3, #-116]
 800e3de:	f843 4c70 	str.w	r4, [r3, #-112]
 800e3e2:	f843 4c68 	str.w	r4, [r3, #-104]
 800e3e6:	f803 5c6c 	strb.w	r5, [r3, #-108]
 800e3ea:	f803 5c6b 	strb.w	r5, [r3, #-107]
 800e3ee:	f803 5c6a 	strb.w	r5, [r3, #-106]
 800e3f2:	f803 5c69 	strb.w	r5, [r3, #-105]
 800e3f6:	f843 4c64 	str.w	r4, [r3, #-100]
 800e3fa:	f843 4c60 	str.w	r4, [r3, #-96]
 800e3fe:	f843 4c5c 	str.w	r4, [r3, #-92]
 800e402:	f843 4c58 	str.w	r4, [r3, #-88]
 800e406:	f843 4c50 	str.w	r4, [r3, #-80]
 800e40a:	f803 5c54 	strb.w	r5, [r3, #-84]
 800e40e:	f803 5c53 	strb.w	r5, [r3, #-83]
 800e412:	f803 5c52 	strb.w	r5, [r3, #-82]
 800e416:	f803 5c51 	strb.w	r5, [r3, #-81]
 800e41a:	f843 2c0c 	str.w	r2, [r3, #-12]
 800e41e:	2264      	movs	r2, #100	; 0x64
 800e420:	f843 4c4c 	str.w	r4, [r3, #-76]
 800e424:	f843 4c48 	str.w	r4, [r3, #-72]
 800e428:	f843 4c44 	str.w	r4, [r3, #-68]
 800e42c:	f843 4c40 	str.w	r4, [r3, #-64]
 800e430:	f843 4c38 	str.w	r4, [r3, #-56]
 800e434:	f803 5c3c 	strb.w	r5, [r3, #-60]
 800e438:	f803 5c3b 	strb.w	r5, [r3, #-59]
 800e43c:	f803 5c3a 	strb.w	r5, [r3, #-58]
 800e440:	f803 5c39 	strb.w	r5, [r3, #-57]
 800e444:	f843 4c34 	str.w	r4, [r3, #-52]
 800e448:	f843 4c30 	str.w	r4, [r3, #-48]
 800e44c:	f843 4c2c 	str.w	r4, [r3, #-44]
 800e450:	f843 4c28 	str.w	r4, [r3, #-40]
 800e454:	f843 4c20 	str.w	r4, [r3, #-32]
 800e458:	f803 5c24 	strb.w	r5, [r3, #-36]
 800e45c:	f803 5c23 	strb.w	r5, [r3, #-35]
 800e460:	f803 5c22 	strb.w	r5, [r3, #-34]
 800e464:	f803 5c21 	strb.w	r5, [r3, #-33]
 800e468:	f843 4c1c 	str.w	r4, [r3, #-28]
 800e46c:	f843 4c18 	str.w	r4, [r3, #-24]
 800e470:	f843 4c14 	str.w	r4, [r3, #-20]
 800e474:	f843 4c10 	str.w	r4, [r3, #-16]
 800e478:	f843 2c08 	str.w	r2, [r3, #-8]
 800e47c:	f843 4c04 	str.w	r4, [r3, #-4]
 800e480:	459a      	cmp	sl, r3
 800e482:	f47f ae99 	bne.w	800e1b8 <_ZN4rtps11ParticipantC1Ev+0x68>
    class Participant;
    class Writer;
    class Reader;
    class ReaderCacheChange;

    class SPDPAgent{
 800e486:	f8c6 4a84 	str.w	r4, [r6, #2692]	; 0xa84
 800e48a:	f44f 72c8 	mov.w	r2, #400	; 0x190
#include "rtps/entities/Writer.h"


namespace rtps{

    struct BuiltInEndpoints{
 800e48e:	f8c6 4a88 	str.w	r4, [r6, #2696]	; 0xa88
 800e492:	2100      	movs	r1, #0
 800e494:	f8c6 4a8c 	str.w	r4, [r6, #2700]	; 0xa8c
 800e498:	f606 20a1 	addw	r0, r6, #2721	; 0xaa1
 800e49c:	f8c6 4a90 	str.w	r4, [r6, #2704]	; 0xa90
    class Participant;
    class ReaderCacheChange;
    class Writer;
    class Reader;

    class SEDPAgent{
 800e4a0:	f241 1838 	movw	r8, #4408	; 0x1138
 800e4a4:	f8c6 4a94 	str.w	r4, [r6, #2708]	; 0xa94
 800e4a8:	f241 173c 	movw	r7, #4412	; 0x113c
 800e4ac:	f8c6 4a98 	str.w	r4, [r6, #2712]	; 0xa98
 800e4b0:	f8c6 4a9c 	str.w	r4, [r6, #2716]	; 0xa9c
 800e4b4:	f886 4aa0 	strb.w	r4, [r6, #2720]	; 0xaa0
 800e4b8:	f001 fa56 	bl	800f968 <memset>
 800e4bc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800e4c0:	2100      	movs	r1, #0
 800e4c2:	f606 4031 	addw	r0, r6, #3121	; 0xc31
 800e4c6:	f001 fa4f 	bl	800f968 <memset>
 800e4ca:	f44f 7202 	mov.w	r2, #520	; 0x208
 800e4ce:	2100      	movs	r1, #0
 800e4d0:	f606 50c4 	addw	r0, r6, #3524	; 0xdc4
 800e4d4:	f001 fa48 	bl	800f968 <memset>
 800e4d8:	f506 5389 	add.w	r3, r6, #4384	; 0x1120
 800e4dc:	f886 5de0 	strb.w	r5, [r6, #3552]	; 0xde0
 800e4e0:	f04f 0e01 	mov.w	lr, #1
 800e4e4:	f886 5de1 	strb.w	r5, [r6, #3553]	; 0xde1
 800e4e8:	f04f 0c64 	mov.w	ip, #100	; 0x64
 800e4ec:	f886 5de2 	strb.w	r5, [r6, #3554]	; 0xde2
 800e4f0:	f241 1144 	movw	r1, #4420	; 0x1144
 800e4f4:	f886 5de3 	strb.w	r5, [r6, #3555]	; 0xde3

}
 800e4f8:	4630      	mov	r0, r6
 800e4fa:	f886 5df8 	strb.w	r5, [r6, #3576]	; 0xdf8
 800e4fe:	f886 5df9 	strb.w	r5, [r6, #3577]	; 0xdf9
 800e502:	f886 5dfa 	strb.w	r5, [r6, #3578]	; 0xdfa
 800e506:	f886 5dfb 	strb.w	r5, [r6, #3579]	; 0xdfb
 800e50a:	f886 5e10 	strb.w	r5, [r6, #3600]	; 0xe10
 800e50e:	f886 5e11 	strb.w	r5, [r6, #3601]	; 0xe11
 800e512:	f886 5e12 	strb.w	r5, [r6, #3602]	; 0xe12
 800e516:	f886 5e13 	strb.w	r5, [r6, #3603]	; 0xe13
 800e51a:	f8a6 bdc4 	strh.w	fp, [r6, #3524]	; 0xdc4
 800e51e:	f8c6 4dc6 	str.w	r4, [r6, #3526]	; 0xdc6
 800e522:	f8c6 4dca 	str.w	r4, [r6, #3530]	; 0xdca
 800e526:	f8c6 4dce 	str.w	r4, [r6, #3534]	; 0xdce
 800e52a:	f8c6 4dd2 	str.w	r4, [r6, #3538]	; 0xdd2
 800e52e:	f8a6 4dd6 	strh.w	r4, [r6, #3542]	; 0xdd6
 800e532:	f886 4dd8 	strb.w	r4, [r6, #3544]	; 0xdd8
 800e536:	f8c6 4de4 	str.w	r4, [r6, #3556]	; 0xde4
 800e53a:	f8c6 4de8 	str.w	r4, [r6, #3560]	; 0xde8
 800e53e:	f8c6 4dec 	str.w	r4, [r6, #3564]	; 0xdec
 800e542:	f8c6 4df0 	str.w	r4, [r6, #3568]	; 0xdf0
 800e546:	f8c6 4df4 	str.w	r4, [r6, #3572]	; 0xdf4
 800e54a:	f8c6 4dfc 	str.w	r4, [r6, #3580]	; 0xdfc
 800e54e:	f8c6 4e00 	str.w	r4, [r6, #3584]	; 0xe00
 800e552:	f8c6 4e04 	str.w	r4, [r6, #3588]	; 0xe04
 800e556:	f8c6 4e08 	str.w	r4, [r6, #3592]	; 0xe08
 800e55a:	f8c6 4e0c 	str.w	r4, [r6, #3596]	; 0xe0c
 800e55e:	f8c6 4e14 	str.w	r4, [r6, #3604]	; 0xe14
 800e562:	f8c6 4e18 	str.w	r4, [r6, #3608]	; 0xe18
 800e566:	f8c6 4e1c 	str.w	r4, [r6, #3612]	; 0xe1c
 800e56a:	f8c6 4e20 	str.w	r4, [r6, #3616]	; 0xe20
 800e56e:	f886 5e28 	strb.w	r5, [r6, #3624]	; 0xe28
 800e572:	f886 5e29 	strb.w	r5, [r6, #3625]	; 0xe29
 800e576:	f886 5e2a 	strb.w	r5, [r6, #3626]	; 0xe2a
 800e57a:	f886 5e2b 	strb.w	r5, [r6, #3627]	; 0xe2b
 800e57e:	f886 5e40 	strb.w	r5, [r6, #3648]	; 0xe40
 800e582:	f886 5e41 	strb.w	r5, [r6, #3649]	; 0xe41
 800e586:	f886 5e42 	strb.w	r5, [r6, #3650]	; 0xe42
 800e58a:	f886 5e43 	strb.w	r5, [r6, #3651]	; 0xe43
 800e58e:	f886 5e58 	strb.w	r5, [r6, #3672]	; 0xe58
 800e592:	f886 5e59 	strb.w	r5, [r6, #3673]	; 0xe59
 800e596:	f886 5e5a 	strb.w	r5, [r6, #3674]	; 0xe5a
 800e59a:	f886 5e5b 	strb.w	r5, [r6, #3675]	; 0xe5b
 800e59e:	f886 5e70 	strb.w	r5, [r6, #3696]	; 0xe70
 800e5a2:	f886 5e71 	strb.w	r5, [r6, #3697]	; 0xe71
 800e5a6:	f886 5e72 	strb.w	r5, [r6, #3698]	; 0xe72
 800e5aa:	f8c6 4e24 	str.w	r4, [r6, #3620]	; 0xe24
 800e5ae:	f8c6 4e2c 	str.w	r4, [r6, #3628]	; 0xe2c
 800e5b2:	f8c6 4e30 	str.w	r4, [r6, #3632]	; 0xe30
 800e5b6:	f8c6 4e34 	str.w	r4, [r6, #3636]	; 0xe34
 800e5ba:	f8c6 4e38 	str.w	r4, [r6, #3640]	; 0xe38
 800e5be:	f8c6 4e3c 	str.w	r4, [r6, #3644]	; 0xe3c
 800e5c2:	f8c6 4e44 	str.w	r4, [r6, #3652]	; 0xe44
 800e5c6:	f8c6 4e48 	str.w	r4, [r6, #3656]	; 0xe48
 800e5ca:	f8c6 4e4c 	str.w	r4, [r6, #3660]	; 0xe4c
 800e5ce:	f8c6 4e50 	str.w	r4, [r6, #3664]	; 0xe50
 800e5d2:	f8c6 4e54 	str.w	r4, [r6, #3668]	; 0xe54
 800e5d6:	f8c6 4e5c 	str.w	r4, [r6, #3676]	; 0xe5c
 800e5da:	f8c6 4e60 	str.w	r4, [r6, #3680]	; 0xe60
 800e5de:	f8c6 4e64 	str.w	r4, [r6, #3684]	; 0xe64
 800e5e2:	f8c6 4e68 	str.w	r4, [r6, #3688]	; 0xe68
 800e5e6:	f8c6 4e6c 	str.w	r4, [r6, #3692]	; 0xe6c
 800e5ea:	f8c6 4e74 	str.w	r4, [r6, #3700]	; 0xe74
 800e5ee:	f886 5e73 	strb.w	r5, [r6, #3699]	; 0xe73
 800e5f2:	f886 5e88 	strb.w	r5, [r6, #3720]	; 0xe88
 800e5f6:	f886 5e89 	strb.w	r5, [r6, #3721]	; 0xe89
 800e5fa:	f886 5e8a 	strb.w	r5, [r6, #3722]	; 0xe8a
 800e5fe:	f886 5e8b 	strb.w	r5, [r6, #3723]	; 0xe8b
 800e602:	f886 5ea0 	strb.w	r5, [r6, #3744]	; 0xea0
 800e606:	f886 5ea1 	strb.w	r5, [r6, #3745]	; 0xea1
 800e60a:	f886 5ea2 	strb.w	r5, [r6, #3746]	; 0xea2
 800e60e:	f886 5ea3 	strb.w	r5, [r6, #3747]	; 0xea3
 800e612:	f886 5eb8 	strb.w	r5, [r6, #3768]	; 0xeb8
 800e616:	f886 5eb9 	strb.w	r5, [r6, #3769]	; 0xeb9
 800e61a:	f886 5eba 	strb.w	r5, [r6, #3770]	; 0xeba
 800e61e:	f886 5ebb 	strb.w	r5, [r6, #3771]	; 0xebb
 800e622:	f8c6 4e78 	str.w	r4, [r6, #3704]	; 0xe78
 800e626:	f8c6 4e7c 	str.w	r4, [r6, #3708]	; 0xe7c
 800e62a:	f8c6 4e80 	str.w	r4, [r6, #3712]	; 0xe80
 800e62e:	f8c6 4e84 	str.w	r4, [r6, #3716]	; 0xe84
 800e632:	f8c6 4e8c 	str.w	r4, [r6, #3724]	; 0xe8c
 800e636:	f8c6 4e90 	str.w	r4, [r6, #3728]	; 0xe90
 800e63a:	f8c6 4e94 	str.w	r4, [r6, #3732]	; 0xe94
 800e63e:	f8c6 4e98 	str.w	r4, [r6, #3736]	; 0xe98
 800e642:	f8c6 4e9c 	str.w	r4, [r6, #3740]	; 0xe9c
 800e646:	f8c6 4ea4 	str.w	r4, [r6, #3748]	; 0xea4
 800e64a:	f8c6 4ea8 	str.w	r4, [r6, #3752]	; 0xea8
 800e64e:	f8c6 4eac 	str.w	r4, [r6, #3756]	; 0xeac
 800e652:	f8c6 4eb0 	str.w	r4, [r6, #3760]	; 0xeb0
 800e656:	f8c6 4eb4 	str.w	r4, [r6, #3764]	; 0xeb4
 800e65a:	f8c6 4ebc 	str.w	r4, [r6, #3772]	; 0xebc
 800e65e:	f8c6 4ec0 	str.w	r4, [r6, #3776]	; 0xec0
 800e662:	f8c6 4ec4 	str.w	r4, [r6, #3780]	; 0xec4
 800e666:	f8c6 4ec8 	str.w	r4, [r6, #3784]	; 0xec8
 800e66a:	f8c6 4ecc 	str.w	r4, [r6, #3788]	; 0xecc
 800e66e:	f8c6 4ed4 	str.w	r4, [r6, #3796]	; 0xed4
 800e672:	f886 5ed0 	strb.w	r5, [r6, #3792]	; 0xed0
 800e676:	f886 5ed1 	strb.w	r5, [r6, #3793]	; 0xed1
 800e67a:	f886 5ed2 	strb.w	r5, [r6, #3794]	; 0xed2
 800e67e:	f886 5ed3 	strb.w	r5, [r6, #3795]	; 0xed3
 800e682:	f886 5ee8 	strb.w	r5, [r6, #3816]	; 0xee8
 800e686:	f886 5ee9 	strb.w	r5, [r6, #3817]	; 0xee9
 800e68a:	f886 5eea 	strb.w	r5, [r6, #3818]	; 0xeea
 800e68e:	f886 5eeb 	strb.w	r5, [r6, #3819]	; 0xeeb
 800e692:	f886 5f00 	strb.w	r5, [r6, #3840]	; 0xf00
 800e696:	f886 5f01 	strb.w	r5, [r6, #3841]	; 0xf01
 800e69a:	f886 5f02 	strb.w	r5, [r6, #3842]	; 0xf02
 800e69e:	f886 5f03 	strb.w	r5, [r6, #3843]	; 0xf03
 800e6a2:	f886 5f18 	strb.w	r5, [r6, #3864]	; 0xf18
 800e6a6:	f886 5f19 	strb.w	r5, [r6, #3865]	; 0xf19
 800e6aa:	f886 5f1a 	strb.w	r5, [r6, #3866]	; 0xf1a
 800e6ae:	f886 5f1b 	strb.w	r5, [r6, #3867]	; 0xf1b
 800e6b2:	f8c6 4ed8 	str.w	r4, [r6, #3800]	; 0xed8
 800e6b6:	f8c6 4edc 	str.w	r4, [r6, #3804]	; 0xedc
 800e6ba:	f8c6 4ee0 	str.w	r4, [r6, #3808]	; 0xee0
 800e6be:	f8c6 4ee4 	str.w	r4, [r6, #3812]	; 0xee4
 800e6c2:	f8c6 4eec 	str.w	r4, [r6, #3820]	; 0xeec
 800e6c6:	f8c6 4ef0 	str.w	r4, [r6, #3824]	; 0xef0
 800e6ca:	f8c6 4ef4 	str.w	r4, [r6, #3828]	; 0xef4
 800e6ce:	f8c6 4ef8 	str.w	r4, [r6, #3832]	; 0xef8
 800e6d2:	f8c6 4efc 	str.w	r4, [r6, #3836]	; 0xefc
 800e6d6:	f8c6 4f04 	str.w	r4, [r6, #3844]	; 0xf04
 800e6da:	f8c6 4f08 	str.w	r4, [r6, #3848]	; 0xf08
 800e6de:	f8c6 4f0c 	str.w	r4, [r6, #3852]	; 0xf0c
 800e6e2:	f8c6 4f10 	str.w	r4, [r6, #3856]	; 0xf10
 800e6e6:	f8c6 4f14 	str.w	r4, [r6, #3860]	; 0xf14
 800e6ea:	f8c6 4f1c 	str.w	r4, [r6, #3868]	; 0xf1c
 800e6ee:	f8c6 4f20 	str.w	r4, [r6, #3872]	; 0xf20
 800e6f2:	f8c6 4f24 	str.w	r4, [r6, #3876]	; 0xf24
 800e6f6:	f8c6 4f28 	str.w	r4, [r6, #3880]	; 0xf28
 800e6fa:	f886 5f30 	strb.w	r5, [r6, #3888]	; 0xf30
 800e6fe:	f886 5f31 	strb.w	r5, [r6, #3889]	; 0xf31
 800e702:	f886 5f32 	strb.w	r5, [r6, #3890]	; 0xf32
 800e706:	f886 5f33 	strb.w	r5, [r6, #3891]	; 0xf33
 800e70a:	f886 5f48 	strb.w	r5, [r6, #3912]	; 0xf48
 800e70e:	f886 5f49 	strb.w	r5, [r6, #3913]	; 0xf49
 800e712:	f886 5f4a 	strb.w	r5, [r6, #3914]	; 0xf4a
 800e716:	f886 5f4b 	strb.w	r5, [r6, #3915]	; 0xf4b
 800e71a:	f886 5f60 	strb.w	r5, [r6, #3936]	; 0xf60
 800e71e:	f886 5f61 	strb.w	r5, [r6, #3937]	; 0xf61
 800e722:	f886 5f62 	strb.w	r5, [r6, #3938]	; 0xf62
 800e726:	f886 5f63 	strb.w	r5, [r6, #3939]	; 0xf63
 800e72a:	f886 5f78 	strb.w	r5, [r6, #3960]	; 0xf78
 800e72e:	f886 5f79 	strb.w	r5, [r6, #3961]	; 0xf79
 800e732:	f886 5f7a 	strb.w	r5, [r6, #3962]	; 0xf7a
 800e736:	f8c6 4f2c 	str.w	r4, [r6, #3884]	; 0xf2c
 800e73a:	f8c6 4f34 	str.w	r4, [r6, #3892]	; 0xf34
 800e73e:	f8c6 4f38 	str.w	r4, [r6, #3896]	; 0xf38
 800e742:	f8c6 4f3c 	str.w	r4, [r6, #3900]	; 0xf3c
 800e746:	f8c6 4f40 	str.w	r4, [r6, #3904]	; 0xf40
 800e74a:	f8c6 4f44 	str.w	r4, [r6, #3908]	; 0xf44
 800e74e:	f8c6 4f4c 	str.w	r4, [r6, #3916]	; 0xf4c
 800e752:	f8c6 4f50 	str.w	r4, [r6, #3920]	; 0xf50
 800e756:	f8c6 4f54 	str.w	r4, [r6, #3924]	; 0xf54
 800e75a:	f8c6 4f58 	str.w	r4, [r6, #3928]	; 0xf58
 800e75e:	f8c6 4f5c 	str.w	r4, [r6, #3932]	; 0xf5c
 800e762:	f8c6 4f64 	str.w	r4, [r6, #3940]	; 0xf64
 800e766:	f8c6 4f68 	str.w	r4, [r6, #3944]	; 0xf68
 800e76a:	f8c6 4f6c 	str.w	r4, [r6, #3948]	; 0xf6c
 800e76e:	f8c6 4f70 	str.w	r4, [r6, #3952]	; 0xf70
 800e772:	f8c6 4f74 	str.w	r4, [r6, #3956]	; 0xf74
 800e776:	f8c6 4f7c 	str.w	r4, [r6, #3964]	; 0xf7c
 800e77a:	f886 5f7b 	strb.w	r5, [r6, #3963]	; 0xf7b
 800e77e:	f886 5f90 	strb.w	r5, [r6, #3984]	; 0xf90
 800e782:	f886 5f91 	strb.w	r5, [r6, #3985]	; 0xf91
 800e786:	f886 5f92 	strb.w	r5, [r6, #3986]	; 0xf92
 800e78a:	f886 5f93 	strb.w	r5, [r6, #3987]	; 0xf93
 800e78e:	f886 5fa8 	strb.w	r5, [r6, #4008]	; 0xfa8
 800e792:	f886 5fa9 	strb.w	r5, [r6, #4009]	; 0xfa9
 800e796:	f886 5faa 	strb.w	r5, [r6, #4010]	; 0xfaa
 800e79a:	f886 5fab 	strb.w	r5, [r6, #4011]	; 0xfab
 800e79e:	f506 558a 	add.w	r5, r6, #4416	; 0x1140
 800e7a2:	f8c6 4f80 	str.w	r4, [r6, #3968]	; 0xf80
 800e7a6:	f8c6 4f84 	str.w	r4, [r6, #3972]	; 0xf84
 800e7aa:	f8c6 4f88 	str.w	r4, [r6, #3976]	; 0xf88
 800e7ae:	f8c6 4f8c 	str.w	r4, [r6, #3980]	; 0xf8c
 800e7b2:	f8c6 4f94 	str.w	r4, [r6, #3988]	; 0xf94
 800e7b6:	f8c6 4f98 	str.w	r4, [r6, #3992]	; 0xf98
 800e7ba:	f8c6 4f9c 	str.w	r4, [r6, #3996]	; 0xf9c
 800e7be:	f8c6 4fa0 	str.w	r4, [r6, #4000]	; 0xfa0
 800e7c2:	f8c6 4fa4 	str.w	r4, [r6, #4004]	; 0xfa4
 800e7c6:	f8c6 4fac 	str.w	r4, [r6, #4012]	; 0xfac
 800e7ca:	f8c6 4fb0 	str.w	r4, [r6, #4016]	; 0xfb0
 800e7ce:	f8c6 4fb4 	str.w	r4, [r6, #4020]	; 0xfb4
 800e7d2:	f8c6 4fb8 	str.w	r4, [r6, #4024]	; 0xfb8
 800e7d6:	f8c6 4fbc 	str.w	r4, [r6, #4028]	; 0xfbc
 800e7da:	f8c6 4fc8 	str.w	r4, [r6, #4040]	; 0xfc8
 800e7de:	f8c6 4fcc 	str.w	r4, [r6, #4044]	; 0xfcc
 800e7e2:	f8c6 efc0 	str.w	lr, [r6, #4032]	; 0xfc0
 800e7e6:	f8c6 cfc4 	str.w	ip, [r6, #4036]	; 0xfc4
 800e7ea:	f8c6 4fd0 	str.w	r4, [r6, #4048]	; 0xfd0
 800e7ee:	f8c6 4fd4 	str.w	r4, [r6, #4052]	; 0xfd4
 800e7f2:	f8c6 4fd8 	str.w	r4, [r6, #4056]	; 0xfd8
 800e7f6:	f8c6 4fdc 	str.w	r4, [r6, #4060]	; 0xfdc
 800e7fa:	f8c6 4fe0 	str.w	r4, [r6, #4064]	; 0xfe0
 800e7fe:	f886 4fe8 	strb.w	r4, [r6, #4072]	; 0xfe8
 800e802:	e9c3 4400 	strd	r4, r4, [r3]
 800e806:	e9c3 4402 	strd	r4, r4, [r3, #8]
 800e80a:	e9c3 4404 	strd	r4, r4, [r3, #16]
 800e80e:	f846 4008 	str.w	r4, [r6, r8]
 800e812:	51f4      	str	r4, [r6, r7]
 800e814:	602c      	str	r4, [r5, #0]
 800e816:	5074      	str	r4, [r6, r1]
 800e818:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e81c <_ZN4rtps11ParticipantD1Ev>:
        : m_guidPrefix(guidPrefix), m_participantId(participantId),
          m_receiver(this){

}

Participant::~Participant() {
 800e81c:	b538      	push	{r3, r4, r5, lr}
    m_spdpAgent.stop();
 800e81e:	f600 2584 	addw	r5, r0, #2692	; 0xa84
Participant::~Participant() {
 800e822:	4604      	mov	r4, r0
    m_spdpAgent.stop();
 800e824:	4628      	mov	r0, r5
 800e826:	f7fd feb7 	bl	800c598 <_ZN4rtps9SPDPAgent4stopEv>
Participant::~Participant() {
 800e82a:	4628      	mov	r0, r5
 800e82c:	f7fd fe92 	bl	800c554 <_ZN4rtps9SPDPAgentD1Ev>
}
 800e830:	4620      	mov	r0, r4
 800e832:	bd38      	pop	{r3, r4, r5, pc}

0800e834 <_ZN4rtps11Participant5reuseERKNS_12GuidPrefix_tEa>:

void Participant::reuse(const GuidPrefix_t& guidPrefix, ParticipantId_t participantId){
 800e834:	b470      	push	{r4, r5, r6}
 800e836:	460c      	mov	r4, r1
 800e838:	4605      	mov	r5, r0
 800e83a:	4616      	mov	r6, r2
    m_guidPrefix = guidPrefix;
 800e83c:	4603      	mov	r3, r0
 800e83e:	68a2      	ldr	r2, [r4, #8]
 800e840:	6808      	ldr	r0, [r1, #0]
 800e842:	6849      	ldr	r1, [r1, #4]
 800e844:	c307      	stmia	r3!, {r0, r1, r2}
    m_participantId = participantId;
 800e846:	732e      	strb	r6, [r5, #12]
}
 800e848:	bc70      	pop	{r4, r5, r6}
 800e84a:	4770      	bx	lr

0800e84c <_ZN4rtps11Participant20getNextUserEntityKeyEv>:
bool Participant::isValid(){
    return m_participantId != PARTICIPANT_ID_INVALID;
}

std::array<uint8_t, 3> Participant::getNextUserEntityKey(){
    const auto result = m_nextUserEntityId;
 800e84c:	4602      	mov	r2, r0

    ++m_nextUserEntityId[2];
 800e84e:	f890 302b 	ldrb.w	r3, [r0, #43]	; 0x2b
std::array<uint8_t, 3> Participant::getNextUserEntityKey(){
 800e852:	b082      	sub	sp, #8
    const auto result = m_nextUserEntityId;
 800e854:	f832 1f29 	ldrh.w	r1, [r2, #41]!
    ++m_nextUserEntityId[2];
 800e858:	3301      	adds	r3, #1
    const auto result = m_nextUserEntityId;
 800e85a:	7892      	ldrb	r2, [r2, #2]
    ++m_nextUserEntityId[2];
 800e85c:	b2db      	uxtb	r3, r3
    const auto result = m_nextUserEntityId;
 800e85e:	f8ad 1000 	strh.w	r1, [sp]
 800e862:	f88d 2002 	strb.w	r2, [sp, #2]
    ++m_nextUserEntityId[2];
 800e866:	f880 302b 	strb.w	r3, [r0, #43]	; 0x2b
    if(m_nextUserEntityId[2] == 0){
 800e86a:	b95b      	cbnz	r3, 800e884 <_ZN4rtps11Participant20getNextUserEntityKeyEv+0x38>
        ++m_nextUserEntityId[1];
 800e86c:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
 800e870:	3301      	adds	r3, #1
 800e872:	b2db      	uxtb	r3, r3
 800e874:	f880 302a 	strb.w	r3, [r0, #42]	; 0x2a
        if(m_nextUserEntityId[1] == 0){
 800e878:	b923      	cbnz	r3, 800e884 <_ZN4rtps11Participant20getNextUserEntityKeyEv+0x38>
            ++m_nextUserEntityId[0];
 800e87a:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 800e87e:	3301      	adds	r3, #1
 800e880:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
        }
    }
    return result;
 800e884:	9b00      	ldr	r3, [sp, #0]
 800e886:	2000      	movs	r0, #0
 800e888:	b2d9      	uxtb	r1, r3
 800e88a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800e88e:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800e892:	f361 0007 	bfi	r0, r1, #0, #8
 800e896:	f362 200f 	bfi	r0, r2, #8, #8
 800e89a:	f363 4017 	bfi	r0, r3, #16, #8
}
 800e89e:	b002      	add	sp, #8
 800e8a0:	4770      	bx	lr
 800e8a2:	bf00      	nop

0800e8a4 <_ZN4rtps11Participant37registerOnNewPublisherMatchedCallbackEPFvPvES1_>:

bool Participant::registerOnNewPublisherMatchedCallback(void (*callback)(void* arg), void* args){
 800e8a4:	b510      	push	{r4, lr}
    if(!m_hasBuilInEndpoints){
 800e8a6:	f890 4028 	ldrb.w	r4, [r0, #40]	; 0x28
 800e8aa:	b11c      	cbz	r4, 800e8b4 <_ZN4rtps11Participant37registerOnNewPublisherMatchedCallbackEPFvPvES1_+0x10>
        return false;
    }

    m_sedpAgent.registerOnNewPublisherMatchedCallback(callback, args);
 800e8ac:	f600 70ec 	addw	r0, r0, #4076	; 0xfec
 800e8b0:	f7fd fcc8 	bl	800c244 <_ZN4rtps9SEDPAgent37registerOnNewPublisherMatchedCallbackEPFvPvES1_>
    return true;
}
 800e8b4:	4620      	mov	r0, r4
 800e8b6:	bd10      	pop	{r4, pc}

0800e8b8 <_ZN4rtps11Participant38registerOnNewSubscriberMatchedCallbackEPFvPvES1_>:

bool Participant::registerOnNewSubscriberMatchedCallback(void (*callback)(void* arg), void* args){
 800e8b8:	b510      	push	{r4, lr}
    if(!m_hasBuilInEndpoints){
 800e8ba:	f890 4028 	ldrb.w	r4, [r0, #40]	; 0x28
 800e8be:	b11c      	cbz	r4, 800e8c8 <_ZN4rtps11Participant38registerOnNewSubscriberMatchedCallbackEPFvPvES1_+0x10>
        return false;
    }

    m_sedpAgent.registerOnNewSubscriberMatchedCallback(callback, args);
 800e8c0:	f600 70ec 	addw	r0, r0, #4076	; 0xfec
 800e8c4:	f7fd fcc4 	bl	800c250 <_ZN4rtps9SEDPAgent38registerOnNewSubscriberMatchedCallbackEPFvPvES1_>
    return true;
}
 800e8c8:	4620      	mov	r0, r4
 800e8ca:	bd10      	pop	{r4, pc}

0800e8cc <_ZN4rtps11Participant9addWriterEPNS_6WriterE>:

rtps::Writer* Participant::addWriter(Writer* pWriter){
 800e8cc:	b510      	push	{r4, lr}
    if(pWriter != nullptr && m_numWriters != m_writers.size()){
 800e8ce:	460c      	mov	r4, r1
 800e8d0:	b181      	cbz	r1, 800e8f4 <_ZN4rtps11Participant9addWriterEPNS_6WriterE+0x28>
 800e8d2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800e8d6:	2b04      	cmp	r3, #4
 800e8d8:	d00e      	beq.n	800e8f8 <_ZN4rtps11Participant9addWriterEPNS_6WriterE+0x2c>
        m_writers[m_numWriters++] = pWriter;
 800e8da:	1c5a      	adds	r2, r3, #1
 800e8dc:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800e8e0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
 800e8e4:	62d9      	str	r1, [r3, #44]	; 0x2c
        if(m_hasBuilInEndpoints){
 800e8e6:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 800e8ea:	b11b      	cbz	r3, 800e8f4 <_ZN4rtps11Participant9addWriterEPNS_6WriterE+0x28>
            m_sedpAgent.addWriter(*pWriter);
 800e8ec:	f600 70ec 	addw	r0, r0, #4076	; 0xfec
 800e8f0:	f7fd fd98 	bl	800c424 <_ZN4rtps9SEDPAgent9addWriterERNS_6WriterE>
        }
        return pWriter;
    }else{
        return nullptr;
    }
}
 800e8f4:	4620      	mov	r0, r4
 800e8f6:	bd10      	pop	{r4, pc}
        return nullptr;
 800e8f8:	2400      	movs	r4, #0
 800e8fa:	e7fb      	b.n	800e8f4 <_ZN4rtps11Participant9addWriterEPNS_6WriterE+0x28>

0800e8fc <_ZN4rtps11Participant13isWritersFullEv>:

bool Participant::isWritersFull(){
	return m_numWriters == m_writers.size();
 800e8fc:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
}
 800e900:	f1a0 0004 	sub.w	r0, r0, #4
 800e904:	fab0 f080 	clz	r0, r0
 800e908:	0940      	lsrs	r0, r0, #5
 800e90a:	4770      	bx	lr

0800e90c <_ZN4rtps11Participant9addReaderEPNS_6ReaderE>:

rtps::Reader* Participant::addReader(Reader* pReader){
 800e90c:	b510      	push	{r4, lr}
    if(pReader != nullptr && m_numReaders != m_readers.size()){
 800e90e:	460c      	mov	r4, r1
 800e910:	b181      	cbz	r1, 800e934 <_ZN4rtps11Participant9addReaderEPNS_6ReaderE+0x28>
 800e912:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800e916:	2b04      	cmp	r3, #4
 800e918:	d00e      	beq.n	800e938 <_ZN4rtps11Participant9addReaderEPNS_6ReaderE+0x2c>
        m_readers[m_numReaders++] = pReader;
 800e91a:	1c5a      	adds	r2, r3, #1
 800e91c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800e920:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
 800e924:	6419      	str	r1, [r3, #64]	; 0x40
        if(m_hasBuilInEndpoints){
 800e926:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 800e92a:	b11b      	cbz	r3, 800e934 <_ZN4rtps11Participant9addReaderEPNS_6ReaderE+0x28>
            m_sedpAgent.addReader(*pReader);
 800e92c:	f600 70ec 	addw	r0, r0, #4076	; 0xfec
 800e930:	f7fd fdb2 	bl	800c498 <_ZN4rtps9SEDPAgent9addReaderERNS_6ReaderE>
        }
        return pReader;
    }else{
        return nullptr;
    }
}
 800e934:	4620      	mov	r0, r4
 800e936:	bd10      	pop	{r4, pc}
        return nullptr;
 800e938:	2400      	movs	r4, #0
 800e93a:	e7fb      	b.n	800e934 <_ZN4rtps11Participant9addReaderEPNS_6ReaderE+0x28>

0800e93c <_ZN4rtps11Participant13isReadersFullEv>:

bool Participant::isReadersFull(){
	return m_numReaders == m_readers.size();
 800e93c:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
}
 800e940:	f1a0 0004 	sub.w	r0, r0, #4
 800e944:	fab0 f080 	clz	r0, r0
 800e948:	0940      	lsrs	r0, r0, #5
 800e94a:	4770      	bx	lr

0800e94c <_ZNK4rtps11Participant9getWriterENS_10EntityId_tE>:


rtps::Writer* Participant::getWriter(EntityId_t id) const{
 800e94c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e950:	b082      	sub	sp, #8
 800e952:	9101      	str	r1, [sp, #4]
    for(uint8_t i=0; i < m_numWriters; ++i){
 800e954:	f890 603c 	ldrb.w	r6, [r0, #60]	; 0x3c
 800e958:	2e00      	cmp	r6, #0
 800e95a:	d07e      	beq.n	800ea5a <_ZNK4rtps11Participant9getWriterENS_10EntityId_tE+0x10e>
        if(m_writers[i]->m_attributes.endpointGuid.entityId == id){
 800e95c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
	  if (const size_t __len = (__last1 - __first1))
 800e95e:	2203      	movs	r2, #3
 800e960:	4605      	mov	r5, r0
                   this->entityKind == other.entityKind;
 800e962:	f89d 7007 	ldrb.w	r7, [sp, #7]
      { return const_iterator(data() + _Nm); }
 800e966:	f104 0010 	add.w	r0, r4, #16
 800e96a:	2a00      	cmp	r2, #0
 800e96c:	d053      	beq.n	800ea16 <_ZNK4rtps11Participant9getWriterENS_10EntityId_tE+0xca>
	    return !__builtin_memcmp(__first1, __first2, sizeof(_Tp) * __len);
 800e96e:	a901      	add	r1, sp, #4
 800e970:	f000 ffe0 	bl	800f934 <memcmp>
            return this->entityKey == other.entityKey &&
 800e974:	2800      	cmp	r0, #0
 800e976:	d04e      	beq.n	800ea16 <_ZNK4rtps11Participant9getWriterENS_10EntityId_tE+0xca>
    for(uint8_t i=0; i < m_numWriters; ++i){
 800e978:	2e01      	cmp	r6, #1
 800e97a:	d96e      	bls.n	800ea5a <_ZNK4rtps11Participant9getWriterENS_10EntityId_tE+0x10e>
        if(m_writers[i]->m_attributes.endpointGuid.entityId == id){
 800e97c:	6b2c      	ldr	r4, [r5, #48]	; 0x30
	  if (const size_t __len = (__last1 - __first1))
 800e97e:	2203      	movs	r2, #3
 800e980:	f104 0010 	add.w	r0, r4, #16
 800e984:	2a00      	cmp	r2, #0
 800e986:	d04d      	beq.n	800ea24 <_ZNK4rtps11Participant9getWriterENS_10EntityId_tE+0xd8>
	    return !__builtin_memcmp(__first1, __first2, sizeof(_Tp) * __len);
 800e988:	a901      	add	r1, sp, #4
 800e98a:	f000 ffd3 	bl	800f934 <memcmp>
 800e98e:	2800      	cmp	r0, #0
 800e990:	d048      	beq.n	800ea24 <_ZNK4rtps11Participant9getWriterENS_10EntityId_tE+0xd8>
    for(uint8_t i=0; i < m_numWriters; ++i){
 800e992:	2e02      	cmp	r6, #2
 800e994:	d061      	beq.n	800ea5a <_ZNK4rtps11Participant9getWriterENS_10EntityId_tE+0x10e>
        if(m_writers[i]->m_attributes.endpointGuid.entityId == id){
 800e996:	6b6c      	ldr	r4, [r5, #52]	; 0x34
	  if (const size_t __len = (__last1 - __first1))
 800e998:	2203      	movs	r2, #3
 800e99a:	f104 0010 	add.w	r0, r4, #16
 800e99e:	2a00      	cmp	r2, #0
 800e9a0:	d047      	beq.n	800ea32 <_ZNK4rtps11Participant9getWriterENS_10EntityId_tE+0xe6>
	    return !__builtin_memcmp(__first1, __first2, sizeof(_Tp) * __len);
 800e9a2:	a901      	add	r1, sp, #4
 800e9a4:	f000 ffc6 	bl	800f934 <memcmp>
 800e9a8:	2800      	cmp	r0, #0
 800e9aa:	d042      	beq.n	800ea32 <_ZNK4rtps11Participant9getWriterENS_10EntityId_tE+0xe6>
    for(uint8_t i=0; i < m_numWriters; ++i){
 800e9ac:	2e03      	cmp	r6, #3
 800e9ae:	d054      	beq.n	800ea5a <_ZNK4rtps11Participant9getWriterENS_10EntityId_tE+0x10e>
        if(m_writers[i]->m_attributes.endpointGuid.entityId == id){
 800e9b0:	6bac      	ldr	r4, [r5, #56]	; 0x38
	  if (const size_t __len = (__last1 - __first1))
 800e9b2:	2203      	movs	r2, #3
 800e9b4:	f104 0010 	add.w	r0, r4, #16
 800e9b8:	2a00      	cmp	r2, #0
 800e9ba:	d141      	bne.n	800ea40 <_ZNK4rtps11Participant9getWriterENS_10EntityId_tE+0xf4>
 800e9bc:	7ce3      	ldrb	r3, [r4, #19]
 800e9be:	42bb      	cmp	r3, r7
 800e9c0:	d025      	beq.n	800ea0e <_ZNK4rtps11Participant9getWriterENS_10EntityId_tE+0xc2>
    for(uint8_t i=0; i < m_numWriters; ++i){
 800e9c2:	2e04      	cmp	r6, #4
 800e9c4:	d049      	beq.n	800ea5a <_ZNK4rtps11Participant9getWriterENS_10EntityId_tE+0x10e>
        if(m_writers[i]->m_attributes.endpointGuid.entityId == id){
 800e9c6:	6bec      	ldr	r4, [r5, #60]	; 0x3c
 800e9c8:	2203      	movs	r2, #3
 800e9ca:	f104 0010 	add.w	r0, r4, #16
 800e9ce:	2a00      	cmp	r2, #0
 800e9d0:	d03c      	beq.n	800ea4c <_ZNK4rtps11Participant9getWriterENS_10EntityId_tE+0x100>
	    return !__builtin_memcmp(__first1, __first2, sizeof(_Tp) * __len);
 800e9d2:	a901      	add	r1, sp, #4
 800e9d4:	f000 ffae 	bl	800f934 <memcmp>
 800e9d8:	2800      	cmp	r0, #0
 800e9da:	d037      	beq.n	800ea4c <_ZNK4rtps11Participant9getWriterENS_10EntityId_tE+0x100>
    for(uint8_t i=0; i < m_numWriters; ++i){
 800e9dc:	2e05      	cmp	r6, #5
 800e9de:	d03c      	beq.n	800ea5a <_ZNK4rtps11Participant9getWriterENS_10EntityId_tE+0x10e>
 800e9e0:	3540      	adds	r5, #64	; 0x40
 800e9e2:	f04f 0805 	mov.w	r8, #5
 800e9e6:	e003      	b.n	800e9f0 <_ZNK4rtps11Participant9getWriterENS_10EntityId_tE+0xa4>
 800e9e8:	fa5f f888 	uxtb.w	r8, r8
 800e9ec:	45b0      	cmp	r8, r6
 800e9ee:	d034      	beq.n	800ea5a <_ZNK4rtps11Participant9getWriterENS_10EntityId_tE+0x10e>
        if(m_writers[i]->m_attributes.endpointGuid.entityId == id){
 800e9f0:	f855 4b04 	ldr.w	r4, [r5], #4
	  if (const size_t __len = (__last1 - __first1))
 800e9f4:	2203      	movs	r2, #3
	    return !__builtin_memcmp(__first1, __first2, sizeof(_Tp) * __len);
 800e9f6:	a901      	add	r1, sp, #4
    for(uint8_t i=0; i < m_numWriters; ++i){
 800e9f8:	f108 0801 	add.w	r8, r8, #1
 800e9fc:	f104 0010 	add.w	r0, r4, #16
 800ea00:	f000 ff98 	bl	800f934 <memcmp>
 800ea04:	2800      	cmp	r0, #0
 800ea06:	d1ef      	bne.n	800e9e8 <_ZNK4rtps11Participant9getWriterENS_10EntityId_tE+0x9c>
 800ea08:	7ce3      	ldrb	r3, [r4, #19]
 800ea0a:	42bb      	cmp	r3, r7
 800ea0c:	d1ec      	bne.n	800e9e8 <_ZNK4rtps11Participant9getWriterENS_10EntityId_tE+0x9c>
            return m_writers[i];
        }
    }
    return nullptr;
}
 800ea0e:	4620      	mov	r0, r4
 800ea10:	b002      	add	sp, #8
 800ea12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea16:	7ce3      	ldrb	r3, [r4, #19]
 800ea18:	42bb      	cmp	r3, r7
 800ea1a:	d1ad      	bne.n	800e978 <_ZNK4rtps11Participant9getWriterENS_10EntityId_tE+0x2c>
 800ea1c:	4620      	mov	r0, r4
 800ea1e:	b002      	add	sp, #8
 800ea20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea24:	7ce3      	ldrb	r3, [r4, #19]
 800ea26:	42bb      	cmp	r3, r7
 800ea28:	d1b3      	bne.n	800e992 <_ZNK4rtps11Participant9getWriterENS_10EntityId_tE+0x46>
 800ea2a:	4620      	mov	r0, r4
 800ea2c:	b002      	add	sp, #8
 800ea2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea32:	7ce3      	ldrb	r3, [r4, #19]
 800ea34:	42bb      	cmp	r3, r7
 800ea36:	d1b9      	bne.n	800e9ac <_ZNK4rtps11Participant9getWriterENS_10EntityId_tE+0x60>
 800ea38:	4620      	mov	r0, r4
 800ea3a:	b002      	add	sp, #8
 800ea3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea40:	a901      	add	r1, sp, #4
 800ea42:	f000 ff77 	bl	800f934 <memcmp>
 800ea46:	2800      	cmp	r0, #0
 800ea48:	d0b8      	beq.n	800e9bc <_ZNK4rtps11Participant9getWriterENS_10EntityId_tE+0x70>
 800ea4a:	e7ba      	b.n	800e9c2 <_ZNK4rtps11Participant9getWriterENS_10EntityId_tE+0x76>
 800ea4c:	7ce3      	ldrb	r3, [r4, #19]
 800ea4e:	42bb      	cmp	r3, r7
 800ea50:	d1c4      	bne.n	800e9dc <_ZNK4rtps11Participant9getWriterENS_10EntityId_tE+0x90>
 800ea52:	4620      	mov	r0, r4
 800ea54:	b002      	add	sp, #8
 800ea56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return nullptr;
 800ea5a:	2400      	movs	r4, #0
}
 800ea5c:	4620      	mov	r0, r4
 800ea5e:	b002      	add	sp, #8
 800ea60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ea64 <_ZNK4rtps11Participant9getReaderENS_10EntityId_tE>:

rtps::Reader* Participant::getReader(EntityId_t id) const{
 800ea64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea68:	b082      	sub	sp, #8
 800ea6a:	9101      	str	r1, [sp, #4]
    for(uint8_t i=0; i < m_numReaders; ++i){
 800ea6c:	f890 6050 	ldrb.w	r6, [r0, #80]	; 0x50
 800ea70:	2e00      	cmp	r6, #0
 800ea72:	d07e      	beq.n	800eb72 <_ZNK4rtps11Participant9getReaderENS_10EntityId_tE+0x10e>
        if(m_readers[i]->m_attributes.endpointGuid.entityId == id){
 800ea74:	6c04      	ldr	r4, [r0, #64]	; 0x40
	  if (const size_t __len = (__last1 - __first1))
 800ea76:	2203      	movs	r2, #3
 800ea78:	4605      	mov	r5, r0
                   this->entityKind == other.entityKind;
 800ea7a:	f89d 7007 	ldrb.w	r7, [sp, #7]
 800ea7e:	f104 0010 	add.w	r0, r4, #16
 800ea82:	2a00      	cmp	r2, #0
 800ea84:	d053      	beq.n	800eb2e <_ZNK4rtps11Participant9getReaderENS_10EntityId_tE+0xca>
	    return !__builtin_memcmp(__first1, __first2, sizeof(_Tp) * __len);
 800ea86:	a901      	add	r1, sp, #4
 800ea88:	f000 ff54 	bl	800f934 <memcmp>
            return this->entityKey == other.entityKey &&
 800ea8c:	2800      	cmp	r0, #0
 800ea8e:	d04e      	beq.n	800eb2e <_ZNK4rtps11Participant9getReaderENS_10EntityId_tE+0xca>
    for(uint8_t i=0; i < m_numReaders; ++i){
 800ea90:	2e01      	cmp	r6, #1
 800ea92:	d96e      	bls.n	800eb72 <_ZNK4rtps11Participant9getReaderENS_10EntityId_tE+0x10e>
        if(m_readers[i]->m_attributes.endpointGuid.entityId == id){
 800ea94:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	  if (const size_t __len = (__last1 - __first1))
 800ea96:	2203      	movs	r2, #3
 800ea98:	f104 0010 	add.w	r0, r4, #16
 800ea9c:	2a00      	cmp	r2, #0
 800ea9e:	d04d      	beq.n	800eb3c <_ZNK4rtps11Participant9getReaderENS_10EntityId_tE+0xd8>
	    return !__builtin_memcmp(__first1, __first2, sizeof(_Tp) * __len);
 800eaa0:	a901      	add	r1, sp, #4
 800eaa2:	f000 ff47 	bl	800f934 <memcmp>
 800eaa6:	2800      	cmp	r0, #0
 800eaa8:	d048      	beq.n	800eb3c <_ZNK4rtps11Participant9getReaderENS_10EntityId_tE+0xd8>
    for(uint8_t i=0; i < m_numReaders; ++i){
 800eaaa:	2e02      	cmp	r6, #2
 800eaac:	d061      	beq.n	800eb72 <_ZNK4rtps11Participant9getReaderENS_10EntityId_tE+0x10e>
        if(m_readers[i]->m_attributes.endpointGuid.entityId == id){
 800eaae:	6cac      	ldr	r4, [r5, #72]	; 0x48
	  if (const size_t __len = (__last1 - __first1))
 800eab0:	2203      	movs	r2, #3
 800eab2:	f104 0010 	add.w	r0, r4, #16
 800eab6:	2a00      	cmp	r2, #0
 800eab8:	d047      	beq.n	800eb4a <_ZNK4rtps11Participant9getReaderENS_10EntityId_tE+0xe6>
	    return !__builtin_memcmp(__first1, __first2, sizeof(_Tp) * __len);
 800eaba:	a901      	add	r1, sp, #4
 800eabc:	f000 ff3a 	bl	800f934 <memcmp>
 800eac0:	2800      	cmp	r0, #0
 800eac2:	d042      	beq.n	800eb4a <_ZNK4rtps11Participant9getReaderENS_10EntityId_tE+0xe6>
    for(uint8_t i=0; i < m_numReaders; ++i){
 800eac4:	2e03      	cmp	r6, #3
 800eac6:	d054      	beq.n	800eb72 <_ZNK4rtps11Participant9getReaderENS_10EntityId_tE+0x10e>
        if(m_readers[i]->m_attributes.endpointGuid.entityId == id){
 800eac8:	6cec      	ldr	r4, [r5, #76]	; 0x4c
	  if (const size_t __len = (__last1 - __first1))
 800eaca:	2203      	movs	r2, #3
 800eacc:	f104 0010 	add.w	r0, r4, #16
 800ead0:	2a00      	cmp	r2, #0
 800ead2:	d141      	bne.n	800eb58 <_ZNK4rtps11Participant9getReaderENS_10EntityId_tE+0xf4>
 800ead4:	7ce3      	ldrb	r3, [r4, #19]
 800ead6:	42bb      	cmp	r3, r7
 800ead8:	d025      	beq.n	800eb26 <_ZNK4rtps11Participant9getReaderENS_10EntityId_tE+0xc2>
    for(uint8_t i=0; i < m_numReaders; ++i){
 800eada:	2e04      	cmp	r6, #4
 800eadc:	d049      	beq.n	800eb72 <_ZNK4rtps11Participant9getReaderENS_10EntityId_tE+0x10e>
        if(m_readers[i]->m_attributes.endpointGuid.entityId == id){
 800eade:	6d2c      	ldr	r4, [r5, #80]	; 0x50
 800eae0:	2203      	movs	r2, #3
 800eae2:	f104 0010 	add.w	r0, r4, #16
 800eae6:	2a00      	cmp	r2, #0
 800eae8:	d03c      	beq.n	800eb64 <_ZNK4rtps11Participant9getReaderENS_10EntityId_tE+0x100>
	    return !__builtin_memcmp(__first1, __first2, sizeof(_Tp) * __len);
 800eaea:	a901      	add	r1, sp, #4
 800eaec:	f000 ff22 	bl	800f934 <memcmp>
 800eaf0:	2800      	cmp	r0, #0
 800eaf2:	d037      	beq.n	800eb64 <_ZNK4rtps11Participant9getReaderENS_10EntityId_tE+0x100>
    for(uint8_t i=0; i < m_numReaders; ++i){
 800eaf4:	2e05      	cmp	r6, #5
 800eaf6:	d03c      	beq.n	800eb72 <_ZNK4rtps11Participant9getReaderENS_10EntityId_tE+0x10e>
 800eaf8:	3554      	adds	r5, #84	; 0x54
 800eafa:	f04f 0805 	mov.w	r8, #5
 800eafe:	e003      	b.n	800eb08 <_ZNK4rtps11Participant9getReaderENS_10EntityId_tE+0xa4>
 800eb00:	fa5f f888 	uxtb.w	r8, r8
 800eb04:	45b0      	cmp	r8, r6
 800eb06:	d034      	beq.n	800eb72 <_ZNK4rtps11Participant9getReaderENS_10EntityId_tE+0x10e>
        if(m_readers[i]->m_attributes.endpointGuid.entityId == id){
 800eb08:	f855 4b04 	ldr.w	r4, [r5], #4
	  if (const size_t __len = (__last1 - __first1))
 800eb0c:	2203      	movs	r2, #3
	    return !__builtin_memcmp(__first1, __first2, sizeof(_Tp) * __len);
 800eb0e:	a901      	add	r1, sp, #4
    for(uint8_t i=0; i < m_numReaders; ++i){
 800eb10:	f108 0801 	add.w	r8, r8, #1
 800eb14:	f104 0010 	add.w	r0, r4, #16
 800eb18:	f000 ff0c 	bl	800f934 <memcmp>
 800eb1c:	2800      	cmp	r0, #0
 800eb1e:	d1ef      	bne.n	800eb00 <_ZNK4rtps11Participant9getReaderENS_10EntityId_tE+0x9c>
 800eb20:	7ce3      	ldrb	r3, [r4, #19]
 800eb22:	42bb      	cmp	r3, r7
 800eb24:	d1ec      	bne.n	800eb00 <_ZNK4rtps11Participant9getReaderENS_10EntityId_tE+0x9c>
            return m_readers[i];
        }
    }
    return nullptr;
}
 800eb26:	4620      	mov	r0, r4
 800eb28:	b002      	add	sp, #8
 800eb2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb2e:	7ce3      	ldrb	r3, [r4, #19]
 800eb30:	42bb      	cmp	r3, r7
 800eb32:	d1ad      	bne.n	800ea90 <_ZNK4rtps11Participant9getReaderENS_10EntityId_tE+0x2c>
 800eb34:	4620      	mov	r0, r4
 800eb36:	b002      	add	sp, #8
 800eb38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb3c:	7ce3      	ldrb	r3, [r4, #19]
 800eb3e:	42bb      	cmp	r3, r7
 800eb40:	d1b3      	bne.n	800eaaa <_ZNK4rtps11Participant9getReaderENS_10EntityId_tE+0x46>
 800eb42:	4620      	mov	r0, r4
 800eb44:	b002      	add	sp, #8
 800eb46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb4a:	7ce3      	ldrb	r3, [r4, #19]
 800eb4c:	42bb      	cmp	r3, r7
 800eb4e:	d1b9      	bne.n	800eac4 <_ZNK4rtps11Participant9getReaderENS_10EntityId_tE+0x60>
 800eb50:	4620      	mov	r0, r4
 800eb52:	b002      	add	sp, #8
 800eb54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb58:	a901      	add	r1, sp, #4
 800eb5a:	f000 feeb 	bl	800f934 <memcmp>
 800eb5e:	2800      	cmp	r0, #0
 800eb60:	d0b8      	beq.n	800ead4 <_ZNK4rtps11Participant9getReaderENS_10EntityId_tE+0x70>
 800eb62:	e7ba      	b.n	800eada <_ZNK4rtps11Participant9getReaderENS_10EntityId_tE+0x76>
 800eb64:	7ce3      	ldrb	r3, [r4, #19]
 800eb66:	42bb      	cmp	r3, r7
 800eb68:	d1c4      	bne.n	800eaf4 <_ZNK4rtps11Participant9getReaderENS_10EntityId_tE+0x90>
 800eb6a:	4620      	mov	r0, r4
 800eb6c:	b002      	add	sp, #8
 800eb6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return nullptr;
 800eb72:	2400      	movs	r4, #0
}
 800eb74:	4620      	mov	r0, r4
 800eb76:	b002      	add	sp, #8
 800eb78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800eb7c <_ZNK4rtps11Participant17getMatchingWriterERKNS_9TopicDataE>:

rtps::Writer* Participant::getMatchingWriter(const TopicData& readerTopicData) const{
 800eb7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    for(uint8_t i=0; i < m_numWriters; ++i){
 800eb7e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800eb82:	b1bb      	cbz	r3, 800ebb4 <_ZNK4rtps11Participant17getMatchingWriterERKNS_9TopicDataE+0x38>
 800eb84:	460f      	mov	r7, r1
 800eb86:	4606      	mov	r6, r0
 800eb88:	2400      	movs	r4, #0
 800eb8a:	eb06 0584 	add.w	r5, r6, r4, lsl #2
        if(m_writers[i]->m_attributes.matchesTopicOf(readerTopicData) &&
 800eb8e:	4639      	mov	r1, r7
    for(uint8_t i=0; i < m_numWriters; ++i){
 800eb90:	3401      	adds	r4, #1
        if(m_writers[i]->m_attributes.matchesTopicOf(readerTopicData) &&
 800eb92:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800eb94:	3004      	adds	r0, #4
 800eb96:	f7fd ffb7 	bl	800cb08 <_ZN4rtps9TopicData14matchesTopicOfERKS0_>
 800eb9a:	b130      	cbz	r0, 800ebaa <_ZNK4rtps11Participant17getMatchingWriterERKNS_9TopicDataE+0x2e>
 800eb9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb9e:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800eba0:	2b01      	cmp	r3, #1
 800eba2:	d008      	beq.n	800ebb6 <_ZNK4rtps11Participant17getMatchingWriterERKNS_9TopicDataE+0x3a>
                (readerTopicData.reliabilityKind == ReliabilityKind_t::BEST_EFFORT ||
 800eba4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800eba6:	2b02      	cmp	r3, #2
 800eba8:	d005      	beq.n	800ebb6 <_ZNK4rtps11Participant17getMatchingWriterERKNS_9TopicDataE+0x3a>
    for(uint8_t i=0; i < m_numWriters; ++i){
 800ebaa:	b2e4      	uxtb	r4, r4
 800ebac:	f896 303c 	ldrb.w	r3, [r6, #60]	; 0x3c
 800ebb0:	42a3      	cmp	r3, r4
 800ebb2:	d8ea      	bhi.n	800eb8a <_ZNK4rtps11Participant17getMatchingWriterERKNS_9TopicDataE+0xe>
                 m_writers[i]->m_attributes.reliabilityKind == ReliabilityKind_t::RELIABLE)){
            return m_writers[i];
        }
    }
    return nullptr;
 800ebb4:	2000      	movs	r0, #0
}
 800ebb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ebb8 <_ZNK4rtps11Participant17getMatchingReaderERKNS_9TopicDataE>:

rtps::Reader* Participant::getMatchingReader(const TopicData& writerTopicData) const{
 800ebb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    for(uint8_t i=0; i < m_numReaders; ++i){
 800ebba:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800ebbe:	b1bb      	cbz	r3, 800ebf0 <_ZNK4rtps11Participant17getMatchingReaderERKNS_9TopicDataE+0x38>
 800ebc0:	460f      	mov	r7, r1
 800ebc2:	4606      	mov	r6, r0
 800ebc4:	2400      	movs	r4, #0
 800ebc6:	eb06 0584 	add.w	r5, r6, r4, lsl #2
        if(m_readers[i]->m_attributes.matchesTopicOf(writerTopicData) &&
 800ebca:	4639      	mov	r1, r7
    for(uint8_t i=0; i < m_numReaders; ++i){
 800ebcc:	3401      	adds	r4, #1
        if(m_readers[i]->m_attributes.matchesTopicOf(writerTopicData) &&
 800ebce:	6c28      	ldr	r0, [r5, #64]	; 0x40
 800ebd0:	3004      	adds	r0, #4
 800ebd2:	f7fd ff99 	bl	800cb08 <_ZN4rtps9TopicData14matchesTopicOfERKS0_>
 800ebd6:	b130      	cbz	r0, 800ebe6 <_ZNK4rtps11Participant17getMatchingReaderERKNS_9TopicDataE+0x2e>
 800ebd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebda:	6c28      	ldr	r0, [r5, #64]	; 0x40
 800ebdc:	2b02      	cmp	r3, #2
 800ebde:	d008      	beq.n	800ebf2 <_ZNK4rtps11Participant17getMatchingReaderERKNS_9TopicDataE+0x3a>
                (writerTopicData.reliabilityKind == ReliabilityKind_t::RELIABLE ||
 800ebe0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800ebe2:	2b01      	cmp	r3, #1
 800ebe4:	d005      	beq.n	800ebf2 <_ZNK4rtps11Participant17getMatchingReaderERKNS_9TopicDataE+0x3a>
    for(uint8_t i=0; i < m_numReaders; ++i){
 800ebe6:	b2e4      	uxtb	r4, r4
 800ebe8:	f896 3050 	ldrb.w	r3, [r6, #80]	; 0x50
 800ebec:	42a3      	cmp	r3, r4
 800ebee:	d8ea      	bhi.n	800ebc6 <_ZNK4rtps11Participant17getMatchingReaderERKNS_9TopicDataE+0xe>
                 m_readers[i]->m_attributes.reliabilityKind == ReliabilityKind_t::BEST_EFFORT)){
            return m_readers[i];
        }
    }
    return nullptr;
 800ebf0:	2000      	movs	r0, #0
}
 800ebf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ebf4 <_ZN4rtps11Participant23addNewRemoteParticipantERKNS_20ParticipantProxyDataE>:

bool Participant::addNewRemoteParticipant(const ParticipantProxyData& remotePart){
 800ebf4:	b570      	push	{r4, r5, r6, lr}
            if(isFull()){
 800ebf6:	6d85      	ldr	r5, [r0, #88]	; 0x58
 800ebf8:	2d05      	cmp	r5, #5
 800ebfa:	d012      	beq.n	800ec22 <_ZN4rtps11Participant23addNewRemoteParticipantERKNS_20ParticipantProxyDataE+0x2e>
                    uint8_t byte = m_bitMap[bucket];
 800ebfc:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
                        if(!(byte & 1)){
 800ec00:	f013 0201 	ands.w	r2, r3, #1
 800ec04:	d00f      	beq.n	800ec26 <_ZN4rtps11Participant23addNewRemoteParticipantERKNS_20ParticipantProxyDataE+0x32>
 800ec06:	079e      	lsls	r6, r3, #30
 800ec08:	d523      	bpl.n	800ec52 <_ZN4rtps11Participant23addNewRemoteParticipantERKNS_20ParticipantProxyDataE+0x5e>
 800ec0a:	075c      	lsls	r4, r3, #29
 800ec0c:	d524      	bpl.n	800ec58 <_ZN4rtps11Participant23addNewRemoteParticipantERKNS_20ParticipantProxyDataE+0x64>
 800ec0e:	071a      	lsls	r2, r3, #28
 800ec10:	d525      	bpl.n	800ec5e <_ZN4rtps11Participant23addNewRemoteParticipantERKNS_20ParticipantProxyDataE+0x6a>
 800ec12:	06de      	lsls	r6, r3, #27
 800ec14:	d526      	bpl.n	800ec64 <_ZN4rtps11Participant23addNewRemoteParticipantERKNS_20ParticipantProxyDataE+0x70>
 800ec16:	069c      	lsls	r4, r3, #26
 800ec18:	d527      	bpl.n	800ec6a <_ZN4rtps11Participant23addNewRemoteParticipantERKNS_20ParticipantProxyDataE+0x76>
 800ec1a:	065a      	lsls	r2, r3, #25
 800ec1c:	d528      	bpl.n	800ec70 <_ZN4rtps11Participant23addNewRemoteParticipantERKNS_20ParticipantProxyDataE+0x7c>
 800ec1e:	09da      	lsrs	r2, r3, #7
 800ec20:	d013      	beq.n	800ec4a <_ZN4rtps11Participant23addNewRemoteParticipantERKNS_20ParticipantProxyDataE+0x56>
                return false;
 800ec22:	2000      	movs	r0, #0
    return m_remoteParticipants.add(remotePart);
}
 800ec24:	bd70      	pop	{r4, r5, r6, pc}
                        if(!(byte & 1)){
 800ec26:	2601      	movs	r6, #1
 800ec28:	4604      	mov	r4, r0
                            m_data[bucket*8+bit] = data;
 800ec2a:	eb02 1082 	add.w	r0, r2, r2, lsl #6
                            m_bitMap[bucket] |= 1 << bit;
 800ec2e:	4333      	orrs	r3, r6
                            ++m_numElements;
 800ec30:	3501      	adds	r5, #1
                            m_data[bucket*8+bit] = data;
 800ec32:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 800ec36:	f44f 7202 	mov.w	r2, #520	; 0x208
                            m_bitMap[bucket] |= 1 << bit;
 800ec3a:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
                            m_data[bucket*8+bit] = data;
 800ec3e:	305c      	adds	r0, #92	; 0x5c
 800ec40:	f000 fe87 	bl	800f952 <memcpy>
                            return true;
 800ec44:	2001      	movs	r0, #1
                            ++m_numElements;
 800ec46:	65a5      	str	r5, [r4, #88]	; 0x58
 800ec48:	bd70      	pop	{r4, r5, r6, pc}
                        if(!(byte & 1)){
 800ec4a:	f06f 067f 	mvn.w	r6, #127	; 0x7f
 800ec4e:	2207      	movs	r2, #7
 800ec50:	e7ea      	b.n	800ec28 <_ZN4rtps11Participant23addNewRemoteParticipantERKNS_20ParticipantProxyDataE+0x34>
 800ec52:	2602      	movs	r6, #2
 800ec54:	2201      	movs	r2, #1
 800ec56:	e7e7      	b.n	800ec28 <_ZN4rtps11Participant23addNewRemoteParticipantERKNS_20ParticipantProxyDataE+0x34>
 800ec58:	2604      	movs	r6, #4
 800ec5a:	2202      	movs	r2, #2
 800ec5c:	e7e4      	b.n	800ec28 <_ZN4rtps11Participant23addNewRemoteParticipantERKNS_20ParticipantProxyDataE+0x34>
 800ec5e:	2608      	movs	r6, #8
 800ec60:	2203      	movs	r2, #3
 800ec62:	e7e1      	b.n	800ec28 <_ZN4rtps11Participant23addNewRemoteParticipantERKNS_20ParticipantProxyDataE+0x34>
 800ec64:	2610      	movs	r6, #16
 800ec66:	2204      	movs	r2, #4
 800ec68:	e7de      	b.n	800ec28 <_ZN4rtps11Participant23addNewRemoteParticipantERKNS_20ParticipantProxyDataE+0x34>
 800ec6a:	2620      	movs	r6, #32
 800ec6c:	2205      	movs	r2, #5
 800ec6e:	e7db      	b.n	800ec28 <_ZN4rtps11Participant23addNewRemoteParticipantERKNS_20ParticipantProxyDataE+0x34>
 800ec70:	2640      	movs	r6, #64	; 0x40
 800ec72:	2206      	movs	r2, #6
 800ec74:	e7d8      	b.n	800ec28 <_ZN4rtps11Participant23addNewRemoteParticipantERKNS_20ParticipantProxyDataE+0x34>
 800ec76:	bf00      	nop

0800ec78 <_ZN4rtps11Participant21findRemoteParticipantERKNS_12GuidPrefix_tE>:
    auto thunk=[](void* arg, const ParticipantProxyData& value){return (*static_cast<decltype(isElementToRemove)*>(arg))(value);};

    return m_remoteParticipants.remove(thunk, &isElementToRemove);
}

const rtps::ParticipantProxyData* Participant::findRemoteParticipant(const GuidPrefix_t& prefix){
 800ec78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
                memcpy(m_bitMap, m_pool.m_bitMap, sizeof(m_bitMap));
 800ec7c:	f890 4054 	ldrb.w	r4, [r0, #84]	; 0x54
            if(!(m_bitMap[0] & 1)){
 800ec80:	07e5      	lsls	r5, r4, #31
 800ec82:	d405      	bmi.n	800ec90 <_ZN4rtps11Participant21findRemoteParticipantERKNS_12GuidPrefix_tE+0x18>
                if(m_pool.m_numElements == 0){
 800ec84:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800ec86:	bb6b      	cbnz	r3, 800ece4 <_ZN4rtps11Participant21findRemoteParticipantERKNS_12GuidPrefix_tE+0x6c>
            return nullptr;
 800ec88:	2500      	movs	r5, #0
        return proxy.m_guid.prefix == prefix;
    };
    auto thunk=[](void* arg, const ParticipantProxyData& value){return (*static_cast<decltype(isElementToFind)*>(arg))(value);};

    return m_remoteParticipants.find(thunk, &isElementToFind);
}
 800ec8a:	4628      	mov	r0, r5
 800ec8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            explicit MemoryPoolIterator(MemoryPool<TYPE, SIZE>& pool) : m_pool(pool){
 800ec90:	f04f 0900 	mov.w	r9, #0
 800ec94:	460e      	mov	r6, r1
 800ec96:	4680      	mov	r8, r0
                return m_pool.m_data[m_bit];
 800ec98:	f100 0754 	add.w	r7, r0, #84	; 0x54
            for(auto it=begin(); it!=end();++it){
 800ec9c:	f1b9 0f05 	cmp.w	r9, #5
 800eca0:	d0f2      	beq.n	800ec88 <_ZN4rtps11Participant21findRemoteParticipantERKNS_12GuidPrefix_tE+0x10>
                return m_pool.m_data[m_bit];
 800eca2:	eb09 1589 	add.w	r5, r9, r9, lsl #6
	  if (const size_t __len = (__last1 - __first1))
 800eca6:	220c      	movs	r2, #12
	    return !__builtin_memcmp(__first1, __first2, sizeof(_Tp) * __len);
 800eca8:	4631      	mov	r1, r6
 800ecaa:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 800ecae:	3508      	adds	r5, #8
 800ecb0:	1ca8      	adds	r0, r5, #2
 800ecb2:	f000 fe3f 	bl	800f934 <memcmp>
                if(jumppad(isCorrectElement, *it)){
 800ecb6:	2800      	cmp	r0, #0
 800ecb8:	d0e7      	beq.n	800ec8a <_ZN4rtps11Participant21findRemoteParticipantERKNS_12GuidPrefix_tE+0x12>
                if(m_pool.m_numElements == 0){
 800ecba:	f8d8 3058 	ldr.w	r3, [r8, #88]	; 0x58
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d0e2      	beq.n	800ec88 <_ZN4rtps11Participant21findRemoteParticipantERKNS_12GuidPrefix_tE+0x10>
 800ecc2:	f109 0301 	add.w	r3, r9, #1
 800ecc6:	b2db      	uxtb	r3, r3
                    m_bitMap[bucket] = m_bitMap[bucket] >> 1;
 800ecc8:	1064      	asrs	r4, r4, #1
 800ecca:	1c59      	adds	r1, r3, #1
 800eccc:	4699      	mov	r9, r3
                }while(!(m_bitMap[bucket] & 1) && m_bit < SIZE);
 800ecce:	f004 0201 	and.w	r2, r4, #1
                    m_bitMap[bucket] = m_bitMap[bucket] >> 1;
 800ecd2:	b2e4      	uxtb	r4, r4
 800ecd4:	2b04      	cmp	r3, #4
 800ecd6:	bf88      	it	hi
 800ecd8:	f042 0201 	orrhi.w	r2, r2, #1
 800ecdc:	b2cb      	uxtb	r3, r1
                }while(!(m_bitMap[bucket] & 1) && m_bit < SIZE);
 800ecde:	2a00      	cmp	r2, #0
 800ece0:	d0f2      	beq.n	800ecc8 <_ZN4rtps11Participant21findRemoteParticipantERKNS_12GuidPrefix_tE+0x50>
 800ece2:	e7db      	b.n	800ec9c <_ZN4rtps11Participant21findRemoteParticipantERKNS_12GuidPrefix_tE+0x24>
                if(m_pool.m_numElements == 0){
 800ece4:	f04f 0901 	mov.w	r9, #1
 800ece8:	e002      	b.n	800ecf0 <_ZN4rtps11Participant21findRemoteParticipantERKNS_12GuidPrefix_tE+0x78>
                }while(!(m_bitMap[bucket] & 1) && m_bit < SIZE);
 800ecea:	07d2      	lsls	r2, r2, #31
 800ecec:	d4d2      	bmi.n	800ec94 <_ZN4rtps11Participant21findRemoteParticipantERKNS_12GuidPrefix_tE+0x1c>
 800ecee:	4699      	mov	r9, r3
                    m_bitMap[bucket] = m_bitMap[bucket] >> 1;
 800ecf0:	1062      	asrs	r2, r4, #1
 800ecf2:	f109 0301 	add.w	r3, r9, #1
                }while(!(m_bitMap[bucket] & 1) && m_bit < SIZE);
 800ecf6:	f1b9 0f04 	cmp.w	r9, #4
                    m_bitMap[bucket] = m_bitMap[bucket] >> 1;
 800ecfa:	b2d4      	uxtb	r4, r2
 800ecfc:	b2db      	uxtb	r3, r3
                }while(!(m_bitMap[bucket] & 1) && m_bit < SIZE);
 800ecfe:	d9f4      	bls.n	800ecea <_ZN4rtps11Participant21findRemoteParticipantERKNS_12GuidPrefix_tE+0x72>
 800ed00:	e7c8      	b.n	800ec94 <_ZN4rtps11Participant21findRemoteParticipantERKNS_12GuidPrefix_tE+0x1c>
 800ed02:	bf00      	nop

0800ed04 <_ZN4rtps11Participant19addBuiltInEndpointsERNS_16BuiltInEndpointsE>:

rtps::MessageReceiver* Participant::getMessageReceiver(){
    return &m_receiver;
}

void Participant::addBuiltInEndpoints(BuiltInEndpoints& endpoints){
 800ed04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed06:	4604      	mov	r4, r0
    m_hasBuilInEndpoints = true;
 800ed08:	2301      	movs	r3, #1
    m_spdpAgent.init(*this, endpoints);
 800ed0a:	f600 2784 	addw	r7, r0, #2692	; 0xa84
void Participant::addBuiltInEndpoints(BuiltInEndpoints& endpoints){
 800ed0e:	460d      	mov	r5, r1
    m_sedpAgent.init(*this, endpoints);
 800ed10:	f600 76ec 	addw	r6, r0, #4076	; 0xfec
    m_hasBuilInEndpoints = true;
 800ed14:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
    m_spdpAgent.init(*this, endpoints);
 800ed18:	460a      	mov	r2, r1
 800ed1a:	4638      	mov	r0, r7
 800ed1c:	4621      	mov	r1, r4
 800ed1e:	f7fd fec9 	bl	800cab4 <_ZN4rtps9SPDPAgent4initERNS_11ParticipantERNS_16BuiltInEndpointsE>
    m_sedpAgent.init(*this, endpoints);
 800ed22:	4621      	mov	r1, r4
 800ed24:	4630      	mov	r0, r6
 800ed26:	462a      	mov	r2, r5
 800ed28:	f7fd fa64 	bl	800c1f4 <_ZN4rtps9SEDPAgent4initERNS_11ParticipantERKNS_16BuiltInEndpointsE>

    // This needs to be done after initializing the agents
    addWriter(endpoints.spdpWriter);
 800ed2c:	6829      	ldr	r1, [r5, #0]
    if(pWriter != nullptr && m_numWriters != m_writers.size()){
 800ed2e:	b179      	cbz	r1, 800ed50 <_ZN4rtps11Participant19addBuiltInEndpointsERNS_16BuiltInEndpointsE+0x4c>
 800ed30:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800ed34:	2b04      	cmp	r3, #4
 800ed36:	d00b      	beq.n	800ed50 <_ZN4rtps11Participant19addBuiltInEndpointsERNS_16BuiltInEndpointsE+0x4c>
        m_writers[m_numWriters++] = pWriter;
 800ed38:	1c5a      	adds	r2, r3, #1
 800ed3a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ed3e:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
 800ed42:	62d9      	str	r1, [r3, #44]	; 0x2c
        if(m_hasBuilInEndpoints){
 800ed44:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800ed48:	b113      	cbz	r3, 800ed50 <_ZN4rtps11Participant19addBuiltInEndpointsERNS_16BuiltInEndpointsE+0x4c>
            m_sedpAgent.addWriter(*pWriter);
 800ed4a:	4630      	mov	r0, r6
 800ed4c:	f7fd fb6a 	bl	800c424 <_ZN4rtps9SEDPAgent9addWriterERNS_6WriterE>
    addReader(endpoints.spdpReader);
 800ed50:	6869      	ldr	r1, [r5, #4]
    if(pReader != nullptr && m_numReaders != m_readers.size()){
 800ed52:	b179      	cbz	r1, 800ed74 <_ZN4rtps11Participant19addBuiltInEndpointsERNS_16BuiltInEndpointsE+0x70>
 800ed54:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 800ed58:	2b04      	cmp	r3, #4
 800ed5a:	d00b      	beq.n	800ed74 <_ZN4rtps11Participant19addBuiltInEndpointsERNS_16BuiltInEndpointsE+0x70>
        m_readers[m_numReaders++] = pReader;
 800ed5c:	1c5a      	adds	r2, r3, #1
 800ed5e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ed62:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
 800ed66:	6419      	str	r1, [r3, #64]	; 0x40
        if(m_hasBuilInEndpoints){
 800ed68:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800ed6c:	b113      	cbz	r3, 800ed74 <_ZN4rtps11Participant19addBuiltInEndpointsERNS_16BuiltInEndpointsE+0x70>
            m_sedpAgent.addReader(*pReader);
 800ed6e:	4630      	mov	r0, r6
 800ed70:	f7fd fb92 	bl	800c498 <_ZN4rtps9SEDPAgent9addReaderERNS_6ReaderE>
    addWriter(endpoints.sedpPubWriter);
 800ed74:	68a9      	ldr	r1, [r5, #8]
    if(pWriter != nullptr && m_numWriters != m_writers.size()){
 800ed76:	b179      	cbz	r1, 800ed98 <_ZN4rtps11Participant19addBuiltInEndpointsERNS_16BuiltInEndpointsE+0x94>
 800ed78:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800ed7c:	2b04      	cmp	r3, #4
 800ed7e:	d00b      	beq.n	800ed98 <_ZN4rtps11Participant19addBuiltInEndpointsERNS_16BuiltInEndpointsE+0x94>
        m_writers[m_numWriters++] = pWriter;
 800ed80:	1c5a      	adds	r2, r3, #1
 800ed82:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ed86:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
 800ed8a:	62d9      	str	r1, [r3, #44]	; 0x2c
        if(m_hasBuilInEndpoints){
 800ed8c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800ed90:	b113      	cbz	r3, 800ed98 <_ZN4rtps11Participant19addBuiltInEndpointsERNS_16BuiltInEndpointsE+0x94>
            m_sedpAgent.addWriter(*pWriter);
 800ed92:	4630      	mov	r0, r6
 800ed94:	f7fd fb46 	bl	800c424 <_ZN4rtps9SEDPAgent9addWriterERNS_6WriterE>
    addReader(endpoints.sedpPubReader);
 800ed98:	68e9      	ldr	r1, [r5, #12]
    if(pReader != nullptr && m_numReaders != m_readers.size()){
 800ed9a:	b179      	cbz	r1, 800edbc <_ZN4rtps11Participant19addBuiltInEndpointsERNS_16BuiltInEndpointsE+0xb8>
 800ed9c:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 800eda0:	2b04      	cmp	r3, #4
 800eda2:	d00b      	beq.n	800edbc <_ZN4rtps11Participant19addBuiltInEndpointsERNS_16BuiltInEndpointsE+0xb8>
        m_readers[m_numReaders++] = pReader;
 800eda4:	1c5a      	adds	r2, r3, #1
 800eda6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800edaa:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
 800edae:	6419      	str	r1, [r3, #64]	; 0x40
        if(m_hasBuilInEndpoints){
 800edb0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800edb4:	b113      	cbz	r3, 800edbc <_ZN4rtps11Participant19addBuiltInEndpointsERNS_16BuiltInEndpointsE+0xb8>
            m_sedpAgent.addReader(*pReader);
 800edb6:	4630      	mov	r0, r6
 800edb8:	f7fd fb6e 	bl	800c498 <_ZN4rtps9SEDPAgent9addReaderERNS_6ReaderE>
    addWriter(endpoints.sedpSubWriter);
 800edbc:	6929      	ldr	r1, [r5, #16]
    if(pWriter != nullptr && m_numWriters != m_writers.size()){
 800edbe:	b179      	cbz	r1, 800ede0 <_ZN4rtps11Participant19addBuiltInEndpointsERNS_16BuiltInEndpointsE+0xdc>
 800edc0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800edc4:	2b04      	cmp	r3, #4
 800edc6:	d00b      	beq.n	800ede0 <_ZN4rtps11Participant19addBuiltInEndpointsERNS_16BuiltInEndpointsE+0xdc>
        m_writers[m_numWriters++] = pWriter;
 800edc8:	1c5a      	adds	r2, r3, #1
 800edca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800edce:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
 800edd2:	62d9      	str	r1, [r3, #44]	; 0x2c
        if(m_hasBuilInEndpoints){
 800edd4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800edd8:	b113      	cbz	r3, 800ede0 <_ZN4rtps11Participant19addBuiltInEndpointsERNS_16BuiltInEndpointsE+0xdc>
            m_sedpAgent.addWriter(*pWriter);
 800edda:	4630      	mov	r0, r6
 800eddc:	f7fd fb22 	bl	800c424 <_ZN4rtps9SEDPAgent9addWriterERNS_6WriterE>
    addReader(endpoints.sedpSubReader);
 800ede0:	6969      	ldr	r1, [r5, #20]
    if(pReader != nullptr && m_numReaders != m_readers.size()){
 800ede2:	b179      	cbz	r1, 800ee04 <_ZN4rtps11Participant19addBuiltInEndpointsERNS_16BuiltInEndpointsE+0x100>
 800ede4:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 800ede8:	2b04      	cmp	r3, #4
 800edea:	d00b      	beq.n	800ee04 <_ZN4rtps11Participant19addBuiltInEndpointsERNS_16BuiltInEndpointsE+0x100>
        m_readers[m_numReaders++] = pReader;
 800edec:	1c5a      	adds	r2, r3, #1
 800edee:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800edf2:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
 800edf6:	6419      	str	r1, [r3, #64]	; 0x40
        if(m_hasBuilInEndpoints){
 800edf8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800edfc:	b113      	cbz	r3, 800ee04 <_ZN4rtps11Participant19addBuiltInEndpointsERNS_16BuiltInEndpointsE+0x100>
            m_sedpAgent.addReader(*pReader);
 800edfe:	4630      	mov	r0, r6
 800ee00:	f7fd fb4a 	bl	800c498 <_ZN4rtps9SEDPAgent9addReaderERNS_6ReaderE>

    m_spdpAgent.start();
 800ee04:	4638      	mov	r0, r7
}
 800ee06:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    m_spdpAgent.start();
 800ee0a:	f7fd bbaf 	b.w	800c56c <_ZN4rtps9SPDPAgent5startEv>
 800ee0e:	bf00      	nop

0800ee10 <_ZN4rtps11Participant10newMessageEPKht>:

void Participant::newMessage(const uint8_t* data, DataSize_t size){
    m_receiver.processMessage(data, size);
 800ee10:	3010      	adds	r0, #16
 800ee12:	f000 b86f 	b.w	800eef4 <_ZN4rtps15MessageReceiver14processMessageEPKht>
 800ee16:	bf00      	nop

0800ee18 <_ZN4rtps15StatelessReader9newChangeERKNS_17ReaderCacheChangeE>:
void StatelessReader::init(const TopicData& attributes){
    m_attributes = attributes;
}

void StatelessReader::newChange(const ReaderCacheChange& cacheChange){
    if(m_callback != nullptr){
 800ee18:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800ee1a:	b10b      	cbz	r3, 800ee20 <_ZN4rtps15StatelessReader9newChangeERKNS_17ReaderCacheChangeE+0x8>
        m_callback(m_callee, cacheChange);
 800ee1c:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 800ee1e:	4718      	bx	r3
    }
}
 800ee20:	4770      	bx	lr
 800ee22:	bf00      	nop

0800ee24 <_ZN4rtps15StatelessReader16registerCallbackEPFvPvRKNS_17ReaderCacheChangeEES1_>:

void StatelessReader::registerCallback(ddsReaderCallback_fp cb, void* callee){
    if(cb != nullptr){
 800ee24:	b109      	cbz	r1, 800ee2a <_ZN4rtps15StatelessReader16registerCallbackEPFvPvRKNS_17ReaderCacheChangeEES1_+0x6>
        m_callback = cb;
        m_callee = callee; // It's okay if this is null
 800ee26:	e9c0 1216 	strd	r1, r2, [r0, #88]	; 0x58
    }else{
#if SLR_VERBOSE
        printf("StatelessReader[%s]: Passed callback is nullptr\n", &m_attributes.topicName[0]);
#endif
    }
}
 800ee2a:	4770      	bx	lr

0800ee2c <_ZN4rtps15StatelessReader19addNewMatchedWriterERKNS_11WriterProxyE>:

bool StatelessReader::addNewMatchedWriter(const WriterProxy& /*newProxy*/){
    // Nothing to do
    return true;
}
 800ee2c:	2001      	movs	r0, #1
 800ee2e:	4770      	bx	lr

0800ee30 <_ZN4rtps15StatelessReader12removeWriterERKNS_4GuidE>:

void StatelessReader::removeWriter(const Guid& /*guid*/){
    // Nothing to do
}
 800ee30:	4770      	bx	lr
 800ee32:	bf00      	nop

0800ee34 <_ZN4rtps15StatelessReader14onNewHeartbeatERKNS_19SubmessageHeartbeatERKNS_12GuidPrefix_tE>:

bool StatelessReader::onNewHeartbeat(const SubmessageHeartbeat&, const GuidPrefix_t&){
    // nothing to do
    return true;
}
 800ee34:	2001      	movs	r0, #1
 800ee36:	4770      	bx	lr

0800ee38 <_ZN4rtps15StatelessReaderD1Ev>:
 800ee38:	4770      	bx	lr
 800ee3a:	bf00      	nop

0800ee3c <_ZN4rtps15StatelessReaderD0Ev>:
 800ee3c:	b510      	push	{r4, lr}
 800ee3e:	4604      	mov	r4, r0
 800ee40:	f7fb ff1e 	bl	800ac80 <_ZdlPv>
 800ee44:	4620      	mov	r0, r4
 800ee46:	bd10      	pop	{r4, pc}

0800ee48 <_ZN4rtps15StatelessReader4initERKNS_9TopicDataE>:
void StatelessReader::init(const TopicData& attributes){
 800ee48:	b508      	push	{r3, lr}
    m_attributes = attributes;
 800ee4a:	2254      	movs	r2, #84	; 0x54
 800ee4c:	3004      	adds	r0, #4
 800ee4e:	f000 fd80 	bl	800f952 <memcpy>
}
 800ee52:	bd08      	pop	{r3, pc}

0800ee54 <_ZN4rtps15MessageReceiverC1EPNS_11ParticipantE>:

#if RECV_VERBOSE
#include "rtps/utils/printutils.h"
#endif

MessageReceiver::MessageReceiver(Participant* part)
 800ee54:	b410      	push	{r4}
: mp_part(part){
 800ee56:	4c06      	ldr	r4, [pc, #24]	; (800ee70 <_ZN4rtps15MessageReceiverC1EPNS_11ParticipantE+0x1c>)
 800ee58:	2200      	movs	r2, #0
 800ee5a:	6141      	str	r1, [r0, #20]
 800ee5c:	8824      	ldrh	r4, [r4, #0]
 800ee5e:	6082      	str	r2, [r0, #8]
 800ee60:	8184      	strh	r4, [r0, #12]
 800ee62:	81c2      	strh	r2, [r0, #14]
 800ee64:	7402      	strb	r2, [r0, #16]

}
 800ee66:	f85d 4b04 	ldr.w	r4, [sp], #4
: mp_part(part){
 800ee6a:	e9c0 2200 	strd	r2, r2, [r0]
}
 800ee6e:	4770      	bx	lr
 800ee70:	08010dd0 	.word	0x08010dd0

0800ee74 <_ZN4rtps15MessageReceiver21processDataSubmessageERNS_21MessageProcessingInfoE>:
    }
    msgInfo.nextPos += submsgHeader.submessageLength + SubmessageHeader::getRawSize();
    return success;
}

bool MessageReceiver::processDataSubmessage(MessageProcessingInfo& msgInfo){
 800ee74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee78:	460c      	mov	r4, r1
 800ee7a:	b092      	sub	sp, #72	; 0x48
 800ee7c:	4606      	mov	r6, r0
    SubmessageData dataSubmsg;
    if(!deserializeMessage(msgInfo, dataSubmsg)){
 800ee7e:	a904      	add	r1, sp, #16
 800ee80:	4620      	mov	r0, r4
 800ee82:	f000 f8ff 	bl	800f084 <_ZN4rtps18deserializeMessageERKNS_21MessageProcessingInfoERNS_14SubmessageDataE>
 800ee86:	4605      	mov	r5, r0
 800ee88:	b918      	cbnz	r0, 800ee92 <_ZN4rtps15MessageReceiver21processDataSubmessageERNS_21MessageProcessingInfoE+0x1e>
        printf("\n");
#endif
    }

    return true;
}
 800ee8a:	4628      	mov	r0, r5
 800ee8c:	b012      	add	sp, #72	; 0x48
 800ee8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    Reader* reader = mp_part->getReader(dataSubmsg.readerId);
 800ee92:	9906      	ldr	r1, [sp, #24]
 800ee94:	6970      	ldr	r0, [r6, #20]
    const uint8_t* serializedData = msgInfo.getPointerToCurrentPos() + SubmessageData::getRawSize();
 800ee96:	6827      	ldr	r7, [r4, #0]
 800ee98:	f8b4 8006 	ldrh.w	r8, [r4, #6]
    const DataSize_t size = msgInfo.size - (msgInfo.nextPos + SubmessageData::getRawSize());
 800ee9c:	88a4      	ldrh	r4, [r4, #4]
    Reader* reader = mp_part->getReader(dataSubmsg.readerId);
 800ee9e:	f7ff fde1 	bl	800ea64 <_ZNK4rtps11Participant9getReaderENS_10EntityId_tE>
    if(reader != nullptr){
 800eea2:	4684      	mov	ip, r0
 800eea4:	2800      	cmp	r0, #0
 800eea6:	d0f0      	beq.n	800ee8a <_ZN4rtps15MessageReceiver21processDataSubmessageERNS_21MessageProcessingInfoE+0x16>
        Guid writerGuid{sourceGuidPrefix, dataSubmsg.writerId};
 800eea8:	9a07      	ldr	r2, [sp, #28]
    const uint8_t* serializedData = msgInfo.getPointerToCurrentPos() + SubmessageData::getRawSize();
 800eeaa:	f108 0118 	add.w	r1, r8, #24
    const DataSize_t size = msgInfo.size - (msgInfo.nextPos + SubmessageData::getRawSize());
 800eeae:	3c18      	subs	r4, #24
        Guid writerGuid{sourceGuidPrefix, dataSubmsg.writerId};
 800eeb0:	466b      	mov	r3, sp
 800eeb2:	9203      	str	r2, [sp, #12]
    const uint8_t* serializedData = msgInfo.getPointerToCurrentPos() + SubmessageData::getRawSize();
 800eeb4:	440f      	add	r7, r1
 800eeb6:	9a08      	ldr	r2, [sp, #32]
            : data(data), kind(kind), size(size), writerGuid(writerGuid), sn(sn){};
 800eeb8:	2101      	movs	r1, #1
    const DataSize_t size = msgInfo.size - (msgInfo.nextPos + SubmessageData::getRawSize());
 800eeba:	eba4 0408 	sub.w	r4, r4, r8
 800eebe:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
 800eec2:	9210      	str	r2, [sp, #64]	; 0x40
 800eec4:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
 800eec8:	f8ad 402e 	strh.w	r4, [sp, #46]	; 0x2e
 800eecc:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800eece:	970a      	str	r7, [sp, #40]	; 0x28
 800eed0:	9411      	str	r4, [sp, #68]	; 0x44
        Guid writerGuid{sourceGuidPrefix, dataSubmsg.writerId};
 800eed2:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800eed6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800eeda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800eedc:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
        reader->newChange(change);
 800eee0:	f8dc 3000 	ldr.w	r3, [ip]
 800eee4:	4660      	mov	r0, ip
 800eee6:	a90a      	add	r1, sp, #40	; 0x28
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	4798      	blx	r3
}
 800eeec:	4628      	mov	r0, r5
 800eeee:	b012      	add	sp, #72	; 0x48
 800eef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800eef4 <_ZN4rtps15MessageReceiver14processMessageEPKht>:
bool MessageReceiver::processMessage(const uint8_t* data, DataSize_t size){
 800eef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    sourceVersion = PROTOCOLVERSION;
 800eef8:	4f48      	ldr	r7, [pc, #288]	; (800f01c <_ZN4rtps15MessageReceiver14processMessageEPKht+0x128>)
bool MessageReceiver::processMessage(const uint8_t* data, DataSize_t size){
 800eefa:	b092      	sub	sp, #72	; 0x48
 800eefc:	4604      	mov	r4, r0
    sourceGuidPrefix = GUIDPREFIX_UNKNOWN;
 800eefe:	2500      	movs	r5, #0
    sourceVersion = PROTOCOLVERSION;
 800ef00:	883b      	ldrh	r3, [r7, #0]


    struct MessageProcessingInfo{
        MessageProcessingInfo(const uint8_t* data, DataSize_t size)
                : data(data), size(size){}
 800ef02:	9101      	str	r1, [sp, #4]
    if(!deserializeMessage(msgInfo, header)){
 800ef04:	a903      	add	r1, sp, #12
    sourceVersion = PROTOCOLVERSION;
 800ef06:	8183      	strh	r3, [r0, #12]
    if(!deserializeMessage(msgInfo, header)){
 800ef08:	a801      	add	r0, sp, #4
    sourceGuidPrefix = GUIDPREFIX_UNKNOWN;
 800ef0a:	60a5      	str	r5, [r4, #8]
    sourceVendor = VENDOR_UNKNOWN;
 800ef0c:	81e5      	strh	r5, [r4, #14]
    haveTimeStamp = false;
 800ef0e:	7425      	strb	r5, [r4, #16]
 800ef10:	f8ad 2008 	strh.w	r2, [sp, #8]
 800ef14:	f8ad 500a 	strh.w	r5, [sp, #10]
    sourceGuidPrefix = GUIDPREFIX_UNKNOWN;
 800ef18:	e9c4 5500 	strd	r5, r5, [r4]
    if(!deserializeMessage(msgInfo, header)){
 800ef1c:	f000 f880 	bl	800f020 <_ZN4rtps18deserializeMessageERKNS_21MessageProcessingInfoERNS_6HeaderE>
 800ef20:	2800      	cmp	r0, #0
 800ef22:	d053      	beq.n	800efcc <_ZN4rtps15MessageReceiver14processMessageEPKht+0xd8>
 800ef24:	f10d 0814 	add.w	r8, sp, #20
 800ef28:	4606      	mov	r6, r0
 800ef2a:	220c      	movs	r2, #12
 800ef2c:	6961      	ldr	r1, [r4, #20]
 800ef2e:	4640      	mov	r0, r8
 800ef30:	f000 fd00 	bl	800f934 <memcmp>
    if(header.guidPrefix.id == mp_part->m_guidPrefix.id){
 800ef34:	2800      	cmp	r0, #0
 800ef36:	d049      	beq.n	800efcc <_ZN4rtps15MessageReceiver14processMessageEPKht+0xd8>
    if(header.protocolName != RTPS_PROTOCOL_NAME ||
 800ef38:	687a      	ldr	r2, [r7, #4]
 800ef3a:	9b03      	ldr	r3, [sp, #12]
 800ef3c:	429a      	cmp	r2, r3
 800ef3e:	d145      	bne.n	800efcc <_ZN4rtps15MessageReceiver14processMessageEPKht+0xd8>
 800ef40:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800ef44:	2b02      	cmp	r3, #2
 800ef46:	d141      	bne.n	800efcc <_ZN4rtps15MessageReceiver14processMessageEPKht+0xd8>
    msgInfo.nextPos += Header::getRawSize();
 800ef48:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    sourceVendor = header.vendorId;
 800ef4c:	f8bd 1012 	ldrh.w	r1, [sp, #18]
    msgInfo.nextPos += Header::getRawSize();
 800ef50:	3314      	adds	r3, #20
    sourceVersion = header.protocolVersion;
 800ef52:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    while(msgInfo.nextPos < msgInfo.size){
 800ef56:	f8bd 7008 	ldrh.w	r7, [sp, #8]
    msgInfo.nextPos += Header::getRawSize();
 800ef5a:	b29b      	uxth	r3, r3
    sourceVendor = header.vendorId;
 800ef5c:	81e1      	strh	r1, [r4, #14]
    sourceVersion = header.protocolVersion;
 800ef5e:	81a2      	strh	r2, [r4, #12]
    while(msgInfo.nextPos < msgInfo.size){
 800ef60:	429f      	cmp	r7, r3
    msgInfo.nextPos += Header::getRawSize();
 800ef62:	f8ad 300a 	strh.w	r3, [sp, #10]
    sourceGuidPrefix = header.guidPrefix;
 800ef66:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 800ef6a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    while(msgInfo.nextPos < msgInfo.size){
 800ef6e:	d950      	bls.n	800f012 <_ZN4rtps15MessageReceiver14processMessageEPKht+0x11e>
        SequenceNumberSet() = default;
 800ef70:	2720      	movs	r7, #32
 800ef72:	e010      	b.n	800ef96 <_ZN4rtps15MessageReceiver14processMessageEPKht+0xa2>
    switch(submsgHeader.submessageId){
 800ef74:	2b15      	cmp	r3, #21
 800ef76:	d047      	beq.n	800f008 <_ZN4rtps15MessageReceiver14processMessageEPKht+0x114>
 800ef78:	2b06      	cmp	r3, #6
 800ef7a:	d02b      	beq.n	800efd4 <_ZN4rtps15MessageReceiver14processMessageEPKht+0xe0>
    msgInfo.nextPos += submsgHeader.submessageLength + SubmessageHeader::getRawSize();
 800ef7c:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 800ef80:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    while(msgInfo.nextPos < msgInfo.size){
 800ef84:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    msgInfo.nextPos += submsgHeader.submessageLength + SubmessageHeader::getRawSize();
 800ef88:	440b      	add	r3, r1
 800ef8a:	3304      	adds	r3, #4
 800ef8c:	b29b      	uxth	r3, r3
    while(msgInfo.nextPos < msgInfo.size){
 800ef8e:	429a      	cmp	r2, r3
    msgInfo.nextPos += submsgHeader.submessageLength + SubmessageHeader::getRawSize();
 800ef90:	f8ad 300a 	strh.w	r3, [sp, #10]
    while(msgInfo.nextPos < msgInfo.size){
 800ef94:	d93d      	bls.n	800f012 <_ZN4rtps15MessageReceiver14processMessageEPKht+0x11e>
        if(!deserializeMessage(msgInfo, submsgHeader)){
 800ef96:	4669      	mov	r1, sp
 800ef98:	a801      	add	r0, sp, #4
 800ef9a:	f000 f85d 	bl	800f058 <_ZN4rtps18deserializeMessageERKNS_21MessageProcessingInfoERNS_16SubmessageHeaderE>
 800ef9e:	b1b0      	cbz	r0, 800efce <_ZN4rtps15MessageReceiver14processMessageEPKht+0xda>
    switch(submsgHeader.submessageId){
 800efa0:	f89d 3000 	ldrb.w	r3, [sp]
 800efa4:	2b07      	cmp	r3, #7
 800efa6:	d1e5      	bne.n	800ef74 <_ZN4rtps15MessageReceiver14processMessageEPKht+0x80>

bool MessageReceiver::processHeartbeatSubmessage(MessageProcessingInfo& msgInfo){
    SubmessageHeartbeat submsgHB;
    if(!deserializeMessage(msgInfo, submsgHB)){
 800efa8:	a903      	add	r1, sp, #12
 800efaa:	a801      	add	r0, sp, #4
 800efac:	f000 f8a2 	bl	800f0f4 <_ZN4rtps18deserializeMessageERKNS_21MessageProcessingInfoERNS_19SubmessageHeartbeatE>
 800efb0:	2800      	cmp	r0, #0
 800efb2:	d0e3      	beq.n	800ef7c <_ZN4rtps15MessageReceiver14processMessageEPKht+0x88>
        return false;
    }

    Reader* reader = mp_part->getReader(submsgHB.readerId);
 800efb4:	9904      	ldr	r1, [sp, #16]
 800efb6:	6960      	ldr	r0, [r4, #20]
 800efb8:	f7ff fd54 	bl	800ea64 <_ZNK4rtps11Participant9getReaderENS_10EntityId_tE>
    if(reader != nullptr){
 800efbc:	2800      	cmp	r0, #0
 800efbe:	d0dd      	beq.n	800ef7c <_ZN4rtps15MessageReceiver14processMessageEPKht+0x88>
        reader->onNewHeartbeat(submsgHB, sourceGuidPrefix);
 800efc0:	6803      	ldr	r3, [r0, #0]
 800efc2:	4622      	mov	r2, r4
 800efc4:	a903      	add	r1, sp, #12
 800efc6:	689b      	ldr	r3, [r3, #8]
 800efc8:	4798      	blx	r3
 800efca:	e7d7      	b.n	800ef7c <_ZN4rtps15MessageReceiver14processMessageEPKht+0x88>
        return false;
 800efcc:	2000      	movs	r0, #0
}
 800efce:	b012      	add	sp, #72	; 0x48
 800efd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efd4:	2100      	movs	r1, #0
 800efd6:	2220      	movs	r2, #32
 800efd8:	a809      	add	r0, sp, #36	; 0x24
 800efda:	9708      	str	r7, [sp, #32]
 800efdc:	e9cd 5506 	strd	r5, r5, [sp, #24]
 800efe0:	f000 fcc2 	bl	800f968 <memset>
    }
}

bool MessageReceiver::processAckNackSubmessage(MessageProcessingInfo& msgInfo){
    SubmessageAckNack submsgAckNack;
    if(!deserializeMessage(msgInfo, submsgAckNack)){
 800efe4:	a903      	add	r1, sp, #12
 800efe6:	a801      	add	r0, sp, #4
 800efe8:	f000 f8b8 	bl	800f15c <_ZN4rtps18deserializeMessageERKNS_21MessageProcessingInfoERNS_17SubmessageAckNackE>
 800efec:	2800      	cmp	r0, #0
 800efee:	d0c5      	beq.n	800ef7c <_ZN4rtps15MessageReceiver14processMessageEPKht+0x88>
        return false;
    }

    Writer* writer = mp_part->getWriter(submsgAckNack.writerId);
 800eff0:	9905      	ldr	r1, [sp, #20]
 800eff2:	6960      	ldr	r0, [r4, #20]
 800eff4:	f7ff fcaa 	bl	800e94c <_ZNK4rtps11Participant9getWriterENS_10EntityId_tE>
    if(writer != nullptr){
 800eff8:	2800      	cmp	r0, #0
 800effa:	d0bf      	beq.n	800ef7c <_ZN4rtps15MessageReceiver14processMessageEPKht+0x88>
        writer->onNewAckNack(submsgAckNack, sourceGuidPrefix);
 800effc:	6803      	ldr	r3, [r0, #0]
 800effe:	4622      	mov	r2, r4
 800f000:	a903      	add	r1, sp, #12
 800f002:	695b      	ldr	r3, [r3, #20]
 800f004:	4798      	blx	r3
 800f006:	e7b9      	b.n	800ef7c <_ZN4rtps15MessageReceiver14processMessageEPKht+0x88>
            success = processDataSubmessage(msgInfo);
 800f008:	a901      	add	r1, sp, #4
 800f00a:	4620      	mov	r0, r4
 800f00c:	f7ff ff32 	bl	800ee74 <_ZN4rtps15MessageReceiver21processDataSubmessageERNS_21MessageProcessingInfoE>
 800f010:	e7b4      	b.n	800ef7c <_ZN4rtps15MessageReceiver14processMessageEPKht+0x88>
    return true;
 800f012:	4630      	mov	r0, r6
}
 800f014:	b012      	add	sp, #72	; 0x48
 800f016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f01a:	bf00      	nop
 800f01c:	08010dd0 	.word	0x08010dd0

0800f020 <_ZN4rtps18deserializeMessageERKNS_21MessageProcessingInfoERNS_6HeaderE>:
    memcpy(dst, src, size);
    src += size;
}

bool rtps::deserializeMessage(const MessageProcessingInfo& info, Header& header){
    if(info.getRemainingSize() < Header::getRawSize()){
 800f020:	88c2      	ldrh	r2, [r0, #6]
            return &data[nextPos];
        }

        //! Returns the size of data which isn't processed yet
        inline DataSize_t getRemainingSize() const{
            return size - nextPos;
 800f022:	8883      	ldrh	r3, [r0, #4]
 800f024:	1a9b      	subs	r3, r3, r2
 800f026:	b29b      	uxth	r3, r3
 800f028:	2b13      	cmp	r3, #19
 800f02a:	d801      	bhi.n	800f030 <_ZN4rtps18deserializeMessageERKNS_21MessageProcessingInfoERNS_6HeaderE+0x10>
        return false;
 800f02c:	2000      	movs	r0, #0
    doCopyAndMoveOn(header.protocolName.data(), currentPos, sizeof(std::array<uint8_t, 4>));
    doCopyAndMoveOn(reinterpret_cast<uint8_t*>(&header.protocolVersion), currentPos, sizeof(ProtocolVersion_t));
    doCopyAndMoveOn(header.vendorId.vendorId.data(), currentPos, header.vendorId.vendorId.size());
    doCopyAndMoveOn(header.guidPrefix.id.data(), currentPos, header.guidPrefix.id.size());
    return true;
}
 800f02e:	4770      	bx	lr
            return &data[nextPos];
 800f030:	6803      	ldr	r3, [r0, #0]
    return true;
 800f032:	2001      	movs	r0, #1
 800f034:	4413      	add	r3, r2
bool rtps::deserializeMessage(const MessageProcessingInfo& info, Header& header){
 800f036:	b470      	push	{r4, r5, r6}
 800f038:	681d      	ldr	r5, [r3, #0]
    memcpy(dst, src, size);
 800f03a:	461a      	mov	r2, r3
 800f03c:	600d      	str	r5, [r1, #0]
 800f03e:	889d      	ldrh	r5, [r3, #4]
 800f040:	808d      	strh	r5, [r1, #4]
 800f042:	88db      	ldrh	r3, [r3, #6]
 800f044:	80cb      	strh	r3, [r1, #6]
 800f046:	f852 6f08 	ldr.w	r6, [r2, #8]!
 800f04a:	6855      	ldr	r5, [r2, #4]
 800f04c:	6893      	ldr	r3, [r2, #8]
 800f04e:	608e      	str	r6, [r1, #8]
 800f050:	60cd      	str	r5, [r1, #12]
 800f052:	610b      	str	r3, [r1, #16]
}
 800f054:	bc70      	pop	{r4, r5, r6}
 800f056:	4770      	bx	lr

0800f058 <_ZN4rtps18deserializeMessageERKNS_21MessageProcessingInfoERNS_16SubmessageHeaderE>:

bool rtps::deserializeMessage(const MessageProcessingInfo& info, SubmessageHeader& header){
    if(info.getRemainingSize() < SubmessageHeader::getRawSize()){
 800f058:	88c2      	ldrh	r2, [r0, #6]
            return size - nextPos;
 800f05a:	8883      	ldrh	r3, [r0, #4]
 800f05c:	1a9b      	subs	r3, r3, r2
 800f05e:	b29b      	uxth	r3, r3
 800f060:	2b03      	cmp	r3, #3
 800f062:	d90c      	bls.n	800f07e <_ZN4rtps18deserializeMessageERKNS_21MessageProcessingInfoERNS_16SubmessageHeaderE+0x26>
            return &data[nextPos];
 800f064:	6803      	ldr	r3, [r0, #0]

    const uint8_t* currentPos = info.getPointerToCurrentPos();
    header.submessageId = static_cast<SubmessageKind>(*currentPos++);
    header.flags = *(currentPos++);
    doCopyAndMoveOn(reinterpret_cast<uint8_t*>(&header.submessageLength), currentPos, sizeof(uint16_t));
    return true;
 800f066:	2001      	movs	r0, #1
bool rtps::deserializeMessage(const MessageProcessingInfo& info, SubmessageHeader& header){
 800f068:	b410      	push	{r4}
    header.submessageId = static_cast<SubmessageKind>(*currentPos++);
 800f06a:	5c9c      	ldrb	r4, [r3, r2]
 800f06c:	4413      	add	r3, r2
 800f06e:	700c      	strb	r4, [r1, #0]
    header.flags = *(currentPos++);
 800f070:	785a      	ldrb	r2, [r3, #1]
}
 800f072:	f85d 4b04 	ldr.w	r4, [sp], #4
    header.flags = *(currentPos++);
 800f076:	704a      	strb	r2, [r1, #1]
 800f078:	885b      	ldrh	r3, [r3, #2]
    memcpy(dst, src, size);
 800f07a:	804b      	strh	r3, [r1, #2]
}
 800f07c:	4770      	bx	lr
        return false;
 800f07e:	2000      	movs	r0, #0
}
 800f080:	4770      	bx	lr
 800f082:	bf00      	nop

0800f084 <_ZN4rtps18deserializeMessageERKNS_21MessageProcessingInfoERNS_14SubmessageDataE>:

bool rtps::deserializeMessage(const MessageProcessingInfo& info, SubmessageData& msg){
    if(info.getRemainingSize() < SubmessageHeader::getRawSize()){
 800f084:	88c2      	ldrh	r2, [r0, #6]
            return size - nextPos;
 800f086:	8883      	ldrh	r3, [r0, #4]
 800f088:	1a9b      	subs	r3, r3, r2
 800f08a:	b29b      	uxth	r3, r3
 800f08c:	2b03      	cmp	r3, #3
 800f08e:	d912      	bls.n	800f0b6 <_ZN4rtps18deserializeMessageERKNS_21MessageProcessingInfoERNS_14SubmessageDataE+0x32>
            return &data[nextPos];
 800f090:	6803      	ldr	r3, [r0, #0]
bool rtps::deserializeMessage(const MessageProcessingInfo& info, SubmessageData& msg){
 800f092:	b430      	push	{r4, r5}
    header.submessageId = static_cast<SubmessageKind>(*currentPos++);
 800f094:	5c9c      	ldrb	r4, [r3, r2]
 800f096:	4413      	add	r3, r2
 800f098:	700c      	strb	r4, [r1, #0]
    header.flags = *(currentPos++);
 800f09a:	785a      	ldrb	r2, [r3, #1]
 800f09c:	704a      	strb	r2, [r1, #1]
 800f09e:	885b      	ldrh	r3, [r3, #2]
    memcpy(dst, src, size);
 800f0a0:	804b      	strh	r3, [r1, #2]
    if(!deserializeMessage(info, msg.header)){
        return false;
    }

    // Check for length including data
    if(info.getRemainingSize() < SubmessageHeader::getRawSize() + msg.header.submessageLength){
 800f0a2:	1cda      	adds	r2, r3, #3
 800f0a4:	88c4      	ldrh	r4, [r0, #6]
            return size - nextPos;
 800f0a6:	8883      	ldrh	r3, [r0, #4]
 800f0a8:	1b1b      	subs	r3, r3, r4
 800f0aa:	b29b      	uxth	r3, r3
 800f0ac:	429a      	cmp	r2, r3
 800f0ae:	db04      	blt.n	800f0ba <_ZN4rtps18deserializeMessageERKNS_21MessageProcessingInfoERNS_14SubmessageDataE+0x36>
        return false;
 800f0b0:	2000      	movs	r0, #0
    doCopyAndMoveOn(msg.writerId.entityKey.data(), currentPos, msg.writerId.entityKey.size());
    msg.writerId.entityKind = static_cast<EntityKind_t>(*currentPos++);
    doCopyAndMoveOn(reinterpret_cast<uint8_t*>(&msg.writerSN.high), currentPos, sizeof(msg.writerSN.high));
    doCopyAndMoveOn(reinterpret_cast<uint8_t*>(&msg.writerSN.low), currentPos, sizeof(msg.writerSN.low));
    return true;
}
 800f0b2:	bc30      	pop	{r4, r5}
 800f0b4:	4770      	bx	lr
        return false;
 800f0b6:	2000      	movs	r0, #0
}
 800f0b8:	4770      	bx	lr
            return &data[nextPos];
 800f0ba:	6803      	ldr	r3, [r0, #0]
    return true;
 800f0bc:	2001      	movs	r0, #1
 800f0be:	4423      	add	r3, r4
 800f0c0:	889d      	ldrh	r5, [r3, #4]
    memcpy(dst, src, size);
 800f0c2:	461c      	mov	r4, r3
 800f0c4:	461a      	mov	r2, r3
 800f0c6:	808d      	strh	r5, [r1, #4]
 800f0c8:	88dd      	ldrh	r5, [r3, #6]
 800f0ca:	80cd      	strh	r5, [r1, #6]
 800f0cc:	f834 5f08 	ldrh.w	r5, [r4, #8]!
 800f0d0:	78a4      	ldrb	r4, [r4, #2]
 800f0d2:	810d      	strh	r5, [r1, #8]
 800f0d4:	728c      	strb	r4, [r1, #10]
    msg.readerId.entityKind = static_cast<EntityKind_t>(*currentPos++);
 800f0d6:	7adc      	ldrb	r4, [r3, #11]
 800f0d8:	72cc      	strb	r4, [r1, #11]
    memcpy(dst, src, size);
 800f0da:	f832 4f0c 	ldrh.w	r4, [r2, #12]!
 800f0de:	7892      	ldrb	r2, [r2, #2]
 800f0e0:	818c      	strh	r4, [r1, #12]
 800f0e2:	738a      	strb	r2, [r1, #14]
    msg.writerId.entityKind = static_cast<EntityKind_t>(*currentPos++);
 800f0e4:	7bda      	ldrb	r2, [r3, #15]
 800f0e6:	73ca      	strb	r2, [r1, #15]
 800f0e8:	691a      	ldr	r2, [r3, #16]
    memcpy(dst, src, size);
 800f0ea:	610a      	str	r2, [r1, #16]
 800f0ec:	695b      	ldr	r3, [r3, #20]
}
 800f0ee:	bc30      	pop	{r4, r5}
    memcpy(dst, src, size);
 800f0f0:	614b      	str	r3, [r1, #20]
}
 800f0f2:	4770      	bx	lr

0800f0f4 <_ZN4rtps18deserializeMessageERKNS_21MessageProcessingInfoERNS_19SubmessageHeartbeatE>:


bool rtps::deserializeMessage(const MessageProcessingInfo& info, SubmessageHeartbeat& msg){
 800f0f4:	b430      	push	{r4, r5}
            return size - nextPos;
 800f0f6:	8883      	ldrh	r3, [r0, #4]
    if(info.getRemainingSize() < SubmessageHeartbeat::getRawSize()){
 800f0f8:	88c4      	ldrh	r4, [r0, #6]
 800f0fa:	1b1b      	subs	r3, r3, r4
 800f0fc:	b29b      	uxth	r3, r3
 800f0fe:	2b1f      	cmp	r3, #31
 800f100:	d802      	bhi.n	800f108 <_ZN4rtps18deserializeMessageERKNS_21MessageProcessingInfoERNS_19SubmessageHeartbeatE+0x14>
        return false;
 800f102:	2000      	movs	r0, #0
    doCopyAndMoveOn(reinterpret_cast<uint8_t*>(&msg.firstSN.low), currentPos, sizeof(msg.firstSN.low));
    doCopyAndMoveOn(reinterpret_cast<uint8_t*>(&msg.lastSN.high), currentPos, sizeof(msg.lastSN.high));
    doCopyAndMoveOn(reinterpret_cast<uint8_t*>(&msg.lastSN.low), currentPos, sizeof(msg.lastSN.low));
    doCopyAndMoveOn(reinterpret_cast<uint8_t*>(&msg.count.value), currentPos, sizeof(msg.count.value));
    return true;
}
 800f104:	bc30      	pop	{r4, r5}
 800f106:	4770      	bx	lr
            return &data[nextPos];
 800f108:	6803      	ldr	r3, [r0, #0]
 800f10a:	4602      	mov	r2, r0
    return true;
 800f10c:	2001      	movs	r0, #1
    header.submessageId = static_cast<SubmessageKind>(*currentPos++);
 800f10e:	5d1d      	ldrb	r5, [r3, r4]
 800f110:	441c      	add	r4, r3
 800f112:	700d      	strb	r5, [r1, #0]
    header.flags = *(currentPos++);
 800f114:	7863      	ldrb	r3, [r4, #1]
 800f116:	704b      	strb	r3, [r1, #1]
 800f118:	8863      	ldrh	r3, [r4, #2]
    memcpy(dst, src, size);
 800f11a:	804b      	strh	r3, [r1, #2]
 800f11c:	88d3      	ldrh	r3, [r2, #6]
 800f11e:	6812      	ldr	r2, [r2, #0]
 800f120:	4413      	add	r3, r2
    const uint8_t* currentPos = info.getPointerToCurrentPos() + SubmessageHeader::getRawSize();
 800f122:	461c      	mov	r4, r3
    memcpy(dst, src, size);
 800f124:	461a      	mov	r2, r3
 800f126:	f834 5f04 	ldrh.w	r5, [r4, #4]!
 800f12a:	78a4      	ldrb	r4, [r4, #2]
 800f12c:	808d      	strh	r5, [r1, #4]
 800f12e:	718c      	strb	r4, [r1, #6]
    msg.readerId.entityKind = static_cast<EntityKind_t>(*currentPos++);
 800f130:	79dc      	ldrb	r4, [r3, #7]
 800f132:	71cc      	strb	r4, [r1, #7]
    memcpy(dst, src, size);
 800f134:	f832 4f08 	ldrh.w	r4, [r2, #8]!
 800f138:	7892      	ldrb	r2, [r2, #2]
 800f13a:	810c      	strh	r4, [r1, #8]
 800f13c:	728a      	strb	r2, [r1, #10]
    msg.writerId.entityKind = static_cast<EntityKind_t>(*currentPos++);
 800f13e:	7ada      	ldrb	r2, [r3, #11]
 800f140:	72ca      	strb	r2, [r1, #11]
 800f142:	68da      	ldr	r2, [r3, #12]
    memcpy(dst, src, size);
 800f144:	60ca      	str	r2, [r1, #12]
 800f146:	691a      	ldr	r2, [r3, #16]
 800f148:	610a      	str	r2, [r1, #16]
 800f14a:	695a      	ldr	r2, [r3, #20]
 800f14c:	614a      	str	r2, [r1, #20]
 800f14e:	699a      	ldr	r2, [r3, #24]
 800f150:	618a      	str	r2, [r1, #24]
 800f152:	69db      	ldr	r3, [r3, #28]
 800f154:	61cb      	str	r3, [r1, #28]
}
 800f156:	bc30      	pop	{r4, r5}
 800f158:	4770      	bx	lr
 800f15a:	bf00      	nop

0800f15c <_ZN4rtps18deserializeMessageERKNS_21MessageProcessingInfoERNS_17SubmessageAckNackE>:

bool rtps::deserializeMessage(const MessageProcessingInfo& info, SubmessageAckNack& msg){
 800f15c:	b570      	push	{r4, r5, r6, lr}
    const DataSize_t remainingSizeAtBeginning = info.getRemainingSize();
 800f15e:	88c2      	ldrh	r2, [r0, #6]
            return size - nextPos;
 800f160:	8885      	ldrh	r5, [r0, #4]
 800f162:	1aad      	subs	r5, r5, r2
 800f164:	b2ad      	uxth	r5, r5
    if(remainingSizeAtBeginning < SubmessageAckNack::getRawSizeWithoutSNSet()){ // Size of SequenceNumberSet unknown
 800f166:	2d0f      	cmp	r5, #15
 800f168:	d801      	bhi.n	800f16e <_ZN4rtps18deserializeMessageERKNS_21MessageProcessingInfoERNS_17SubmessageAckNackE+0x12>
        return false;
 800f16a:	2000      	movs	r0, #0
    	}
    	doCopyAndMoveOn(reinterpret_cast<uint8_t*>(msg.readerSNState.bitMap.data()), currentPos, 4*((msg.readerSNState.numBits / 32) + 1));
    }
    doCopyAndMoveOn(reinterpret_cast<uint8_t*>(&msg.count.value), currentPos, sizeof(msg.count.value));
    return true;
}
 800f16c:	bd70      	pop	{r4, r5, r6, pc}
            return &data[nextPos];
 800f16e:	6803      	ldr	r3, [r0, #0]
 800f170:	460c      	mov	r4, r1
    header.submessageId = static_cast<SubmessageKind>(*currentPos++);
 800f172:	5c99      	ldrb	r1, [r3, r2]
 800f174:	4413      	add	r3, r2
 800f176:	7021      	strb	r1, [r4, #0]
    header.flags = *(currentPos++);
 800f178:	785a      	ldrb	r2, [r3, #1]
 800f17a:	7062      	strb	r2, [r4, #1]
 800f17c:	885b      	ldrh	r3, [r3, #2]
    memcpy(dst, src, size);
 800f17e:	8063      	strh	r3, [r4, #2]
 800f180:	88c2      	ldrh	r2, [r0, #6]
 800f182:	6803      	ldr	r3, [r0, #0]
 800f184:	4413      	add	r3, r2
    const uint8_t* currentPos = info.getPointerToCurrentPos() + SubmessageHeader::getRawSize();
 800f186:	461a      	mov	r2, r3
    memcpy(dst, src, size);
 800f188:	4619      	mov	r1, r3
    src += size;
 800f18a:	f103 0618 	add.w	r6, r3, #24
    memcpy(dst, src, size);
 800f18e:	f832 0f04 	ldrh.w	r0, [r2, #4]!
 800f192:	7892      	ldrb	r2, [r2, #2]
 800f194:	80a0      	strh	r0, [r4, #4]
 800f196:	71a2      	strb	r2, [r4, #6]
    msg.readerId.entityKind = static_cast<EntityKind_t>(*currentPos++);
 800f198:	79da      	ldrb	r2, [r3, #7]
 800f19a:	71e2      	strb	r2, [r4, #7]
    memcpy(dst, src, size);
 800f19c:	f831 0f08 	ldrh.w	r0, [r1, #8]!
 800f1a0:	788a      	ldrb	r2, [r1, #2]
 800f1a2:	8120      	strh	r0, [r4, #8]
 800f1a4:	72a2      	strb	r2, [r4, #10]
    msg.writerId.entityKind = static_cast<EntityKind_t>(*currentPos++);
 800f1a6:	7ada      	ldrb	r2, [r3, #11]
 800f1a8:	72e2      	strb	r2, [r4, #11]
 800f1aa:	68da      	ldr	r2, [r3, #12]
    memcpy(dst, src, size);
 800f1ac:	60e2      	str	r2, [r4, #12]
 800f1ae:	691a      	ldr	r2, [r3, #16]
 800f1b0:	6122      	str	r2, [r4, #16]
 800f1b2:	695a      	ldr	r2, [r3, #20]
 800f1b4:	6162      	str	r2, [r4, #20]
			if(set.numBits != 0){
 800f1b6:	b152      	cbz	r2, 800f1ce <_ZN4rtps18deserializeMessageERKNS_21MessageProcessingInfoERNS_17SubmessageAckNackE+0x72>
				bitMapSize = 4*((set.numBits/32) + 1);
 800f1b8:	0952      	lsrs	r2, r2, #5
 800f1ba:	3201      	adds	r2, #1
 800f1bc:	0092      	lsls	r2, r2, #2
				   + sizeof(SequenceNumber_t) + sizeof(uint32_t) + bitMapSize; // SequenceNumberSet
 800f1be:	f102 031c 	add.w	r3, r2, #28
    if(remainingSizeAtBeginning < SubmessageAckNack::getRawSize(msg.readerSNState)){
 800f1c2:	b29b      	uxth	r3, r3
 800f1c4:	429d      	cmp	r5, r3
 800f1c6:	d3d0      	bcc.n	800f16a <_ZN4rtps18deserializeMessageERKNS_21MessageProcessingInfoERNS_17SubmessageAckNackE+0xe>
    	if(4*((msg.readerSNState.numBits / 32) + 1) > msg.readerSNState.bitMap.size()){
 800f1c8:	2a08      	cmp	r2, #8
 800f1ca:	d906      	bls.n	800f1da <_ZN4rtps18deserializeMessageERKNS_21MessageProcessingInfoERNS_17SubmessageAckNackE+0x7e>
 800f1cc:	e7fe      	b.n	800f1cc <_ZN4rtps18deserializeMessageERKNS_21MessageProcessingInfoERNS_17SubmessageAckNackE+0x70>
    if(remainingSizeAtBeginning < SubmessageAckNack::getRawSize(msg.readerSNState)){
 800f1ce:	2d1b      	cmp	r5, #27
 800f1d0:	d9cb      	bls.n	800f16a <_ZN4rtps18deserializeMessageERKNS_21MessageProcessingInfoERNS_17SubmessageAckNackE+0xe>
 800f1d2:	6833      	ldr	r3, [r6, #0]
    return true;
 800f1d4:	2001      	movs	r0, #1
    memcpy(dst, src, size);
 800f1d6:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800f1d8:	bd70      	pop	{r4, r5, r6, pc}
    memcpy(dst, src, size);
 800f1da:	4631      	mov	r1, r6
 800f1dc:	f104 0018 	add.w	r0, r4, #24
    src += size;
 800f1e0:	4416      	add	r6, r2
    memcpy(dst, src, size);
 800f1e2:	f000 fbb6 	bl	800f952 <memcpy>
 800f1e6:	e7f4      	b.n	800f1d2 <_ZN4rtps18deserializeMessageERKNS_21MessageProcessingInfoERNS_17SubmessageAckNackE+0x76>

0800f1e8 <_ZN4rtps11PBufWrapperC1EP4pbuf>:

using rtps::PBufWrapper;

#define PBUF_WRAP_VERBOSE 0

PBufWrapper::PBufWrapper(pbuf* bufferToWrap) : firstElement(bufferToWrap){
 800f1e8:	2200      	movs	r2, #0
 800f1ea:	6001      	str	r1, [r0, #0]
 800f1ec:	8082      	strh	r2, [r0, #4]
    m_freeSpace = 0; // Assume it to be full
}
 800f1ee:	4770      	bx	lr

0800f1f0 <_ZN4rtps11PBufWrapperC1ERKS0_>:
        m_freeSpace = length;
    }
}

// TODO: Uses copy assignment. Improvement possible
PBufWrapper::PBufWrapper(const PBufWrapper& other) {
 800f1f0:	b538      	push	{r3, r4, r5, lr}
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	4604      	mov	r4, r0
 800f1f6:	8083      	strh	r3, [r0, #4]
 800f1f8:	6003      	str	r3, [r0, #0]
    }
    return *this;
}

void PBufWrapper::copySimpleMembersAndResetBuffer(const PBufWrapper& other){
    m_freeSpace = other.m_freeSpace;
 800f1fa:	888b      	ldrh	r3, [r1, #4]
    if(other.firstElement!= nullptr){
 800f1fc:	6808      	ldr	r0, [r1, #0]
    m_freeSpace = other.m_freeSpace;
 800f1fe:	80a3      	strh	r3, [r4, #4]
    if(other.firstElement!= nullptr){
 800f200:	b118      	cbz	r0, 800f20a <_ZN4rtps11PBufWrapperC1ERKS0_+0x1a>
 800f202:	460d      	mov	r5, r1
        pbuf_ref(other.firstElement);
 800f204:	f7f7 f81e 	bl	8006244 <pbuf_ref>
 800f208:	6828      	ldr	r0, [r5, #0]
    firstElement = other.firstElement;
 800f20a:	6020      	str	r0, [r4, #0]
}
 800f20c:	4620      	mov	r0, r4
 800f20e:	bd38      	pop	{r3, r4, r5, pc}

0800f210 <_ZN4rtps11PBufWrapperaSEOS0_>:
PBufWrapper& PBufWrapper::operator=(PBufWrapper&& other) noexcept{
 800f210:	b538      	push	{r3, r4, r5, lr}
 800f212:	4604      	mov	r4, r0
    m_freeSpace = other.m_freeSpace;
 800f214:	888b      	ldrh	r3, [r1, #4]

    if(firstElement != nullptr){
 800f216:	6800      	ldr	r0, [r0, #0]
PBufWrapper& PBufWrapper::operator=(PBufWrapper&& other) noexcept{
 800f218:	460d      	mov	r5, r1
    m_freeSpace = other.m_freeSpace;
 800f21a:	80a3      	strh	r3, [r4, #4]
    if(firstElement != nullptr){
 800f21c:	b118      	cbz	r0, 800f226 <_ZN4rtps11PBufWrapperaSEOS0_+0x16>
        pbuf_free(firstElement);
 800f21e:	f7f6 fe0d 	bl	8005e3c <pbuf_free>
        firstElement = nullptr;
 800f222:	2300      	movs	r3, #0
 800f224:	6023      	str	r3, [r4, #0]
    if(other.firstElement != nullptr){
 800f226:	682b      	ldr	r3, [r5, #0]
 800f228:	b113      	cbz	r3, 800f230 <_ZN4rtps11PBufWrapperaSEOS0_+0x20>
        other.firstElement = nullptr;
 800f22a:	2200      	movs	r2, #0
        firstElement = other.firstElement;
 800f22c:	6023      	str	r3, [r4, #0]
        other.firstElement = nullptr;
 800f22e:	602a      	str	r2, [r5, #0]
}
 800f230:	4620      	mov	r0, r4
 800f232:	bd38      	pop	{r3, r4, r5, pc}

0800f234 <_ZN4rtps11PBufWrapperD1Ev>:
    }
}

PBufWrapper::~PBufWrapper(){
 800f234:	b510      	push	{r4, lr}
 800f236:	4604      	mov	r4, r0
    if(firstElement != nullptr){
 800f238:	6800      	ldr	r0, [r0, #0]
 800f23a:	b108      	cbz	r0, 800f240 <_ZN4rtps11PBufWrapperD1Ev+0xc>
        pbuf_free(firstElement);
 800f23c:	f7f6 fdfe 	bl	8005e3c <pbuf_free>
    }
}
 800f240:	4620      	mov	r0, r4
 800f242:	bd10      	pop	{r4, pc}

0800f244 <_ZNK4rtps11PBufWrapper7isValidEv>:
    }
    return clone;
}

bool PBufWrapper::isValid() const{
    return firstElement != nullptr;
 800f244:	6800      	ldr	r0, [r0, #0]
}
 800f246:	3000      	adds	r0, #0
 800f248:	bf18      	it	ne
 800f24a:	2001      	movne	r0, #1
 800f24c:	4770      	bx	lr
 800f24e:	bf00      	nop

0800f250 <_ZNK4rtps11PBufWrapper9spaceUsedEv>:
rtps::DataSize_t PBufWrapper::spaceLeft() const{
    return m_freeSpace;
}

rtps::DataSize_t PBufWrapper::spaceUsed() const{
    if(firstElement == nullptr){
 800f250:	6803      	ldr	r3, [r0, #0]
 800f252:	b123      	cbz	r3, 800f25e <_ZNK4rtps11PBufWrapper9spaceUsedEv+0xe>
        return 0;
    }

    return firstElement->tot_len - m_freeSpace;
 800f254:	891b      	ldrh	r3, [r3, #8]
 800f256:	8880      	ldrh	r0, [r0, #4]
 800f258:	1a18      	subs	r0, r3, r0
 800f25a:	b280      	uxth	r0, r0
 800f25c:	4770      	bx	lr
        return 0;
 800f25e:	4618      	mov	r0, r3
}
 800f260:	4770      	bx	lr
 800f262:	bf00      	nop

0800f264 <_ZN4rtps11PBufWrapper6appendEPKht>:

bool PBufWrapper::append(const uint8_t* data, DataSize_t length){
    if(data == nullptr){
 800f264:	b1a9      	cbz	r1, 800f292 <_ZN4rtps11PBufWrapper6appendEPKht+0x2e>
bool PBufWrapper::append(const uint8_t* data, DataSize_t length){
 800f266:	b570      	push	{r4, r5, r6, lr}
        return false;
    }

    err_t err = pbuf_take_at(firstElement, data, length, spaceUsed());
 800f268:	6806      	ldr	r6, [r0, #0]
    if(firstElement == nullptr){
 800f26a:	b186      	cbz	r6, 800f28e <_ZN4rtps11PBufWrapper6appendEPKht+0x2a>
    return firstElement->tot_len - m_freeSpace;
 800f26c:	8933      	ldrh	r3, [r6, #8]
 800f26e:	8884      	ldrh	r4, [r0, #4]
 800f270:	1b1b      	subs	r3, r3, r4
 800f272:	b29b      	uxth	r3, r3
 800f274:	4604      	mov	r4, r0
    err_t err = pbuf_take_at(firstElement, data, length, spaceUsed());
 800f276:	4630      	mov	r0, r6
 800f278:	4615      	mov	r5, r2
 800f27a:	f7f7 f9c3 	bl	8006604 <pbuf_take_at>
    if(err != ERR_OK){
 800f27e:	b920      	cbnz	r0, 800f28a <_ZN4rtps11PBufWrapper6appendEPKht+0x26>
        return false;
    }

    m_freeSpace -= length;
 800f280:	88a2      	ldrh	r2, [r4, #4]
    return true;
 800f282:	2001      	movs	r0, #1
    m_freeSpace -= length;
 800f284:	1b55      	subs	r5, r2, r5
 800f286:	80a5      	strh	r5, [r4, #4]
}
 800f288:	bd70      	pop	{r4, r5, r6, pc}
        return false;
 800f28a:	2000      	movs	r0, #0
}
 800f28c:	bd70      	pop	{r4, r5, r6, pc}
        return 0;
 800f28e:	4633      	mov	r3, r6
 800f290:	e7f0      	b.n	800f274 <_ZN4rtps11PBufWrapper6appendEPKht+0x10>
        return false;
 800f292:	2000      	movs	r0, #0
}
 800f294:	4770      	bx	lr
 800f296:	bf00      	nop

0800f298 <_ZN4rtps11PBufWrapper6appendEOS0_>:

void PBufWrapper::append(PBufWrapper&& other){
    if(this == &other){
 800f298:	4288      	cmp	r0, r1
 800f29a:	d013      	beq.n	800f2c4 <_ZN4rtps11PBufWrapper6appendEOS0_+0x2c>
        return;
    }
    if(this->firstElement == nullptr){
 800f29c:	6802      	ldr	r2, [r0, #0]
void PBufWrapper::append(PBufWrapper&& other){
 800f29e:	b570      	push	{r4, r5, r6, lr}
 800f2a0:	888e      	ldrh	r6, [r1, #4]
 800f2a2:	680d      	ldr	r5, [r1, #0]
    if(this->firstElement == nullptr){
 800f2a4:	b142      	cbz	r2, 800f2b8 <_ZN4rtps11PBufWrapper6appendEOS0_+0x20>
 800f2a6:	460c      	mov	r4, r1
        *this = std::move(other);
        return;
    }

    m_freeSpace = other.m_freeSpace;
 800f2a8:	8086      	strh	r6, [r0, #4]
    pbuf* const newElement = other.firstElement;
    pbuf_cat(this->firstElement, newElement);
 800f2aa:	4629      	mov	r1, r5
 800f2ac:	4610      	mov	r0, r2
 800f2ae:	f7f6 ffe7 	bl	8006280 <pbuf_cat>

    other.firstElement = nullptr;
 800f2b2:	2300      	movs	r3, #0
 800f2b4:	6023      	str	r3, [r4, #0]

}
 800f2b6:	bd70      	pop	{r4, r5, r6, pc}
    m_freeSpace = other.m_freeSpace;
 800f2b8:	8086      	strh	r6, [r0, #4]
    if(other.firstElement != nullptr){
 800f2ba:	2d00      	cmp	r5, #0
 800f2bc:	d0fb      	beq.n	800f2b6 <_ZN4rtps11PBufWrapper6appendEOS0_+0x1e>
        firstElement = other.firstElement;
 800f2be:	6005      	str	r5, [r0, #0]
        other.firstElement = nullptr;
 800f2c0:	600a      	str	r2, [r1, #0]
}
 800f2c2:	bd70      	pop	{r4, r5, r6, pc}
 800f2c4:	4770      	bx	lr
 800f2c6:	bf00      	nop

0800f2c8 <_ZN4rtps11PBufWrapper7reserveEt>:

bool PBufWrapper::reserve(DataSize_t length) {
 800f2c8:	b538      	push	{r3, r4, r5, lr}
    auto additionalAllocation = length - m_freeSpace;
 800f2ca:	8883      	ldrh	r3, [r0, #4]
 800f2cc:	1ac9      	subs	r1, r1, r3
    if(additionalAllocation <= 0){
 800f2ce:	2900      	cmp	r1, #0
 800f2d0:	dd12      	ble.n	800f2f8 <_ZN4rtps11PBufWrapper7reserveEt+0x30>
        return true;
    }

    return increaseSizeBy(additionalAllocation);
 800f2d2:	b28c      	uxth	r4, r1
 800f2d4:	4605      	mov	r5, r0
        m_freeSpace = firstElement->tot_len;
    }
}

bool PBufWrapper::increaseSizeBy(uint16_t length){
    pbuf* allocation = pbuf_alloc(m_layer, length, m_type);
 800f2d6:	2203      	movs	r2, #3
 800f2d8:	2000      	movs	r0, #0
 800f2da:	4621      	mov	r1, r4
 800f2dc:	f7f6 fe22 	bl	8005f24 <pbuf_alloc>
    if(allocation == nullptr){
 800f2e0:	b148      	cbz	r0, 800f2f6 <_ZN4rtps11PBufWrapper7reserveEt+0x2e>
        return false;
    }

    m_freeSpace += length;
 800f2e2:	88a9      	ldrh	r1, [r5, #4]

    if(firstElement == nullptr){
 800f2e4:	682b      	ldr	r3, [r5, #0]
    m_freeSpace += length;
 800f2e6:	440c      	add	r4, r1
 800f2e8:	80ac      	strh	r4, [r5, #4]
    if(firstElement == nullptr){
 800f2ea:	b13b      	cbz	r3, 800f2fc <_ZN4rtps11PBufWrapper7reserveEt+0x34>
        firstElement = allocation;
    }else{
        pbuf_cat(firstElement, allocation);
 800f2ec:	4601      	mov	r1, r0
 800f2ee:	4618      	mov	r0, r3
 800f2f0:	f7f6 ffc6 	bl	8006280 <pbuf_cat>
    }

    return true;
 800f2f4:	2001      	movs	r0, #1
}
 800f2f6:	bd38      	pop	{r3, r4, r5, pc}
        return true;
 800f2f8:	2001      	movs	r0, #1
}
 800f2fa:	bd38      	pop	{r3, r4, r5, pc}
        firstElement = allocation;
 800f2fc:	6028      	str	r0, [r5, #0]
    return true;
 800f2fe:	2001      	movs	r0, #1
}
 800f300:	bd38      	pop	{r3, r4, r5, pc}
 800f302:	bf00      	nop

0800f304 <_ZNK4rtps18SimpleHistoryCache6isFullEv>:
        incrementIterator(m_tail);
    }
}

void SimpleHistoryCache::incrementIterator(uint16_t& iterator) const{
    ++iterator;
 800f304:	f8b0 30dc 	ldrh.w	r3, [r0, #220]	; 0xdc
    return it == m_tail;
 800f308:	f8b0 00de 	ldrh.w	r0, [r0, #222]	; 0xde
    ++iterator;
 800f30c:	3301      	adds	r3, #1
 800f30e:	b29b      	uxth	r3, r3
    if(iterator >= m_buffer.size()){
        iterator = 0;
 800f310:	2b0b      	cmp	r3, #11
 800f312:	bf28      	it	cs
 800f314:	2300      	movcs	r3, #0
}
 800f316:	1ac0      	subs	r0, r0, r3
 800f318:	fab0 f080 	clz	r0, r0
 800f31c:	0940      	lsrs	r0, r0, #5
 800f31e:	4770      	bx	lr

0800f320 <_ZNK4rtps18SimpleHistoryCache12getSeqNumMinEv>:
    if(m_head == m_tail){
 800f320:	f8b0 30de 	ldrh.w	r3, [r0, #222]	; 0xde
 800f324:	f8b0 20dc 	ldrh.w	r2, [r0, #220]	; 0xdc
 800f328:	429a      	cmp	r2, r3
 800f32a:	d005      	beq.n	800f338 <_ZNK4rtps18SimpleHistoryCache12getSeqNumMinEv+0x18>
        return m_buffer[m_tail].sequenceNumber;
 800f32c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800f330:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800f334:	3004      	adds	r0, #4
 800f336:	4770      	bx	lr
        return SEQUENCENUMBER_UNKNOWN;
 800f338:	4800      	ldr	r0, [pc, #0]	; (800f33c <_ZNK4rtps18SimpleHistoryCache12getSeqNumMinEv+0x1c>)
}
 800f33a:	4770      	bx	lr
 800f33c:	08010dd8 	.word	0x08010dd8

0800f340 <_ZNK4rtps18SimpleHistoryCache12getSeqNumMaxEv>:
    if(m_head == m_tail){
 800f340:	f8b0 20dc 	ldrh.w	r2, [r0, #220]	; 0xdc
 800f344:	f8b0 30de 	ldrh.w	r3, [r0, #222]	; 0xde
 800f348:	429a      	cmp	r2, r3
        return m_lastUsedSequenceNumber;
 800f34a:	bf14      	ite	ne
 800f34c:	30e0      	addne	r0, #224	; 0xe0
        return SEQUENCENUMBER_UNKNOWN;
 800f34e:	4801      	ldreq	r0, [pc, #4]	; (800f354 <_ZNK4rtps18SimpleHistoryCache12getSeqNumMaxEv+0x14>)
}
 800f350:	4770      	bx	lr
 800f352:	bf00      	nop
 800f354:	08010dd8 	.word	0x08010dd8

0800f358 <_ZN4rtps18SimpleHistoryCache9addChangeEPKht>:
const rtps::CacheChange* SimpleHistoryCache::addChange(const uint8_t* data, DataSize_t size){
 800f358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f35a:	4615      	mov	r5, r2
 800f35c:	b087      	sub	sp, #28
 800f35e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f362:	2300      	movs	r3, #0
 800f364:	460e      	mov	r6, r1
 800f366:	4604      	mov	r4, r0
 800f368:	9202      	str	r2, [sp, #8]
    change.kind = ChangeKind_t::ALIVE;
 800f36a:	2201      	movs	r2, #1
    change.data.reserve(size);
 800f36c:	4629      	mov	r1, r5
 800f36e:	a804      	add	r0, sp, #16
 800f370:	f8ad 3014 	strh.w	r3, [sp, #20]
    change.kind = ChangeKind_t::ALIVE;
 800f374:	f88d 2004 	strb.w	r2, [sp, #4]
 800f378:	e9cd 3303 	strd	r3, r3, [sp, #12]
    change.data.reserve(size);
 800f37c:	f7ff ffa4 	bl	800f2c8 <_ZN4rtps11PBufWrapper7reserveEt>
    change.data.append(data, size);
 800f380:	462a      	mov	r2, r5
 800f382:	4631      	mov	r1, r6
 800f384:	a804      	add	r0, sp, #16
 800f386:	f7ff ff6d 	bl	800f264 <_ZN4rtps11PBufWrapper6appendEPKht>
            ++low;
 800f38a:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
 800f38e:	3301      	adds	r3, #1
 800f390:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
            if(low == 0){
 800f394:	b923      	cbnz	r3, 800f3a0 <_ZN4rtps18SimpleHistoryCache9addChangeEPKht+0x48>
                ++high;
 800f396:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800f39a:	3301      	adds	r3, #1
 800f39c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
    CacheChange* place = &m_buffer[m_head];
 800f3a0:	f8b4 30dc 	ldrh.w	r3, [r4, #220]	; 0xdc
    change.sequenceNumber = ++m_lastUsedSequenceNumber;
 800f3a4:	f104 01e0 	add.w	r1, r4, #224	; 0xe0
 800f3a8:	ad02      	add	r5, sp, #8
 800f3aa:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    ++iterator;
 800f3ae:	3301      	adds	r3, #1
 800f3b0:	b29b      	uxth	r3, r3
 800f3b2:	0092      	lsls	r2, r2, #2
    if(iterator >= m_buffer.size()){
 800f3b4:	2b0a      	cmp	r3, #10
      { return const_cast<_Tp&>(__t[__n]); }
 800f3b6:	eb04 0602 	add.w	r6, r4, r2
    change.sequenceNumber = ++m_lastUsedSequenceNumber;
 800f3ba:	c903      	ldmia	r1, {r0, r1}
    ++iterator;
 800f3bc:	f8a4 30dc 	strh.w	r3, [r4, #220]	; 0xdc
    change.sequenceNumber = ++m_lastUsedSequenceNumber;
 800f3c0:	e885 0003 	stmia.w	r5, {r0, r1}
    if(iterator >= m_buffer.size()){
 800f3c4:	d817      	bhi.n	800f3f6 <_ZN4rtps18SimpleHistoryCache9addChangeEPKht+0x9e>
    if(m_head == m_tail){
 800f3c6:	f8b4 10de 	ldrh.w	r1, [r4, #222]	; 0xde
 800f3ca:	428b      	cmp	r3, r1
 800f3cc:	d01c      	beq.n	800f408 <_ZN4rtps18SimpleHistoryCache9addChangeEPKht+0xb0>
    struct CacheChange{
 800f3ce:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800f3d2:	f102 070c 	add.w	r7, r2, #12
 800f3d6:	1d33      	adds	r3, r6, #4
 800f3d8:	54a1      	strb	r1, [r4, r2]
 800f3da:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f3de:	e883 0003 	stmia.w	r3, {r0, r1}
 800f3e2:	a904      	add	r1, sp, #16
 800f3e4:	19e0      	adds	r0, r4, r7
 800f3e6:	f7ff ff13 	bl	800f210 <_ZN4rtps11PBufWrapperaSEOS0_>
 800f3ea:	a804      	add	r0, sp, #16
 800f3ec:	f7ff ff22 	bl	800f234 <_ZN4rtps11PBufWrapperD1Ev>
}
 800f3f0:	4630      	mov	r0, r6
 800f3f2:	b007      	add	sp, #28
 800f3f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f3f6:	2100      	movs	r1, #0
    if(m_head == m_tail){
 800f3f8:	f8b4 30de 	ldrh.w	r3, [r4, #222]	; 0xde
 800f3fc:	f8a4 10dc 	strh.w	r1, [r4, #220]	; 0xdc
 800f400:	2b00      	cmp	r3, #0
 800f402:	d1e4      	bne.n	800f3ce <_ZN4rtps18SimpleHistoryCache9addChangeEPKht+0x76>
    ++iterator;
 800f404:	2301      	movs	r3, #1
 800f406:	e004      	b.n	800f412 <_ZN4rtps18SimpleHistoryCache9addChangeEPKht+0xba>
 800f408:	3301      	adds	r3, #1
 800f40a:	b29b      	uxth	r3, r3
    if(iterator >= m_buffer.size()){
 800f40c:	2b0b      	cmp	r3, #11
 800f40e:	d100      	bne.n	800f412 <_ZN4rtps18SimpleHistoryCache9addChangeEPKht+0xba>
        iterator = 0;
 800f410:	2300      	movs	r3, #0
 800f412:	f8a4 30de 	strh.w	r3, [r4, #222]	; 0xde
 800f416:	e7da      	b.n	800f3ce <_ZN4rtps18SimpleHistoryCache9addChangeEPKht+0x76>

0800f418 <_ZNK4rtps18SimpleHistoryCache13getChangeBySNENS_16SequenceNumber_tE>:
const rtps::CacheChange* SimpleHistoryCache::getChangeBySN(SequenceNumber_t sn) const{
 800f418:	b470      	push	{r4, r5, r6}
    if(m_head == m_tail){
 800f41a:	f8b0 30de 	ldrh.w	r3, [r0, #222]	; 0xde
const rtps::CacheChange* SimpleHistoryCache::getChangeBySN(SequenceNumber_t sn) const{
 800f41e:	b083      	sub	sp, #12
    if(m_head == m_tail){
 800f420:	f8b0 50dc 	ldrh.w	r5, [r0, #220]	; 0xdc
const rtps::CacheChange* SimpleHistoryCache::getChangeBySN(SequenceNumber_t sn) const{
 800f424:	ac02      	add	r4, sp, #8
    if(m_head == m_tail){
 800f426:	429d      	cmp	r5, r3
const rtps::CacheChange* SimpleHistoryCache::getChangeBySN(SequenceNumber_t sn) const{
 800f428:	e904 0006 	stmdb	r4, {r1, r2}
 800f42c:	e9dd 4200 	ldrd	r4, r2, [sp]
    if(m_head == m_tail){
 800f430:	d029      	beq.n	800f486 <_ZNK4rtps18SimpleHistoryCache13getChangeBySNENS_16SequenceNumber_tE+0x6e>
        return m_buffer[m_tail].sequenceNumber;
 800f432:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800f436:	0089      	lsls	r1, r1, #2
 800f438:	3104      	adds	r1, #4
    SequenceNumber_t minSN = getSeqNumMin();
 800f43a:	5845      	ldr	r5, [r0, r1]
        return m_buffer[m_tail].sequenceNumber;
 800f43c:	1846      	adds	r6, r0, r1
            return high < other.high || (high == other.high && low < other.low);
 800f43e:	42a5      	cmp	r5, r4
    SequenceNumber_t minSN = getSeqNumMin();
 800f440:	6871      	ldr	r1, [r6, #4]
 800f442:	dc1c      	bgt.n	800f47e <_ZNK4rtps18SimpleHistoryCache13getChangeBySNENS_16SequenceNumber_tE+0x66>
 800f444:	4291      	cmp	r1, r2
 800f446:	d901      	bls.n	800f44c <_ZNK4rtps18SimpleHistoryCache13getChangeBySNENS_16SequenceNumber_tE+0x34>
 800f448:	42a5      	cmp	r5, r4
 800f44a:	d018      	beq.n	800f47e <_ZNK4rtps18SimpleHistoryCache13getChangeBySNENS_16SequenceNumber_tE+0x66>
        return m_lastUsedSequenceNumber;
 800f44c:	f100 06e0 	add.w	r6, r0, #224	; 0xe0
 800f450:	f8d0 50e0 	ldr.w	r5, [r0, #224]	; 0xe0
 800f454:	42ac      	cmp	r4, r5
 800f456:	dc12      	bgt.n	800f47e <_ZNK4rtps18SimpleHistoryCache13getChangeBySNENS_16SequenceNumber_tE+0x66>
 800f458:	d00e      	beq.n	800f478 <_ZNK4rtps18SimpleHistoryCache13getChangeBySNENS_16SequenceNumber_tE+0x60>
    uint16_t pos = m_tail + static_cast<uint16_t>(sn.low - minSN.low);
 800f45a:	4413      	add	r3, r2
 800f45c:	1a5b      	subs	r3, r3, r1
 800f45e:	b29b      	uxth	r3, r3
    if(pos >= m_buffer.size()){
 800f460:	2b0a      	cmp	r3, #10
 800f462:	d806      	bhi.n	800f472 <_ZNK4rtps18SimpleHistoryCache13getChangeBySNENS_16SequenceNumber_tE+0x5a>
 800f464:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800f468:	eb00 0083 	add.w	r0, r0, r3, lsl #2
}
 800f46c:	b003      	add	sp, #12
 800f46e:	bc70      	pop	{r4, r5, r6}
 800f470:	4770      	bx	lr
        pos -= m_buffer.size();
 800f472:	3b0b      	subs	r3, #11
 800f474:	b29b      	uxth	r3, r3
 800f476:	e7f5      	b.n	800f464 <_ZNK4rtps18SimpleHistoryCache13getChangeBySNENS_16SequenceNumber_tE+0x4c>
 800f478:	6874      	ldr	r4, [r6, #4]
 800f47a:	42a2      	cmp	r2, r4
 800f47c:	d9ed      	bls.n	800f45a <_ZNK4rtps18SimpleHistoryCache13getChangeBySNENS_16SequenceNumber_tE+0x42>
        return nullptr;
 800f47e:	2000      	movs	r0, #0
}
 800f480:	b003      	add	sp, #12
 800f482:	bc70      	pop	{r4, r5, r6}
 800f484:	4770      	bx	lr
 800f486:	1c61      	adds	r1, r4, #1
 800f488:	dbf9      	blt.n	800f47e <_ZNK4rtps18SimpleHistoryCache13getChangeBySNENS_16SequenceNumber_tE+0x66>
 800f48a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    SequenceNumber_t minSN = getSeqNumMin();
 800f48e:	2100      	movs	r1, #0
        return SEQUENCENUMBER_UNKNOWN;
 800f490:	4e00      	ldr	r6, [pc, #0]	; (800f494 <_ZNK4rtps18SimpleHistoryCache13getChangeBySNENS_16SequenceNumber_tE+0x7c>)
 800f492:	e7df      	b.n	800f454 <_ZNK4rtps18SimpleHistoryCache13getChangeBySNENS_16SequenceNumber_tE+0x3c>
 800f494:	08010dd8 	.word	0x08010dd8

0800f498 <ucdr_check_buffer>:
 800f498:	7d03      	ldrb	r3, [r0, #20]
 800f49a:	b983      	cbnz	r3, 800f4be <ucdr_check_buffer+0x26>
 800f49c:	b410      	push	{r4}
 800f49e:	e9d0 4201 	ldrd	r4, r2, [r0, #4]
 800f4a2:	440a      	add	r2, r1
 800f4a4:	4294      	cmp	r4, r2
 800f4a6:	d205      	bcs.n	800f4b4 <ucdr_check_buffer+0x1c>
 800f4a8:	2201      	movs	r2, #1
 800f4aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f4ae:	7502      	strb	r2, [r0, #20]
 800f4b0:	4618      	mov	r0, r3
 800f4b2:	4770      	bx	lr
 800f4b4:	2301      	movs	r3, #1
 800f4b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	4770      	bx	lr
 800f4be:	2300      	movs	r3, #0
 800f4c0:	4618      	mov	r0, r3
 800f4c2:	4770      	bx	lr

0800f4c4 <ucdr_init_buffer>:
 800f4c4:	b410      	push	{r4}
 800f4c6:	2300      	movs	r3, #0
 800f4c8:	2401      	movs	r4, #1
 800f4ca:	440a      	add	r2, r1
 800f4cc:	6001      	str	r1, [r0, #0]
 800f4ce:	7304      	strb	r4, [r0, #12]
 800f4d0:	6103      	str	r3, [r0, #16]
 800f4d2:	7503      	strb	r3, [r0, #20]
 800f4d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f4d8:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800f4dc:	4770      	bx	lr
 800f4de:	bf00      	nop

0800f4e0 <ucdr_align_to>:
 800f4e0:	6902      	ldr	r2, [r0, #16]
 800f4e2:	6883      	ldr	r3, [r0, #8]
 800f4e4:	4291      	cmp	r1, r2
 800f4e6:	d912      	bls.n	800f50e <ucdr_align_to+0x2e>
 800f4e8:	1e4a      	subs	r2, r1, #1
 800f4ea:	6101      	str	r1, [r0, #16]
 800f4ec:	b430      	push	{r4, r5}
 800f4ee:	6804      	ldr	r4, [r0, #0]
 800f4f0:	1b1d      	subs	r5, r3, r4
 800f4f2:	fbb5 f4f1 	udiv	r4, r5, r1
 800f4f6:	fb01 5414 	mls	r4, r1, r4, r5
 800f4fa:	1b0c      	subs	r4, r1, r4
 800f4fc:	4022      	ands	r2, r4
 800f4fe:	4413      	add	r3, r2
 800f500:	6842      	ldr	r2, [r0, #4]
 800f502:	429a      	cmp	r2, r3
 800f504:	6083      	str	r3, [r0, #8]
 800f506:	bc30      	pop	{r4, r5}
 800f508:	bf38      	it	cc
 800f50a:	6082      	strcc	r2, [r0, #8]
 800f50c:	4770      	bx	lr
 800f50e:	6842      	ldr	r2, [r0, #4]
 800f510:	6083      	str	r3, [r0, #8]
 800f512:	429a      	cmp	r2, r3
 800f514:	6101      	str	r1, [r0, #16]
 800f516:	bf38      	it	cc
 800f518:	6082      	strcc	r2, [r0, #8]
 800f51a:	4770      	bx	lr

0800f51c <ucdr_buffer_alignment>:
 800f51c:	6903      	ldr	r3, [r0, #16]
 800f51e:	428b      	cmp	r3, r1
 800f520:	d20b      	bcs.n	800f53a <ucdr_buffer_alignment+0x1e>
 800f522:	6883      	ldr	r3, [r0, #8]
 800f524:	1e4a      	subs	r2, r1, #1
 800f526:	6800      	ldr	r0, [r0, #0]
 800f528:	1a1b      	subs	r3, r3, r0
 800f52a:	fbb3 f0f1 	udiv	r0, r3, r1
 800f52e:	fb01 3010 	mls	r0, r1, r0, r3
 800f532:	1a09      	subs	r1, r1, r0
 800f534:	ea01 0002 	and.w	r0, r1, r2
 800f538:	4770      	bx	lr
 800f53a:	2000      	movs	r0, #0
 800f53c:	4770      	bx	lr
 800f53e:	bf00      	nop

0800f540 <ucdr_buffer_length>:
 800f540:	6882      	ldr	r2, [r0, #8]
 800f542:	6800      	ldr	r0, [r0, #0]
 800f544:	1a10      	subs	r0, r2, r0
 800f546:	4770      	bx	lr

0800f548 <ucdr_buffer_remaining>:
 800f548:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800f54c:	1a10      	subs	r0, r2, r0
 800f54e:	4770      	bx	lr

0800f550 <ucdr_serialize_array_char>:
 800f550:	b570      	push	{r4, r5, r6, lr}
 800f552:	460e      	mov	r6, r1
 800f554:	4611      	mov	r1, r2
 800f556:	4615      	mov	r5, r2
 800f558:	4604      	mov	r4, r0
 800f55a:	f7ff ff9d 	bl	800f498 <ucdr_check_buffer>
 800f55e:	b148      	cbz	r0, 800f574 <ucdr_serialize_array_char+0x24>
 800f560:	462a      	mov	r2, r5
 800f562:	4631      	mov	r1, r6
 800f564:	68a0      	ldr	r0, [r4, #8]
 800f566:	f000 f9f4 	bl	800f952 <memcpy>
 800f56a:	68a3      	ldr	r3, [r4, #8]
 800f56c:	2201      	movs	r2, #1
 800f56e:	441d      	add	r5, r3
 800f570:	6122      	str	r2, [r4, #16]
 800f572:	60a5      	str	r5, [r4, #8]
 800f574:	7d20      	ldrb	r0, [r4, #20]
 800f576:	f080 0001 	eor.w	r0, r0, #1
 800f57a:	bd70      	pop	{r4, r5, r6, pc}

0800f57c <ucdr_serialize_array_uint8_t>:
 800f57c:	b570      	push	{r4, r5, r6, lr}
 800f57e:	460e      	mov	r6, r1
 800f580:	4611      	mov	r1, r2
 800f582:	4615      	mov	r5, r2
 800f584:	4604      	mov	r4, r0
 800f586:	f7ff ff87 	bl	800f498 <ucdr_check_buffer>
 800f58a:	b148      	cbz	r0, 800f5a0 <ucdr_serialize_array_uint8_t+0x24>
 800f58c:	462a      	mov	r2, r5
 800f58e:	4631      	mov	r1, r6
 800f590:	68a0      	ldr	r0, [r4, #8]
 800f592:	f000 f9de 	bl	800f952 <memcpy>
 800f596:	68a3      	ldr	r3, [r4, #8]
 800f598:	2201      	movs	r2, #1
 800f59a:	441d      	add	r5, r3
 800f59c:	6122      	str	r2, [r4, #16]
 800f59e:	60a5      	str	r5, [r4, #8]
 800f5a0:	7d20      	ldrb	r0, [r4, #20]
 800f5a2:	f080 0001 	eor.w	r0, r0, #1
 800f5a6:	bd70      	pop	{r4, r5, r6, pc}

0800f5a8 <ucdr_deserialize_array_char>:
 800f5a8:	b570      	push	{r4, r5, r6, lr}
 800f5aa:	460e      	mov	r6, r1
 800f5ac:	4611      	mov	r1, r2
 800f5ae:	4615      	mov	r5, r2
 800f5b0:	4604      	mov	r4, r0
 800f5b2:	f7ff ff71 	bl	800f498 <ucdr_check_buffer>
 800f5b6:	b148      	cbz	r0, 800f5cc <ucdr_deserialize_array_char+0x24>
 800f5b8:	462a      	mov	r2, r5
 800f5ba:	4630      	mov	r0, r6
 800f5bc:	68a1      	ldr	r1, [r4, #8]
 800f5be:	f000 f9c8 	bl	800f952 <memcpy>
 800f5c2:	68a3      	ldr	r3, [r4, #8]
 800f5c4:	2201      	movs	r2, #1
 800f5c6:	441d      	add	r5, r3
 800f5c8:	6122      	str	r2, [r4, #16]
 800f5ca:	60a5      	str	r5, [r4, #8]
 800f5cc:	7d20      	ldrb	r0, [r4, #20]
 800f5ce:	f080 0001 	eor.w	r0, r0, #1
 800f5d2:	bd70      	pop	{r4, r5, r6, pc}

0800f5d4 <ucdr_deserialize_array_uint8_t>:
 800f5d4:	b570      	push	{r4, r5, r6, lr}
 800f5d6:	460e      	mov	r6, r1
 800f5d8:	4611      	mov	r1, r2
 800f5da:	4615      	mov	r5, r2
 800f5dc:	4604      	mov	r4, r0
 800f5de:	f7ff ff5b 	bl	800f498 <ucdr_check_buffer>
 800f5e2:	b148      	cbz	r0, 800f5f8 <ucdr_deserialize_array_uint8_t+0x24>
 800f5e4:	462a      	mov	r2, r5
 800f5e6:	4630      	mov	r0, r6
 800f5e8:	68a1      	ldr	r1, [r4, #8]
 800f5ea:	f000 f9b2 	bl	800f952 <memcpy>
 800f5ee:	68a3      	ldr	r3, [r4, #8]
 800f5f0:	2201      	movs	r2, #1
 800f5f2:	441d      	add	r5, r3
 800f5f4:	6122      	str	r2, [r4, #16]
 800f5f6:	60a5      	str	r5, [r4, #8]
 800f5f8:	7d20      	ldrb	r0, [r4, #20]
 800f5fa:	f080 0001 	eor.w	r0, r0, #1
 800f5fe:	bd70      	pop	{r4, r5, r6, pc}

0800f600 <ucdr_serialize_uint8_t>:
 800f600:	b538      	push	{r3, r4, r5, lr}
 800f602:	460d      	mov	r5, r1
 800f604:	2101      	movs	r1, #1
 800f606:	4604      	mov	r4, r0
 800f608:	f7ff ff46 	bl	800f498 <ucdr_check_buffer>
 800f60c:	b130      	cbz	r0, 800f61c <ucdr_serialize_uint8_t+0x1c>
 800f60e:	68a3      	ldr	r3, [r4, #8]
 800f610:	2201      	movs	r2, #1
 800f612:	701d      	strb	r5, [r3, #0]
 800f614:	68a3      	ldr	r3, [r4, #8]
 800f616:	6122      	str	r2, [r4, #16]
 800f618:	4413      	add	r3, r2
 800f61a:	60a3      	str	r3, [r4, #8]
 800f61c:	7d20      	ldrb	r0, [r4, #20]
 800f61e:	f080 0001 	eor.w	r0, r0, #1
 800f622:	bd38      	pop	{r3, r4, r5, pc}

0800f624 <ucdr_serialize_uint16_t>:
 800f624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f626:	460e      	mov	r6, r1
 800f628:	2102      	movs	r1, #2
 800f62a:	4604      	mov	r4, r0
 800f62c:	7b07      	ldrb	r7, [r0, #12]
 800f62e:	f7ff ff75 	bl	800f51c <ucdr_buffer_alignment>
 800f632:	4605      	mov	r5, r0
 800f634:	4620      	mov	r0, r4
 800f636:	1ca9      	adds	r1, r5, #2
 800f638:	f7ff ff2e 	bl	800f498 <ucdr_check_buffer>
 800f63c:	b180      	cbz	r0, 800f660 <ucdr_serialize_uint16_t+0x3c>
 800f63e:	4a0b      	ldr	r2, [pc, #44]	; (800f66c <ucdr_serialize_uint16_t+0x48>)
 800f640:	68a3      	ldr	r3, [r4, #8]
 800f642:	7812      	ldrb	r2, [r2, #0]
 800f644:	1959      	adds	r1, r3, r5
 800f646:	42ba      	cmp	r2, r7
 800f648:	60a1      	str	r1, [r4, #8]
 800f64a:	d00d      	beq.n	800f668 <ucdr_serialize_uint16_t+0x44>
 800f64c:	f3c6 2207 	ubfx	r2, r6, #8, #8
 800f650:	555a      	strb	r2, [r3, r5]
 800f652:	68a3      	ldr	r3, [r4, #8]
 800f654:	705e      	strb	r6, [r3, #1]
 800f656:	68a3      	ldr	r3, [r4, #8]
 800f658:	2202      	movs	r2, #2
 800f65a:	4413      	add	r3, r2
 800f65c:	6122      	str	r2, [r4, #16]
 800f65e:	60a3      	str	r3, [r4, #8]
 800f660:	7d20      	ldrb	r0, [r4, #20]
 800f662:	f080 0001 	eor.w	r0, r0, #1
 800f666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f668:	535e      	strh	r6, [r3, r5]
 800f66a:	e7f4      	b.n	800f656 <ucdr_serialize_uint16_t+0x32>
 800f66c:	08010de0 	.word	0x08010de0

0800f670 <ucdr_serialize_uint32_t>:
 800f670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f672:	460e      	mov	r6, r1
 800f674:	2104      	movs	r1, #4
 800f676:	4604      	mov	r4, r0
 800f678:	7b07      	ldrb	r7, [r0, #12]
 800f67a:	f7ff ff4f 	bl	800f51c <ucdr_buffer_alignment>
 800f67e:	4605      	mov	r5, r0
 800f680:	4620      	mov	r0, r4
 800f682:	1d29      	adds	r1, r5, #4
 800f684:	f7ff ff08 	bl	800f498 <ucdr_check_buffer>
 800f688:	b1c0      	cbz	r0, 800f6bc <ucdr_serialize_uint32_t+0x4c>
 800f68a:	4a0f      	ldr	r2, [pc, #60]	; (800f6c8 <ucdr_serialize_uint32_t+0x58>)
 800f68c:	68a3      	ldr	r3, [r4, #8]
 800f68e:	7812      	ldrb	r2, [r2, #0]
 800f690:	1959      	adds	r1, r3, r5
 800f692:	42ba      	cmp	r2, r7
 800f694:	60a1      	str	r1, [r4, #8]
 800f696:	d015      	beq.n	800f6c4 <ucdr_serialize_uint32_t+0x54>
 800f698:	f3c6 6207 	ubfx	r2, r6, #24, #8
 800f69c:	f3c6 4107 	ubfx	r1, r6, #16, #8
 800f6a0:	555a      	strb	r2, [r3, r5]
 800f6a2:	f3c6 2207 	ubfx	r2, r6, #8, #8
 800f6a6:	68a3      	ldr	r3, [r4, #8]
 800f6a8:	7059      	strb	r1, [r3, #1]
 800f6aa:	68a3      	ldr	r3, [r4, #8]
 800f6ac:	709a      	strb	r2, [r3, #2]
 800f6ae:	68a3      	ldr	r3, [r4, #8]
 800f6b0:	70de      	strb	r6, [r3, #3]
 800f6b2:	68a3      	ldr	r3, [r4, #8]
 800f6b4:	2204      	movs	r2, #4
 800f6b6:	4413      	add	r3, r2
 800f6b8:	6122      	str	r2, [r4, #16]
 800f6ba:	60a3      	str	r3, [r4, #8]
 800f6bc:	7d20      	ldrb	r0, [r4, #20]
 800f6be:	f080 0001 	eor.w	r0, r0, #1
 800f6c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f6c4:	515e      	str	r6, [r3, r5]
 800f6c6:	e7f4      	b.n	800f6b2 <ucdr_serialize_uint32_t+0x42>
 800f6c8:	08010de0 	.word	0x08010de0

0800f6cc <ucdr_serialize_int32_t>:
 800f6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6ce:	460e      	mov	r6, r1
 800f6d0:	2104      	movs	r1, #4
 800f6d2:	4604      	mov	r4, r0
 800f6d4:	7b07      	ldrb	r7, [r0, #12]
 800f6d6:	f7ff ff21 	bl	800f51c <ucdr_buffer_alignment>
 800f6da:	4605      	mov	r5, r0
 800f6dc:	4620      	mov	r0, r4
 800f6de:	1d29      	adds	r1, r5, #4
 800f6e0:	f7ff feda 	bl	800f498 <ucdr_check_buffer>
 800f6e4:	b1c0      	cbz	r0, 800f718 <ucdr_serialize_int32_t+0x4c>
 800f6e6:	4a0f      	ldr	r2, [pc, #60]	; (800f724 <ucdr_serialize_int32_t+0x58>)
 800f6e8:	68a3      	ldr	r3, [r4, #8]
 800f6ea:	7812      	ldrb	r2, [r2, #0]
 800f6ec:	1959      	adds	r1, r3, r5
 800f6ee:	42ba      	cmp	r2, r7
 800f6f0:	60a1      	str	r1, [r4, #8]
 800f6f2:	d015      	beq.n	800f720 <ucdr_serialize_int32_t+0x54>
 800f6f4:	f3c6 6207 	ubfx	r2, r6, #24, #8
 800f6f8:	f3c6 4107 	ubfx	r1, r6, #16, #8
 800f6fc:	555a      	strb	r2, [r3, r5]
 800f6fe:	f3c6 2207 	ubfx	r2, r6, #8, #8
 800f702:	68a3      	ldr	r3, [r4, #8]
 800f704:	7059      	strb	r1, [r3, #1]
 800f706:	68a3      	ldr	r3, [r4, #8]
 800f708:	709a      	strb	r2, [r3, #2]
 800f70a:	68a3      	ldr	r3, [r4, #8]
 800f70c:	70de      	strb	r6, [r3, #3]
 800f70e:	68a3      	ldr	r3, [r4, #8]
 800f710:	2204      	movs	r2, #4
 800f712:	4413      	add	r3, r2
 800f714:	6122      	str	r2, [r4, #16]
 800f716:	60a3      	str	r3, [r4, #8]
 800f718:	7d20      	ldrb	r0, [r4, #20]
 800f71a:	f080 0001 	eor.w	r0, r0, #1
 800f71e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f720:	515e      	str	r6, [r3, r5]
 800f722:	e7f4      	b.n	800f70e <ucdr_serialize_int32_t+0x42>
 800f724:	08010de0 	.word	0x08010de0

0800f728 <ucdr_deserialize_bool>:
 800f728:	b538      	push	{r3, r4, r5, lr}
 800f72a:	460d      	mov	r5, r1
 800f72c:	2101      	movs	r1, #1
 800f72e:	4604      	mov	r4, r0
 800f730:	f7ff feb2 	bl	800f498 <ucdr_check_buffer>
 800f734:	b138      	cbz	r0, 800f746 <ucdr_deserialize_bool+0x1e>
 800f736:	68a3      	ldr	r3, [r4, #8]
 800f738:	2201      	movs	r2, #1
 800f73a:	781b      	ldrb	r3, [r3, #0]
 800f73c:	702b      	strb	r3, [r5, #0]
 800f73e:	68a3      	ldr	r3, [r4, #8]
 800f740:	6122      	str	r2, [r4, #16]
 800f742:	4413      	add	r3, r2
 800f744:	60a3      	str	r3, [r4, #8]
 800f746:	7d20      	ldrb	r0, [r4, #20]
 800f748:	f080 0001 	eor.w	r0, r0, #1
 800f74c:	bd38      	pop	{r3, r4, r5, pc}
 800f74e:	bf00      	nop

0800f750 <ucdr_deserialize_uint8_t>:
 800f750:	b538      	push	{r3, r4, r5, lr}
 800f752:	460d      	mov	r5, r1
 800f754:	2101      	movs	r1, #1
 800f756:	4604      	mov	r4, r0
 800f758:	f7ff fe9e 	bl	800f498 <ucdr_check_buffer>
 800f75c:	b138      	cbz	r0, 800f76e <ucdr_deserialize_uint8_t+0x1e>
 800f75e:	68a3      	ldr	r3, [r4, #8]
 800f760:	2201      	movs	r2, #1
 800f762:	781b      	ldrb	r3, [r3, #0]
 800f764:	702b      	strb	r3, [r5, #0]
 800f766:	68a3      	ldr	r3, [r4, #8]
 800f768:	6122      	str	r2, [r4, #16]
 800f76a:	4413      	add	r3, r2
 800f76c:	60a3      	str	r3, [r4, #8]
 800f76e:	7d20      	ldrb	r0, [r4, #20]
 800f770:	f080 0001 	eor.w	r0, r0, #1
 800f774:	bd38      	pop	{r3, r4, r5, pc}
 800f776:	bf00      	nop

0800f778 <ucdr_deserialize_uint16_t>:
 800f778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f77a:	460e      	mov	r6, r1
 800f77c:	2102      	movs	r1, #2
 800f77e:	4604      	mov	r4, r0
 800f780:	7b07      	ldrb	r7, [r0, #12]
 800f782:	f7ff fecb 	bl	800f51c <ucdr_buffer_alignment>
 800f786:	4605      	mov	r5, r0
 800f788:	4620      	mov	r0, r4
 800f78a:	1ca9      	adds	r1, r5, #2
 800f78c:	f7ff fe84 	bl	800f498 <ucdr_check_buffer>
 800f790:	b180      	cbz	r0, 800f7b4 <ucdr_deserialize_uint16_t+0x3c>
 800f792:	4b0c      	ldr	r3, [pc, #48]	; (800f7c4 <ucdr_deserialize_uint16_t+0x4c>)
 800f794:	68a0      	ldr	r0, [r4, #8]
 800f796:	781b      	ldrb	r3, [r3, #0]
 800f798:	4428      	add	r0, r5
 800f79a:	42bb      	cmp	r3, r7
 800f79c:	60a0      	str	r0, [r4, #8]
 800f79e:	d00d      	beq.n	800f7bc <ucdr_deserialize_uint16_t+0x44>
 800f7a0:	7843      	ldrb	r3, [r0, #1]
 800f7a2:	7033      	strb	r3, [r6, #0]
 800f7a4:	68a3      	ldr	r3, [r4, #8]
 800f7a6:	781b      	ldrb	r3, [r3, #0]
 800f7a8:	7073      	strb	r3, [r6, #1]
 800f7aa:	68a3      	ldr	r3, [r4, #8]
 800f7ac:	2202      	movs	r2, #2
 800f7ae:	4413      	add	r3, r2
 800f7b0:	6122      	str	r2, [r4, #16]
 800f7b2:	60a3      	str	r3, [r4, #8]
 800f7b4:	7d20      	ldrb	r0, [r4, #20]
 800f7b6:	f080 0001 	eor.w	r0, r0, #1
 800f7ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f7bc:	8803      	ldrh	r3, [r0, #0]
 800f7be:	8033      	strh	r3, [r6, #0]
 800f7c0:	e7f3      	b.n	800f7aa <ucdr_deserialize_uint16_t+0x32>
 800f7c2:	bf00      	nop
 800f7c4:	08010de0 	.word	0x08010de0

0800f7c8 <ucdr_deserialize_uint32_t>:
 800f7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7ca:	460d      	mov	r5, r1
 800f7cc:	2104      	movs	r1, #4
 800f7ce:	4604      	mov	r4, r0
 800f7d0:	7b07      	ldrb	r7, [r0, #12]
 800f7d2:	f7ff fea3 	bl	800f51c <ucdr_buffer_alignment>
 800f7d6:	4606      	mov	r6, r0
 800f7d8:	4620      	mov	r0, r4
 800f7da:	1d31      	adds	r1, r6, #4
 800f7dc:	f7ff fe5c 	bl	800f498 <ucdr_check_buffer>
 800f7e0:	b1b0      	cbz	r0, 800f810 <ucdr_deserialize_uint32_t+0x48>
 800f7e2:	4b0f      	ldr	r3, [pc, #60]	; (800f820 <ucdr_deserialize_uint32_t+0x58>)
 800f7e4:	68a0      	ldr	r0, [r4, #8]
 800f7e6:	781b      	ldrb	r3, [r3, #0]
 800f7e8:	4430      	add	r0, r6
 800f7ea:	42bb      	cmp	r3, r7
 800f7ec:	60a0      	str	r0, [r4, #8]
 800f7ee:	d013      	beq.n	800f818 <ucdr_deserialize_uint32_t+0x50>
 800f7f0:	78c3      	ldrb	r3, [r0, #3]
 800f7f2:	702b      	strb	r3, [r5, #0]
 800f7f4:	68a3      	ldr	r3, [r4, #8]
 800f7f6:	789b      	ldrb	r3, [r3, #2]
 800f7f8:	706b      	strb	r3, [r5, #1]
 800f7fa:	68a3      	ldr	r3, [r4, #8]
 800f7fc:	785b      	ldrb	r3, [r3, #1]
 800f7fe:	70ab      	strb	r3, [r5, #2]
 800f800:	68a3      	ldr	r3, [r4, #8]
 800f802:	781b      	ldrb	r3, [r3, #0]
 800f804:	70eb      	strb	r3, [r5, #3]
 800f806:	68a3      	ldr	r3, [r4, #8]
 800f808:	2204      	movs	r2, #4
 800f80a:	4413      	add	r3, r2
 800f80c:	6122      	str	r2, [r4, #16]
 800f80e:	60a3      	str	r3, [r4, #8]
 800f810:	7d20      	ldrb	r0, [r4, #20]
 800f812:	f080 0001 	eor.w	r0, r0, #1
 800f816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f818:	6803      	ldr	r3, [r0, #0]
 800f81a:	602b      	str	r3, [r5, #0]
 800f81c:	e7f3      	b.n	800f806 <ucdr_deserialize_uint32_t+0x3e>
 800f81e:	bf00      	nop
 800f820:	08010de0 	.word	0x08010de0

0800f824 <ucdr_deserialize_int32_t>:
 800f824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f826:	460d      	mov	r5, r1
 800f828:	2104      	movs	r1, #4
 800f82a:	4604      	mov	r4, r0
 800f82c:	7b07      	ldrb	r7, [r0, #12]
 800f82e:	f7ff fe75 	bl	800f51c <ucdr_buffer_alignment>
 800f832:	4606      	mov	r6, r0
 800f834:	4620      	mov	r0, r4
 800f836:	1d31      	adds	r1, r6, #4
 800f838:	f7ff fe2e 	bl	800f498 <ucdr_check_buffer>
 800f83c:	b1b0      	cbz	r0, 800f86c <ucdr_deserialize_int32_t+0x48>
 800f83e:	4b0f      	ldr	r3, [pc, #60]	; (800f87c <ucdr_deserialize_int32_t+0x58>)
 800f840:	68a0      	ldr	r0, [r4, #8]
 800f842:	781b      	ldrb	r3, [r3, #0]
 800f844:	4430      	add	r0, r6
 800f846:	42bb      	cmp	r3, r7
 800f848:	60a0      	str	r0, [r4, #8]
 800f84a:	d013      	beq.n	800f874 <ucdr_deserialize_int32_t+0x50>
 800f84c:	78c3      	ldrb	r3, [r0, #3]
 800f84e:	702b      	strb	r3, [r5, #0]
 800f850:	68a3      	ldr	r3, [r4, #8]
 800f852:	789b      	ldrb	r3, [r3, #2]
 800f854:	706b      	strb	r3, [r5, #1]
 800f856:	68a3      	ldr	r3, [r4, #8]
 800f858:	785b      	ldrb	r3, [r3, #1]
 800f85a:	70ab      	strb	r3, [r5, #2]
 800f85c:	68a3      	ldr	r3, [r4, #8]
 800f85e:	781b      	ldrb	r3, [r3, #0]
 800f860:	70eb      	strb	r3, [r5, #3]
 800f862:	68a3      	ldr	r3, [r4, #8]
 800f864:	2204      	movs	r2, #4
 800f866:	4413      	add	r3, r2
 800f868:	6122      	str	r2, [r4, #16]
 800f86a:	60a3      	str	r3, [r4, #8]
 800f86c:	7d20      	ldrb	r0, [r4, #20]
 800f86e:	f080 0001 	eor.w	r0, r0, #1
 800f872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f874:	6803      	ldr	r3, [r0, #0]
 800f876:	602b      	str	r3, [r5, #0]
 800f878:	e7f3      	b.n	800f862 <ucdr_deserialize_int32_t+0x3e>
 800f87a:	bf00      	nop
 800f87c:	08010de0 	.word	0x08010de0

0800f880 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:   ldr   sp, =_estack      /* set stack pointer */
 800f880:	f8df d034 	ldr.w	sp, [pc, #52]	; 800f8b8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800f884:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800f886:	e003      	b.n	800f890 <LoopCopyDataInit>

0800f888 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800f888:	4b0c      	ldr	r3, [pc, #48]	; (800f8bc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800f88a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800f88c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800f88e:	3104      	adds	r1, #4

0800f890 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800f890:	480b      	ldr	r0, [pc, #44]	; (800f8c0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800f892:	4b0c      	ldr	r3, [pc, #48]	; (800f8c4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800f894:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800f896:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800f898:	d3f6      	bcc.n	800f888 <CopyDataInit>
  ldr  r2, =_sbss
 800f89a:	4a0b      	ldr	r2, [pc, #44]	; (800f8c8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800f89c:	e002      	b.n	800f8a4 <LoopFillZerobss>

0800f89e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800f89e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800f8a0:	f842 3b04 	str.w	r3, [r2], #4

0800f8a4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800f8a4:	4b09      	ldr	r3, [pc, #36]	; (800f8cc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800f8a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800f8a8:	d3f9      	bcc.n	800f89e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800f8aa:	f7fc f91b 	bl	800bae4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800f8ae:	f000 f81d 	bl	800f8ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800f8b2:	f7fb fa53 	bl	800ad5c <main>
  bx  lr    
 800f8b6:	4770      	bx	lr
Reset_Handler:   ldr   sp, =_estack      /* set stack pointer */
 800f8b8:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800f8bc:	0801210c 	.word	0x0801210c
  ldr  r0, =_sdata
 800f8c0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800f8c4:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 800f8c8:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 800f8cc:	2000b788 	.word	0x2000b788

0800f8d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800f8d0:	e7fe      	b.n	800f8d0 <ADC_IRQHandler>

0800f8d2 <atexit>:
 800f8d2:	2300      	movs	r3, #0
 800f8d4:	4601      	mov	r1, r0
 800f8d6:	461a      	mov	r2, r3
 800f8d8:	4618      	mov	r0, r3
 800f8da:	f000 b8cd 	b.w	800fa78 <__register_exitproc>
	...

0800f8e0 <__errno>:
 800f8e0:	4b01      	ldr	r3, [pc, #4]	; (800f8e8 <__errno+0x8>)
 800f8e2:	6818      	ldr	r0, [r3, #0]
 800f8e4:	4770      	bx	lr
 800f8e6:	bf00      	nop
 800f8e8:	20000014 	.word	0x20000014

0800f8ec <__libc_init_array>:
 800f8ec:	b570      	push	{r4, r5, r6, lr}
 800f8ee:	4e0d      	ldr	r6, [pc, #52]	; (800f924 <__libc_init_array+0x38>)
 800f8f0:	4c0d      	ldr	r4, [pc, #52]	; (800f928 <__libc_init_array+0x3c>)
 800f8f2:	1ba4      	subs	r4, r4, r6
 800f8f4:	10a4      	asrs	r4, r4, #2
 800f8f6:	2500      	movs	r5, #0
 800f8f8:	42a5      	cmp	r5, r4
 800f8fa:	d109      	bne.n	800f910 <__libc_init_array+0x24>
 800f8fc:	4e0b      	ldr	r6, [pc, #44]	; (800f92c <__libc_init_array+0x40>)
 800f8fe:	4c0c      	ldr	r4, [pc, #48]	; (800f930 <__libc_init_array+0x44>)
 800f900:	f001 f98c 	bl	8010c1c <_init>
 800f904:	1ba4      	subs	r4, r4, r6
 800f906:	10a4      	asrs	r4, r4, #2
 800f908:	2500      	movs	r5, #0
 800f90a:	42a5      	cmp	r5, r4
 800f90c:	d105      	bne.n	800f91a <__libc_init_array+0x2e>
 800f90e:	bd70      	pop	{r4, r5, r6, pc}
 800f910:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f914:	4798      	blx	r3
 800f916:	3501      	adds	r5, #1
 800f918:	e7ee      	b.n	800f8f8 <__libc_init_array+0xc>
 800f91a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f91e:	4798      	blx	r3
 800f920:	3501      	adds	r5, #1
 800f922:	e7f2      	b.n	800f90a <__libc_init_array+0x1e>
 800f924:	08012104 	.word	0x08012104
 800f928:	08012104 	.word	0x08012104
 800f92c:	08012104 	.word	0x08012104
 800f930:	08012108 	.word	0x08012108

0800f934 <memcmp>:
 800f934:	b530      	push	{r4, r5, lr}
 800f936:	2400      	movs	r4, #0
 800f938:	42a2      	cmp	r2, r4
 800f93a:	d101      	bne.n	800f940 <memcmp+0xc>
 800f93c:	2000      	movs	r0, #0
 800f93e:	e007      	b.n	800f950 <memcmp+0x1c>
 800f940:	5d03      	ldrb	r3, [r0, r4]
 800f942:	3401      	adds	r4, #1
 800f944:	190d      	adds	r5, r1, r4
 800f946:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800f94a:	42ab      	cmp	r3, r5
 800f94c:	d0f4      	beq.n	800f938 <memcmp+0x4>
 800f94e:	1b58      	subs	r0, r3, r5
 800f950:	bd30      	pop	{r4, r5, pc}

0800f952 <memcpy>:
 800f952:	b510      	push	{r4, lr}
 800f954:	1e43      	subs	r3, r0, #1
 800f956:	440a      	add	r2, r1
 800f958:	4291      	cmp	r1, r2
 800f95a:	d100      	bne.n	800f95e <memcpy+0xc>
 800f95c:	bd10      	pop	{r4, pc}
 800f95e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f962:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f966:	e7f7      	b.n	800f958 <memcpy+0x6>

0800f968 <memset>:
 800f968:	4402      	add	r2, r0
 800f96a:	4603      	mov	r3, r0
 800f96c:	4293      	cmp	r3, r2
 800f96e:	d100      	bne.n	800f972 <memset+0xa>
 800f970:	4770      	bx	lr
 800f972:	f803 1b01 	strb.w	r1, [r3], #1
 800f976:	e7f9      	b.n	800f96c <memset+0x4>

0800f978 <iprintf>:
 800f978:	b40f      	push	{r0, r1, r2, r3}
 800f97a:	4b0a      	ldr	r3, [pc, #40]	; (800f9a4 <iprintf+0x2c>)
 800f97c:	b513      	push	{r0, r1, r4, lr}
 800f97e:	681c      	ldr	r4, [r3, #0]
 800f980:	b124      	cbz	r4, 800f98c <iprintf+0x14>
 800f982:	69a3      	ldr	r3, [r4, #24]
 800f984:	b913      	cbnz	r3, 800f98c <iprintf+0x14>
 800f986:	4620      	mov	r0, r4
 800f988:	f000 f91a 	bl	800fbc0 <__sinit>
 800f98c:	ab05      	add	r3, sp, #20
 800f98e:	9a04      	ldr	r2, [sp, #16]
 800f990:	68a1      	ldr	r1, [r4, #8]
 800f992:	9301      	str	r3, [sp, #4]
 800f994:	4620      	mov	r0, r4
 800f996:	f000 fbc9 	bl	801012c <_vfiprintf_r>
 800f99a:	b002      	add	sp, #8
 800f99c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f9a0:	b004      	add	sp, #16
 800f9a2:	4770      	bx	lr
 800f9a4:	20000014 	.word	0x20000014

0800f9a8 <rand>:
 800f9a8:	b538      	push	{r3, r4, r5, lr}
 800f9aa:	4b13      	ldr	r3, [pc, #76]	; (800f9f8 <rand+0x50>)
 800f9ac:	681c      	ldr	r4, [r3, #0]
 800f9ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f9b0:	b97b      	cbnz	r3, 800f9d2 <rand+0x2a>
 800f9b2:	2018      	movs	r0, #24
 800f9b4:	f000 f98e 	bl	800fcd4 <malloc>
 800f9b8:	4a10      	ldr	r2, [pc, #64]	; (800f9fc <rand+0x54>)
 800f9ba:	4b11      	ldr	r3, [pc, #68]	; (800fa00 <rand+0x58>)
 800f9bc:	63a0      	str	r0, [r4, #56]	; 0x38
 800f9be:	e9c0 2300 	strd	r2, r3, [r0]
 800f9c2:	4b10      	ldr	r3, [pc, #64]	; (800fa04 <rand+0x5c>)
 800f9c4:	6083      	str	r3, [r0, #8]
 800f9c6:	230b      	movs	r3, #11
 800f9c8:	8183      	strh	r3, [r0, #12]
 800f9ca:	2201      	movs	r2, #1
 800f9cc:	2300      	movs	r3, #0
 800f9ce:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800f9d2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f9d4:	480c      	ldr	r0, [pc, #48]	; (800fa08 <rand+0x60>)
 800f9d6:	690a      	ldr	r2, [r1, #16]
 800f9d8:	694b      	ldr	r3, [r1, #20]
 800f9da:	4c0c      	ldr	r4, [pc, #48]	; (800fa0c <rand+0x64>)
 800f9dc:	4350      	muls	r0, r2
 800f9de:	fb04 0003 	mla	r0, r4, r3, r0
 800f9e2:	fba2 2304 	umull	r2, r3, r2, r4
 800f9e6:	4403      	add	r3, r0
 800f9e8:	1c54      	adds	r4, r2, #1
 800f9ea:	f143 0500 	adc.w	r5, r3, #0
 800f9ee:	e9c1 4504 	strd	r4, r5, [r1, #16]
 800f9f2:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800f9f6:	bd38      	pop	{r3, r4, r5, pc}
 800f9f8:	20000014 	.word	0x20000014
 800f9fc:	abcd330e 	.word	0xabcd330e
 800fa00:	e66d1234 	.word	0xe66d1234
 800fa04:	0005deec 	.word	0x0005deec
 800fa08:	5851f42d 	.word	0x5851f42d
 800fa0c:	4c957f2d 	.word	0x4c957f2d

0800fa10 <sniprintf>:
 800fa10:	b40c      	push	{r2, r3}
 800fa12:	b530      	push	{r4, r5, lr}
 800fa14:	4b17      	ldr	r3, [pc, #92]	; (800fa74 <sniprintf+0x64>)
 800fa16:	1e0c      	subs	r4, r1, #0
 800fa18:	b09d      	sub	sp, #116	; 0x74
 800fa1a:	681d      	ldr	r5, [r3, #0]
 800fa1c:	da08      	bge.n	800fa30 <sniprintf+0x20>
 800fa1e:	238b      	movs	r3, #139	; 0x8b
 800fa20:	602b      	str	r3, [r5, #0]
 800fa22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fa26:	b01d      	add	sp, #116	; 0x74
 800fa28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fa2c:	b002      	add	sp, #8
 800fa2e:	4770      	bx	lr
 800fa30:	f44f 7302 	mov.w	r3, #520	; 0x208
 800fa34:	f8ad 3014 	strh.w	r3, [sp, #20]
 800fa38:	bf14      	ite	ne
 800fa3a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800fa3e:	4623      	moveq	r3, r4
 800fa40:	9304      	str	r3, [sp, #16]
 800fa42:	9307      	str	r3, [sp, #28]
 800fa44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fa48:	9002      	str	r0, [sp, #8]
 800fa4a:	9006      	str	r0, [sp, #24]
 800fa4c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800fa50:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800fa52:	ab21      	add	r3, sp, #132	; 0x84
 800fa54:	a902      	add	r1, sp, #8
 800fa56:	4628      	mov	r0, r5
 800fa58:	9301      	str	r3, [sp, #4]
 800fa5a:	f000 fa45 	bl	800fee8 <_svfiprintf_r>
 800fa5e:	1c43      	adds	r3, r0, #1
 800fa60:	bfbc      	itt	lt
 800fa62:	238b      	movlt	r3, #139	; 0x8b
 800fa64:	602b      	strlt	r3, [r5, #0]
 800fa66:	2c00      	cmp	r4, #0
 800fa68:	d0dd      	beq.n	800fa26 <sniprintf+0x16>
 800fa6a:	9b02      	ldr	r3, [sp, #8]
 800fa6c:	2200      	movs	r2, #0
 800fa6e:	701a      	strb	r2, [r3, #0]
 800fa70:	e7d9      	b.n	800fa26 <sniprintf+0x16>
 800fa72:	bf00      	nop
 800fa74:	20000014 	.word	0x20000014

0800fa78 <__register_exitproc>:
 800fa78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa7c:	4d2c      	ldr	r5, [pc, #176]	; (800fb30 <__register_exitproc+0xb8>)
 800fa7e:	682c      	ldr	r4, [r5, #0]
 800fa80:	4607      	mov	r7, r0
 800fa82:	460e      	mov	r6, r1
 800fa84:	4691      	mov	r9, r2
 800fa86:	4698      	mov	r8, r3
 800fa88:	b934      	cbnz	r4, 800fa98 <__register_exitproc+0x20>
 800fa8a:	4b2a      	ldr	r3, [pc, #168]	; (800fb34 <__register_exitproc+0xbc>)
 800fa8c:	4c2a      	ldr	r4, [pc, #168]	; (800fb38 <__register_exitproc+0xc0>)
 800fa8e:	602c      	str	r4, [r5, #0]
 800fa90:	b113      	cbz	r3, 800fa98 <__register_exitproc+0x20>
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800fa98:	6863      	ldr	r3, [r4, #4]
 800fa9a:	2b1f      	cmp	r3, #31
 800fa9c:	dd3d      	ble.n	800fb1a <__register_exitproc+0xa2>
 800fa9e:	4b27      	ldr	r3, [pc, #156]	; (800fb3c <__register_exitproc+0xc4>)
 800faa0:	b91b      	cbnz	r3, 800faaa <__register_exitproc+0x32>
 800faa2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800faa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800faaa:	208c      	movs	r0, #140	; 0x8c
 800faac:	f000 f912 	bl	800fcd4 <malloc>
 800fab0:	4604      	mov	r4, r0
 800fab2:	2800      	cmp	r0, #0
 800fab4:	d0f5      	beq.n	800faa2 <__register_exitproc+0x2a>
 800fab6:	2300      	movs	r3, #0
 800fab8:	682a      	ldr	r2, [r5, #0]
 800faba:	6002      	str	r2, [r0, #0]
 800fabc:	6043      	str	r3, [r0, #4]
 800fabe:	6028      	str	r0, [r5, #0]
 800fac0:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 800fac4:	b30f      	cbz	r7, 800fb0a <__register_exitproc+0x92>
 800fac6:	f44f 7084 	mov.w	r0, #264	; 0x108
 800faca:	f000 f903 	bl	800fcd4 <malloc>
 800face:	2800      	cmp	r0, #0
 800fad0:	d0e7      	beq.n	800faa2 <__register_exitproc+0x2a>
 800fad2:	2300      	movs	r3, #0
 800fad4:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 800fad8:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 800fadc:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 800fae0:	6862      	ldr	r2, [r4, #4]
 800fae2:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 800fae6:	2301      	movs	r3, #1
 800fae8:	4093      	lsls	r3, r2
 800faea:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 800faee:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 800faf2:	431a      	orrs	r2, r3
 800faf4:	2f02      	cmp	r7, #2
 800faf6:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 800fafa:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 800fafe:	bf02      	ittt	eq
 800fb00:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 800fb04:	4313      	orreq	r3, r2
 800fb06:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 800fb0a:	6863      	ldr	r3, [r4, #4]
 800fb0c:	1c5a      	adds	r2, r3, #1
 800fb0e:	3302      	adds	r3, #2
 800fb10:	6062      	str	r2, [r4, #4]
 800fb12:	2000      	movs	r0, #0
 800fb14:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 800fb18:	e7c5      	b.n	800faa6 <__register_exitproc+0x2e>
 800fb1a:	2f00      	cmp	r7, #0
 800fb1c:	d0f5      	beq.n	800fb0a <__register_exitproc+0x92>
 800fb1e:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800fb22:	2800      	cmp	r0, #0
 800fb24:	d1dc      	bne.n	800fae0 <__register_exitproc+0x68>
 800fb26:	4b05      	ldr	r3, [pc, #20]	; (800fb3c <__register_exitproc+0xc4>)
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d0ba      	beq.n	800faa2 <__register_exitproc+0x2a>
 800fb2c:	e7cb      	b.n	800fac6 <__register_exitproc+0x4e>
 800fb2e:	bf00      	nop
 800fb30:	200059c8 	.word	0x200059c8
 800fb34:	00000000 	.word	0x00000000
 800fb38:	2000593c 	.word	0x2000593c
 800fb3c:	0800fcd5 	.word	0x0800fcd5

0800fb40 <std>:
 800fb40:	2300      	movs	r3, #0
 800fb42:	b510      	push	{r4, lr}
 800fb44:	4604      	mov	r4, r0
 800fb46:	e9c0 3300 	strd	r3, r3, [r0]
 800fb4a:	6083      	str	r3, [r0, #8]
 800fb4c:	8181      	strh	r1, [r0, #12]
 800fb4e:	6643      	str	r3, [r0, #100]	; 0x64
 800fb50:	81c2      	strh	r2, [r0, #14]
 800fb52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fb56:	6183      	str	r3, [r0, #24]
 800fb58:	4619      	mov	r1, r3
 800fb5a:	2208      	movs	r2, #8
 800fb5c:	305c      	adds	r0, #92	; 0x5c
 800fb5e:	f7ff ff03 	bl	800f968 <memset>
 800fb62:	4b05      	ldr	r3, [pc, #20]	; (800fb78 <std+0x38>)
 800fb64:	6263      	str	r3, [r4, #36]	; 0x24
 800fb66:	4b05      	ldr	r3, [pc, #20]	; (800fb7c <std+0x3c>)
 800fb68:	62a3      	str	r3, [r4, #40]	; 0x28
 800fb6a:	4b05      	ldr	r3, [pc, #20]	; (800fb80 <std+0x40>)
 800fb6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fb6e:	4b05      	ldr	r3, [pc, #20]	; (800fb84 <std+0x44>)
 800fb70:	6224      	str	r4, [r4, #32]
 800fb72:	6323      	str	r3, [r4, #48]	; 0x30
 800fb74:	bd10      	pop	{r4, pc}
 800fb76:	bf00      	nop
 800fb78:	08010689 	.word	0x08010689
 800fb7c:	080106ab 	.word	0x080106ab
 800fb80:	080106e3 	.word	0x080106e3
 800fb84:	08010707 	.word	0x08010707

0800fb88 <_cleanup_r>:
 800fb88:	4901      	ldr	r1, [pc, #4]	; (800fb90 <_cleanup_r+0x8>)
 800fb8a:	f000 b885 	b.w	800fc98 <_fwalk_reent>
 800fb8e:	bf00      	nop
 800fb90:	080109e1 	.word	0x080109e1

0800fb94 <__sfmoreglue>:
 800fb94:	b570      	push	{r4, r5, r6, lr}
 800fb96:	1e4a      	subs	r2, r1, #1
 800fb98:	2568      	movs	r5, #104	; 0x68
 800fb9a:	4355      	muls	r5, r2
 800fb9c:	460e      	mov	r6, r1
 800fb9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800fba2:	f000 f8ed 	bl	800fd80 <_malloc_r>
 800fba6:	4604      	mov	r4, r0
 800fba8:	b140      	cbz	r0, 800fbbc <__sfmoreglue+0x28>
 800fbaa:	2100      	movs	r1, #0
 800fbac:	e9c0 1600 	strd	r1, r6, [r0]
 800fbb0:	300c      	adds	r0, #12
 800fbb2:	60a0      	str	r0, [r4, #8]
 800fbb4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800fbb8:	f7ff fed6 	bl	800f968 <memset>
 800fbbc:	4620      	mov	r0, r4
 800fbbe:	bd70      	pop	{r4, r5, r6, pc}

0800fbc0 <__sinit>:
 800fbc0:	6983      	ldr	r3, [r0, #24]
 800fbc2:	b510      	push	{r4, lr}
 800fbc4:	4604      	mov	r4, r0
 800fbc6:	bb33      	cbnz	r3, 800fc16 <__sinit+0x56>
 800fbc8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800fbcc:	6503      	str	r3, [r0, #80]	; 0x50
 800fbce:	4b12      	ldr	r3, [pc, #72]	; (800fc18 <__sinit+0x58>)
 800fbd0:	4a12      	ldr	r2, [pc, #72]	; (800fc1c <__sinit+0x5c>)
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	6282      	str	r2, [r0, #40]	; 0x28
 800fbd6:	4298      	cmp	r0, r3
 800fbd8:	bf04      	itt	eq
 800fbda:	2301      	moveq	r3, #1
 800fbdc:	6183      	streq	r3, [r0, #24]
 800fbde:	f000 f81f 	bl	800fc20 <__sfp>
 800fbe2:	6060      	str	r0, [r4, #4]
 800fbe4:	4620      	mov	r0, r4
 800fbe6:	f000 f81b 	bl	800fc20 <__sfp>
 800fbea:	60a0      	str	r0, [r4, #8]
 800fbec:	4620      	mov	r0, r4
 800fbee:	f000 f817 	bl	800fc20 <__sfp>
 800fbf2:	2200      	movs	r2, #0
 800fbf4:	60e0      	str	r0, [r4, #12]
 800fbf6:	2104      	movs	r1, #4
 800fbf8:	6860      	ldr	r0, [r4, #4]
 800fbfa:	f7ff ffa1 	bl	800fb40 <std>
 800fbfe:	2201      	movs	r2, #1
 800fc00:	2109      	movs	r1, #9
 800fc02:	68a0      	ldr	r0, [r4, #8]
 800fc04:	f7ff ff9c 	bl	800fb40 <std>
 800fc08:	2202      	movs	r2, #2
 800fc0a:	2112      	movs	r1, #18
 800fc0c:	68e0      	ldr	r0, [r4, #12]
 800fc0e:	f7ff ff97 	bl	800fb40 <std>
 800fc12:	2301      	movs	r3, #1
 800fc14:	61a3      	str	r3, [r4, #24]
 800fc16:	bd10      	pop	{r4, pc}
 800fc18:	08012064 	.word	0x08012064
 800fc1c:	0800fb89 	.word	0x0800fb89

0800fc20 <__sfp>:
 800fc20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc22:	4b1b      	ldr	r3, [pc, #108]	; (800fc90 <__sfp+0x70>)
 800fc24:	681e      	ldr	r6, [r3, #0]
 800fc26:	69b3      	ldr	r3, [r6, #24]
 800fc28:	4607      	mov	r7, r0
 800fc2a:	b913      	cbnz	r3, 800fc32 <__sfp+0x12>
 800fc2c:	4630      	mov	r0, r6
 800fc2e:	f7ff ffc7 	bl	800fbc0 <__sinit>
 800fc32:	3648      	adds	r6, #72	; 0x48
 800fc34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800fc38:	3b01      	subs	r3, #1
 800fc3a:	d503      	bpl.n	800fc44 <__sfp+0x24>
 800fc3c:	6833      	ldr	r3, [r6, #0]
 800fc3e:	b133      	cbz	r3, 800fc4e <__sfp+0x2e>
 800fc40:	6836      	ldr	r6, [r6, #0]
 800fc42:	e7f7      	b.n	800fc34 <__sfp+0x14>
 800fc44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fc48:	b16d      	cbz	r5, 800fc66 <__sfp+0x46>
 800fc4a:	3468      	adds	r4, #104	; 0x68
 800fc4c:	e7f4      	b.n	800fc38 <__sfp+0x18>
 800fc4e:	2104      	movs	r1, #4
 800fc50:	4638      	mov	r0, r7
 800fc52:	f7ff ff9f 	bl	800fb94 <__sfmoreglue>
 800fc56:	6030      	str	r0, [r6, #0]
 800fc58:	2800      	cmp	r0, #0
 800fc5a:	d1f1      	bne.n	800fc40 <__sfp+0x20>
 800fc5c:	230c      	movs	r3, #12
 800fc5e:	603b      	str	r3, [r7, #0]
 800fc60:	4604      	mov	r4, r0
 800fc62:	4620      	mov	r0, r4
 800fc64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc66:	4b0b      	ldr	r3, [pc, #44]	; (800fc94 <__sfp+0x74>)
 800fc68:	6665      	str	r5, [r4, #100]	; 0x64
 800fc6a:	e9c4 5500 	strd	r5, r5, [r4]
 800fc6e:	60a5      	str	r5, [r4, #8]
 800fc70:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800fc74:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800fc78:	2208      	movs	r2, #8
 800fc7a:	4629      	mov	r1, r5
 800fc7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800fc80:	f7ff fe72 	bl	800f968 <memset>
 800fc84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800fc88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800fc8c:	e7e9      	b.n	800fc62 <__sfp+0x42>
 800fc8e:	bf00      	nop
 800fc90:	08012064 	.word	0x08012064
 800fc94:	ffff0001 	.word	0xffff0001

0800fc98 <_fwalk_reent>:
 800fc98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc9c:	4680      	mov	r8, r0
 800fc9e:	4689      	mov	r9, r1
 800fca0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800fca4:	2600      	movs	r6, #0
 800fca6:	b914      	cbnz	r4, 800fcae <_fwalk_reent+0x16>
 800fca8:	4630      	mov	r0, r6
 800fcaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fcae:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800fcb2:	3f01      	subs	r7, #1
 800fcb4:	d501      	bpl.n	800fcba <_fwalk_reent+0x22>
 800fcb6:	6824      	ldr	r4, [r4, #0]
 800fcb8:	e7f5      	b.n	800fca6 <_fwalk_reent+0xe>
 800fcba:	89ab      	ldrh	r3, [r5, #12]
 800fcbc:	2b01      	cmp	r3, #1
 800fcbe:	d907      	bls.n	800fcd0 <_fwalk_reent+0x38>
 800fcc0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fcc4:	3301      	adds	r3, #1
 800fcc6:	d003      	beq.n	800fcd0 <_fwalk_reent+0x38>
 800fcc8:	4629      	mov	r1, r5
 800fcca:	4640      	mov	r0, r8
 800fccc:	47c8      	blx	r9
 800fcce:	4306      	orrs	r6, r0
 800fcd0:	3568      	adds	r5, #104	; 0x68
 800fcd2:	e7ee      	b.n	800fcb2 <_fwalk_reent+0x1a>

0800fcd4 <malloc>:
 800fcd4:	4b02      	ldr	r3, [pc, #8]	; (800fce0 <malloc+0xc>)
 800fcd6:	4601      	mov	r1, r0
 800fcd8:	6818      	ldr	r0, [r3, #0]
 800fcda:	f000 b851 	b.w	800fd80 <_malloc_r>
 800fcde:	bf00      	nop
 800fce0:	20000014 	.word	0x20000014

0800fce4 <_free_r>:
 800fce4:	b538      	push	{r3, r4, r5, lr}
 800fce6:	4605      	mov	r5, r0
 800fce8:	2900      	cmp	r1, #0
 800fcea:	d045      	beq.n	800fd78 <_free_r+0x94>
 800fcec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fcf0:	1f0c      	subs	r4, r1, #4
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	bfb8      	it	lt
 800fcf6:	18e4      	addlt	r4, r4, r3
 800fcf8:	f000 ff2b 	bl	8010b52 <__malloc_lock>
 800fcfc:	4a1f      	ldr	r2, [pc, #124]	; (800fd7c <_free_r+0x98>)
 800fcfe:	6813      	ldr	r3, [r2, #0]
 800fd00:	4610      	mov	r0, r2
 800fd02:	b933      	cbnz	r3, 800fd12 <_free_r+0x2e>
 800fd04:	6063      	str	r3, [r4, #4]
 800fd06:	6014      	str	r4, [r2, #0]
 800fd08:	4628      	mov	r0, r5
 800fd0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fd0e:	f000 bf21 	b.w	8010b54 <__malloc_unlock>
 800fd12:	42a3      	cmp	r3, r4
 800fd14:	d90c      	bls.n	800fd30 <_free_r+0x4c>
 800fd16:	6821      	ldr	r1, [r4, #0]
 800fd18:	1862      	adds	r2, r4, r1
 800fd1a:	4293      	cmp	r3, r2
 800fd1c:	bf04      	itt	eq
 800fd1e:	681a      	ldreq	r2, [r3, #0]
 800fd20:	685b      	ldreq	r3, [r3, #4]
 800fd22:	6063      	str	r3, [r4, #4]
 800fd24:	bf04      	itt	eq
 800fd26:	1852      	addeq	r2, r2, r1
 800fd28:	6022      	streq	r2, [r4, #0]
 800fd2a:	6004      	str	r4, [r0, #0]
 800fd2c:	e7ec      	b.n	800fd08 <_free_r+0x24>
 800fd2e:	4613      	mov	r3, r2
 800fd30:	685a      	ldr	r2, [r3, #4]
 800fd32:	b10a      	cbz	r2, 800fd38 <_free_r+0x54>
 800fd34:	42a2      	cmp	r2, r4
 800fd36:	d9fa      	bls.n	800fd2e <_free_r+0x4a>
 800fd38:	6819      	ldr	r1, [r3, #0]
 800fd3a:	1858      	adds	r0, r3, r1
 800fd3c:	42a0      	cmp	r0, r4
 800fd3e:	d10b      	bne.n	800fd58 <_free_r+0x74>
 800fd40:	6820      	ldr	r0, [r4, #0]
 800fd42:	4401      	add	r1, r0
 800fd44:	1858      	adds	r0, r3, r1
 800fd46:	4282      	cmp	r2, r0
 800fd48:	6019      	str	r1, [r3, #0]
 800fd4a:	d1dd      	bne.n	800fd08 <_free_r+0x24>
 800fd4c:	6810      	ldr	r0, [r2, #0]
 800fd4e:	6852      	ldr	r2, [r2, #4]
 800fd50:	605a      	str	r2, [r3, #4]
 800fd52:	4401      	add	r1, r0
 800fd54:	6019      	str	r1, [r3, #0]
 800fd56:	e7d7      	b.n	800fd08 <_free_r+0x24>
 800fd58:	d902      	bls.n	800fd60 <_free_r+0x7c>
 800fd5a:	230c      	movs	r3, #12
 800fd5c:	602b      	str	r3, [r5, #0]
 800fd5e:	e7d3      	b.n	800fd08 <_free_r+0x24>
 800fd60:	6820      	ldr	r0, [r4, #0]
 800fd62:	1821      	adds	r1, r4, r0
 800fd64:	428a      	cmp	r2, r1
 800fd66:	bf04      	itt	eq
 800fd68:	6811      	ldreq	r1, [r2, #0]
 800fd6a:	6852      	ldreq	r2, [r2, #4]
 800fd6c:	6062      	str	r2, [r4, #4]
 800fd6e:	bf04      	itt	eq
 800fd70:	1809      	addeq	r1, r1, r0
 800fd72:	6021      	streq	r1, [r4, #0]
 800fd74:	605c      	str	r4, [r3, #4]
 800fd76:	e7c7      	b.n	800fd08 <_free_r+0x24>
 800fd78:	bd38      	pop	{r3, r4, r5, pc}
 800fd7a:	bf00      	nop
 800fd7c:	200059cc 	.word	0x200059cc

0800fd80 <_malloc_r>:
 800fd80:	b570      	push	{r4, r5, r6, lr}
 800fd82:	1ccd      	adds	r5, r1, #3
 800fd84:	f025 0503 	bic.w	r5, r5, #3
 800fd88:	3508      	adds	r5, #8
 800fd8a:	2d0c      	cmp	r5, #12
 800fd8c:	bf38      	it	cc
 800fd8e:	250c      	movcc	r5, #12
 800fd90:	2d00      	cmp	r5, #0
 800fd92:	4606      	mov	r6, r0
 800fd94:	db01      	blt.n	800fd9a <_malloc_r+0x1a>
 800fd96:	42a9      	cmp	r1, r5
 800fd98:	d903      	bls.n	800fda2 <_malloc_r+0x22>
 800fd9a:	230c      	movs	r3, #12
 800fd9c:	6033      	str	r3, [r6, #0]
 800fd9e:	2000      	movs	r0, #0
 800fda0:	bd70      	pop	{r4, r5, r6, pc}
 800fda2:	f000 fed6 	bl	8010b52 <__malloc_lock>
 800fda6:	4a21      	ldr	r2, [pc, #132]	; (800fe2c <_malloc_r+0xac>)
 800fda8:	6814      	ldr	r4, [r2, #0]
 800fdaa:	4621      	mov	r1, r4
 800fdac:	b991      	cbnz	r1, 800fdd4 <_malloc_r+0x54>
 800fdae:	4c20      	ldr	r4, [pc, #128]	; (800fe30 <_malloc_r+0xb0>)
 800fdb0:	6823      	ldr	r3, [r4, #0]
 800fdb2:	b91b      	cbnz	r3, 800fdbc <_malloc_r+0x3c>
 800fdb4:	4630      	mov	r0, r6
 800fdb6:	f000 fc57 	bl	8010668 <_sbrk_r>
 800fdba:	6020      	str	r0, [r4, #0]
 800fdbc:	4629      	mov	r1, r5
 800fdbe:	4630      	mov	r0, r6
 800fdc0:	f000 fc52 	bl	8010668 <_sbrk_r>
 800fdc4:	1c43      	adds	r3, r0, #1
 800fdc6:	d124      	bne.n	800fe12 <_malloc_r+0x92>
 800fdc8:	230c      	movs	r3, #12
 800fdca:	6033      	str	r3, [r6, #0]
 800fdcc:	4630      	mov	r0, r6
 800fdce:	f000 fec1 	bl	8010b54 <__malloc_unlock>
 800fdd2:	e7e4      	b.n	800fd9e <_malloc_r+0x1e>
 800fdd4:	680b      	ldr	r3, [r1, #0]
 800fdd6:	1b5b      	subs	r3, r3, r5
 800fdd8:	d418      	bmi.n	800fe0c <_malloc_r+0x8c>
 800fdda:	2b0b      	cmp	r3, #11
 800fddc:	d90f      	bls.n	800fdfe <_malloc_r+0x7e>
 800fdde:	600b      	str	r3, [r1, #0]
 800fde0:	50cd      	str	r5, [r1, r3]
 800fde2:	18cc      	adds	r4, r1, r3
 800fde4:	4630      	mov	r0, r6
 800fde6:	f000 feb5 	bl	8010b54 <__malloc_unlock>
 800fdea:	f104 000b 	add.w	r0, r4, #11
 800fdee:	1d23      	adds	r3, r4, #4
 800fdf0:	f020 0007 	bic.w	r0, r0, #7
 800fdf4:	1ac3      	subs	r3, r0, r3
 800fdf6:	d0d3      	beq.n	800fda0 <_malloc_r+0x20>
 800fdf8:	425a      	negs	r2, r3
 800fdfa:	50e2      	str	r2, [r4, r3]
 800fdfc:	e7d0      	b.n	800fda0 <_malloc_r+0x20>
 800fdfe:	428c      	cmp	r4, r1
 800fe00:	684b      	ldr	r3, [r1, #4]
 800fe02:	bf16      	itet	ne
 800fe04:	6063      	strne	r3, [r4, #4]
 800fe06:	6013      	streq	r3, [r2, #0]
 800fe08:	460c      	movne	r4, r1
 800fe0a:	e7eb      	b.n	800fde4 <_malloc_r+0x64>
 800fe0c:	460c      	mov	r4, r1
 800fe0e:	6849      	ldr	r1, [r1, #4]
 800fe10:	e7cc      	b.n	800fdac <_malloc_r+0x2c>
 800fe12:	1cc4      	adds	r4, r0, #3
 800fe14:	f024 0403 	bic.w	r4, r4, #3
 800fe18:	42a0      	cmp	r0, r4
 800fe1a:	d005      	beq.n	800fe28 <_malloc_r+0xa8>
 800fe1c:	1a21      	subs	r1, r4, r0
 800fe1e:	4630      	mov	r0, r6
 800fe20:	f000 fc22 	bl	8010668 <_sbrk_r>
 800fe24:	3001      	adds	r0, #1
 800fe26:	d0cf      	beq.n	800fdc8 <_malloc_r+0x48>
 800fe28:	6025      	str	r5, [r4, #0]
 800fe2a:	e7db      	b.n	800fde4 <_malloc_r+0x64>
 800fe2c:	200059cc 	.word	0x200059cc
 800fe30:	200059d0 	.word	0x200059d0

0800fe34 <__ssputs_r>:
 800fe34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe38:	688e      	ldr	r6, [r1, #8]
 800fe3a:	429e      	cmp	r6, r3
 800fe3c:	4682      	mov	sl, r0
 800fe3e:	460c      	mov	r4, r1
 800fe40:	4690      	mov	r8, r2
 800fe42:	4699      	mov	r9, r3
 800fe44:	d837      	bhi.n	800feb6 <__ssputs_r+0x82>
 800fe46:	898a      	ldrh	r2, [r1, #12]
 800fe48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fe4c:	d031      	beq.n	800feb2 <__ssputs_r+0x7e>
 800fe4e:	6825      	ldr	r5, [r4, #0]
 800fe50:	6909      	ldr	r1, [r1, #16]
 800fe52:	1a6f      	subs	r7, r5, r1
 800fe54:	6965      	ldr	r5, [r4, #20]
 800fe56:	2302      	movs	r3, #2
 800fe58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fe5c:	fb95 f5f3 	sdiv	r5, r5, r3
 800fe60:	f109 0301 	add.w	r3, r9, #1
 800fe64:	443b      	add	r3, r7
 800fe66:	429d      	cmp	r5, r3
 800fe68:	bf38      	it	cc
 800fe6a:	461d      	movcc	r5, r3
 800fe6c:	0553      	lsls	r3, r2, #21
 800fe6e:	d530      	bpl.n	800fed2 <__ssputs_r+0x9e>
 800fe70:	4629      	mov	r1, r5
 800fe72:	f7ff ff85 	bl	800fd80 <_malloc_r>
 800fe76:	4606      	mov	r6, r0
 800fe78:	b950      	cbnz	r0, 800fe90 <__ssputs_r+0x5c>
 800fe7a:	230c      	movs	r3, #12
 800fe7c:	f8ca 3000 	str.w	r3, [sl]
 800fe80:	89a3      	ldrh	r3, [r4, #12]
 800fe82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe86:	81a3      	strh	r3, [r4, #12]
 800fe88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fe8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe90:	463a      	mov	r2, r7
 800fe92:	6921      	ldr	r1, [r4, #16]
 800fe94:	f7ff fd5d 	bl	800f952 <memcpy>
 800fe98:	89a3      	ldrh	r3, [r4, #12]
 800fe9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fe9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fea2:	81a3      	strh	r3, [r4, #12]
 800fea4:	6126      	str	r6, [r4, #16]
 800fea6:	6165      	str	r5, [r4, #20]
 800fea8:	443e      	add	r6, r7
 800feaa:	1bed      	subs	r5, r5, r7
 800feac:	6026      	str	r6, [r4, #0]
 800feae:	60a5      	str	r5, [r4, #8]
 800feb0:	464e      	mov	r6, r9
 800feb2:	454e      	cmp	r6, r9
 800feb4:	d900      	bls.n	800feb8 <__ssputs_r+0x84>
 800feb6:	464e      	mov	r6, r9
 800feb8:	4632      	mov	r2, r6
 800feba:	4641      	mov	r1, r8
 800febc:	6820      	ldr	r0, [r4, #0]
 800febe:	f000 fe2f 	bl	8010b20 <memmove>
 800fec2:	68a3      	ldr	r3, [r4, #8]
 800fec4:	1b9b      	subs	r3, r3, r6
 800fec6:	60a3      	str	r3, [r4, #8]
 800fec8:	6823      	ldr	r3, [r4, #0]
 800feca:	441e      	add	r6, r3
 800fecc:	6026      	str	r6, [r4, #0]
 800fece:	2000      	movs	r0, #0
 800fed0:	e7dc      	b.n	800fe8c <__ssputs_r+0x58>
 800fed2:	462a      	mov	r2, r5
 800fed4:	f000 fe3f 	bl	8010b56 <_realloc_r>
 800fed8:	4606      	mov	r6, r0
 800feda:	2800      	cmp	r0, #0
 800fedc:	d1e2      	bne.n	800fea4 <__ssputs_r+0x70>
 800fede:	6921      	ldr	r1, [r4, #16]
 800fee0:	4650      	mov	r0, sl
 800fee2:	f7ff feff 	bl	800fce4 <_free_r>
 800fee6:	e7c8      	b.n	800fe7a <__ssputs_r+0x46>

0800fee8 <_svfiprintf_r>:
 800fee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800feec:	461d      	mov	r5, r3
 800feee:	898b      	ldrh	r3, [r1, #12]
 800fef0:	061f      	lsls	r7, r3, #24
 800fef2:	b09d      	sub	sp, #116	; 0x74
 800fef4:	4680      	mov	r8, r0
 800fef6:	460c      	mov	r4, r1
 800fef8:	4616      	mov	r6, r2
 800fefa:	d50f      	bpl.n	800ff1c <_svfiprintf_r+0x34>
 800fefc:	690b      	ldr	r3, [r1, #16]
 800fefe:	b96b      	cbnz	r3, 800ff1c <_svfiprintf_r+0x34>
 800ff00:	2140      	movs	r1, #64	; 0x40
 800ff02:	f7ff ff3d 	bl	800fd80 <_malloc_r>
 800ff06:	6020      	str	r0, [r4, #0]
 800ff08:	6120      	str	r0, [r4, #16]
 800ff0a:	b928      	cbnz	r0, 800ff18 <_svfiprintf_r+0x30>
 800ff0c:	230c      	movs	r3, #12
 800ff0e:	f8c8 3000 	str.w	r3, [r8]
 800ff12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ff16:	e0c8      	b.n	80100aa <_svfiprintf_r+0x1c2>
 800ff18:	2340      	movs	r3, #64	; 0x40
 800ff1a:	6163      	str	r3, [r4, #20]
 800ff1c:	2300      	movs	r3, #0
 800ff1e:	9309      	str	r3, [sp, #36]	; 0x24
 800ff20:	2320      	movs	r3, #32
 800ff22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ff26:	2330      	movs	r3, #48	; 0x30
 800ff28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ff2c:	9503      	str	r5, [sp, #12]
 800ff2e:	f04f 0b01 	mov.w	fp, #1
 800ff32:	4637      	mov	r7, r6
 800ff34:	463d      	mov	r5, r7
 800ff36:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ff3a:	b10b      	cbz	r3, 800ff40 <_svfiprintf_r+0x58>
 800ff3c:	2b25      	cmp	r3, #37	; 0x25
 800ff3e:	d13e      	bne.n	800ffbe <_svfiprintf_r+0xd6>
 800ff40:	ebb7 0a06 	subs.w	sl, r7, r6
 800ff44:	d00b      	beq.n	800ff5e <_svfiprintf_r+0x76>
 800ff46:	4653      	mov	r3, sl
 800ff48:	4632      	mov	r2, r6
 800ff4a:	4621      	mov	r1, r4
 800ff4c:	4640      	mov	r0, r8
 800ff4e:	f7ff ff71 	bl	800fe34 <__ssputs_r>
 800ff52:	3001      	adds	r0, #1
 800ff54:	f000 80a4 	beq.w	80100a0 <_svfiprintf_r+0x1b8>
 800ff58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff5a:	4453      	add	r3, sl
 800ff5c:	9309      	str	r3, [sp, #36]	; 0x24
 800ff5e:	783b      	ldrb	r3, [r7, #0]
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	f000 809d 	beq.w	80100a0 <_svfiprintf_r+0x1b8>
 800ff66:	2300      	movs	r3, #0
 800ff68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ff6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ff70:	9304      	str	r3, [sp, #16]
 800ff72:	9307      	str	r3, [sp, #28]
 800ff74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ff78:	931a      	str	r3, [sp, #104]	; 0x68
 800ff7a:	462f      	mov	r7, r5
 800ff7c:	2205      	movs	r2, #5
 800ff7e:	f817 1b01 	ldrb.w	r1, [r7], #1
 800ff82:	4850      	ldr	r0, [pc, #320]	; (80100c4 <_svfiprintf_r+0x1dc>)
 800ff84:	f7f0 f974 	bl	8000270 <memchr>
 800ff88:	9b04      	ldr	r3, [sp, #16]
 800ff8a:	b9d0      	cbnz	r0, 800ffc2 <_svfiprintf_r+0xda>
 800ff8c:	06d9      	lsls	r1, r3, #27
 800ff8e:	bf44      	itt	mi
 800ff90:	2220      	movmi	r2, #32
 800ff92:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ff96:	071a      	lsls	r2, r3, #28
 800ff98:	bf44      	itt	mi
 800ff9a:	222b      	movmi	r2, #43	; 0x2b
 800ff9c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ffa0:	782a      	ldrb	r2, [r5, #0]
 800ffa2:	2a2a      	cmp	r2, #42	; 0x2a
 800ffa4:	d015      	beq.n	800ffd2 <_svfiprintf_r+0xea>
 800ffa6:	9a07      	ldr	r2, [sp, #28]
 800ffa8:	462f      	mov	r7, r5
 800ffaa:	2000      	movs	r0, #0
 800ffac:	250a      	movs	r5, #10
 800ffae:	4639      	mov	r1, r7
 800ffb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ffb4:	3b30      	subs	r3, #48	; 0x30
 800ffb6:	2b09      	cmp	r3, #9
 800ffb8:	d94d      	bls.n	8010056 <_svfiprintf_r+0x16e>
 800ffba:	b1b8      	cbz	r0, 800ffec <_svfiprintf_r+0x104>
 800ffbc:	e00f      	b.n	800ffde <_svfiprintf_r+0xf6>
 800ffbe:	462f      	mov	r7, r5
 800ffc0:	e7b8      	b.n	800ff34 <_svfiprintf_r+0x4c>
 800ffc2:	4a40      	ldr	r2, [pc, #256]	; (80100c4 <_svfiprintf_r+0x1dc>)
 800ffc4:	1a80      	subs	r0, r0, r2
 800ffc6:	fa0b f000 	lsl.w	r0, fp, r0
 800ffca:	4318      	orrs	r0, r3
 800ffcc:	9004      	str	r0, [sp, #16]
 800ffce:	463d      	mov	r5, r7
 800ffd0:	e7d3      	b.n	800ff7a <_svfiprintf_r+0x92>
 800ffd2:	9a03      	ldr	r2, [sp, #12]
 800ffd4:	1d11      	adds	r1, r2, #4
 800ffd6:	6812      	ldr	r2, [r2, #0]
 800ffd8:	9103      	str	r1, [sp, #12]
 800ffda:	2a00      	cmp	r2, #0
 800ffdc:	db01      	blt.n	800ffe2 <_svfiprintf_r+0xfa>
 800ffde:	9207      	str	r2, [sp, #28]
 800ffe0:	e004      	b.n	800ffec <_svfiprintf_r+0x104>
 800ffe2:	4252      	negs	r2, r2
 800ffe4:	f043 0302 	orr.w	r3, r3, #2
 800ffe8:	9207      	str	r2, [sp, #28]
 800ffea:	9304      	str	r3, [sp, #16]
 800ffec:	783b      	ldrb	r3, [r7, #0]
 800ffee:	2b2e      	cmp	r3, #46	; 0x2e
 800fff0:	d10c      	bne.n	801000c <_svfiprintf_r+0x124>
 800fff2:	787b      	ldrb	r3, [r7, #1]
 800fff4:	2b2a      	cmp	r3, #42	; 0x2a
 800fff6:	d133      	bne.n	8010060 <_svfiprintf_r+0x178>
 800fff8:	9b03      	ldr	r3, [sp, #12]
 800fffa:	1d1a      	adds	r2, r3, #4
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	9203      	str	r2, [sp, #12]
 8010000:	2b00      	cmp	r3, #0
 8010002:	bfb8      	it	lt
 8010004:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8010008:	3702      	adds	r7, #2
 801000a:	9305      	str	r3, [sp, #20]
 801000c:	4d2e      	ldr	r5, [pc, #184]	; (80100c8 <_svfiprintf_r+0x1e0>)
 801000e:	7839      	ldrb	r1, [r7, #0]
 8010010:	2203      	movs	r2, #3
 8010012:	4628      	mov	r0, r5
 8010014:	f7f0 f92c 	bl	8000270 <memchr>
 8010018:	b138      	cbz	r0, 801002a <_svfiprintf_r+0x142>
 801001a:	2340      	movs	r3, #64	; 0x40
 801001c:	1b40      	subs	r0, r0, r5
 801001e:	fa03 f000 	lsl.w	r0, r3, r0
 8010022:	9b04      	ldr	r3, [sp, #16]
 8010024:	4303      	orrs	r3, r0
 8010026:	3701      	adds	r7, #1
 8010028:	9304      	str	r3, [sp, #16]
 801002a:	7839      	ldrb	r1, [r7, #0]
 801002c:	4827      	ldr	r0, [pc, #156]	; (80100cc <_svfiprintf_r+0x1e4>)
 801002e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010032:	2206      	movs	r2, #6
 8010034:	1c7e      	adds	r6, r7, #1
 8010036:	f7f0 f91b 	bl	8000270 <memchr>
 801003a:	2800      	cmp	r0, #0
 801003c:	d038      	beq.n	80100b0 <_svfiprintf_r+0x1c8>
 801003e:	4b24      	ldr	r3, [pc, #144]	; (80100d0 <_svfiprintf_r+0x1e8>)
 8010040:	bb13      	cbnz	r3, 8010088 <_svfiprintf_r+0x1a0>
 8010042:	9b03      	ldr	r3, [sp, #12]
 8010044:	3307      	adds	r3, #7
 8010046:	f023 0307 	bic.w	r3, r3, #7
 801004a:	3308      	adds	r3, #8
 801004c:	9303      	str	r3, [sp, #12]
 801004e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010050:	444b      	add	r3, r9
 8010052:	9309      	str	r3, [sp, #36]	; 0x24
 8010054:	e76d      	b.n	800ff32 <_svfiprintf_r+0x4a>
 8010056:	fb05 3202 	mla	r2, r5, r2, r3
 801005a:	2001      	movs	r0, #1
 801005c:	460f      	mov	r7, r1
 801005e:	e7a6      	b.n	800ffae <_svfiprintf_r+0xc6>
 8010060:	2300      	movs	r3, #0
 8010062:	3701      	adds	r7, #1
 8010064:	9305      	str	r3, [sp, #20]
 8010066:	4619      	mov	r1, r3
 8010068:	250a      	movs	r5, #10
 801006a:	4638      	mov	r0, r7
 801006c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010070:	3a30      	subs	r2, #48	; 0x30
 8010072:	2a09      	cmp	r2, #9
 8010074:	d903      	bls.n	801007e <_svfiprintf_r+0x196>
 8010076:	2b00      	cmp	r3, #0
 8010078:	d0c8      	beq.n	801000c <_svfiprintf_r+0x124>
 801007a:	9105      	str	r1, [sp, #20]
 801007c:	e7c6      	b.n	801000c <_svfiprintf_r+0x124>
 801007e:	fb05 2101 	mla	r1, r5, r1, r2
 8010082:	2301      	movs	r3, #1
 8010084:	4607      	mov	r7, r0
 8010086:	e7f0      	b.n	801006a <_svfiprintf_r+0x182>
 8010088:	ab03      	add	r3, sp, #12
 801008a:	9300      	str	r3, [sp, #0]
 801008c:	4622      	mov	r2, r4
 801008e:	4b11      	ldr	r3, [pc, #68]	; (80100d4 <_svfiprintf_r+0x1ec>)
 8010090:	a904      	add	r1, sp, #16
 8010092:	4640      	mov	r0, r8
 8010094:	f3af 8000 	nop.w
 8010098:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 801009c:	4681      	mov	r9, r0
 801009e:	d1d6      	bne.n	801004e <_svfiprintf_r+0x166>
 80100a0:	89a3      	ldrh	r3, [r4, #12]
 80100a2:	065b      	lsls	r3, r3, #25
 80100a4:	f53f af35 	bmi.w	800ff12 <_svfiprintf_r+0x2a>
 80100a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80100aa:	b01d      	add	sp, #116	; 0x74
 80100ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100b0:	ab03      	add	r3, sp, #12
 80100b2:	9300      	str	r3, [sp, #0]
 80100b4:	4622      	mov	r2, r4
 80100b6:	4b07      	ldr	r3, [pc, #28]	; (80100d4 <_svfiprintf_r+0x1ec>)
 80100b8:	a904      	add	r1, sp, #16
 80100ba:	4640      	mov	r0, r8
 80100bc:	f000 f9c2 	bl	8010444 <_printf_i>
 80100c0:	e7ea      	b.n	8010098 <_svfiprintf_r+0x1b0>
 80100c2:	bf00      	nop
 80100c4:	080120c8 	.word	0x080120c8
 80100c8:	080120ce 	.word	0x080120ce
 80100cc:	080120d2 	.word	0x080120d2
 80100d0:	00000000 	.word	0x00000000
 80100d4:	0800fe35 	.word	0x0800fe35

080100d8 <__sfputc_r>:
 80100d8:	6893      	ldr	r3, [r2, #8]
 80100da:	3b01      	subs	r3, #1
 80100dc:	2b00      	cmp	r3, #0
 80100de:	b410      	push	{r4}
 80100e0:	6093      	str	r3, [r2, #8]
 80100e2:	da08      	bge.n	80100f6 <__sfputc_r+0x1e>
 80100e4:	6994      	ldr	r4, [r2, #24]
 80100e6:	42a3      	cmp	r3, r4
 80100e8:	db01      	blt.n	80100ee <__sfputc_r+0x16>
 80100ea:	290a      	cmp	r1, #10
 80100ec:	d103      	bne.n	80100f6 <__sfputc_r+0x1e>
 80100ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80100f2:	f000 bb0d 	b.w	8010710 <__swbuf_r>
 80100f6:	6813      	ldr	r3, [r2, #0]
 80100f8:	1c58      	adds	r0, r3, #1
 80100fa:	6010      	str	r0, [r2, #0]
 80100fc:	7019      	strb	r1, [r3, #0]
 80100fe:	4608      	mov	r0, r1
 8010100:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010104:	4770      	bx	lr

08010106 <__sfputs_r>:
 8010106:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010108:	4606      	mov	r6, r0
 801010a:	460f      	mov	r7, r1
 801010c:	4614      	mov	r4, r2
 801010e:	18d5      	adds	r5, r2, r3
 8010110:	42ac      	cmp	r4, r5
 8010112:	d101      	bne.n	8010118 <__sfputs_r+0x12>
 8010114:	2000      	movs	r0, #0
 8010116:	e007      	b.n	8010128 <__sfputs_r+0x22>
 8010118:	463a      	mov	r2, r7
 801011a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801011e:	4630      	mov	r0, r6
 8010120:	f7ff ffda 	bl	80100d8 <__sfputc_r>
 8010124:	1c43      	adds	r3, r0, #1
 8010126:	d1f3      	bne.n	8010110 <__sfputs_r+0xa>
 8010128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801012c <_vfiprintf_r>:
 801012c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010130:	460c      	mov	r4, r1
 8010132:	b09d      	sub	sp, #116	; 0x74
 8010134:	4617      	mov	r7, r2
 8010136:	461d      	mov	r5, r3
 8010138:	4606      	mov	r6, r0
 801013a:	b118      	cbz	r0, 8010144 <_vfiprintf_r+0x18>
 801013c:	6983      	ldr	r3, [r0, #24]
 801013e:	b90b      	cbnz	r3, 8010144 <_vfiprintf_r+0x18>
 8010140:	f7ff fd3e 	bl	800fbc0 <__sinit>
 8010144:	4b7c      	ldr	r3, [pc, #496]	; (8010338 <_vfiprintf_r+0x20c>)
 8010146:	429c      	cmp	r4, r3
 8010148:	d158      	bne.n	80101fc <_vfiprintf_r+0xd0>
 801014a:	6874      	ldr	r4, [r6, #4]
 801014c:	89a3      	ldrh	r3, [r4, #12]
 801014e:	0718      	lsls	r0, r3, #28
 8010150:	d55e      	bpl.n	8010210 <_vfiprintf_r+0xe4>
 8010152:	6923      	ldr	r3, [r4, #16]
 8010154:	2b00      	cmp	r3, #0
 8010156:	d05b      	beq.n	8010210 <_vfiprintf_r+0xe4>
 8010158:	2300      	movs	r3, #0
 801015a:	9309      	str	r3, [sp, #36]	; 0x24
 801015c:	2320      	movs	r3, #32
 801015e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010162:	2330      	movs	r3, #48	; 0x30
 8010164:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010168:	9503      	str	r5, [sp, #12]
 801016a:	f04f 0b01 	mov.w	fp, #1
 801016e:	46b8      	mov	r8, r7
 8010170:	4645      	mov	r5, r8
 8010172:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010176:	b10b      	cbz	r3, 801017c <_vfiprintf_r+0x50>
 8010178:	2b25      	cmp	r3, #37	; 0x25
 801017a:	d154      	bne.n	8010226 <_vfiprintf_r+0xfa>
 801017c:	ebb8 0a07 	subs.w	sl, r8, r7
 8010180:	d00b      	beq.n	801019a <_vfiprintf_r+0x6e>
 8010182:	4653      	mov	r3, sl
 8010184:	463a      	mov	r2, r7
 8010186:	4621      	mov	r1, r4
 8010188:	4630      	mov	r0, r6
 801018a:	f7ff ffbc 	bl	8010106 <__sfputs_r>
 801018e:	3001      	adds	r0, #1
 8010190:	f000 80c2 	beq.w	8010318 <_vfiprintf_r+0x1ec>
 8010194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010196:	4453      	add	r3, sl
 8010198:	9309      	str	r3, [sp, #36]	; 0x24
 801019a:	f898 3000 	ldrb.w	r3, [r8]
 801019e:	2b00      	cmp	r3, #0
 80101a0:	f000 80ba 	beq.w	8010318 <_vfiprintf_r+0x1ec>
 80101a4:	2300      	movs	r3, #0
 80101a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80101aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80101ae:	9304      	str	r3, [sp, #16]
 80101b0:	9307      	str	r3, [sp, #28]
 80101b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80101b6:	931a      	str	r3, [sp, #104]	; 0x68
 80101b8:	46a8      	mov	r8, r5
 80101ba:	2205      	movs	r2, #5
 80101bc:	f818 1b01 	ldrb.w	r1, [r8], #1
 80101c0:	485e      	ldr	r0, [pc, #376]	; (801033c <_vfiprintf_r+0x210>)
 80101c2:	f7f0 f855 	bl	8000270 <memchr>
 80101c6:	9b04      	ldr	r3, [sp, #16]
 80101c8:	bb78      	cbnz	r0, 801022a <_vfiprintf_r+0xfe>
 80101ca:	06d9      	lsls	r1, r3, #27
 80101cc:	bf44      	itt	mi
 80101ce:	2220      	movmi	r2, #32
 80101d0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80101d4:	071a      	lsls	r2, r3, #28
 80101d6:	bf44      	itt	mi
 80101d8:	222b      	movmi	r2, #43	; 0x2b
 80101da:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80101de:	782a      	ldrb	r2, [r5, #0]
 80101e0:	2a2a      	cmp	r2, #42	; 0x2a
 80101e2:	d02a      	beq.n	801023a <_vfiprintf_r+0x10e>
 80101e4:	9a07      	ldr	r2, [sp, #28]
 80101e6:	46a8      	mov	r8, r5
 80101e8:	2000      	movs	r0, #0
 80101ea:	250a      	movs	r5, #10
 80101ec:	4641      	mov	r1, r8
 80101ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80101f2:	3b30      	subs	r3, #48	; 0x30
 80101f4:	2b09      	cmp	r3, #9
 80101f6:	d969      	bls.n	80102cc <_vfiprintf_r+0x1a0>
 80101f8:	b360      	cbz	r0, 8010254 <_vfiprintf_r+0x128>
 80101fa:	e024      	b.n	8010246 <_vfiprintf_r+0x11a>
 80101fc:	4b50      	ldr	r3, [pc, #320]	; (8010340 <_vfiprintf_r+0x214>)
 80101fe:	429c      	cmp	r4, r3
 8010200:	d101      	bne.n	8010206 <_vfiprintf_r+0xda>
 8010202:	68b4      	ldr	r4, [r6, #8]
 8010204:	e7a2      	b.n	801014c <_vfiprintf_r+0x20>
 8010206:	4b4f      	ldr	r3, [pc, #316]	; (8010344 <_vfiprintf_r+0x218>)
 8010208:	429c      	cmp	r4, r3
 801020a:	bf08      	it	eq
 801020c:	68f4      	ldreq	r4, [r6, #12]
 801020e:	e79d      	b.n	801014c <_vfiprintf_r+0x20>
 8010210:	4621      	mov	r1, r4
 8010212:	4630      	mov	r0, r6
 8010214:	f000 fae0 	bl	80107d8 <__swsetup_r>
 8010218:	2800      	cmp	r0, #0
 801021a:	d09d      	beq.n	8010158 <_vfiprintf_r+0x2c>
 801021c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010220:	b01d      	add	sp, #116	; 0x74
 8010222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010226:	46a8      	mov	r8, r5
 8010228:	e7a2      	b.n	8010170 <_vfiprintf_r+0x44>
 801022a:	4a44      	ldr	r2, [pc, #272]	; (801033c <_vfiprintf_r+0x210>)
 801022c:	1a80      	subs	r0, r0, r2
 801022e:	fa0b f000 	lsl.w	r0, fp, r0
 8010232:	4318      	orrs	r0, r3
 8010234:	9004      	str	r0, [sp, #16]
 8010236:	4645      	mov	r5, r8
 8010238:	e7be      	b.n	80101b8 <_vfiprintf_r+0x8c>
 801023a:	9a03      	ldr	r2, [sp, #12]
 801023c:	1d11      	adds	r1, r2, #4
 801023e:	6812      	ldr	r2, [r2, #0]
 8010240:	9103      	str	r1, [sp, #12]
 8010242:	2a00      	cmp	r2, #0
 8010244:	db01      	blt.n	801024a <_vfiprintf_r+0x11e>
 8010246:	9207      	str	r2, [sp, #28]
 8010248:	e004      	b.n	8010254 <_vfiprintf_r+0x128>
 801024a:	4252      	negs	r2, r2
 801024c:	f043 0302 	orr.w	r3, r3, #2
 8010250:	9207      	str	r2, [sp, #28]
 8010252:	9304      	str	r3, [sp, #16]
 8010254:	f898 3000 	ldrb.w	r3, [r8]
 8010258:	2b2e      	cmp	r3, #46	; 0x2e
 801025a:	d10e      	bne.n	801027a <_vfiprintf_r+0x14e>
 801025c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8010260:	2b2a      	cmp	r3, #42	; 0x2a
 8010262:	d138      	bne.n	80102d6 <_vfiprintf_r+0x1aa>
 8010264:	9b03      	ldr	r3, [sp, #12]
 8010266:	1d1a      	adds	r2, r3, #4
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	9203      	str	r2, [sp, #12]
 801026c:	2b00      	cmp	r3, #0
 801026e:	bfb8      	it	lt
 8010270:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8010274:	f108 0802 	add.w	r8, r8, #2
 8010278:	9305      	str	r3, [sp, #20]
 801027a:	4d33      	ldr	r5, [pc, #204]	; (8010348 <_vfiprintf_r+0x21c>)
 801027c:	f898 1000 	ldrb.w	r1, [r8]
 8010280:	2203      	movs	r2, #3
 8010282:	4628      	mov	r0, r5
 8010284:	f7ef fff4 	bl	8000270 <memchr>
 8010288:	b140      	cbz	r0, 801029c <_vfiprintf_r+0x170>
 801028a:	2340      	movs	r3, #64	; 0x40
 801028c:	1b40      	subs	r0, r0, r5
 801028e:	fa03 f000 	lsl.w	r0, r3, r0
 8010292:	9b04      	ldr	r3, [sp, #16]
 8010294:	4303      	orrs	r3, r0
 8010296:	f108 0801 	add.w	r8, r8, #1
 801029a:	9304      	str	r3, [sp, #16]
 801029c:	f898 1000 	ldrb.w	r1, [r8]
 80102a0:	482a      	ldr	r0, [pc, #168]	; (801034c <_vfiprintf_r+0x220>)
 80102a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80102a6:	2206      	movs	r2, #6
 80102a8:	f108 0701 	add.w	r7, r8, #1
 80102ac:	f7ef ffe0 	bl	8000270 <memchr>
 80102b0:	2800      	cmp	r0, #0
 80102b2:	d037      	beq.n	8010324 <_vfiprintf_r+0x1f8>
 80102b4:	4b26      	ldr	r3, [pc, #152]	; (8010350 <_vfiprintf_r+0x224>)
 80102b6:	bb1b      	cbnz	r3, 8010300 <_vfiprintf_r+0x1d4>
 80102b8:	9b03      	ldr	r3, [sp, #12]
 80102ba:	3307      	adds	r3, #7
 80102bc:	f023 0307 	bic.w	r3, r3, #7
 80102c0:	3308      	adds	r3, #8
 80102c2:	9303      	str	r3, [sp, #12]
 80102c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102c6:	444b      	add	r3, r9
 80102c8:	9309      	str	r3, [sp, #36]	; 0x24
 80102ca:	e750      	b.n	801016e <_vfiprintf_r+0x42>
 80102cc:	fb05 3202 	mla	r2, r5, r2, r3
 80102d0:	2001      	movs	r0, #1
 80102d2:	4688      	mov	r8, r1
 80102d4:	e78a      	b.n	80101ec <_vfiprintf_r+0xc0>
 80102d6:	2300      	movs	r3, #0
 80102d8:	f108 0801 	add.w	r8, r8, #1
 80102dc:	9305      	str	r3, [sp, #20]
 80102de:	4619      	mov	r1, r3
 80102e0:	250a      	movs	r5, #10
 80102e2:	4640      	mov	r0, r8
 80102e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80102e8:	3a30      	subs	r2, #48	; 0x30
 80102ea:	2a09      	cmp	r2, #9
 80102ec:	d903      	bls.n	80102f6 <_vfiprintf_r+0x1ca>
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d0c3      	beq.n	801027a <_vfiprintf_r+0x14e>
 80102f2:	9105      	str	r1, [sp, #20]
 80102f4:	e7c1      	b.n	801027a <_vfiprintf_r+0x14e>
 80102f6:	fb05 2101 	mla	r1, r5, r1, r2
 80102fa:	2301      	movs	r3, #1
 80102fc:	4680      	mov	r8, r0
 80102fe:	e7f0      	b.n	80102e2 <_vfiprintf_r+0x1b6>
 8010300:	ab03      	add	r3, sp, #12
 8010302:	9300      	str	r3, [sp, #0]
 8010304:	4622      	mov	r2, r4
 8010306:	4b13      	ldr	r3, [pc, #76]	; (8010354 <_vfiprintf_r+0x228>)
 8010308:	a904      	add	r1, sp, #16
 801030a:	4630      	mov	r0, r6
 801030c:	f3af 8000 	nop.w
 8010310:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8010314:	4681      	mov	r9, r0
 8010316:	d1d5      	bne.n	80102c4 <_vfiprintf_r+0x198>
 8010318:	89a3      	ldrh	r3, [r4, #12]
 801031a:	065b      	lsls	r3, r3, #25
 801031c:	f53f af7e 	bmi.w	801021c <_vfiprintf_r+0xf0>
 8010320:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010322:	e77d      	b.n	8010220 <_vfiprintf_r+0xf4>
 8010324:	ab03      	add	r3, sp, #12
 8010326:	9300      	str	r3, [sp, #0]
 8010328:	4622      	mov	r2, r4
 801032a:	4b0a      	ldr	r3, [pc, #40]	; (8010354 <_vfiprintf_r+0x228>)
 801032c:	a904      	add	r1, sp, #16
 801032e:	4630      	mov	r0, r6
 8010330:	f000 f888 	bl	8010444 <_printf_i>
 8010334:	e7ec      	b.n	8010310 <_vfiprintf_r+0x1e4>
 8010336:	bf00      	nop
 8010338:	08012088 	.word	0x08012088
 801033c:	080120c8 	.word	0x080120c8
 8010340:	080120a8 	.word	0x080120a8
 8010344:	08012068 	.word	0x08012068
 8010348:	080120ce 	.word	0x080120ce
 801034c:	080120d2 	.word	0x080120d2
 8010350:	00000000 	.word	0x00000000
 8010354:	08010107 	.word	0x08010107

08010358 <_printf_common>:
 8010358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801035c:	4691      	mov	r9, r2
 801035e:	461f      	mov	r7, r3
 8010360:	688a      	ldr	r2, [r1, #8]
 8010362:	690b      	ldr	r3, [r1, #16]
 8010364:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010368:	4293      	cmp	r3, r2
 801036a:	bfb8      	it	lt
 801036c:	4613      	movlt	r3, r2
 801036e:	f8c9 3000 	str.w	r3, [r9]
 8010372:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010376:	4606      	mov	r6, r0
 8010378:	460c      	mov	r4, r1
 801037a:	b112      	cbz	r2, 8010382 <_printf_common+0x2a>
 801037c:	3301      	adds	r3, #1
 801037e:	f8c9 3000 	str.w	r3, [r9]
 8010382:	6823      	ldr	r3, [r4, #0]
 8010384:	0699      	lsls	r1, r3, #26
 8010386:	bf42      	ittt	mi
 8010388:	f8d9 3000 	ldrmi.w	r3, [r9]
 801038c:	3302      	addmi	r3, #2
 801038e:	f8c9 3000 	strmi.w	r3, [r9]
 8010392:	6825      	ldr	r5, [r4, #0]
 8010394:	f015 0506 	ands.w	r5, r5, #6
 8010398:	d107      	bne.n	80103aa <_printf_common+0x52>
 801039a:	f104 0a19 	add.w	sl, r4, #25
 801039e:	68e3      	ldr	r3, [r4, #12]
 80103a0:	f8d9 2000 	ldr.w	r2, [r9]
 80103a4:	1a9b      	subs	r3, r3, r2
 80103a6:	42ab      	cmp	r3, r5
 80103a8:	dc28      	bgt.n	80103fc <_printf_common+0xa4>
 80103aa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80103ae:	6822      	ldr	r2, [r4, #0]
 80103b0:	3300      	adds	r3, #0
 80103b2:	bf18      	it	ne
 80103b4:	2301      	movne	r3, #1
 80103b6:	0692      	lsls	r2, r2, #26
 80103b8:	d42d      	bmi.n	8010416 <_printf_common+0xbe>
 80103ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80103be:	4639      	mov	r1, r7
 80103c0:	4630      	mov	r0, r6
 80103c2:	47c0      	blx	r8
 80103c4:	3001      	adds	r0, #1
 80103c6:	d020      	beq.n	801040a <_printf_common+0xb2>
 80103c8:	6823      	ldr	r3, [r4, #0]
 80103ca:	68e5      	ldr	r5, [r4, #12]
 80103cc:	f8d9 2000 	ldr.w	r2, [r9]
 80103d0:	f003 0306 	and.w	r3, r3, #6
 80103d4:	2b04      	cmp	r3, #4
 80103d6:	bf08      	it	eq
 80103d8:	1aad      	subeq	r5, r5, r2
 80103da:	68a3      	ldr	r3, [r4, #8]
 80103dc:	6922      	ldr	r2, [r4, #16]
 80103de:	bf0c      	ite	eq
 80103e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80103e4:	2500      	movne	r5, #0
 80103e6:	4293      	cmp	r3, r2
 80103e8:	bfc4      	itt	gt
 80103ea:	1a9b      	subgt	r3, r3, r2
 80103ec:	18ed      	addgt	r5, r5, r3
 80103ee:	f04f 0900 	mov.w	r9, #0
 80103f2:	341a      	adds	r4, #26
 80103f4:	454d      	cmp	r5, r9
 80103f6:	d11a      	bne.n	801042e <_printf_common+0xd6>
 80103f8:	2000      	movs	r0, #0
 80103fa:	e008      	b.n	801040e <_printf_common+0xb6>
 80103fc:	2301      	movs	r3, #1
 80103fe:	4652      	mov	r2, sl
 8010400:	4639      	mov	r1, r7
 8010402:	4630      	mov	r0, r6
 8010404:	47c0      	blx	r8
 8010406:	3001      	adds	r0, #1
 8010408:	d103      	bne.n	8010412 <_printf_common+0xba>
 801040a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010412:	3501      	adds	r5, #1
 8010414:	e7c3      	b.n	801039e <_printf_common+0x46>
 8010416:	18e1      	adds	r1, r4, r3
 8010418:	1c5a      	adds	r2, r3, #1
 801041a:	2030      	movs	r0, #48	; 0x30
 801041c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010420:	4422      	add	r2, r4
 8010422:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010426:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801042a:	3302      	adds	r3, #2
 801042c:	e7c5      	b.n	80103ba <_printf_common+0x62>
 801042e:	2301      	movs	r3, #1
 8010430:	4622      	mov	r2, r4
 8010432:	4639      	mov	r1, r7
 8010434:	4630      	mov	r0, r6
 8010436:	47c0      	blx	r8
 8010438:	3001      	adds	r0, #1
 801043a:	d0e6      	beq.n	801040a <_printf_common+0xb2>
 801043c:	f109 0901 	add.w	r9, r9, #1
 8010440:	e7d8      	b.n	80103f4 <_printf_common+0x9c>
	...

08010444 <_printf_i>:
 8010444:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010448:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801044c:	460c      	mov	r4, r1
 801044e:	7e09      	ldrb	r1, [r1, #24]
 8010450:	b085      	sub	sp, #20
 8010452:	296e      	cmp	r1, #110	; 0x6e
 8010454:	4617      	mov	r7, r2
 8010456:	4606      	mov	r6, r0
 8010458:	4698      	mov	r8, r3
 801045a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801045c:	f000 80b3 	beq.w	80105c6 <_printf_i+0x182>
 8010460:	d822      	bhi.n	80104a8 <_printf_i+0x64>
 8010462:	2963      	cmp	r1, #99	; 0x63
 8010464:	d036      	beq.n	80104d4 <_printf_i+0x90>
 8010466:	d80a      	bhi.n	801047e <_printf_i+0x3a>
 8010468:	2900      	cmp	r1, #0
 801046a:	f000 80b9 	beq.w	80105e0 <_printf_i+0x19c>
 801046e:	2958      	cmp	r1, #88	; 0x58
 8010470:	f000 8083 	beq.w	801057a <_printf_i+0x136>
 8010474:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010478:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801047c:	e032      	b.n	80104e4 <_printf_i+0xa0>
 801047e:	2964      	cmp	r1, #100	; 0x64
 8010480:	d001      	beq.n	8010486 <_printf_i+0x42>
 8010482:	2969      	cmp	r1, #105	; 0x69
 8010484:	d1f6      	bne.n	8010474 <_printf_i+0x30>
 8010486:	6820      	ldr	r0, [r4, #0]
 8010488:	6813      	ldr	r3, [r2, #0]
 801048a:	0605      	lsls	r5, r0, #24
 801048c:	f103 0104 	add.w	r1, r3, #4
 8010490:	d52a      	bpl.n	80104e8 <_printf_i+0xa4>
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	6011      	str	r1, [r2, #0]
 8010496:	2b00      	cmp	r3, #0
 8010498:	da03      	bge.n	80104a2 <_printf_i+0x5e>
 801049a:	222d      	movs	r2, #45	; 0x2d
 801049c:	425b      	negs	r3, r3
 801049e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80104a2:	486f      	ldr	r0, [pc, #444]	; (8010660 <_printf_i+0x21c>)
 80104a4:	220a      	movs	r2, #10
 80104a6:	e039      	b.n	801051c <_printf_i+0xd8>
 80104a8:	2973      	cmp	r1, #115	; 0x73
 80104aa:	f000 809d 	beq.w	80105e8 <_printf_i+0x1a4>
 80104ae:	d808      	bhi.n	80104c2 <_printf_i+0x7e>
 80104b0:	296f      	cmp	r1, #111	; 0x6f
 80104b2:	d020      	beq.n	80104f6 <_printf_i+0xb2>
 80104b4:	2970      	cmp	r1, #112	; 0x70
 80104b6:	d1dd      	bne.n	8010474 <_printf_i+0x30>
 80104b8:	6823      	ldr	r3, [r4, #0]
 80104ba:	f043 0320 	orr.w	r3, r3, #32
 80104be:	6023      	str	r3, [r4, #0]
 80104c0:	e003      	b.n	80104ca <_printf_i+0x86>
 80104c2:	2975      	cmp	r1, #117	; 0x75
 80104c4:	d017      	beq.n	80104f6 <_printf_i+0xb2>
 80104c6:	2978      	cmp	r1, #120	; 0x78
 80104c8:	d1d4      	bne.n	8010474 <_printf_i+0x30>
 80104ca:	2378      	movs	r3, #120	; 0x78
 80104cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80104d0:	4864      	ldr	r0, [pc, #400]	; (8010664 <_printf_i+0x220>)
 80104d2:	e055      	b.n	8010580 <_printf_i+0x13c>
 80104d4:	6813      	ldr	r3, [r2, #0]
 80104d6:	1d19      	adds	r1, r3, #4
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	6011      	str	r1, [r2, #0]
 80104dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80104e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80104e4:	2301      	movs	r3, #1
 80104e6:	e08c      	b.n	8010602 <_printf_i+0x1be>
 80104e8:	681b      	ldr	r3, [r3, #0]
 80104ea:	6011      	str	r1, [r2, #0]
 80104ec:	f010 0f40 	tst.w	r0, #64	; 0x40
 80104f0:	bf18      	it	ne
 80104f2:	b21b      	sxthne	r3, r3
 80104f4:	e7cf      	b.n	8010496 <_printf_i+0x52>
 80104f6:	6813      	ldr	r3, [r2, #0]
 80104f8:	6825      	ldr	r5, [r4, #0]
 80104fa:	1d18      	adds	r0, r3, #4
 80104fc:	6010      	str	r0, [r2, #0]
 80104fe:	0628      	lsls	r0, r5, #24
 8010500:	d501      	bpl.n	8010506 <_printf_i+0xc2>
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	e002      	b.n	801050c <_printf_i+0xc8>
 8010506:	0668      	lsls	r0, r5, #25
 8010508:	d5fb      	bpl.n	8010502 <_printf_i+0xbe>
 801050a:	881b      	ldrh	r3, [r3, #0]
 801050c:	4854      	ldr	r0, [pc, #336]	; (8010660 <_printf_i+0x21c>)
 801050e:	296f      	cmp	r1, #111	; 0x6f
 8010510:	bf14      	ite	ne
 8010512:	220a      	movne	r2, #10
 8010514:	2208      	moveq	r2, #8
 8010516:	2100      	movs	r1, #0
 8010518:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801051c:	6865      	ldr	r5, [r4, #4]
 801051e:	60a5      	str	r5, [r4, #8]
 8010520:	2d00      	cmp	r5, #0
 8010522:	f2c0 8095 	blt.w	8010650 <_printf_i+0x20c>
 8010526:	6821      	ldr	r1, [r4, #0]
 8010528:	f021 0104 	bic.w	r1, r1, #4
 801052c:	6021      	str	r1, [r4, #0]
 801052e:	2b00      	cmp	r3, #0
 8010530:	d13d      	bne.n	80105ae <_printf_i+0x16a>
 8010532:	2d00      	cmp	r5, #0
 8010534:	f040 808e 	bne.w	8010654 <_printf_i+0x210>
 8010538:	4665      	mov	r5, ip
 801053a:	2a08      	cmp	r2, #8
 801053c:	d10b      	bne.n	8010556 <_printf_i+0x112>
 801053e:	6823      	ldr	r3, [r4, #0]
 8010540:	07db      	lsls	r3, r3, #31
 8010542:	d508      	bpl.n	8010556 <_printf_i+0x112>
 8010544:	6923      	ldr	r3, [r4, #16]
 8010546:	6862      	ldr	r2, [r4, #4]
 8010548:	429a      	cmp	r2, r3
 801054a:	bfde      	ittt	le
 801054c:	2330      	movle	r3, #48	; 0x30
 801054e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010552:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8010556:	ebac 0305 	sub.w	r3, ip, r5
 801055a:	6123      	str	r3, [r4, #16]
 801055c:	f8cd 8000 	str.w	r8, [sp]
 8010560:	463b      	mov	r3, r7
 8010562:	aa03      	add	r2, sp, #12
 8010564:	4621      	mov	r1, r4
 8010566:	4630      	mov	r0, r6
 8010568:	f7ff fef6 	bl	8010358 <_printf_common>
 801056c:	3001      	adds	r0, #1
 801056e:	d14d      	bne.n	801060c <_printf_i+0x1c8>
 8010570:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010574:	b005      	add	sp, #20
 8010576:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801057a:	4839      	ldr	r0, [pc, #228]	; (8010660 <_printf_i+0x21c>)
 801057c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8010580:	6813      	ldr	r3, [r2, #0]
 8010582:	6821      	ldr	r1, [r4, #0]
 8010584:	1d1d      	adds	r5, r3, #4
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	6015      	str	r5, [r2, #0]
 801058a:	060a      	lsls	r2, r1, #24
 801058c:	d50b      	bpl.n	80105a6 <_printf_i+0x162>
 801058e:	07ca      	lsls	r2, r1, #31
 8010590:	bf44      	itt	mi
 8010592:	f041 0120 	orrmi.w	r1, r1, #32
 8010596:	6021      	strmi	r1, [r4, #0]
 8010598:	b91b      	cbnz	r3, 80105a2 <_printf_i+0x15e>
 801059a:	6822      	ldr	r2, [r4, #0]
 801059c:	f022 0220 	bic.w	r2, r2, #32
 80105a0:	6022      	str	r2, [r4, #0]
 80105a2:	2210      	movs	r2, #16
 80105a4:	e7b7      	b.n	8010516 <_printf_i+0xd2>
 80105a6:	064d      	lsls	r5, r1, #25
 80105a8:	bf48      	it	mi
 80105aa:	b29b      	uxthmi	r3, r3
 80105ac:	e7ef      	b.n	801058e <_printf_i+0x14a>
 80105ae:	4665      	mov	r5, ip
 80105b0:	fbb3 f1f2 	udiv	r1, r3, r2
 80105b4:	fb02 3311 	mls	r3, r2, r1, r3
 80105b8:	5cc3      	ldrb	r3, [r0, r3]
 80105ba:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80105be:	460b      	mov	r3, r1
 80105c0:	2900      	cmp	r1, #0
 80105c2:	d1f5      	bne.n	80105b0 <_printf_i+0x16c>
 80105c4:	e7b9      	b.n	801053a <_printf_i+0xf6>
 80105c6:	6813      	ldr	r3, [r2, #0]
 80105c8:	6825      	ldr	r5, [r4, #0]
 80105ca:	6961      	ldr	r1, [r4, #20]
 80105cc:	1d18      	adds	r0, r3, #4
 80105ce:	6010      	str	r0, [r2, #0]
 80105d0:	0628      	lsls	r0, r5, #24
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	d501      	bpl.n	80105da <_printf_i+0x196>
 80105d6:	6019      	str	r1, [r3, #0]
 80105d8:	e002      	b.n	80105e0 <_printf_i+0x19c>
 80105da:	066a      	lsls	r2, r5, #25
 80105dc:	d5fb      	bpl.n	80105d6 <_printf_i+0x192>
 80105de:	8019      	strh	r1, [r3, #0]
 80105e0:	2300      	movs	r3, #0
 80105e2:	6123      	str	r3, [r4, #16]
 80105e4:	4665      	mov	r5, ip
 80105e6:	e7b9      	b.n	801055c <_printf_i+0x118>
 80105e8:	6813      	ldr	r3, [r2, #0]
 80105ea:	1d19      	adds	r1, r3, #4
 80105ec:	6011      	str	r1, [r2, #0]
 80105ee:	681d      	ldr	r5, [r3, #0]
 80105f0:	6862      	ldr	r2, [r4, #4]
 80105f2:	2100      	movs	r1, #0
 80105f4:	4628      	mov	r0, r5
 80105f6:	f7ef fe3b 	bl	8000270 <memchr>
 80105fa:	b108      	cbz	r0, 8010600 <_printf_i+0x1bc>
 80105fc:	1b40      	subs	r0, r0, r5
 80105fe:	6060      	str	r0, [r4, #4]
 8010600:	6863      	ldr	r3, [r4, #4]
 8010602:	6123      	str	r3, [r4, #16]
 8010604:	2300      	movs	r3, #0
 8010606:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801060a:	e7a7      	b.n	801055c <_printf_i+0x118>
 801060c:	6923      	ldr	r3, [r4, #16]
 801060e:	462a      	mov	r2, r5
 8010610:	4639      	mov	r1, r7
 8010612:	4630      	mov	r0, r6
 8010614:	47c0      	blx	r8
 8010616:	3001      	adds	r0, #1
 8010618:	d0aa      	beq.n	8010570 <_printf_i+0x12c>
 801061a:	6823      	ldr	r3, [r4, #0]
 801061c:	079b      	lsls	r3, r3, #30
 801061e:	d413      	bmi.n	8010648 <_printf_i+0x204>
 8010620:	68e0      	ldr	r0, [r4, #12]
 8010622:	9b03      	ldr	r3, [sp, #12]
 8010624:	4298      	cmp	r0, r3
 8010626:	bfb8      	it	lt
 8010628:	4618      	movlt	r0, r3
 801062a:	e7a3      	b.n	8010574 <_printf_i+0x130>
 801062c:	2301      	movs	r3, #1
 801062e:	464a      	mov	r2, r9
 8010630:	4639      	mov	r1, r7
 8010632:	4630      	mov	r0, r6
 8010634:	47c0      	blx	r8
 8010636:	3001      	adds	r0, #1
 8010638:	d09a      	beq.n	8010570 <_printf_i+0x12c>
 801063a:	3501      	adds	r5, #1
 801063c:	68e3      	ldr	r3, [r4, #12]
 801063e:	9a03      	ldr	r2, [sp, #12]
 8010640:	1a9b      	subs	r3, r3, r2
 8010642:	42ab      	cmp	r3, r5
 8010644:	dcf2      	bgt.n	801062c <_printf_i+0x1e8>
 8010646:	e7eb      	b.n	8010620 <_printf_i+0x1dc>
 8010648:	2500      	movs	r5, #0
 801064a:	f104 0919 	add.w	r9, r4, #25
 801064e:	e7f5      	b.n	801063c <_printf_i+0x1f8>
 8010650:	2b00      	cmp	r3, #0
 8010652:	d1ac      	bne.n	80105ae <_printf_i+0x16a>
 8010654:	7803      	ldrb	r3, [r0, #0]
 8010656:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801065a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801065e:	e76c      	b.n	801053a <_printf_i+0xf6>
 8010660:	080120d9 	.word	0x080120d9
 8010664:	080120ea 	.word	0x080120ea

08010668 <_sbrk_r>:
 8010668:	b538      	push	{r3, r4, r5, lr}
 801066a:	4c06      	ldr	r4, [pc, #24]	; (8010684 <_sbrk_r+0x1c>)
 801066c:	2300      	movs	r3, #0
 801066e:	4605      	mov	r5, r0
 8010670:	4608      	mov	r0, r1
 8010672:	6023      	str	r3, [r4, #0]
 8010674:	f7fb fa0a 	bl	800ba8c <_sbrk>
 8010678:	1c43      	adds	r3, r0, #1
 801067a:	d102      	bne.n	8010682 <_sbrk_r+0x1a>
 801067c:	6823      	ldr	r3, [r4, #0]
 801067e:	b103      	cbz	r3, 8010682 <_sbrk_r+0x1a>
 8010680:	602b      	str	r3, [r5, #0]
 8010682:	bd38      	pop	{r3, r4, r5, pc}
 8010684:	2000b784 	.word	0x2000b784

08010688 <__sread>:
 8010688:	b510      	push	{r4, lr}
 801068a:	460c      	mov	r4, r1
 801068c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010690:	f000 fa88 	bl	8010ba4 <_read_r>
 8010694:	2800      	cmp	r0, #0
 8010696:	bfab      	itete	ge
 8010698:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801069a:	89a3      	ldrhlt	r3, [r4, #12]
 801069c:	181b      	addge	r3, r3, r0
 801069e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80106a2:	bfac      	ite	ge
 80106a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80106a6:	81a3      	strhlt	r3, [r4, #12]
 80106a8:	bd10      	pop	{r4, pc}

080106aa <__swrite>:
 80106aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106ae:	461f      	mov	r7, r3
 80106b0:	898b      	ldrh	r3, [r1, #12]
 80106b2:	05db      	lsls	r3, r3, #23
 80106b4:	4605      	mov	r5, r0
 80106b6:	460c      	mov	r4, r1
 80106b8:	4616      	mov	r6, r2
 80106ba:	d505      	bpl.n	80106c8 <__swrite+0x1e>
 80106bc:	2302      	movs	r3, #2
 80106be:	2200      	movs	r2, #0
 80106c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80106c4:	f000 f9b6 	bl	8010a34 <_lseek_r>
 80106c8:	89a3      	ldrh	r3, [r4, #12]
 80106ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80106ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80106d2:	81a3      	strh	r3, [r4, #12]
 80106d4:	4632      	mov	r2, r6
 80106d6:	463b      	mov	r3, r7
 80106d8:	4628      	mov	r0, r5
 80106da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80106de:	f000 b869 	b.w	80107b4 <_write_r>

080106e2 <__sseek>:
 80106e2:	b510      	push	{r4, lr}
 80106e4:	460c      	mov	r4, r1
 80106e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80106ea:	f000 f9a3 	bl	8010a34 <_lseek_r>
 80106ee:	1c43      	adds	r3, r0, #1
 80106f0:	89a3      	ldrh	r3, [r4, #12]
 80106f2:	bf15      	itete	ne
 80106f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80106f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80106fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80106fe:	81a3      	strheq	r3, [r4, #12]
 8010700:	bf18      	it	ne
 8010702:	81a3      	strhne	r3, [r4, #12]
 8010704:	bd10      	pop	{r4, pc}

08010706 <__sclose>:
 8010706:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801070a:	f000 b8d3 	b.w	80108b4 <_close_r>
	...

08010710 <__swbuf_r>:
 8010710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010712:	460e      	mov	r6, r1
 8010714:	4614      	mov	r4, r2
 8010716:	4605      	mov	r5, r0
 8010718:	b118      	cbz	r0, 8010722 <__swbuf_r+0x12>
 801071a:	6983      	ldr	r3, [r0, #24]
 801071c:	b90b      	cbnz	r3, 8010722 <__swbuf_r+0x12>
 801071e:	f7ff fa4f 	bl	800fbc0 <__sinit>
 8010722:	4b21      	ldr	r3, [pc, #132]	; (80107a8 <__swbuf_r+0x98>)
 8010724:	429c      	cmp	r4, r3
 8010726:	d12a      	bne.n	801077e <__swbuf_r+0x6e>
 8010728:	686c      	ldr	r4, [r5, #4]
 801072a:	69a3      	ldr	r3, [r4, #24]
 801072c:	60a3      	str	r3, [r4, #8]
 801072e:	89a3      	ldrh	r3, [r4, #12]
 8010730:	071a      	lsls	r2, r3, #28
 8010732:	d52e      	bpl.n	8010792 <__swbuf_r+0x82>
 8010734:	6923      	ldr	r3, [r4, #16]
 8010736:	b363      	cbz	r3, 8010792 <__swbuf_r+0x82>
 8010738:	6923      	ldr	r3, [r4, #16]
 801073a:	6820      	ldr	r0, [r4, #0]
 801073c:	1ac0      	subs	r0, r0, r3
 801073e:	6963      	ldr	r3, [r4, #20]
 8010740:	b2f6      	uxtb	r6, r6
 8010742:	4283      	cmp	r3, r0
 8010744:	4637      	mov	r7, r6
 8010746:	dc04      	bgt.n	8010752 <__swbuf_r+0x42>
 8010748:	4621      	mov	r1, r4
 801074a:	4628      	mov	r0, r5
 801074c:	f000 f948 	bl	80109e0 <_fflush_r>
 8010750:	bb28      	cbnz	r0, 801079e <__swbuf_r+0x8e>
 8010752:	68a3      	ldr	r3, [r4, #8]
 8010754:	3b01      	subs	r3, #1
 8010756:	60a3      	str	r3, [r4, #8]
 8010758:	6823      	ldr	r3, [r4, #0]
 801075a:	1c5a      	adds	r2, r3, #1
 801075c:	6022      	str	r2, [r4, #0]
 801075e:	701e      	strb	r6, [r3, #0]
 8010760:	6963      	ldr	r3, [r4, #20]
 8010762:	3001      	adds	r0, #1
 8010764:	4283      	cmp	r3, r0
 8010766:	d004      	beq.n	8010772 <__swbuf_r+0x62>
 8010768:	89a3      	ldrh	r3, [r4, #12]
 801076a:	07db      	lsls	r3, r3, #31
 801076c:	d519      	bpl.n	80107a2 <__swbuf_r+0x92>
 801076e:	2e0a      	cmp	r6, #10
 8010770:	d117      	bne.n	80107a2 <__swbuf_r+0x92>
 8010772:	4621      	mov	r1, r4
 8010774:	4628      	mov	r0, r5
 8010776:	f000 f933 	bl	80109e0 <_fflush_r>
 801077a:	b190      	cbz	r0, 80107a2 <__swbuf_r+0x92>
 801077c:	e00f      	b.n	801079e <__swbuf_r+0x8e>
 801077e:	4b0b      	ldr	r3, [pc, #44]	; (80107ac <__swbuf_r+0x9c>)
 8010780:	429c      	cmp	r4, r3
 8010782:	d101      	bne.n	8010788 <__swbuf_r+0x78>
 8010784:	68ac      	ldr	r4, [r5, #8]
 8010786:	e7d0      	b.n	801072a <__swbuf_r+0x1a>
 8010788:	4b09      	ldr	r3, [pc, #36]	; (80107b0 <__swbuf_r+0xa0>)
 801078a:	429c      	cmp	r4, r3
 801078c:	bf08      	it	eq
 801078e:	68ec      	ldreq	r4, [r5, #12]
 8010790:	e7cb      	b.n	801072a <__swbuf_r+0x1a>
 8010792:	4621      	mov	r1, r4
 8010794:	4628      	mov	r0, r5
 8010796:	f000 f81f 	bl	80107d8 <__swsetup_r>
 801079a:	2800      	cmp	r0, #0
 801079c:	d0cc      	beq.n	8010738 <__swbuf_r+0x28>
 801079e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80107a2:	4638      	mov	r0, r7
 80107a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80107a6:	bf00      	nop
 80107a8:	08012088 	.word	0x08012088
 80107ac:	080120a8 	.word	0x080120a8
 80107b0:	08012068 	.word	0x08012068

080107b4 <_write_r>:
 80107b4:	b538      	push	{r3, r4, r5, lr}
 80107b6:	4c07      	ldr	r4, [pc, #28]	; (80107d4 <_write_r+0x20>)
 80107b8:	4605      	mov	r5, r0
 80107ba:	4608      	mov	r0, r1
 80107bc:	4611      	mov	r1, r2
 80107be:	2200      	movs	r2, #0
 80107c0:	6022      	str	r2, [r4, #0]
 80107c2:	461a      	mov	r2, r3
 80107c4:	f7fb f954 	bl	800ba70 <_write>
 80107c8:	1c43      	adds	r3, r0, #1
 80107ca:	d102      	bne.n	80107d2 <_write_r+0x1e>
 80107cc:	6823      	ldr	r3, [r4, #0]
 80107ce:	b103      	cbz	r3, 80107d2 <_write_r+0x1e>
 80107d0:	602b      	str	r3, [r5, #0]
 80107d2:	bd38      	pop	{r3, r4, r5, pc}
 80107d4:	2000b784 	.word	0x2000b784

080107d8 <__swsetup_r>:
 80107d8:	4b32      	ldr	r3, [pc, #200]	; (80108a4 <__swsetup_r+0xcc>)
 80107da:	b570      	push	{r4, r5, r6, lr}
 80107dc:	681d      	ldr	r5, [r3, #0]
 80107de:	4606      	mov	r6, r0
 80107e0:	460c      	mov	r4, r1
 80107e2:	b125      	cbz	r5, 80107ee <__swsetup_r+0x16>
 80107e4:	69ab      	ldr	r3, [r5, #24]
 80107e6:	b913      	cbnz	r3, 80107ee <__swsetup_r+0x16>
 80107e8:	4628      	mov	r0, r5
 80107ea:	f7ff f9e9 	bl	800fbc0 <__sinit>
 80107ee:	4b2e      	ldr	r3, [pc, #184]	; (80108a8 <__swsetup_r+0xd0>)
 80107f0:	429c      	cmp	r4, r3
 80107f2:	d10f      	bne.n	8010814 <__swsetup_r+0x3c>
 80107f4:	686c      	ldr	r4, [r5, #4]
 80107f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80107fa:	b29a      	uxth	r2, r3
 80107fc:	0715      	lsls	r5, r2, #28
 80107fe:	d42c      	bmi.n	801085a <__swsetup_r+0x82>
 8010800:	06d0      	lsls	r0, r2, #27
 8010802:	d411      	bmi.n	8010828 <__swsetup_r+0x50>
 8010804:	2209      	movs	r2, #9
 8010806:	6032      	str	r2, [r6, #0]
 8010808:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801080c:	81a3      	strh	r3, [r4, #12]
 801080e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010812:	e03e      	b.n	8010892 <__swsetup_r+0xba>
 8010814:	4b25      	ldr	r3, [pc, #148]	; (80108ac <__swsetup_r+0xd4>)
 8010816:	429c      	cmp	r4, r3
 8010818:	d101      	bne.n	801081e <__swsetup_r+0x46>
 801081a:	68ac      	ldr	r4, [r5, #8]
 801081c:	e7eb      	b.n	80107f6 <__swsetup_r+0x1e>
 801081e:	4b24      	ldr	r3, [pc, #144]	; (80108b0 <__swsetup_r+0xd8>)
 8010820:	429c      	cmp	r4, r3
 8010822:	bf08      	it	eq
 8010824:	68ec      	ldreq	r4, [r5, #12]
 8010826:	e7e6      	b.n	80107f6 <__swsetup_r+0x1e>
 8010828:	0751      	lsls	r1, r2, #29
 801082a:	d512      	bpl.n	8010852 <__swsetup_r+0x7a>
 801082c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801082e:	b141      	cbz	r1, 8010842 <__swsetup_r+0x6a>
 8010830:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010834:	4299      	cmp	r1, r3
 8010836:	d002      	beq.n	801083e <__swsetup_r+0x66>
 8010838:	4630      	mov	r0, r6
 801083a:	f7ff fa53 	bl	800fce4 <_free_r>
 801083e:	2300      	movs	r3, #0
 8010840:	6363      	str	r3, [r4, #52]	; 0x34
 8010842:	89a3      	ldrh	r3, [r4, #12]
 8010844:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010848:	81a3      	strh	r3, [r4, #12]
 801084a:	2300      	movs	r3, #0
 801084c:	6063      	str	r3, [r4, #4]
 801084e:	6923      	ldr	r3, [r4, #16]
 8010850:	6023      	str	r3, [r4, #0]
 8010852:	89a3      	ldrh	r3, [r4, #12]
 8010854:	f043 0308 	orr.w	r3, r3, #8
 8010858:	81a3      	strh	r3, [r4, #12]
 801085a:	6923      	ldr	r3, [r4, #16]
 801085c:	b94b      	cbnz	r3, 8010872 <__swsetup_r+0x9a>
 801085e:	89a3      	ldrh	r3, [r4, #12]
 8010860:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010864:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010868:	d003      	beq.n	8010872 <__swsetup_r+0x9a>
 801086a:	4621      	mov	r1, r4
 801086c:	4630      	mov	r0, r6
 801086e:	f000 f917 	bl	8010aa0 <__smakebuf_r>
 8010872:	89a2      	ldrh	r2, [r4, #12]
 8010874:	f012 0301 	ands.w	r3, r2, #1
 8010878:	d00c      	beq.n	8010894 <__swsetup_r+0xbc>
 801087a:	2300      	movs	r3, #0
 801087c:	60a3      	str	r3, [r4, #8]
 801087e:	6963      	ldr	r3, [r4, #20]
 8010880:	425b      	negs	r3, r3
 8010882:	61a3      	str	r3, [r4, #24]
 8010884:	6923      	ldr	r3, [r4, #16]
 8010886:	b953      	cbnz	r3, 801089e <__swsetup_r+0xc6>
 8010888:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801088c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8010890:	d1ba      	bne.n	8010808 <__swsetup_r+0x30>
 8010892:	bd70      	pop	{r4, r5, r6, pc}
 8010894:	0792      	lsls	r2, r2, #30
 8010896:	bf58      	it	pl
 8010898:	6963      	ldrpl	r3, [r4, #20]
 801089a:	60a3      	str	r3, [r4, #8]
 801089c:	e7f2      	b.n	8010884 <__swsetup_r+0xac>
 801089e:	2000      	movs	r0, #0
 80108a0:	e7f7      	b.n	8010892 <__swsetup_r+0xba>
 80108a2:	bf00      	nop
 80108a4:	20000014 	.word	0x20000014
 80108a8:	08012088 	.word	0x08012088
 80108ac:	080120a8 	.word	0x080120a8
 80108b0:	08012068 	.word	0x08012068

080108b4 <_close_r>:
 80108b4:	b538      	push	{r3, r4, r5, lr}
 80108b6:	4c06      	ldr	r4, [pc, #24]	; (80108d0 <_close_r+0x1c>)
 80108b8:	2300      	movs	r3, #0
 80108ba:	4605      	mov	r5, r0
 80108bc:	4608      	mov	r0, r1
 80108be:	6023      	str	r3, [r4, #0]
 80108c0:	f7fb f902 	bl	800bac8 <_close>
 80108c4:	1c43      	adds	r3, r0, #1
 80108c6:	d102      	bne.n	80108ce <_close_r+0x1a>
 80108c8:	6823      	ldr	r3, [r4, #0]
 80108ca:	b103      	cbz	r3, 80108ce <_close_r+0x1a>
 80108cc:	602b      	str	r3, [r5, #0]
 80108ce:	bd38      	pop	{r3, r4, r5, pc}
 80108d0:	2000b784 	.word	0x2000b784

080108d4 <__sflush_r>:
 80108d4:	898a      	ldrh	r2, [r1, #12]
 80108d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108da:	4605      	mov	r5, r0
 80108dc:	0710      	lsls	r0, r2, #28
 80108de:	460c      	mov	r4, r1
 80108e0:	d458      	bmi.n	8010994 <__sflush_r+0xc0>
 80108e2:	684b      	ldr	r3, [r1, #4]
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	dc05      	bgt.n	80108f4 <__sflush_r+0x20>
 80108e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	dc02      	bgt.n	80108f4 <__sflush_r+0x20>
 80108ee:	2000      	movs	r0, #0
 80108f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80108f6:	2e00      	cmp	r6, #0
 80108f8:	d0f9      	beq.n	80108ee <__sflush_r+0x1a>
 80108fa:	2300      	movs	r3, #0
 80108fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010900:	682f      	ldr	r7, [r5, #0]
 8010902:	6a21      	ldr	r1, [r4, #32]
 8010904:	602b      	str	r3, [r5, #0]
 8010906:	d032      	beq.n	801096e <__sflush_r+0x9a>
 8010908:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801090a:	89a3      	ldrh	r3, [r4, #12]
 801090c:	075a      	lsls	r2, r3, #29
 801090e:	d505      	bpl.n	801091c <__sflush_r+0x48>
 8010910:	6863      	ldr	r3, [r4, #4]
 8010912:	1ac0      	subs	r0, r0, r3
 8010914:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010916:	b10b      	cbz	r3, 801091c <__sflush_r+0x48>
 8010918:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801091a:	1ac0      	subs	r0, r0, r3
 801091c:	2300      	movs	r3, #0
 801091e:	4602      	mov	r2, r0
 8010920:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010922:	6a21      	ldr	r1, [r4, #32]
 8010924:	4628      	mov	r0, r5
 8010926:	47b0      	blx	r6
 8010928:	1c43      	adds	r3, r0, #1
 801092a:	89a3      	ldrh	r3, [r4, #12]
 801092c:	d106      	bne.n	801093c <__sflush_r+0x68>
 801092e:	6829      	ldr	r1, [r5, #0]
 8010930:	291d      	cmp	r1, #29
 8010932:	d848      	bhi.n	80109c6 <__sflush_r+0xf2>
 8010934:	4a29      	ldr	r2, [pc, #164]	; (80109dc <__sflush_r+0x108>)
 8010936:	40ca      	lsrs	r2, r1
 8010938:	07d6      	lsls	r6, r2, #31
 801093a:	d544      	bpl.n	80109c6 <__sflush_r+0xf2>
 801093c:	2200      	movs	r2, #0
 801093e:	6062      	str	r2, [r4, #4]
 8010940:	04d9      	lsls	r1, r3, #19
 8010942:	6922      	ldr	r2, [r4, #16]
 8010944:	6022      	str	r2, [r4, #0]
 8010946:	d504      	bpl.n	8010952 <__sflush_r+0x7e>
 8010948:	1c42      	adds	r2, r0, #1
 801094a:	d101      	bne.n	8010950 <__sflush_r+0x7c>
 801094c:	682b      	ldr	r3, [r5, #0]
 801094e:	b903      	cbnz	r3, 8010952 <__sflush_r+0x7e>
 8010950:	6560      	str	r0, [r4, #84]	; 0x54
 8010952:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010954:	602f      	str	r7, [r5, #0]
 8010956:	2900      	cmp	r1, #0
 8010958:	d0c9      	beq.n	80108ee <__sflush_r+0x1a>
 801095a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801095e:	4299      	cmp	r1, r3
 8010960:	d002      	beq.n	8010968 <__sflush_r+0x94>
 8010962:	4628      	mov	r0, r5
 8010964:	f7ff f9be 	bl	800fce4 <_free_r>
 8010968:	2000      	movs	r0, #0
 801096a:	6360      	str	r0, [r4, #52]	; 0x34
 801096c:	e7c0      	b.n	80108f0 <__sflush_r+0x1c>
 801096e:	2301      	movs	r3, #1
 8010970:	4628      	mov	r0, r5
 8010972:	47b0      	blx	r6
 8010974:	1c41      	adds	r1, r0, #1
 8010976:	d1c8      	bne.n	801090a <__sflush_r+0x36>
 8010978:	682b      	ldr	r3, [r5, #0]
 801097a:	2b00      	cmp	r3, #0
 801097c:	d0c5      	beq.n	801090a <__sflush_r+0x36>
 801097e:	2b1d      	cmp	r3, #29
 8010980:	d001      	beq.n	8010986 <__sflush_r+0xb2>
 8010982:	2b16      	cmp	r3, #22
 8010984:	d101      	bne.n	801098a <__sflush_r+0xb6>
 8010986:	602f      	str	r7, [r5, #0]
 8010988:	e7b1      	b.n	80108ee <__sflush_r+0x1a>
 801098a:	89a3      	ldrh	r3, [r4, #12]
 801098c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010990:	81a3      	strh	r3, [r4, #12]
 8010992:	e7ad      	b.n	80108f0 <__sflush_r+0x1c>
 8010994:	690f      	ldr	r7, [r1, #16]
 8010996:	2f00      	cmp	r7, #0
 8010998:	d0a9      	beq.n	80108ee <__sflush_r+0x1a>
 801099a:	0793      	lsls	r3, r2, #30
 801099c:	680e      	ldr	r6, [r1, #0]
 801099e:	bf08      	it	eq
 80109a0:	694b      	ldreq	r3, [r1, #20]
 80109a2:	600f      	str	r7, [r1, #0]
 80109a4:	bf18      	it	ne
 80109a6:	2300      	movne	r3, #0
 80109a8:	eba6 0807 	sub.w	r8, r6, r7
 80109ac:	608b      	str	r3, [r1, #8]
 80109ae:	f1b8 0f00 	cmp.w	r8, #0
 80109b2:	dd9c      	ble.n	80108ee <__sflush_r+0x1a>
 80109b4:	4643      	mov	r3, r8
 80109b6:	463a      	mov	r2, r7
 80109b8:	6a21      	ldr	r1, [r4, #32]
 80109ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80109bc:	4628      	mov	r0, r5
 80109be:	47b0      	blx	r6
 80109c0:	2800      	cmp	r0, #0
 80109c2:	dc06      	bgt.n	80109d2 <__sflush_r+0xfe>
 80109c4:	89a3      	ldrh	r3, [r4, #12]
 80109c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80109ca:	81a3      	strh	r3, [r4, #12]
 80109cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80109d0:	e78e      	b.n	80108f0 <__sflush_r+0x1c>
 80109d2:	4407      	add	r7, r0
 80109d4:	eba8 0800 	sub.w	r8, r8, r0
 80109d8:	e7e9      	b.n	80109ae <__sflush_r+0xda>
 80109da:	bf00      	nop
 80109dc:	20400001 	.word	0x20400001

080109e0 <_fflush_r>:
 80109e0:	b538      	push	{r3, r4, r5, lr}
 80109e2:	690b      	ldr	r3, [r1, #16]
 80109e4:	4605      	mov	r5, r0
 80109e6:	460c      	mov	r4, r1
 80109e8:	b1db      	cbz	r3, 8010a22 <_fflush_r+0x42>
 80109ea:	b118      	cbz	r0, 80109f4 <_fflush_r+0x14>
 80109ec:	6983      	ldr	r3, [r0, #24]
 80109ee:	b90b      	cbnz	r3, 80109f4 <_fflush_r+0x14>
 80109f0:	f7ff f8e6 	bl	800fbc0 <__sinit>
 80109f4:	4b0c      	ldr	r3, [pc, #48]	; (8010a28 <_fflush_r+0x48>)
 80109f6:	429c      	cmp	r4, r3
 80109f8:	d109      	bne.n	8010a0e <_fflush_r+0x2e>
 80109fa:	686c      	ldr	r4, [r5, #4]
 80109fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010a00:	b17b      	cbz	r3, 8010a22 <_fflush_r+0x42>
 8010a02:	4621      	mov	r1, r4
 8010a04:	4628      	mov	r0, r5
 8010a06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010a0a:	f7ff bf63 	b.w	80108d4 <__sflush_r>
 8010a0e:	4b07      	ldr	r3, [pc, #28]	; (8010a2c <_fflush_r+0x4c>)
 8010a10:	429c      	cmp	r4, r3
 8010a12:	d101      	bne.n	8010a18 <_fflush_r+0x38>
 8010a14:	68ac      	ldr	r4, [r5, #8]
 8010a16:	e7f1      	b.n	80109fc <_fflush_r+0x1c>
 8010a18:	4b05      	ldr	r3, [pc, #20]	; (8010a30 <_fflush_r+0x50>)
 8010a1a:	429c      	cmp	r4, r3
 8010a1c:	bf08      	it	eq
 8010a1e:	68ec      	ldreq	r4, [r5, #12]
 8010a20:	e7ec      	b.n	80109fc <_fflush_r+0x1c>
 8010a22:	2000      	movs	r0, #0
 8010a24:	bd38      	pop	{r3, r4, r5, pc}
 8010a26:	bf00      	nop
 8010a28:	08012088 	.word	0x08012088
 8010a2c:	080120a8 	.word	0x080120a8
 8010a30:	08012068 	.word	0x08012068

08010a34 <_lseek_r>:
 8010a34:	b538      	push	{r3, r4, r5, lr}
 8010a36:	4c07      	ldr	r4, [pc, #28]	; (8010a54 <_lseek_r+0x20>)
 8010a38:	4605      	mov	r5, r0
 8010a3a:	4608      	mov	r0, r1
 8010a3c:	4611      	mov	r1, r2
 8010a3e:	2200      	movs	r2, #0
 8010a40:	6022      	str	r2, [r4, #0]
 8010a42:	461a      	mov	r2, r3
 8010a44:	f7fb f84c 	bl	800bae0 <_lseek>
 8010a48:	1c43      	adds	r3, r0, #1
 8010a4a:	d102      	bne.n	8010a52 <_lseek_r+0x1e>
 8010a4c:	6823      	ldr	r3, [r4, #0]
 8010a4e:	b103      	cbz	r3, 8010a52 <_lseek_r+0x1e>
 8010a50:	602b      	str	r3, [r5, #0]
 8010a52:	bd38      	pop	{r3, r4, r5, pc}
 8010a54:	2000b784 	.word	0x2000b784

08010a58 <__swhatbuf_r>:
 8010a58:	b570      	push	{r4, r5, r6, lr}
 8010a5a:	460e      	mov	r6, r1
 8010a5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a60:	2900      	cmp	r1, #0
 8010a62:	b096      	sub	sp, #88	; 0x58
 8010a64:	4614      	mov	r4, r2
 8010a66:	461d      	mov	r5, r3
 8010a68:	da07      	bge.n	8010a7a <__swhatbuf_r+0x22>
 8010a6a:	2300      	movs	r3, #0
 8010a6c:	602b      	str	r3, [r5, #0]
 8010a6e:	89b3      	ldrh	r3, [r6, #12]
 8010a70:	061a      	lsls	r2, r3, #24
 8010a72:	d410      	bmi.n	8010a96 <__swhatbuf_r+0x3e>
 8010a74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a78:	e00e      	b.n	8010a98 <__swhatbuf_r+0x40>
 8010a7a:	466a      	mov	r2, sp
 8010a7c:	f000 f8a4 	bl	8010bc8 <_fstat_r>
 8010a80:	2800      	cmp	r0, #0
 8010a82:	dbf2      	blt.n	8010a6a <__swhatbuf_r+0x12>
 8010a84:	9a01      	ldr	r2, [sp, #4]
 8010a86:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010a8a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010a8e:	425a      	negs	r2, r3
 8010a90:	415a      	adcs	r2, r3
 8010a92:	602a      	str	r2, [r5, #0]
 8010a94:	e7ee      	b.n	8010a74 <__swhatbuf_r+0x1c>
 8010a96:	2340      	movs	r3, #64	; 0x40
 8010a98:	2000      	movs	r0, #0
 8010a9a:	6023      	str	r3, [r4, #0]
 8010a9c:	b016      	add	sp, #88	; 0x58
 8010a9e:	bd70      	pop	{r4, r5, r6, pc}

08010aa0 <__smakebuf_r>:
 8010aa0:	898b      	ldrh	r3, [r1, #12]
 8010aa2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010aa4:	079d      	lsls	r5, r3, #30
 8010aa6:	4606      	mov	r6, r0
 8010aa8:	460c      	mov	r4, r1
 8010aaa:	d507      	bpl.n	8010abc <__smakebuf_r+0x1c>
 8010aac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010ab0:	6023      	str	r3, [r4, #0]
 8010ab2:	6123      	str	r3, [r4, #16]
 8010ab4:	2301      	movs	r3, #1
 8010ab6:	6163      	str	r3, [r4, #20]
 8010ab8:	b002      	add	sp, #8
 8010aba:	bd70      	pop	{r4, r5, r6, pc}
 8010abc:	ab01      	add	r3, sp, #4
 8010abe:	466a      	mov	r2, sp
 8010ac0:	f7ff ffca 	bl	8010a58 <__swhatbuf_r>
 8010ac4:	9900      	ldr	r1, [sp, #0]
 8010ac6:	4605      	mov	r5, r0
 8010ac8:	4630      	mov	r0, r6
 8010aca:	f7ff f959 	bl	800fd80 <_malloc_r>
 8010ace:	b948      	cbnz	r0, 8010ae4 <__smakebuf_r+0x44>
 8010ad0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010ad4:	059a      	lsls	r2, r3, #22
 8010ad6:	d4ef      	bmi.n	8010ab8 <__smakebuf_r+0x18>
 8010ad8:	f023 0303 	bic.w	r3, r3, #3
 8010adc:	f043 0302 	orr.w	r3, r3, #2
 8010ae0:	81a3      	strh	r3, [r4, #12]
 8010ae2:	e7e3      	b.n	8010aac <__smakebuf_r+0xc>
 8010ae4:	4b0d      	ldr	r3, [pc, #52]	; (8010b1c <__smakebuf_r+0x7c>)
 8010ae6:	62b3      	str	r3, [r6, #40]	; 0x28
 8010ae8:	89a3      	ldrh	r3, [r4, #12]
 8010aea:	6020      	str	r0, [r4, #0]
 8010aec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010af0:	81a3      	strh	r3, [r4, #12]
 8010af2:	9b00      	ldr	r3, [sp, #0]
 8010af4:	6163      	str	r3, [r4, #20]
 8010af6:	9b01      	ldr	r3, [sp, #4]
 8010af8:	6120      	str	r0, [r4, #16]
 8010afa:	b15b      	cbz	r3, 8010b14 <__smakebuf_r+0x74>
 8010afc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010b00:	4630      	mov	r0, r6
 8010b02:	f000 f873 	bl	8010bec <_isatty_r>
 8010b06:	b128      	cbz	r0, 8010b14 <__smakebuf_r+0x74>
 8010b08:	89a3      	ldrh	r3, [r4, #12]
 8010b0a:	f023 0303 	bic.w	r3, r3, #3
 8010b0e:	f043 0301 	orr.w	r3, r3, #1
 8010b12:	81a3      	strh	r3, [r4, #12]
 8010b14:	89a3      	ldrh	r3, [r4, #12]
 8010b16:	431d      	orrs	r5, r3
 8010b18:	81a5      	strh	r5, [r4, #12]
 8010b1a:	e7cd      	b.n	8010ab8 <__smakebuf_r+0x18>
 8010b1c:	0800fb89 	.word	0x0800fb89

08010b20 <memmove>:
 8010b20:	4288      	cmp	r0, r1
 8010b22:	b510      	push	{r4, lr}
 8010b24:	eb01 0302 	add.w	r3, r1, r2
 8010b28:	d807      	bhi.n	8010b3a <memmove+0x1a>
 8010b2a:	1e42      	subs	r2, r0, #1
 8010b2c:	4299      	cmp	r1, r3
 8010b2e:	d00a      	beq.n	8010b46 <memmove+0x26>
 8010b30:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010b34:	f802 4f01 	strb.w	r4, [r2, #1]!
 8010b38:	e7f8      	b.n	8010b2c <memmove+0xc>
 8010b3a:	4283      	cmp	r3, r0
 8010b3c:	d9f5      	bls.n	8010b2a <memmove+0xa>
 8010b3e:	1881      	adds	r1, r0, r2
 8010b40:	1ad2      	subs	r2, r2, r3
 8010b42:	42d3      	cmn	r3, r2
 8010b44:	d100      	bne.n	8010b48 <memmove+0x28>
 8010b46:	bd10      	pop	{r4, pc}
 8010b48:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010b4c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8010b50:	e7f7      	b.n	8010b42 <memmove+0x22>

08010b52 <__malloc_lock>:
 8010b52:	4770      	bx	lr

08010b54 <__malloc_unlock>:
 8010b54:	4770      	bx	lr

08010b56 <_realloc_r>:
 8010b56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b58:	4607      	mov	r7, r0
 8010b5a:	4614      	mov	r4, r2
 8010b5c:	460e      	mov	r6, r1
 8010b5e:	b921      	cbnz	r1, 8010b6a <_realloc_r+0x14>
 8010b60:	4611      	mov	r1, r2
 8010b62:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010b66:	f7ff b90b 	b.w	800fd80 <_malloc_r>
 8010b6a:	b922      	cbnz	r2, 8010b76 <_realloc_r+0x20>
 8010b6c:	f7ff f8ba 	bl	800fce4 <_free_r>
 8010b70:	4625      	mov	r5, r4
 8010b72:	4628      	mov	r0, r5
 8010b74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b76:	f000 f849 	bl	8010c0c <_malloc_usable_size_r>
 8010b7a:	42a0      	cmp	r0, r4
 8010b7c:	d20f      	bcs.n	8010b9e <_realloc_r+0x48>
 8010b7e:	4621      	mov	r1, r4
 8010b80:	4638      	mov	r0, r7
 8010b82:	f7ff f8fd 	bl	800fd80 <_malloc_r>
 8010b86:	4605      	mov	r5, r0
 8010b88:	2800      	cmp	r0, #0
 8010b8a:	d0f2      	beq.n	8010b72 <_realloc_r+0x1c>
 8010b8c:	4631      	mov	r1, r6
 8010b8e:	4622      	mov	r2, r4
 8010b90:	f7fe fedf 	bl	800f952 <memcpy>
 8010b94:	4631      	mov	r1, r6
 8010b96:	4638      	mov	r0, r7
 8010b98:	f7ff f8a4 	bl	800fce4 <_free_r>
 8010b9c:	e7e9      	b.n	8010b72 <_realloc_r+0x1c>
 8010b9e:	4635      	mov	r5, r6
 8010ba0:	e7e7      	b.n	8010b72 <_realloc_r+0x1c>
	...

08010ba4 <_read_r>:
 8010ba4:	b538      	push	{r3, r4, r5, lr}
 8010ba6:	4c07      	ldr	r4, [pc, #28]	; (8010bc4 <_read_r+0x20>)
 8010ba8:	4605      	mov	r5, r0
 8010baa:	4608      	mov	r0, r1
 8010bac:	4611      	mov	r1, r2
 8010bae:	2200      	movs	r2, #0
 8010bb0:	6022      	str	r2, [r4, #0]
 8010bb2:	461a      	mov	r2, r3
 8010bb4:	f7fa ff4e 	bl	800ba54 <_read>
 8010bb8:	1c43      	adds	r3, r0, #1
 8010bba:	d102      	bne.n	8010bc2 <_read_r+0x1e>
 8010bbc:	6823      	ldr	r3, [r4, #0]
 8010bbe:	b103      	cbz	r3, 8010bc2 <_read_r+0x1e>
 8010bc0:	602b      	str	r3, [r5, #0]
 8010bc2:	bd38      	pop	{r3, r4, r5, pc}
 8010bc4:	2000b784 	.word	0x2000b784

08010bc8 <_fstat_r>:
 8010bc8:	b538      	push	{r3, r4, r5, lr}
 8010bca:	4c07      	ldr	r4, [pc, #28]	; (8010be8 <_fstat_r+0x20>)
 8010bcc:	2300      	movs	r3, #0
 8010bce:	4605      	mov	r5, r0
 8010bd0:	4608      	mov	r0, r1
 8010bd2:	4611      	mov	r1, r2
 8010bd4:	6023      	str	r3, [r4, #0]
 8010bd6:	f7fa ff7b 	bl	800bad0 <_fstat>
 8010bda:	1c43      	adds	r3, r0, #1
 8010bdc:	d102      	bne.n	8010be4 <_fstat_r+0x1c>
 8010bde:	6823      	ldr	r3, [r4, #0]
 8010be0:	b103      	cbz	r3, 8010be4 <_fstat_r+0x1c>
 8010be2:	602b      	str	r3, [r5, #0]
 8010be4:	bd38      	pop	{r3, r4, r5, pc}
 8010be6:	bf00      	nop
 8010be8:	2000b784 	.word	0x2000b784

08010bec <_isatty_r>:
 8010bec:	b538      	push	{r3, r4, r5, lr}
 8010bee:	4c06      	ldr	r4, [pc, #24]	; (8010c08 <_isatty_r+0x1c>)
 8010bf0:	2300      	movs	r3, #0
 8010bf2:	4605      	mov	r5, r0
 8010bf4:	4608      	mov	r0, r1
 8010bf6:	6023      	str	r3, [r4, #0]
 8010bf8:	f7fa ff70 	bl	800badc <_isatty>
 8010bfc:	1c43      	adds	r3, r0, #1
 8010bfe:	d102      	bne.n	8010c06 <_isatty_r+0x1a>
 8010c00:	6823      	ldr	r3, [r4, #0]
 8010c02:	b103      	cbz	r3, 8010c06 <_isatty_r+0x1a>
 8010c04:	602b      	str	r3, [r5, #0]
 8010c06:	bd38      	pop	{r3, r4, r5, pc}
 8010c08:	2000b784 	.word	0x2000b784

08010c0c <_malloc_usable_size_r>:
 8010c0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010c10:	1f18      	subs	r0, r3, #4
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	bfbc      	itt	lt
 8010c16:	580b      	ldrlt	r3, [r1, r0]
 8010c18:	18c0      	addlt	r0, r0, r3
 8010c1a:	4770      	bx	lr

08010c1c <_init>:
 8010c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c1e:	bf00      	nop
 8010c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010c22:	bc08      	pop	{r3}
 8010c24:	469e      	mov	lr, r3
 8010c26:	4770      	bx	lr

08010c28 <_fini>:
 8010c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c2a:	bf00      	nop
 8010c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010c2e:	bc08      	pop	{r3}
 8010c30:	469e      	mov	lr, r3
 8010c32:	4770      	bx	lr
